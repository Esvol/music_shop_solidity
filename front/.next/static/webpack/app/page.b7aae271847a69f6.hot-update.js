"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Home; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/ethers.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nconst HARDHAT_NETWORK_ID = \"0x539\";\nconst MUSIC_SHOP_ADDRESS = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\";\nfunction Home() {\n    _s();\n    const [networkError, setNetworkError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const _connectWallet = async ()=>{\n        if (window.ethereum === undefined) {\n            setNetworkError(\"Please install Metamask!\");\n            return;\n        }\n        if (!await _checkNetwork()) {\n            return;\n        }\n        const [selectedAccount] = await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n        });\n        await _initialize(ethers__WEBPACK_IMPORTED_MODULE_2__);\n    };\n    const _checkNetwork = async ()=>{\n        const chosenChainId = await window.ethereum.request({\n            method: \"eth_chainId\"\n        });\n        if (chosenChainId === HARDHAT_NETWORK_ID) {\n            return true;\n        }\n        setNetworkError(\"Please connect to Hardhat network (localhost:8545)!\");\n        return false;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {}, void 0, false, {\n        fileName: \"D:\\\\Web3_Projects\\\\Stock_Dapp\\\\front\\\\src\\\\app\\\\page.tsx\",\n        lineNumber: 71,\n        columnNumber: 5\n    }, this);\n}\n_s(Home, \"TqMhJ2HR839fx/+DBHEhh1KLt9o=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvcGFnZS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUs4QjtBQVFHO0FBRWpDLE1BQU1FLHFCQUFxQjtBQUMzQixNQUFNQyxxQkFBcUI7QUFtQlosU0FBU0M7O0lBQ3RCLE1BQU0sQ0FBQ0MsY0FBY0MsZ0JBQWdCLEdBQUdMLCtDQUFRQTtJQUVoRCxNQUFNTSxpQkFBaUI7UUFDckIsSUFBR0MsT0FBT0MsUUFBUSxLQUFLQyxXQUFVO1lBQy9CSixnQkFBZ0I7WUFFaEI7UUFDRjtRQUVBLElBQUcsQ0FBRSxNQUFNSyxpQkFBaUI7WUFDMUI7UUFDRjtRQUVBLE1BQU0sQ0FBQ0MsZ0JBQWdCLEdBQUcsTUFBTUosT0FBT0MsUUFBUSxDQUFDSSxPQUFPLENBQUM7WUFDdERDLFFBQVE7UUFDVjtRQUVBLE1BQU1DLFlBQVlmLG1DQUFNQTtJQUMxQjtJQUVBLE1BQU1XLGdCQUFnQjtRQUNwQixNQUFNSyxnQkFBZ0IsTUFBTVIsT0FBT0MsUUFBUSxDQUFDSSxPQUFPLENBQUM7WUFDbERDLFFBQVE7UUFDVjtRQUVBLElBQUdFLGtCQUFrQmQsb0JBQW1CO1lBQ3RDLE9BQU87UUFDVDtRQUVBSSxnQkFBZ0I7UUFDaEIsT0FBTztJQUNUO0lBRUEscUJBQ0UsOERBQUNXOzs7OztBQUlMO0dBdkN3QmI7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2FwcC9wYWdlLnRzeD9mNjhhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xuXG5pbXBvcnQgSW1hZ2UgZnJvbSBcIm5leHQvaW1hZ2VcIjtcbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vcGFnZS5tb2R1bGUuY3NzXCI7XG5cbmltcG9ydCB7ZXRoZXJzfSBmcm9tICdldGhlcnMnO1xuaW1wb3J0IHsgTXVzaWNTaG9wX19mYWN0b3J5IH0gZnJvbSBcIkAvdHlwZWNoYWluXCI7XG5pbXBvcnQgdHlwZSB7TXVzaWNTaG9wfSBmcm9tICdAL3R5cGVjaGFpbidcbmltcG9ydCB0eXBlIHsgQnJvd3NlclByb3ZpZGVyIH0gZnJvbSBcImV0aGVyc1wiO1xuXG5pbXBvcnQgQ29ubmVjdFdhbGxldCBmcm9tIFwiQC9jb21wb25lbnRzL0Nvbm5lY3RXYWxsZXRcIjtcbmltcG9ydCBXYWl0aW5nRm9yVHJhbnNhY3Rpb25NZXNzYWdlIGZyb20gXCJAL2NvbXBvbmVudHMvV2FpdGluZ0ZvclRyYW5zYWN0aW9uTWVzc2FnZVwiO1xuaW1wb3J0IFRyYW5zYWN0aW9uRXJyb3JNZXNzYWdlIGZyb20gXCJAL2NvbXBvbmVudHMvVHJhbnNhY3Rpb25FcnJvck1lc3NhZ2VcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmNvbnN0IEhBUkRIQVRfTkVUV09SS19JRCA9IFwiMHg1MzlcIjtcbmNvbnN0IE1VU0lDX1NIT1BfQUREUkVTUyA9IFwiMHg1ZmJkYjIzMTU2NzhhZmVjYjM2N2YwMzJkOTNmNjQyZjY0MTgwYWEzXCI7XG5cbmRlY2xhcmUgbGV0IHdpbmRvdzogYW55O1xuXG50eXBlIEN1cnJlbnRDb25uZWN0aW9uUHJvcHMgPSB7XG4gIHByb3ZpZGVyOiBCcm93c2VyUHJvdmlkZXIgfCB1bmRlZmluZWQ7XG4gIHNob3A6IE11c2ljU2hvcCB8IHVuZGVmaW5lZDtcbiAgc2lnbmVyOiBldGhlcnMuSnNvblJwY1NpZ25lciB8IHVuZGVmaW5lZDtcbn07XG5cbnR5cGUgQWxidW1Qcm9wcyA9IHtcbiAgaW5kZXg6IGV0aGVycy5CaWdOdW1iZXJpc2g7XG4gIHVpZDogc3RyaW5nO1xuICB0aXRsZTogc3RyaW5nO1xuICBwcmljZTogZXRoZXJzLkJpZ051bWJlcmlzaDtcbiAgcXVhbnRpdHk6IGV0aGVycy5CaWdOdW1iZXJpc2g7XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhvbWUoKSB7XG4gIGNvbnN0IFtuZXR3b3JrRXJyb3IsIHNldE5ldHdvcmtFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmc+KCk7XG5cbiAgY29uc3QgX2Nvbm5lY3RXYWxsZXQgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYod2luZG93LmV0aGVyZXVtID09PSB1bmRlZmluZWQpe1xuICAgICAgc2V0TmV0d29ya0Vycm9yKFwiUGxlYXNlIGluc3RhbGwgTWV0YW1hc2shXCIpO1xuICAgICAgXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYoIShhd2FpdCBfY2hlY2tOZXR3b3JrKCkpKXtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBbc2VsZWN0ZWRBY2NvdW50XSA9IGF3YWl0IHdpbmRvdy5ldGhlcmV1bS5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogXCJldGhfcmVxdWVzdEFjY291bnRzXCJcbiAgICB9KVxuXG4gICAgYXdhaXQgX2luaXRpYWxpemUoZXRoZXJzKVxuICB9XG5cbiAgY29uc3QgX2NoZWNrTmV0d29yayA9IGFzeW5jICgpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBjaG9zZW5DaGFpbklkID0gYXdhaXQgd2luZG93LmV0aGVyZXVtLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBcImV0aF9jaGFpbklkXCIsXG4gICAgfSlcbiAgXG4gICAgaWYoY2hvc2VuQ2hhaW5JZCA9PT0gSEFSREhBVF9ORVRXT1JLX0lEKXtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHNldE5ldHdvcmtFcnJvcihcIlBsZWFzZSBjb25uZWN0IHRvIEhhcmRoYXQgbmV0d29yayAobG9jYWxob3N0Ojg1NDUpIVwiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxtYWluPlxuICAgIFxuICAgIDwvbWFpbj5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6WyJldGhlcnMiLCJ1c2VTdGF0ZSIsIkhBUkRIQVRfTkVUV09SS19JRCIsIk1VU0lDX1NIT1BfQUREUkVTUyIsIkhvbWUiLCJuZXR3b3JrRXJyb3IiLCJzZXROZXR3b3JrRXJyb3IiLCJfY29ubmVjdFdhbGxldCIsIndpbmRvdyIsImV0aGVyZXVtIiwidW5kZWZpbmVkIiwiX2NoZWNrTmV0d29yayIsInNlbGVjdGVkQWNjb3VudCIsInJlcXVlc3QiLCJtZXRob2QiLCJfaW5pdGlhbGl6ZSIsImNob3NlbkNoYWluSWQiLCJtYWluIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_check_private_redeclaration.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_check_private_redeclaration.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _check_private_redeclaration; },\n/* harmony export */   _check_private_redeclaration: function() { return /* binding */ _check_private_redeclaration; }\n/* harmony export */ });\nfunction _check_private_redeclaration(obj, privateCollection) {\n    if (privateCollection.has(obj)) {\n        throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jaGVja19wcml2YXRlX3JlZGVjbGFyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTQSw2QkFBNkJDLEdBQUcsRUFBRUMsaUJBQWlCO0lBQy9ELElBQUlBLGtCQUFrQkMsR0FBRyxDQUFDRixNQUFNO1FBQzVCLE1BQU0sSUFBSUcsVUFBVTtJQUN4QjtBQUNKO0FBQzZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jaGVja19wcml2YXRlX3JlZGVjbGFyYXRpb24uanM/YzMyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gX2NoZWNrX3ByaXZhdGVfcmVkZWNsYXJhdGlvbihvYmosIHByaXZhdGVDb2xsZWN0aW9uKSB7XG4gICAgaWYgKHByaXZhdGVDb2xsZWN0aW9uLmhhcyhvYmopKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgaW5pdGlhbGl6ZSB0aGUgc2FtZSBwcml2YXRlIGVsZW1lbnRzIHR3aWNlIG9uIGFuIG9iamVjdFwiKTtcbiAgICB9XG59XG5leHBvcnQgeyBfY2hlY2tfcHJpdmF0ZV9yZWRlY2xhcmF0aW9uIGFzIF8gfTtcbiJdLCJuYW1lcyI6WyJfY2hlY2tfcHJpdmF0ZV9yZWRlY2xhcmF0aW9uIiwib2JqIiwicHJpdmF0ZUNvbGxlY3Rpb24iLCJoYXMiLCJUeXBlRXJyb3IiLCJfIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_check_private_redeclaration.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_apply_descriptor_get.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_class_apply_descriptor_get.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _class_apply_descriptor_get; },\n/* harmony export */   _class_apply_descriptor_get: function() { return /* binding */ _class_apply_descriptor_get; }\n/* harmony export */ });\nfunction _class_apply_descriptor_get(receiver, descriptor) {\n    if (descriptor.get) return descriptor.get.call(receiver);\n    return descriptor.value;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jbGFzc19hcHBseV9kZXNjcmlwdG9yX2dldC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLFNBQVNBLDRCQUE0QkMsUUFBUSxFQUFFQyxVQUFVO0lBQzVELElBQUlBLFdBQVdDLEdBQUcsRUFBRSxPQUFPRCxXQUFXQyxHQUFHLENBQUNDLElBQUksQ0FBQ0g7SUFFL0MsT0FBT0MsV0FBV0csS0FBSztBQUMzQjtBQUM0QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2VzbS9fY2xhc3NfYXBwbHlfZGVzY3JpcHRvcl9nZXQuanM/NTFlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gX2NsYXNzX2FwcGx5X2Rlc2NyaXB0b3JfZ2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yKSB7XG4gICAgaWYgKGRlc2NyaXB0b3IuZ2V0KSByZXR1cm4gZGVzY3JpcHRvci5nZXQuY2FsbChyZWNlaXZlcik7XG5cbiAgICByZXR1cm4gZGVzY3JpcHRvci52YWx1ZTtcbn1cbmV4cG9ydCB7IF9jbGFzc19hcHBseV9kZXNjcmlwdG9yX2dldCBhcyBfIH07XG4iXSwibmFtZXMiOlsiX2NsYXNzX2FwcGx5X2Rlc2NyaXB0b3JfZ2V0IiwicmVjZWl2ZXIiLCJkZXNjcmlwdG9yIiwiZ2V0IiwiY2FsbCIsInZhbHVlIiwiXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_apply_descriptor_get.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_apply_descriptor_set.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_class_apply_descriptor_set.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _class_apply_descriptor_set; },\n/* harmony export */   _class_apply_descriptor_set: function() { return /* binding */ _class_apply_descriptor_set; }\n/* harmony export */ });\nfunction _class_apply_descriptor_set(receiver, descriptor, value) {\n    if (descriptor.set) descriptor.set.call(receiver, value);\n    else {\n        if (!descriptor.writable) {\n            // This should only throw in strict mode, but class bodies are\n            // always strict and private fields can only be used inside\n            // class bodies.\n            throw new TypeError(\"attempted to set read only private field\");\n        }\n        descriptor.value = value;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jbGFzc19hcHBseV9kZXNjcmlwdG9yX3NldC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLFNBQVNBLDRCQUE0QkMsUUFBUSxFQUFFQyxVQUFVLEVBQUVDLEtBQUs7SUFDbkUsSUFBSUQsV0FBV0UsR0FBRyxFQUFFRixXQUFXRSxHQUFHLENBQUNDLElBQUksQ0FBQ0osVUFBVUU7U0FDN0M7UUFDRCxJQUFJLENBQUNELFdBQVdJLFFBQVEsRUFBRTtZQUN0Qiw4REFBOEQ7WUFDOUQsMkRBQTJEO1lBQzNELGdCQUFnQjtZQUNoQixNQUFNLElBQUlDLFVBQVU7UUFDeEI7UUFDQUwsV0FBV0MsS0FBSyxHQUFHQTtJQUN2QjtBQUNKO0FBQzRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jbGFzc19hcHBseV9kZXNjcmlwdG9yX3NldC5qcz84MmQ0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBfY2xhc3NfYXBwbHlfZGVzY3JpcHRvcl9zZXQocmVjZWl2ZXIsIGRlc2NyaXB0b3IsIHZhbHVlKSB7XG4gICAgaWYgKGRlc2NyaXB0b3Iuc2V0KSBkZXNjcmlwdG9yLnNldC5jYWxsKHJlY2VpdmVyLCB2YWx1ZSk7XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICghZGVzY3JpcHRvci53cml0YWJsZSkge1xuICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgb25seSB0aHJvdyBpbiBzdHJpY3QgbW9kZSwgYnV0IGNsYXNzIGJvZGllcyBhcmVcbiAgICAgICAgICAgIC8vIGFsd2F5cyBzdHJpY3QgYW5kIHByaXZhdGUgZmllbGRzIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlXG4gICAgICAgICAgICAvLyBjbGFzcyBib2RpZXMuXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCByZWFkIG9ubHkgcHJpdmF0ZSBmaWVsZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gdmFsdWU7XG4gICAgfVxufVxuZXhwb3J0IHsgX2NsYXNzX2FwcGx5X2Rlc2NyaXB0b3Jfc2V0IGFzIF8gfTtcbiJdLCJuYW1lcyI6WyJfY2xhc3NfYXBwbHlfZGVzY3JpcHRvcl9zZXQiLCJyZWNlaXZlciIsImRlc2NyaXB0b3IiLCJ2YWx1ZSIsInNldCIsImNhbGwiLCJ3cml0YWJsZSIsIlR5cGVFcnJvciIsIl8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_apply_descriptor_set.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_apply_descriptor_update.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_class_apply_descriptor_update.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _class_apply_descriptor_update; },\n/* harmony export */   _class_apply_descriptor_update: function() { return /* binding */ _class_apply_descriptor_update; }\n/* harmony export */ });\nfunction _class_apply_descriptor_update(receiver, descriptor) {\n    if (descriptor.set) {\n        if (!descriptor.get) throw new TypeError(\"attempted to read set only private field\");\n        if (!(\"__destrWrapper\" in descriptor)) {\n            descriptor.__destrWrapper = {\n                set value (v){\n                    descriptor.set.call(receiver, v);\n                },\n                get value () {\n                    return descriptor.get.call(receiver);\n                }\n            };\n        }\n        return descriptor.__destrWrapper;\n    } else {\n        if (!descriptor.writable) {\n            // This should only throw in strict mode, but class bodies are\n            // always strict and private fields can only be used inside\n            // class bodies.\n            throw new TypeError(\"attempted to set read only private field\");\n        }\n        return descriptor;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jbGFzc19hcHBseV9kZXNjcmlwdG9yX3VwZGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLFNBQVNBLCtCQUErQkMsUUFBUSxFQUFFQyxVQUFVO0lBQy9ELElBQUlBLFdBQVdDLEdBQUcsRUFBRTtRQUNoQixJQUFJLENBQUNELFdBQVdFLEdBQUcsRUFBRSxNQUFNLElBQUlDLFVBQVU7UUFFekMsSUFBSSxDQUFFLHFCQUFvQkgsVUFBUyxHQUFJO1lBQ25DQSxXQUFXSSxjQUFjLEdBQUc7Z0JBQ3hCLElBQUlDLE9BQU1DLEVBQUc7b0JBQ1ROLFdBQVdDLEdBQUcsQ0FBQ00sSUFBSSxDQUFDUixVQUFVTztnQkFDbEM7Z0JBQ0EsSUFBSUQsU0FBUTtvQkFDUixPQUFPTCxXQUFXRSxHQUFHLENBQUNLLElBQUksQ0FBQ1I7Z0JBQy9CO1lBQ0o7UUFDSjtRQUVBLE9BQU9DLFdBQVdJLGNBQWM7SUFDcEMsT0FBTztRQUNILElBQUksQ0FBQ0osV0FBV1EsUUFBUSxFQUFFO1lBQ3RCLDhEQUE4RDtZQUM5RCwyREFBMkQ7WUFDM0QsZ0JBQWdCO1lBQ2hCLE1BQU0sSUFBSUwsVUFBVTtRQUN4QjtRQUVBLE9BQU9IO0lBQ1g7QUFDSjtBQUMrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2VzbS9fY2xhc3NfYXBwbHlfZGVzY3JpcHRvcl91cGRhdGUuanM/ODZjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gX2NsYXNzX2FwcGx5X2Rlc2NyaXB0b3JfdXBkYXRlKHJlY2VpdmVyLCBkZXNjcmlwdG9yKSB7XG4gICAgaWYgKGRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICAgIGlmICghZGVzY3JpcHRvci5nZXQpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gcmVhZCBzZXQgb25seSBwcml2YXRlIGZpZWxkXCIpO1xuXG4gICAgICAgIGlmICghKFwiX19kZXN0cldyYXBwZXJcIiBpbiBkZXNjcmlwdG9yKSkge1xuICAgICAgICAgICAgZGVzY3JpcHRvci5fX2Rlc3RyV3JhcHBlciA9IHtcbiAgICAgICAgICAgICAgICBzZXQgdmFsdWUodikge1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnNldC5jYWxsKHJlY2VpdmVyLCB2KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3IuZ2V0LmNhbGwocmVjZWl2ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVzY3JpcHRvci5fX2Rlc3RyV3JhcHBlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWRlc2NyaXB0b3Iud3JpdGFibGUpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIG9ubHkgdGhyb3cgaW4gc3RyaWN0IG1vZGUsIGJ1dCBjbGFzcyBib2RpZXMgYXJlXG4gICAgICAgICAgICAvLyBhbHdheXMgc3RyaWN0IGFuZCBwcml2YXRlIGZpZWxkcyBjYW4gb25seSBiZSB1c2VkIGluc2lkZVxuICAgICAgICAgICAgLy8gY2xhc3MgYm9kaWVzLlxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcmVhZCBvbmx5IHByaXZhdGUgZmllbGRcIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICB9XG59XG5leHBvcnQgeyBfY2xhc3NfYXBwbHlfZGVzY3JpcHRvcl91cGRhdGUgYXMgXyB9O1xuIl0sIm5hbWVzIjpbIl9jbGFzc19hcHBseV9kZXNjcmlwdG9yX3VwZGF0ZSIsInJlY2VpdmVyIiwiZGVzY3JpcHRvciIsInNldCIsImdldCIsIlR5cGVFcnJvciIsIl9fZGVzdHJXcmFwcGVyIiwidmFsdWUiLCJ2IiwiY2FsbCIsIndyaXRhYmxlIiwiXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_apply_descriptor_update.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_check_private_static_access.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_class_check_private_static_access.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _class_check_private_static_access; },\n/* harmony export */   _class_check_private_static_access: function() { return /* binding */ _class_check_private_static_access; }\n/* harmony export */ });\nfunction _class_check_private_static_access(receiver, classConstructor) {\n    if (receiver !== classConstructor) throw new TypeError(\"Private static access of wrong provenance\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jbGFzc19jaGVja19wcml2YXRlX3N0YXRpY19hY2Nlc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTQSxtQ0FBbUNDLFFBQVEsRUFBRUMsZ0JBQWdCO0lBQ3pFLElBQUlELGFBQWFDLGtCQUFrQixNQUFNLElBQUlDLFVBQVU7QUFDM0Q7QUFDbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9lc20vX2NsYXNzX2NoZWNrX3ByaXZhdGVfc3RhdGljX2FjY2Vzcy5qcz8wNTMzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBfY2xhc3NfY2hlY2tfcHJpdmF0ZV9zdGF0aWNfYWNjZXNzKHJlY2VpdmVyLCBjbGFzc0NvbnN0cnVjdG9yKSB7XG4gICAgaWYgKHJlY2VpdmVyICE9PSBjbGFzc0NvbnN0cnVjdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBzdGF0aWMgYWNjZXNzIG9mIHdyb25nIHByb3ZlbmFuY2VcIik7XG59XG5leHBvcnQgeyBfY2xhc3NfY2hlY2tfcHJpdmF0ZV9zdGF0aWNfYWNjZXNzIGFzIF8gfTtcbiJdLCJuYW1lcyI6WyJfY2xhc3NfY2hlY2tfcHJpdmF0ZV9zdGF0aWNfYWNjZXNzIiwicmVjZWl2ZXIiLCJjbGFzc0NvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_check_private_static_access.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_extract_field_descriptor.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_class_extract_field_descriptor.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _class_extract_field_descriptor; },\n/* harmony export */   _class_extract_field_descriptor: function() { return /* binding */ _class_extract_field_descriptor; }\n/* harmony export */ });\nfunction _class_extract_field_descriptor(receiver, privateMap, action) {\n    if (!privateMap.has(receiver)) throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n    return privateMap.get(receiver);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jbGFzc19leHRyYWN0X2ZpZWxkX2Rlc2NyaXB0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTQSxnQ0FBZ0NDLFFBQVEsRUFBRUMsVUFBVSxFQUFFQyxNQUFNO0lBQ3hFLElBQUksQ0FBQ0QsV0FBV0UsR0FBRyxDQUFDSCxXQUFXLE1BQU0sSUFBSUksVUFBVSxrQkFBa0JGLFNBQVM7SUFFOUUsT0FBT0QsV0FBV0ksR0FBRyxDQUFDTDtBQUMxQjtBQUNnRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2VzbS9fY2xhc3NfZXh0cmFjdF9maWVsZF9kZXNjcmlwdG9yLmpzP2QyNTciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIF9jbGFzc19leHRyYWN0X2ZpZWxkX2Rlc2NyaXB0b3IocmVjZWl2ZXIsIHByaXZhdGVNYXAsIGFjdGlvbikge1xuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIFwiICsgYWN0aW9uICsgXCIgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XG5cbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xufVxuZXhwb3J0IHsgX2NsYXNzX2V4dHJhY3RfZmllbGRfZGVzY3JpcHRvciBhcyBfIH07XG4iXSwibmFtZXMiOlsiX2NsYXNzX2V4dHJhY3RfZmllbGRfZGVzY3JpcHRvciIsInJlY2VpdmVyIiwicHJpdmF0ZU1hcCIsImFjdGlvbiIsImhhcyIsIlR5cGVFcnJvciIsImdldCIsIl8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_extract_field_descriptor.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_class_private_field_get.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _class_private_field_get; },\n/* harmony export */   _class_private_field_get: function() { return /* binding */ _class_private_field_get; }\n/* harmony export */ });\n/* harmony import */ var _class_apply_descriptor_get_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_class_apply_descriptor_get.js */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_apply_descriptor_get.js\");\n/* harmony import */ var _class_extract_field_descriptor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_class_extract_field_descriptor.js */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_extract_field_descriptor.js\");\n\n\nfunction _class_private_field_get(receiver, privateMap) {\n    var descriptor = (0,_class_extract_field_descriptor_js__WEBPACK_IMPORTED_MODULE_0__._class_extract_field_descriptor)(receiver, privateMap, \"get\");\n    return (0,_class_apply_descriptor_get_js__WEBPACK_IMPORTED_MODULE_1__._class_apply_descriptor_get)(receiver, descriptor);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jbGFzc19wcml2YXRlX2ZpZWxkX2dldC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQStFO0FBQ1E7QUFFaEYsU0FBU0UseUJBQXlCQyxRQUFRLEVBQUVDLFVBQVU7SUFDekQsSUFBSUMsYUFBYUosbUdBQStCQSxDQUFDRSxVQUFVQyxZQUFZO0lBQ3ZFLE9BQU9KLDJGQUEyQkEsQ0FBQ0csVUFBVUU7QUFDakQ7QUFDeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9lc20vX2NsYXNzX3ByaXZhdGVfZmllbGRfZ2V0LmpzP2Y2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX2NsYXNzX2FwcGx5X2Rlc2NyaXB0b3JfZ2V0IH0gZnJvbSBcIi4vX2NsYXNzX2FwcGx5X2Rlc2NyaXB0b3JfZ2V0LmpzXCI7XG5pbXBvcnQgeyBfY2xhc3NfZXh0cmFjdF9maWVsZF9kZXNjcmlwdG9yIH0gZnJvbSBcIi4vX2NsYXNzX2V4dHJhY3RfZmllbGRfZGVzY3JpcHRvci5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gX2NsYXNzX3ByaXZhdGVfZmllbGRfZ2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBfY2xhc3NfZXh0cmFjdF9maWVsZF9kZXNjcmlwdG9yKHJlY2VpdmVyLCBwcml2YXRlTWFwLCBcImdldFwiKTtcbiAgICByZXR1cm4gX2NsYXNzX2FwcGx5X2Rlc2NyaXB0b3JfZ2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yKTtcbn1cbmV4cG9ydCB7IF9jbGFzc19wcml2YXRlX2ZpZWxkX2dldCBhcyBfIH07XG4iXSwibmFtZXMiOlsiX2NsYXNzX2FwcGx5X2Rlc2NyaXB0b3JfZ2V0IiwiX2NsYXNzX2V4dHJhY3RfZmllbGRfZGVzY3JpcHRvciIsIl9jbGFzc19wcml2YXRlX2ZpZWxkX2dldCIsInJlY2VpdmVyIiwicHJpdmF0ZU1hcCIsImRlc2NyaXB0b3IiLCJfIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js":
/*!********************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_class_private_field_init.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _class_private_field_init; },\n/* harmony export */   _class_private_field_init: function() { return /* binding */ _class_private_field_init; }\n/* harmony export */ });\n/* harmony import */ var _check_private_redeclaration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_check_private_redeclaration.js */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_check_private_redeclaration.js\");\n\nfunction _class_private_field_init(obj, privateMap, value) {\n    (0,_check_private_redeclaration_js__WEBPACK_IMPORTED_MODULE_0__._check_private_redeclaration)(obj, privateMap);\n    privateMap.set(obj, value);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jbGFzc19wcml2YXRlX2ZpZWxkX2luaXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlGO0FBRTFFLFNBQVNDLDBCQUEwQkMsR0FBRyxFQUFFQyxVQUFVLEVBQUVDLEtBQUs7SUFDNURKLDZGQUE0QkEsQ0FBQ0UsS0FBS0M7SUFDbENBLFdBQVdFLEdBQUcsQ0FBQ0gsS0FBS0U7QUFDeEI7QUFDMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9lc20vX2NsYXNzX3ByaXZhdGVfZmllbGRfaW5pdC5qcz8zNTI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9jaGVja19wcml2YXRlX3JlZGVjbGFyYXRpb24gfSBmcm9tIFwiLi9fY2hlY2tfcHJpdmF0ZV9yZWRlY2xhcmF0aW9uLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBfY2xhc3NfcHJpdmF0ZV9maWVsZF9pbml0KG9iaiwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcbiAgICBfY2hlY2tfcHJpdmF0ZV9yZWRlY2xhcmF0aW9uKG9iaiwgcHJpdmF0ZU1hcCk7XG4gICAgcHJpdmF0ZU1hcC5zZXQob2JqLCB2YWx1ZSk7XG59XG5leHBvcnQgeyBfY2xhc3NfcHJpdmF0ZV9maWVsZF9pbml0IGFzIF8gfTtcbiJdLCJuYW1lcyI6WyJfY2hlY2tfcHJpdmF0ZV9yZWRlY2xhcmF0aW9uIiwiX2NsYXNzX3ByaXZhdGVfZmllbGRfaW5pdCIsIm9iaiIsInByaXZhdGVNYXAiLCJ2YWx1ZSIsInNldCIsIl8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_class_private_field_set.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _class_private_field_set; },\n/* harmony export */   _class_private_field_set: function() { return /* binding */ _class_private_field_set; }\n/* harmony export */ });\n/* harmony import */ var _class_apply_descriptor_set_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_class_apply_descriptor_set.js */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_apply_descriptor_set.js\");\n/* harmony import */ var _class_extract_field_descriptor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_class_extract_field_descriptor.js */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_extract_field_descriptor.js\");\n\n\nfunction _class_private_field_set(receiver, privateMap, value) {\n    var descriptor = (0,_class_extract_field_descriptor_js__WEBPACK_IMPORTED_MODULE_0__._class_extract_field_descriptor)(receiver, privateMap, \"set\");\n    (0,_class_apply_descriptor_set_js__WEBPACK_IMPORTED_MODULE_1__._class_apply_descriptor_set)(receiver, descriptor, value);\n    return value;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jbGFzc19wcml2YXRlX2ZpZWxkX3NldC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQStFO0FBQ1E7QUFFaEYsU0FBU0UseUJBQXlCQyxRQUFRLEVBQUVDLFVBQVUsRUFBRUMsS0FBSztJQUNoRSxJQUFJQyxhQUFhTCxtR0FBK0JBLENBQUNFLFVBQVVDLFlBQVk7SUFDdkVKLDJGQUEyQkEsQ0FBQ0csVUFBVUcsWUFBWUQ7SUFDbEQsT0FBT0E7QUFDWDtBQUN5QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2VzbS9fY2xhc3NfcHJpdmF0ZV9maWVsZF9zZXQuanM/ODE1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfY2xhc3NfYXBwbHlfZGVzY3JpcHRvcl9zZXQgfSBmcm9tIFwiLi9fY2xhc3NfYXBwbHlfZGVzY3JpcHRvcl9zZXQuanNcIjtcbmltcG9ydCB7IF9jbGFzc19leHRyYWN0X2ZpZWxkX2Rlc2NyaXB0b3IgfSBmcm9tIFwiLi9fY2xhc3NfZXh0cmFjdF9maWVsZF9kZXNjcmlwdG9yLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBfY2xhc3NfcHJpdmF0ZV9maWVsZF9zZXQocmVjZWl2ZXIsIHByaXZhdGVNYXAsIHZhbHVlKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBfY2xhc3NfZXh0cmFjdF9maWVsZF9kZXNjcmlwdG9yKHJlY2VpdmVyLCBwcml2YXRlTWFwLCBcInNldFwiKTtcbiAgICBfY2xhc3NfYXBwbHlfZGVzY3JpcHRvcl9zZXQocmVjZWl2ZXIsIGRlc2NyaXB0b3IsIHZhbHVlKTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5leHBvcnQgeyBfY2xhc3NfcHJpdmF0ZV9maWVsZF9zZXQgYXMgXyB9O1xuIl0sIm5hbWVzIjpbIl9jbGFzc19hcHBseV9kZXNjcmlwdG9yX3NldCIsIl9jbGFzc19leHRyYWN0X2ZpZWxkX2Rlc2NyaXB0b3IiLCJfY2xhc3NfcHJpdmF0ZV9maWVsZF9zZXQiLCJyZWNlaXZlciIsInByaXZhdGVNYXAiLCJ2YWx1ZSIsImRlc2NyaXB0b3IiLCJfIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_update.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_class_private_field_update.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _class_private_field_update; },\n/* harmony export */   _class_private_field_update: function() { return /* binding */ _class_private_field_update; }\n/* harmony export */ });\n/* harmony import */ var _class_apply_descriptor_update_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_class_apply_descriptor_update.js */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_apply_descriptor_update.js\");\n/* harmony import */ var _class_extract_field_descriptor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_class_extract_field_descriptor.js */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_extract_field_descriptor.js\");\n\n\nfunction _class_private_field_update(receiver, privateMap) {\n    var descriptor = (0,_class_extract_field_descriptor_js__WEBPACK_IMPORTED_MODULE_0__._class_extract_field_descriptor)(receiver, privateMap, \"update\");\n    return (0,_class_apply_descriptor_update_js__WEBPACK_IMPORTED_MODULE_1__._class_apply_descriptor_update)(receiver, descriptor);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jbGFzc19wcml2YXRlX2ZpZWxkX3VwZGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXFGO0FBQ0U7QUFFaEYsU0FBU0UsNEJBQTRCQyxRQUFRLEVBQUVDLFVBQVU7SUFDNUQsSUFBSUMsYUFBYUosbUdBQStCQSxDQUFDRSxVQUFVQyxZQUFZO0lBQ3ZFLE9BQU9KLGlHQUE4QkEsQ0FBQ0csVUFBVUU7QUFDcEQ7QUFDNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9lc20vX2NsYXNzX3ByaXZhdGVfZmllbGRfdXBkYXRlLmpzP2M5M2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX2NsYXNzX2FwcGx5X2Rlc2NyaXB0b3JfdXBkYXRlIH0gZnJvbSBcIi4vX2NsYXNzX2FwcGx5X2Rlc2NyaXB0b3JfdXBkYXRlLmpzXCI7XG5pbXBvcnQgeyBfY2xhc3NfZXh0cmFjdF9maWVsZF9kZXNjcmlwdG9yIH0gZnJvbSBcIi4vX2NsYXNzX2V4dHJhY3RfZmllbGRfZGVzY3JpcHRvci5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gX2NsYXNzX3ByaXZhdGVfZmllbGRfdXBkYXRlKHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBfY2xhc3NfZXh0cmFjdF9maWVsZF9kZXNjcmlwdG9yKHJlY2VpdmVyLCBwcml2YXRlTWFwLCBcInVwZGF0ZVwiKTtcbiAgICByZXR1cm4gX2NsYXNzX2FwcGx5X2Rlc2NyaXB0b3JfdXBkYXRlKHJlY2VpdmVyLCBkZXNjcmlwdG9yKTtcbn1cbmV4cG9ydCB7IF9jbGFzc19wcml2YXRlX2ZpZWxkX3VwZGF0ZSBhcyBfIH07XG4iXSwibmFtZXMiOlsiX2NsYXNzX2FwcGx5X2Rlc2NyaXB0b3JfdXBkYXRlIiwiX2NsYXNzX2V4dHJhY3RfZmllbGRfZGVzY3JpcHRvciIsIl9jbGFzc19wcml2YXRlX2ZpZWxkX3VwZGF0ZSIsInJlY2VpdmVyIiwicHJpdmF0ZU1hcCIsImRlc2NyaXB0b3IiLCJfIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_update.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js":
/*!********************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_class_private_method_get.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _class_private_method_get; },\n/* harmony export */   _class_private_method_get: function() { return /* binding */ _class_private_method_get; }\n/* harmony export */ });\nfunction _class_private_method_get(receiver, privateSet, fn) {\n    if (!privateSet.has(receiver)) throw new TypeError(\"attempted to get private field on non-instance\");\n    return fn;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jbGFzc19wcml2YXRlX21ldGhvZF9nZXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTQSwwQkFBMEJDLFFBQVEsRUFBRUMsVUFBVSxFQUFFQyxFQUFFO0lBQzlELElBQUksQ0FBQ0QsV0FBV0UsR0FBRyxDQUFDSCxXQUFXLE1BQU0sSUFBSUksVUFBVTtJQUVuRCxPQUFPRjtBQUNYO0FBQzBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jbGFzc19wcml2YXRlX21ldGhvZF9nZXQuanM/OWRhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gX2NsYXNzX3ByaXZhdGVfbWV0aG9kX2dldChyZWNlaXZlciwgcHJpdmF0ZVNldCwgZm4pIHtcbiAgICBpZiAoIXByaXZhdGVTZXQuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XG5cbiAgICByZXR1cm4gZm47XG59XG5leHBvcnQgeyBfY2xhc3NfcHJpdmF0ZV9tZXRob2RfZ2V0IGFzIF8gfTtcbiJdLCJuYW1lcyI6WyJfY2xhc3NfcHJpdmF0ZV9tZXRob2RfZ2V0IiwicmVjZWl2ZXIiLCJwcml2YXRlU2V0IiwiZm4iLCJoYXMiLCJUeXBlRXJyb3IiLCJfIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_class_private_method_init.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _class_private_method_init; },\n/* harmony export */   _class_private_method_init: function() { return /* binding */ _class_private_method_init; }\n/* harmony export */ });\n/* harmony import */ var _check_private_redeclaration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_check_private_redeclaration.js */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_check_private_redeclaration.js\");\n\nfunction _class_private_method_init(obj, privateSet) {\n    (0,_check_private_redeclaration_js__WEBPACK_IMPORTED_MODULE_0__._check_private_redeclaration)(obj, privateSet);\n    privateSet.add(obj);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jbGFzc19wcml2YXRlX21ldGhvZF9pbml0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRjtBQUUxRSxTQUFTQywyQkFBMkJDLEdBQUcsRUFBRUMsVUFBVTtJQUN0REgsNkZBQTRCQSxDQUFDRSxLQUFLQztJQUNsQ0EsV0FBV0MsR0FBRyxDQUFDRjtBQUNuQjtBQUMyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2VzbS9fY2xhc3NfcHJpdmF0ZV9tZXRob2RfaW5pdC5qcz80NTA5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9jaGVja19wcml2YXRlX3JlZGVjbGFyYXRpb24gfSBmcm9tIFwiLi9fY2hlY2tfcHJpdmF0ZV9yZWRlY2xhcmF0aW9uLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBfY2xhc3NfcHJpdmF0ZV9tZXRob2RfaW5pdChvYmosIHByaXZhdGVTZXQpIHtcbiAgICBfY2hlY2tfcHJpdmF0ZV9yZWRlY2xhcmF0aW9uKG9iaiwgcHJpdmF0ZVNldCk7XG4gICAgcHJpdmF0ZVNldC5hZGQob2JqKTtcbn1cbmV4cG9ydCB7IF9jbGFzc19wcml2YXRlX21ldGhvZF9pbml0IGFzIF8gfTtcbiJdLCJuYW1lcyI6WyJfY2hlY2tfcHJpdmF0ZV9yZWRlY2xhcmF0aW9uIiwiX2NsYXNzX3ByaXZhdGVfbWV0aG9kX2luaXQiLCJvYmoiLCJwcml2YXRlU2V0IiwiYWRkIiwiXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_static_private_method_get.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_class_static_private_method_get.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _class_static_private_method_get; },\n/* harmony export */   _class_static_private_method_get: function() { return /* binding */ _class_static_private_method_get; }\n/* harmony export */ });\n/* harmony import */ var _class_check_private_static_access_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_class_check_private_static_access.js */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_check_private_static_access.js\");\n\nfunction _class_static_private_method_get(receiver, classConstructor, method) {\n    (0,_class_check_private_static_access_js__WEBPACK_IMPORTED_MODULE_0__._class_check_private_static_access)(receiver, classConstructor);\n    return method;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL19jbGFzc19zdGF0aWNfcHJpdmF0ZV9tZXRob2RfZ2V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2RjtBQUV0RixTQUFTQyxpQ0FBaUNDLFFBQVEsRUFBRUMsZ0JBQWdCLEVBQUVDLE1BQU07SUFDL0VKLHlHQUFrQ0EsQ0FBQ0UsVUFBVUM7SUFFN0MsT0FBT0M7QUFDWDtBQUNpRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2VzbS9fY2xhc3Nfc3RhdGljX3ByaXZhdGVfbWV0aG9kX2dldC5qcz9jNzFlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9jbGFzc19jaGVja19wcml2YXRlX3N0YXRpY19hY2Nlc3MgfSBmcm9tIFwiLi9fY2xhc3NfY2hlY2tfcHJpdmF0ZV9zdGF0aWNfYWNjZXNzLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBfY2xhc3Nfc3RhdGljX3ByaXZhdGVfbWV0aG9kX2dldChyZWNlaXZlciwgY2xhc3NDb25zdHJ1Y3RvciwgbWV0aG9kKSB7XG4gICAgX2NsYXNzX2NoZWNrX3ByaXZhdGVfc3RhdGljX2FjY2VzcyhyZWNlaXZlciwgY2xhc3NDb25zdHJ1Y3Rvcik7XG5cbiAgICByZXR1cm4gbWV0aG9kO1xufVxuZXhwb3J0IHsgX2NsYXNzX3N0YXRpY19wcml2YXRlX21ldGhvZF9nZXQgYXMgXyB9O1xuIl0sIm5hbWVzIjpbIl9jbGFzc19jaGVja19wcml2YXRlX3N0YXRpY19hY2Nlc3MiLCJfY2xhc3Nfc3RhdGljX3ByaXZhdGVfbWV0aG9kX2dldCIsInJlY2VpdmVyIiwiY2xhc3NDb25zdHJ1Y3RvciIsIm1ldGhvZCIsIl8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_static_private_method_get.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@adraffy/ens-normalize/dist/index.mjs":
/*!*************************************************************!*\
  !*** ../node_modules/@adraffy/ens-normalize/dist/index.mjs ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ens_beautify: function() { return /* binding */ ens_beautify; },\n/* harmony export */   ens_emoji: function() { return /* binding */ ens_emoji; },\n/* harmony export */   ens_normalize: function() { return /* binding */ ens_normalize; },\n/* harmony export */   ens_normalize_fragment: function() { return /* binding */ ens_normalize_fragment; },\n/* harmony export */   ens_split: function() { return /* binding */ ens_split; },\n/* harmony export */   ens_tokenize: function() { return /* binding */ ens_tokenize; },\n/* harmony export */   is_combining_mark: function() { return /* binding */ is_combining_mark; },\n/* harmony export */   nfc: function() { return /* binding */ nfc; },\n/* harmony export */   nfd: function() { return /* binding */ nfd; },\n/* harmony export */   safe_str_from_cps: function() { return /* binding */ safe_str_from_cps; },\n/* harmony export */   should_escape: function() { return /* binding */ should_escape; }\n/* harmony export */ });\n// created 2023-09-25T01:01:55.148Z\n// compressed base64-encoded blob for include-ens data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: 0565ed049b9cf1614bb9e11ba7d8ac6a6fb96c893253d890f7e2b2884b9ded32\nvar COMPRESSED$1 = \"\";\nconst FENCED = new Map([\n    [\n        8217,\n        \"apostrophe\"\n    ],\n    [\n        8260,\n        \"fraction slash\"\n    ],\n    [\n        12539,\n        \"middle dot\"\n    ]\n]);\nconst NSM_MAX = 4;\nfunction decode_arithmetic(bytes) {\n    let pos = 0;\n    function u16() {\n        return bytes[pos++] << 8 | bytes[pos++];\n    }\n    // decode the frequency table\n    let symbol_count = u16();\n    let total = 1;\n    let acc = [\n        0,\n        1\n    ]; // first symbol has frequency 1\n    for(let i = 1; i < symbol_count; i++){\n        acc.push(total += u16());\n    }\n    // skip the sized-payload that the last 3 symbols index into\n    let skip = u16();\n    let pos_payload = pos;\n    pos += skip;\n    let read_width = 0;\n    let read_buffer = 0;\n    function read_bit() {\n        if (read_width == 0) {\n            // this will read beyond end of buffer\n            // but (undefined|0) => zero pad\n            read_buffer = read_buffer << 8 | bytes[pos++];\n            read_width = 8;\n        }\n        return read_buffer >> --read_width & 1;\n    }\n    const N = 31;\n    const FULL = 2 ** N;\n    const HALF = FULL >>> 1;\n    const QRTR = HALF >> 1;\n    const MASK = FULL - 1;\n    // fill register\n    let register = 0;\n    for(let i = 0; i < N; i++)register = register << 1 | read_bit();\n    let symbols = [];\n    let low = 0;\n    let range = FULL; // treat like a float\n    while(true){\n        let value = Math.floor(((register - low + 1) * total - 1) / range);\n        let start = 0;\n        let end = symbol_count;\n        while(end - start > 1){\n            let mid = start + end >>> 1;\n            if (value < acc[mid]) {\n                end = mid;\n            } else {\n                start = mid;\n            }\n        }\n        if (start == 0) break; // first symbol is end mark\n        symbols.push(start);\n        let a = low + Math.floor(range * acc[start] / total);\n        let b = low + Math.floor(range * acc[start + 1] / total) - 1;\n        while(((a ^ b) & HALF) == 0){\n            register = register << 1 & MASK | read_bit();\n            a = a << 1 & MASK;\n            b = b << 1 & MASK | 1;\n        }\n        while(a & ~b & QRTR){\n            register = register & HALF | register << 1 & MASK >>> 1 | read_bit();\n            a = a << 1 ^ HALF;\n            b = (b ^ HALF) << 1 | HALF | 1;\n        }\n        low = a;\n        range = 1 + b - a;\n    }\n    let offset = symbol_count - 4;\n    return symbols.map((x)=>{\n        switch(x - offset){\n            case 3:\n                return offset + 0x10100 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n            case 2:\n                return offset + 0x100 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n            case 1:\n                return offset + bytes[pos_payload++];\n            default:\n                return x - 1;\n        }\n    });\n}\n// returns an iterator which returns the next symbol\nfunction read_payload(v) {\n    let pos = 0;\n    return ()=>v[pos++];\n}\nfunction read_compressed_payload(s) {\n    return read_payload(decode_arithmetic(unsafe_atob(s)));\n}\n// unsafe in the sense:\n// expected well-formed Base64 w/o padding \n// 20220922: added for https://github.com/adraffy/ens-normalize.js/issues/4\nfunction unsafe_atob(s) {\n    let lookup = [];\n    [\n        ...\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n    ].forEach((c, i)=>lookup[c.charCodeAt(0)] = i);\n    let n = s.length;\n    let ret = new Uint8Array(6 * n >> 3);\n    for(let i = 0, pos = 0, width = 0, carry = 0; i < n; i++){\n        carry = carry << 6 | lookup[s.charCodeAt(i)];\n        width += 6;\n        if (width >= 8) {\n            ret[pos++] = carry >> (width -= 8);\n        }\n    }\n    return ret;\n}\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nfunction signed(i) {\n    return i & 1 ? ~i >> 1 : i >> 1;\n}\nfunction read_deltas(n, next) {\n    let v = Array(n);\n    for(let i = 0, x = 0; i < n; i++)v[i] = x += signed(next());\n    return v;\n}\n// [123][5] => [0 3] [1 1] [0 0]\nfunction read_sorted(next) {\n    let prev = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    let ret = [];\n    while(true){\n        let x = next();\n        let n = next();\n        if (!n) break;\n        prev += x;\n        for(let i = 0; i < n; i++){\n            ret.push(prev + i);\n        }\n        prev += n + 1;\n    }\n    return ret;\n}\nfunction read_sorted_arrays(next) {\n    return read_array_while(()=>{\n        let v = read_sorted(next);\n        if (v.length) return v;\n    });\n}\n// returns map of x => ys\nfunction read_mapped(next) {\n    let ret = [];\n    while(true){\n        let w = next();\n        if (w == 0) break;\n        ret.push(read_linear_table(w, next));\n    }\n    while(true){\n        let w = next() - 1;\n        if (w < 0) break;\n        ret.push(read_replacement_table(w, next));\n    }\n    return ret.flat();\n}\n// read until next is falsy\n// return array of read values\nfunction read_array_while(next) {\n    let v = [];\n    while(true){\n        let x = next(v.length);\n        if (!x) break;\n        v.push(x);\n    }\n    return v;\n}\n// read w columns of length n\n// return as n rows of length w\nfunction read_transposed(n, w, next) {\n    let m = Array(n).fill().map(()=>[]);\n    for(let i = 0; i < w; i++){\n        read_deltas(n, next).forEach((x, j)=>m[j].push(x));\n    }\n    return m;\n}\n// returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]\n// where dx/dy = steps, n = run size, w = length of y\nfunction read_linear_table(w, next) {\n    let dx = 1 + next();\n    let dy = next();\n    let vN = read_array_while(next);\n    let m = read_transposed(vN.length, 1 + w, next);\n    return m.flatMap((v, i)=>{\n        let [x, ...ys] = v;\n        return Array(vN[i]).fill().map((_, j)=>{\n            let j_dy = j * dy;\n            return [\n                x + j * dx,\n                ys.map((y)=>y + j_dy)\n            ];\n        });\n    });\n}\n// return [[x, ys...], ...]\n// where w = length of y\nfunction read_replacement_table(w, next) {\n    let n = 1 + next();\n    let m = read_transposed(n, 1 + w, next);\n    return m.map((v)=>[\n            v[0],\n            v.slice(1)\n        ]);\n}\nfunction read_trie(next) {\n    let ret = [];\n    let sorted = read_sorted(next);\n    expand(decode([]), []);\n    return ret; // not sorted\n    function decode(Q) {\n        let S = next(); // state: valid, save, check\n        let B = read_array_while(()=>{\n            let cps = read_sorted(next).map((i)=>sorted[i]);\n            if (cps.length) return decode(cps);\n        });\n        return {\n            S,\n            B,\n            Q\n        };\n    }\n    function expand(param, cps, saved) {\n        let { S, B } = param;\n        if (S & 4 && saved === cps[cps.length - 1]) return;\n        if (S & 2) saved = cps[cps.length - 1];\n        if (S & 1) ret.push(cps);\n        for (let br of B){\n            for (let cp of br.Q){\n                expand(br, [\n                    ...cps,\n                    cp\n                ], saved);\n            }\n        }\n    }\n}\nfunction hex_cp(cp) {\n    return cp.toString(16).toUpperCase().padStart(2, \"0\");\n}\nfunction quote_cp(cp) {\n    return \"{\".concat(hex_cp(cp), \"}\"); // raffy convention: like \"\\u{X}\" w/o the \"\\u\"\n}\n/*\r\nexport function explode_cp(s) {\r\n\treturn [...s].map(c => c.codePointAt(0));\r\n}\r\n*/ function explode_cp(s) {\n    let cps = [];\n    for(let pos = 0, len = s.length; pos < len;){\n        let cp = s.codePointAt(pos);\n        pos += cp < 0x10000 ? 1 : 2;\n        cps.push(cp);\n    }\n    return cps;\n}\nfunction str_from_cps(cps) {\n    const chunk = 4096;\n    let len = cps.length;\n    if (len < chunk) return String.fromCodePoint(...cps);\n    let buf = [];\n    for(let i = 0; i < len;){\n        buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));\n    }\n    return buf.join(\"\");\n}\nfunction compare_arrays(a, b) {\n    let n = a.length;\n    let c = n - b.length;\n    for(let i = 0; c == 0 && i < n; i++)c = a[i] - b[i];\n    return c;\n}\n// created 2023-09-25T01:01:55.148Z\n// compressed base64-encoded blob for include-nf data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: a974b6f8541fc29d919bc85118af0a44015851fab5343f8679cb31be2bdb209e\nvar COMPRESSED = \"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\";\n// https://unicode.org/reports/tr15/\n// for reference implementation\n// see: /derive/nf.js\n// algorithmic hangul\n// https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)\nconst S0 = 0xAC00;\nconst L0 = 0x1100;\nconst V0 = 0x1161;\nconst T0 = 0x11A7;\nconst L_COUNT = 19;\nconst V_COUNT = 21;\nconst T_COUNT = 28;\nconst N_COUNT = V_COUNT * T_COUNT;\nconst S_COUNT = L_COUNT * N_COUNT;\nconst S1 = S0 + S_COUNT;\nconst L1 = L0 + L_COUNT;\nconst V1 = V0 + V_COUNT;\nconst T1 = T0 + T_COUNT;\nfunction unpack_cc(packed) {\n    return packed >> 24 & 0xFF;\n}\nfunction unpack_cp(packed) {\n    return packed & 0xFFFFFF;\n}\nlet SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;\nfunction init$1() {\n    //console.time('nf');\n    let r = read_compressed_payload(COMPRESSED);\n    SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i)=>v.map((x)=>[\n                x,\n                i + 1 << 24\n            ]))); // pre-shifted\n    EXCLUSIONS = new Set(read_sorted(r));\n    DECOMP = new Map();\n    RECOMP = new Map();\n    for (let [cp, cps] of read_mapped(r)){\n        if (!EXCLUSIONS.has(cp) && cps.length == 2) {\n            let [a, b] = cps;\n            let bucket = RECOMP.get(a);\n            if (!bucket) {\n                bucket = new Map();\n                RECOMP.set(a, bucket);\n            }\n            bucket.set(b, cp);\n        }\n        DECOMP.set(cp, cps.reverse()); // stored reversed\n    }\n//console.timeEnd('nf');\n// 20230905: 11ms\n}\nfunction is_hangul(cp) {\n    return cp >= S0 && cp < S1;\n}\nfunction compose_pair(a, b) {\n    if (a >= L0 && a < L1 && b >= V0 && b < V1) {\n        return S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;\n    } else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {\n        return a + (b - T0);\n    } else {\n        let recomp = RECOMP.get(a);\n        if (recomp) {\n            recomp = recomp.get(b);\n            if (recomp) {\n                return recomp;\n            }\n        }\n        return -1;\n    }\n}\nfunction decomposed(cps) {\n    if (!SHIFTED_RANK) init$1();\n    let ret = [];\n    let buf = [];\n    let check_order = false;\n    function add(cp) {\n        let cc = SHIFTED_RANK.get(cp);\n        if (cc) {\n            check_order = true;\n            cp |= cc;\n        }\n        ret.push(cp);\n    }\n    for (let cp of cps){\n        while(true){\n            if (cp < 0x80) {\n                ret.push(cp);\n            } else if (is_hangul(cp)) {\n                let s_index = cp - S0;\n                let l_index = s_index / N_COUNT | 0;\n                let v_index = s_index % N_COUNT / T_COUNT | 0;\n                let t_index = s_index % T_COUNT;\n                add(L0 + l_index);\n                add(V0 + v_index);\n                if (t_index > 0) add(T0 + t_index);\n            } else {\n                let mapped = DECOMP.get(cp);\n                if (mapped) {\n                    buf.push(...mapped);\n                } else {\n                    add(cp);\n                }\n            }\n            if (!buf.length) break;\n            cp = buf.pop();\n        }\n    }\n    if (check_order && ret.length > 1) {\n        let prev_cc = unpack_cc(ret[0]);\n        for(let i = 1; i < ret.length; i++){\n            let cc = unpack_cc(ret[i]);\n            if (cc == 0 || prev_cc <= cc) {\n                prev_cc = cc;\n                continue;\n            }\n            let j = i - 1;\n            while(true){\n                let tmp = ret[j + 1];\n                ret[j + 1] = ret[j];\n                ret[j] = tmp;\n                if (!j) break;\n                prev_cc = unpack_cc(ret[--j]);\n                if (prev_cc <= cc) break;\n            }\n            prev_cc = unpack_cc(ret[i]);\n        }\n    }\n    return ret;\n}\nfunction composed_from_decomposed(v) {\n    let ret = [];\n    let stack = [];\n    let prev_cp = -1;\n    let prev_cc = 0;\n    for (let packed of v){\n        let cc = unpack_cc(packed);\n        let cp = unpack_cp(packed);\n        if (prev_cp == -1) {\n            if (cc == 0) {\n                prev_cp = cp;\n            } else {\n                ret.push(cp);\n            }\n        } else if (prev_cc > 0 && prev_cc >= cc) {\n            if (cc == 0) {\n                ret.push(prev_cp, ...stack);\n                stack.length = 0;\n                prev_cp = cp;\n            } else {\n                stack.push(cp);\n            }\n            prev_cc = cc;\n        } else {\n            let composed = compose_pair(prev_cp, cp);\n            if (composed >= 0) {\n                prev_cp = composed;\n            } else if (prev_cc == 0 && cc == 0) {\n                ret.push(prev_cp);\n                prev_cp = cp;\n            } else {\n                stack.push(cp);\n                prev_cc = cc;\n            }\n        }\n    }\n    if (prev_cp >= 0) {\n        ret.push(prev_cp, ...stack);\n    }\n    return ret;\n}\n// note: cps can be iterable\nfunction nfd(cps) {\n    return decomposed(cps).map(unpack_cp);\n}\nfunction nfc(cps) {\n    return composed_from_decomposed(decomposed(cps));\n}\nconst HYPHEN = 0x2D;\nconst STOP = 0x2E;\nconst STOP_CH = \".\";\nconst FE0F = 0xFE0F;\nconst UNIQUE_PH = 1;\n// 20230913: replace [...v] with Array_from(v) to avoid large spreads\nconst Array_from = (x)=>Array.from(x); // Array.from.bind(Array);\n_c = Array_from;\nfunction group_has_cp(g, cp) {\n    // 20230913: keep primary and secondary distinct instead of creating valid union\n    return g.P.has(cp) || g.Q.has(cp);\n}\nclass Emoji extends Array {\n    get is_emoji() {\n        return true;\n    }\n}\nlet MAPPED, IGNORED, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;\nfunction init() {\n    if (MAPPED) return;\n    let r = read_compressed_payload(COMPRESSED$1);\n    const read_sorted_array = ()=>read_sorted(r);\n    const read_sorted_set = ()=>new Set(read_sorted_array());\n    const set_add_many = (set, v)=>v.forEach((x)=>set.add(x));\n    MAPPED = new Map(read_mapped(r));\n    IGNORED = read_sorted_set(); // ignored characters are not valid, so just read raw codepoints\n    /*\r\n\t// direct include from payload is smaller than the decompression code\r\n\tconst FENCED = new Map(read_array_while(() => {\r\n\t\tlet cp = r();\r\n\t\tif (cp) return [cp, read_str(r())];\r\n\t}));\r\n\t*/ // 20230217: we still need all CM for proper error formatting\n    // but norm only needs NSM subset that are potentially-valid\n    CM = read_sorted_array();\n    NSM = new Set(read_sorted_array().map((i)=>CM[i]));\n    CM = new Set(CM);\n    ESCAPE = read_sorted_set(); // characters that should not be printed\n    NFC_CHECK = read_sorted_set(); // only needed to illustrate ens_tokenize() transformations\n    let chunks = read_sorted_arrays(r);\n    let unrestricted = r();\n    //const read_chunked = () => new Set(read_sorted_array().flatMap(i => chunks[i]).concat(read_sorted_array()));\n    const read_chunked = ()=>{\n        // 20230921: build set in parts, 2x faster\n        let set = new Set();\n        read_sorted_array().forEach((i)=>set_add_many(set, chunks[i]));\n        set_add_many(set, read_sorted_array());\n        return set;\n    };\n    GROUPS = read_array_while((i)=>{\n        // minifier property mangling seems unsafe\n        // so these are manually renamed to single chars\n        let N = read_array_while(r).map((x)=>x + 0x60);\n        if (N.length) {\n            let R = i >= unrestricted; // unrestricted then restricted\n            N[0] -= 32; // capitalize\n            N = str_from_cps(N);\n            if (R) N = \"Restricted[\".concat(N, \"]\");\n            let P = read_chunked(); // primary\n            let Q = read_chunked(); // secondary\n            let M = !r(); // not-whitelisted, check for NSM\n            // *** this code currently isn't needed ***\n            /*\r\n\t\t\tlet V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid\r\n\t\t\tlet M = r()-1; // number of combining mark\r\n\t\t\tif (M < 0) { // whitelisted\r\n\t\t\t\tM = new Map(read_array_while(() => {\r\n\t\t\t\t\tlet i = r();\r\n\t\t\t\t\tif (i) return [V[i-1], read_array_while(() => {\r\n\t\t\t\t\t\tlet v = read_array_while(r);\r\n\t\t\t\t\t\tif (v.length) return v.map(x => x-1);\r\n\t\t\t\t\t})];\r\n\t\t\t\t}));\r\n\t\t\t}*/ return {\n                N,\n                P,\n                Q,\n                M,\n                R\n            };\n        }\n    });\n    // decode compressed wholes\n    WHOLE_VALID = read_sorted_set();\n    WHOLE_MAP = new Map();\n    let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b)=>a - b); // must be sorted\n    wholes.forEach((cp, i)=>{\n        let d = r();\n        let w = wholes[i] = d ? wholes[i - d] : {\n            V: [],\n            M: new Map()\n        };\n        w.V.push(cp); // add to member set\n        if (!WHOLE_VALID.has(cp)) {\n            WHOLE_MAP.set(cp, w); // register with whole map\n        }\n    });\n    // compute confusable-extent complements\n    // usage: WHOLE_MAP.get(cp).M.get(cp) = complement set\n    for (let { V, M } of new Set(WHOLE_MAP.values())){\n        // connect all groups that have each whole character\n        let recs = [];\n        for (let cp of V){\n            let gs = GROUPS.filter((g)=>group_has_cp(g, cp));\n            let rec = recs.find((param)=>{\n                let { G } = param;\n                return gs.some((g)=>G.has(g));\n            });\n            if (!rec) {\n                rec = {\n                    G: new Set(),\n                    V: []\n                };\n                recs.push(rec);\n            }\n            rec.V.push(cp);\n            set_add_many(rec.G, gs);\n        }\n        // per character cache groups which are not a member of the extent\n        let union = recs.flatMap((x)=>Array_from(x.G)); // all of the groups used by this whole\n        for (let { G, V } of recs){\n            let complement = new Set(union.filter((g)=>!G.has(g))); // groups not covered by the extent\n            for (let cp of V){\n                M.set(cp, complement); // this is the same reference\n            }\n        }\n    }\n    // compute valid set\n    // 20230924: VALID was union but can be re-used\n    VALID = new Set(); // exists in 1+ groups\n    let multi = new Set(); // exists in 2+ groups\n    const add_to_union = (cp)=>VALID.has(cp) ? multi.add(cp) : VALID.add(cp);\n    for (let g of GROUPS){\n        for (let cp of g.P)add_to_union(cp);\n        for (let cp of g.Q)add_to_union(cp);\n    }\n    // dual purpose WHOLE_MAP: return placeholder if unique non-confusable\n    for (let cp of VALID){\n        if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {\n            WHOLE_MAP.set(cp, UNIQUE_PH);\n        }\n    }\n    // add all decomposed parts\n    // see derive: \"Valid is Closed (via Brute-force)\"\n    set_add_many(VALID, nfd(VALID));\n    // decode emoji\n    // 20230719: emoji are now fully-expanded to avoid quirk logic \n    EMOJI_LIST = read_trie(r).map((v)=>Emoji.from(v)).sort(compare_arrays);\n    EMOJI_ROOT = new Map(); // this has approx 7K nodes (2+ per emoji)\n    for (let cps of EMOJI_LIST){\n        // 20230719: change to *slightly* stricter algorithm which disallows \n        // insertion of misplaced FE0F in emoji sequences (matching ENSIP-15)\n        // example: beautified [A B] (eg. flag emoji) \n        //  before: allow: [A FE0F B], error: [A FE0F FE0F B] \n        //   after: error: both\n        // note: this code now matches ENSNormalize.{cs,java} logic\n        let prev = [\n            EMOJI_ROOT\n        ];\n        for (let cp of cps){\n            let next = prev.map((node)=>{\n                let child = node.get(cp);\n                if (!child) {\n                    // should this be object? \n                    // (most have 1-2 items, few have many)\n                    // 20230719: no, v8 default map is 4?\n                    child = new Map();\n                    node.set(cp, child);\n                }\n                return child;\n            });\n            if (cp === FE0F) {\n                prev.push(...next); // less than 20 elements\n            } else {\n                prev = next;\n            }\n        }\n        for (let x of prev){\n            x.V = cps;\n        }\n    }\n}\n// if escaped: {HEX}\n//       else: \"x\" {HEX}\nfunction quoted_cp(cp) {\n    return (should_escape(cp) ? \"\" : \"\".concat(bidi_qq(safe_str_from_cps([\n        cp\n    ])), \" \")) + quote_cp(cp);\n}\n// 20230211: some messages can be mixed-directional and result in spillover\n// use 200E after a quoted string to force the remainder of a string from \n// acquring the direction of the quote\n// https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions\nfunction bidi_qq(s) {\n    return '\"'.concat(s, '\"‎'); // strong LTR\n}\nfunction check_label_extension(cps) {\n    if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {\n        throw new Error('invalid label extension: \"'.concat(str_from_cps(cps.slice(0, 4)), '\"')); // this can only be ascii so cant be bidi\n    }\n}\nfunction check_leading_underscore(cps) {\n    const UNDERSCORE = 0x5F;\n    for(let i = cps.lastIndexOf(UNDERSCORE); i > 0;){\n        if (cps[--i] !== UNDERSCORE) {\n            throw new Error(\"underscore allowed only at start\");\n        }\n    }\n}\n// check that a fenced cp is not leading, trailing, or touching another fenced cp\nfunction check_fenced(cps) {\n    let cp = cps[0];\n    let prev = FENCED.get(cp);\n    if (prev) throw error_placement(\"leading \".concat(prev));\n    let n = cps.length;\n    let last = -1; // prevents trailing from throwing\n    for(let i = 1; i < n; i++){\n        cp = cps[i];\n        let match = FENCED.get(cp);\n        if (match) {\n            // since cps[0] isn't fenced, cps[1] cannot throw\n            if (last == i) throw error_placement(\"\".concat(prev, \" + \").concat(match));\n            last = i + 1;\n            prev = match;\n        }\n    }\n    if (last == n) throw error_placement(\"trailing \".concat(prev));\n}\n// create a safe to print string \n// invisibles are escaped\n// leading cm uses placeholder\n// if cps exceed max, middle truncate with ellipsis\n// quoter(cp) => string, eg. 3000 => \"{3000}\"\n// note: in html, you'd call this function then replace [<>&] with entities\nfunction safe_str_from_cps(cps) {\n    let max = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Infinity, quoter = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : quote_cp;\n    //if (Number.isInteger(cps)) cps = [cps];\n    //if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);\n    let buf = [];\n    if (is_combining_mark(cps[0])) buf.push(\"◌\");\n    if (cps.length > max) {\n        max >>= 1;\n        cps = [\n            ...cps.slice(0, max),\n            0x2026,\n            ...cps.slice(-max)\n        ];\n    }\n    let prev = 0;\n    let n = cps.length;\n    for(let i = 0; i < n; i++){\n        let cp = cps[i];\n        if (should_escape(cp)) {\n            buf.push(str_from_cps(cps.slice(prev, i)));\n            buf.push(quoter(cp));\n            prev = i + 1;\n        }\n    }\n    buf.push(str_from_cps(cps.slice(prev, n)));\n    return buf.join(\"\");\n}\n// note: set(s) cannot be exposed because they can be modified\n// note: Object.freeze() doesn't work\nfunction is_combining_mark(cp) {\n    init();\n    return CM.has(cp);\n}\nfunction should_escape(cp) {\n    init();\n    return ESCAPE.has(cp);\n}\n// return all supported emoji as fully-qualified emoji \n// ordered by length then lexicographic \nfunction ens_emoji() {\n    init();\n    return EMOJI_LIST.map((x)=>x.slice()); // emoji are exposed so copy\n}\nfunction ens_normalize_fragment(frag, decompose) {\n    init();\n    let nf = decompose ? nfd : nfc;\n    return frag.split(STOP_CH).map((label)=>str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);\n}\nfunction ens_normalize(name) {\n    return flatten(split(name, nfc, filter_fe0f));\n}\nfunction ens_beautify(name) {\n    let labels = split(name, nfc, (x)=>x); // emoji not exposed\n    for (let { type, output, error } of labels){\n        if (error) break; // flatten will throw\n        // replace leading/trailing hyphen\n        // 20230121: consider beautifing all or leading/trailing hyphen to unicode variant\n        // not exactly the same in every font, but very similar: \"-\" vs \"‐\"\n        /*\r\n\t\tconst UNICODE_HYPHEN = 0x2010;\r\n\t\t// maybe this should replace all for visual consistancy?\r\n\t\t// `node tools/reg-count.js regex ^-\\{2,\\}` => 592\r\n\t\t//for (let i = 0; i < output.length; i++) if (output[i] == 0x2D) output[i] = 0x2010;\r\n\t\tif (output[0] == HYPHEN) output[0] = UNICODE_HYPHEN;\r\n\t\tlet end = output.length-1;\r\n\t\tif (output[end] == HYPHEN) output[end] = UNICODE_HYPHEN;\r\n\t\t*/ // 20230123: WHATWG URL uses \"CheckHyphens\" false\n        // https://url.spec.whatwg.org/#idna\n        // update ethereum symbol\n        // ξ => Ξ if not greek\n        if (type !== \"Greek\") array_replace(output, 0x3BE, 0x39E);\n    // 20221213: fixes bidi subdomain issue, but breaks invariant (200E is disallowed)\n    // could be fixed with special case for: 2D (.) + 200E (LTR)\n    // https://discuss.ens.domains/t/bidi-label-ordering-spoof/15824\n    //output.splice(0, 0, 0x200E);\n    }\n    return flatten(labels);\n}\nfunction array_replace(v, a, b) {\n    let prev = 0;\n    while(true){\n        let next = v.indexOf(a, prev);\n        if (next < 0) break;\n        v[next] = b;\n        prev = next + 1;\n    }\n}\nfunction ens_split(name, preserve_emoji) {\n    return split(name, nfc, preserve_emoji ? (x)=>x.slice() : filter_fe0f); // emoji are exposed so copy\n}\nfunction split(name, nf, ef) {\n    if (!name) return []; // 20230719: empty name allowance\n    init();\n    let offset = 0;\n    // https://unicode.org/reports/tr46/#Validity_Criteria\n    // 4.) \"The label must not contain a U+002E ( . ) FULL STOP.\"\n    return name.split(STOP_CH).map((label)=>{\n        let input = explode_cp(label);\n        let info = {\n            input,\n            offset\n        };\n        offset += input.length + 1; // + stop\n        try {\n            // 1.) \"The label must be in Unicode Normalization Form NFC\"\n            let tokens = info.tokens = tokens_from_str(input, nf, ef);\n            let token_count = tokens.length;\n            let type;\n            if (!token_count) {\n                //norm = [];\n                //type = 'None'; // use this instead of next match, \"ASCII\"\n                // 20230120: change to strict\n                // https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59\n                throw new Error(\"empty label\");\n            }\n            let norm = info.output = tokens.flat();\n            check_leading_underscore(norm);\n            let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji; // same as: tokens.some(x => x.is_emoji);\n            if (!emoji && norm.every((cp)=>cp < 0x80)) {\n                // 20230123: matches matches WHATWG, see note 3.3\n                check_label_extension(norm); // only needed for ascii\n                // cant have fenced\n                // cant have cm\n                // cant have wholes\n                // see derive: \"Fastpath ASCII\"\n                type = \"ASCII\";\n            } else {\n                let chars = tokens.flatMap((x)=>x.is_emoji ? [] : x); // all of the nfc tokens concat together\n                if (!chars.length) {\n                    type = \"Emoji\";\n                } else {\n                    // 5.) \"The label must not begin with a combining mark, that is: General_Category=Mark.\"\n                    if (CM.has(norm[0])) throw error_placement(\"leading combining mark\");\n                    for(let i = 1; i < token_count; i++){\n                        let cps = tokens[i];\n                        if (!cps.is_emoji && CM.has(cps[0])) {\n                            // bidi_qq() not needed since emoji is LTR and cps is a CM\n                            throw error_placement('emoji + combining mark: \"'.concat(str_from_cps(tokens[i - 1]), \" + \").concat(safe_str_from_cps([\n                                cps[0]\n                            ]), '\"'));\n                        }\n                    }\n                    check_fenced(norm);\n                    let unique = Array_from(new Set(chars));\n                    let [g] = determine_group(unique); // take the first match\n                    // see derive: \"Matching Groups have Same CM Style\"\n                    // alternative: could form a hybrid type: Latin/Japanese/...\t\n                    check_group(g, chars); // need text in order\n                    check_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)\n                    type = g.N;\n                // 20230121: consider exposing restricted flag\n                // it's simpler to just check for 'Restricted'\n                // or even better: type.endsWith(']')\n                //if (g.R) info.restricted = true;\n                }\n            }\n            info.type = type;\n        } catch (err) {\n            info.error = err; // use full error object\n        }\n        return info;\n    });\n}\nfunction check_whole(group, unique) {\n    let maker;\n    let shared = [];\n    for (let cp of unique){\n        let whole = WHOLE_MAP.get(cp);\n        if (whole === UNIQUE_PH) return; // unique, non-confusable\n        if (whole) {\n            let set = whole.M.get(cp); // groups which have a character that look-like this character\n            maker = maker ? maker.filter((g)=>set.has(g)) : Array_from(set);\n            if (!maker.length) return; // confusable intersection is empty\n        } else {\n            shared.push(cp);\n        }\n    }\n    if (maker) {\n        // we have 1+ confusable\n        // check if any of the remaining groups\n        // contain the shared characters too\n        for (let g of maker){\n            if (shared.every((cp)=>group_has_cp(g, cp))) {\n                throw new Error(\"whole-script confusable: \".concat(group.N, \"/\").concat(g.N));\n            }\n        }\n    }\n}\n// assumption: unique.size > 0\n// returns list of matching groups\nfunction determine_group(unique) {\n    let groups = GROUPS;\n    for (let cp of unique){\n        // note: we need to dodge CM that are whitelisted\n        // but that code isn't currently necessary\n        let gs = groups.filter((g)=>group_has_cp(g, cp));\n        if (!gs.length) {\n            if (!GROUPS.some((g)=>group_has_cp(g, cp))) {\n                // the character was composed of valid parts\n                // but it's NFC form is invalid\n                // 20230716: change to more exact statement, see: ENSNormalize.{cs,java}\n                // note: this doesn't have to be a composition\n                // 20230720: change to full check\n                throw error_disallowed(cp); // this should be rare\n            } else {\n                // there is no group that contains all these characters\n                // throw using the highest priority group that matched\n                // https://www.unicode.org/reports/tr39/#mixed_script_confusables\n                throw error_group_member(groups[0], cp);\n            }\n        }\n        groups = gs;\n        if (gs.length == 1) break; // there is only one group left\n    }\n    // there are at least 1 group(s) with all of these characters\n    return groups;\n}\n// throw on first error\nfunction flatten(split) {\n    return split.map((param)=>{\n        let { input, error, output } = param;\n        if (error) {\n            // don't print label again if just a single label\n            let msg = error.message;\n            // bidi_qq() only necessary if msg is digits\n            throw new Error(split.length == 1 ? msg : \"Invalid label \".concat(bidi_qq(safe_str_from_cps(input, 63)), \": \").concat(msg));\n        }\n        return str_from_cps(output);\n    }).join(STOP_CH);\n}\nfunction error_disallowed(cp) {\n    // TODO: add cp to error?\n    return new Error(\"disallowed character: \".concat(quoted_cp(cp)));\n}\nfunction error_group_member(g, cp) {\n    let quoted = quoted_cp(cp);\n    let gg = GROUPS.find((g)=>g.P.has(cp)); // only check primary\n    if (gg) {\n        quoted = \"\".concat(gg.N, \" \").concat(quoted);\n    }\n    return new Error(\"illegal mixture: \".concat(g.N, \" + \").concat(quoted));\n}\nfunction error_placement(where) {\n    return new Error(\"illegal placement: \".concat(where));\n}\n// assumption: cps.length > 0\n// assumption: cps[0] isn't a CM\n// assumption: the previous character isn't an emoji\nfunction check_group(g, cps) {\n    for (let cp of cps){\n        if (!group_has_cp(g, cp)) {\n            // for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. \"e{300}{300}\"\n            // at the moment, it's unnecessary to introduce an extra error type\n            // until there exists a whitelisted multi-character\n            //   eg. if (M < 0 && is_combining_mark(cp)) { ... }\n            // there are 3 cases:\n            //   1. illegal cm for wrong group => mixture error\n            //   2. illegal cm for same group => cm error\n            //       requires set of whitelist cm per group: \n            //        eg. new Set([...g.P, ...g.Q].flatMap(nfc).filter(cp => CM.has(cp)))\n            //   3. wrong group => mixture error\n            throw error_group_member(g, cp);\n        }\n    }\n    //if (M >= 0) { // we have a known fixed cm count\n    if (g.M) {\n        let decomposed = nfd(cps);\n        for(let i = 1, e = decomposed.length; i < e; i++){\n            // 20230210: bugfix: using cps instead of decomposed h/t Carbon225\n            /*\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t\t*/ // 20230217: switch to NSM counting\n            // https://www.unicode.org/reports/tr39/#Optional_Detection\n            if (NSM.has(decomposed[i])) {\n                let j = i + 1;\n                for(let cp; j < e && NSM.has(cp = decomposed[j]); j++){\n                    // a. Forbid sequences of the same nonspacing mark.\n                    for(let k = i; k < j; k++){\n                        if (decomposed[k] == cp) {\n                            throw new Error(\"duplicate non-spacing marks: \".concat(quoted_cp(cp)));\n                        }\n                    }\n                }\n                // parse to end so we have full nsm count\n                // b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).\n                if (j - i > NSM_MAX) {\n                    // note: this slice starts with a base char or spacing-mark cm\n                    throw new Error(\"excessive non-spacing marks: \".concat(bidi_qq(safe_str_from_cps(decomposed.slice(i - 1, j))), \" (\").concat(j - i, \"/\").concat(NSM_MAX, \")\"));\n                }\n                i = j;\n            }\n        }\n    }\n// *** this code currently isn't needed ***\n/*\r\n\tlet cm_whitelist = M instanceof Map;\r\n\tfor (let i = 0, e = cps.length; i < e; ) {\r\n\t\tlet cp = cps[i++];\r\n\t\tlet seqs = cm_whitelist && M.get(cp);\r\n\t\tif (seqs) { \r\n\t\t\t// list of codepoints that can follow\r\n\t\t\t// if this exists, this will always be 1+\r\n\t\t\tlet j = i;\r\n\t\t\twhile (j < e && CM.has(cps[j])) j++;\r\n\t\t\tlet cms = cps.slice(i, j);\r\n\t\t\tlet match = seqs.find(seq => !compare_arrays(seq, cms));\r\n\t\t\tif (!match) throw new Error(`disallowed combining mark sequence: \"${safe_str_from_cps([cp, ...cms])}\"`);\r\n\t\t\ti = j;\r\n\t\t} else if (!V.has(cp)) {\r\n\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\tlet quoted = quoted_cp(cp);\r\n\t\t\tfor (let cp of cps) {\r\n\t\t\t\tlet u = UNIQUE.get(cp);\r\n\t\t\t\tif (u && u !== g) {\r\n\t\t\t\t\t// if both scripts are restricted this error is confusing\r\n\t\t\t\t\t// because we don't differentiate RestrictedA from RestrictedB \r\n\t\t\t\t\tif (!u.R) quoted = `${quoted} is ${u.N}`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(`disallowed ${g.N} character: ${quoted}`);\r\n\t\t\t//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);\r\n\t\t\t//throw new Error(`${g.N} does not allow: ${quoted}`);\r\n\t\t}\r\n\t}\r\n\tif (!cm_whitelist) {\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: \"${str_from_cps(decomposed.slice(i-1, j))}\" (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t*/ }\n// given a list of codepoints\n// returns a list of lists, where emoji are a fully-qualified (as Array subclass)\n// eg. explode_cp(\"abc💩d\") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]\n// 20230818: rename for 'process' name collision h/t Javarome\n// https://github.com/adraffy/ens-normalize.js/issues/23\nfunction tokens_from_str(input, nf, ef) {\n    let ret = [];\n    let chars = [];\n    input = input.slice().reverse(); // flip so we can pop\n    while(input.length){\n        let emoji = consume_emoji_reversed(input);\n        if (emoji) {\n            if (chars.length) {\n                ret.push(nf(chars));\n                chars = [];\n            }\n            ret.push(ef(emoji));\n        } else {\n            let cp = input.pop();\n            if (VALID.has(cp)) {\n                chars.push(cp);\n            } else {\n                let cps = MAPPED.get(cp);\n                if (cps) {\n                    chars.push(...cps); // less than 10 elements\n                } else if (!IGNORED.has(cp)) {\n                    // 20230912: unicode 15.1 changed the order of processing such that\n                    // disallowed parts are only rejected after NFC\n                    // https://unicode.org/reports/tr46/#Validity_Criteria\n                    // this doesn't impact normalization as of today\n                    // technically, this error can be removed as the group logic will apply similar logic\n                    // however the error type might be less clear\n                    throw error_disallowed(cp);\n                }\n            }\n        }\n    }\n    if (chars.length) {\n        ret.push(nf(chars));\n    }\n    return ret;\n}\nfunction filter_fe0f(cps) {\n    return cps.filter((cp)=>cp != FE0F);\n}\n// given array of codepoints\n// returns the longest valid emoji sequence (or undefined if no match)\n// *MUTATES* the supplied array\n// disallows interleaved ignored characters\n// fills (optional) eaten array with matched codepoints\nfunction consume_emoji_reversed(cps, eaten) {\n    let node = EMOJI_ROOT;\n    let emoji;\n    let pos = cps.length;\n    while(pos){\n        node = node.get(cps[--pos]);\n        if (!node) break;\n        let { V } = node;\n        if (V) {\n            emoji = V;\n            if (eaten) eaten.push(...cps.slice(pos).reverse()); // (optional) copy input, used for ens_tokenize()\n            cps.length = pos; // truncate\n        }\n    }\n    return emoji;\n}\n// ************************************************************\n// tokenizer \nconst TY_VALID = \"valid\";\nconst TY_MAPPED = \"mapped\";\nconst TY_IGNORED = \"ignored\";\nconst TY_DISALLOWED = \"disallowed\";\nconst TY_EMOJI = \"emoji\";\nconst TY_NFC = \"nfc\";\nconst TY_STOP = \"stop\";\nfunction ens_tokenize(name) {\n    let { nf = true } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    init();\n    let input = explode_cp(name).reverse();\n    let eaten = [];\n    let tokens = [];\n    while(input.length){\n        let emoji = consume_emoji_reversed(input, eaten);\n        if (emoji) {\n            tokens.push({\n                type: TY_EMOJI,\n                emoji: emoji.slice(),\n                input: eaten,\n                cps: filter_fe0f(emoji)\n            });\n            eaten = []; // reset buffer\n        } else {\n            let cp = input.pop();\n            if (cp == STOP) {\n                tokens.push({\n                    type: TY_STOP,\n                    cp\n                });\n            } else if (VALID.has(cp)) {\n                tokens.push({\n                    type: TY_VALID,\n                    cps: [\n                        cp\n                    ]\n                });\n            } else if (IGNORED.has(cp)) {\n                tokens.push({\n                    type: TY_IGNORED,\n                    cp\n                });\n            } else {\n                let cps = MAPPED.get(cp);\n                if (cps) {\n                    tokens.push({\n                        type: TY_MAPPED,\n                        cp,\n                        cps: cps.slice()\n                    });\n                } else {\n                    tokens.push({\n                        type: TY_DISALLOWED,\n                        cp\n                    });\n                }\n            }\n        }\n    }\n    if (nf) {\n        for(let i = 0, start = -1; i < tokens.length; i++){\n            let token = tokens[i];\n            if (is_valid_or_mapped(token.type)) {\n                if (requires_check(token.cps)) {\n                    let end = i + 1;\n                    for(let pos = end; pos < tokens.length; pos++){\n                        let { type, cps } = tokens[pos];\n                        if (is_valid_or_mapped(type)) {\n                            if (!requires_check(cps)) break;\n                            end = pos + 1;\n                        } else if (type !== TY_IGNORED) {\n                            break;\n                        }\n                    }\n                    if (start < 0) start = i;\n                    let slice = tokens.slice(start, end);\n                    let cps0 = slice.flatMap((x)=>is_valid_or_mapped(x.type) ? x.cps : []); // strip junk tokens\n                    let cps = nfc(cps0);\n                    if (compare_arrays(cps, cps0)) {\n                        tokens.splice(start, end - start, {\n                            type: TY_NFC,\n                            input: cps0,\n                            cps,\n                            tokens0: collapse_valid_tokens(slice),\n                            tokens: ens_tokenize(str_from_cps(cps), {\n                                nf: false\n                            })\n                        });\n                        i = start;\n                    } else {\n                        i = end - 1; // skip to end of slice\n                    }\n                    start = -1; // reset\n                } else {\n                    start = i; // remember last\n                }\n            } else if (token.type !== TY_IGNORED) {\n                start = -1; // reset\n            }\n        }\n    }\n    return collapse_valid_tokens(tokens);\n}\nfunction is_valid_or_mapped(type) {\n    return type == TY_VALID || type == TY_MAPPED;\n}\nfunction requires_check(cps) {\n    return cps.some((cp)=>NFC_CHECK.has(cp));\n}\nfunction collapse_valid_tokens(tokens) {\n    for(let i = 0; i < tokens.length; i++){\n        if (tokens[i].type == TY_VALID) {\n            let j = i + 1;\n            while(j < tokens.length && tokens[j].type == TY_VALID)j++;\n            tokens.splice(i, j - i, {\n                type: TY_VALID,\n                cps: tokens.slice(i, j).flatMap((x)=>x.cps)\n            });\n        }\n    }\n    return tokens;\n}\n\nvar _c;\n$RefreshReg$(_c, \"Array_from\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvQGFkcmFmZnkvZW5zLW5vcm1hbGl6ZS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLG1DQUFtQztBQUNuQyxzREFBc0Q7QUFDdEQsNEVBQTRFO0FBQzVFLDREQUE0RDtBQUM1RCw0RUFBNEU7QUFDNUUsSUFBSUEsZUFBZTtBQUNuQixNQUFNQyxTQUFTLElBQUlDLElBQUk7SUFBQztRQUFDO1FBQUs7S0FBYTtJQUFDO1FBQUM7UUFBSztLQUFpQjtJQUFDO1FBQUM7UUFBTTtLQUFhO0NBQUM7QUFDekYsTUFBTUMsVUFBVTtBQUVoQixTQUFTQyxrQkFBa0JDLEtBQUs7SUFDL0IsSUFBSUMsTUFBTTtJQUNWLFNBQVNDO1FBQVEsT0FBTyxLQUFNLENBQUNELE1BQU0sSUFBSSxJQUFLRCxLQUFLLENBQUNDLE1BQU07SUFBRTtJQUU1RCw2QkFBNkI7SUFDN0IsSUFBSUUsZUFBZUQ7SUFDbkIsSUFBSUUsUUFBUTtJQUNaLElBQUlDLE1BQU07UUFBQztRQUFHO0tBQUUsRUFBRSwrQkFBK0I7SUFDakQsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILGNBQWNHLElBQUs7UUFDdENELElBQUlFLElBQUksQ0FBQ0gsU0FBU0Y7SUFDbkI7SUFFQSw0REFBNEQ7SUFDNUQsSUFBSU0sT0FBT047SUFDWCxJQUFJTyxjQUFjUjtJQUNsQkEsT0FBT087SUFFUCxJQUFJRSxhQUFhO0lBQ2pCLElBQUlDLGNBQWM7SUFDbEIsU0FBU0M7UUFDUixJQUFJRixjQUFjLEdBQUc7WUFDcEIsc0NBQXNDO1lBQ3RDLGdDQUFnQztZQUNoQ0MsY0FBYyxlQUFnQixJQUFLWCxLQUFLLENBQUNDLE1BQU07WUFDL0NTLGFBQWE7UUFDZDtRQUNBLE9BQU8sZUFBZ0IsRUFBRUEsYUFBYztJQUN4QztJQUVBLE1BQU1HLElBQUk7SUFDVixNQUFNQyxPQUFPLEtBQUdEO0lBQ2hCLE1BQU1FLE9BQU9ELFNBQVM7SUFDdEIsTUFBTUUsT0FBT0QsUUFBUTtJQUNyQixNQUFNRSxPQUFPSCxPQUFPO0lBRXBCLGdCQUFnQjtJQUNoQixJQUFJSSxXQUFXO0lBQ2YsSUFBSyxJQUFJWixJQUFJLEdBQUdBLElBQUlPLEdBQUdQLElBQUtZLFdBQVcsWUFBYSxJQUFLTjtJQUV6RCxJQUFJTyxVQUFVLEVBQUU7SUFDaEIsSUFBSUMsTUFBTTtJQUNWLElBQUlDLFFBQVFQLE1BQU0scUJBQXFCO0lBQ3ZDLE1BQU8sS0FBTTtRQUNaLElBQUlRLFFBQVFDLEtBQUtDLEtBQUssQ0FBQyxDQUFDLENBQUVOLFdBQVdFLE1BQU0sS0FBS2hCLFFBQVMsS0FBS2lCO1FBQzlELElBQUlJLFFBQVE7UUFDWixJQUFJQyxNQUFNdkI7UUFDVixNQUFPdUIsTUFBTUQsUUFBUSxFQUFHO1lBQ3ZCLElBQUlFLE1BQU0sUUFBU0QsUUFBUztZQUM1QixJQUFJSixRQUFRakIsR0FBRyxDQUFDc0IsSUFBSSxFQUFFO2dCQUNyQkQsTUFBTUM7WUFDUCxPQUFPO2dCQUNORixRQUFRRTtZQUNUO1FBQ0Q7UUFDQSxJQUFJRixTQUFTLEdBQUcsT0FBTywyQkFBMkI7UUFDbEROLFFBQVFaLElBQUksQ0FBQ2tCO1FBQ2IsSUFBSUcsSUFBSVIsTUFBTUcsS0FBS0MsS0FBSyxDQUFDSCxRQUFRaEIsR0FBRyxDQUFDb0IsTUFBTSxHQUFLckI7UUFDaEQsSUFBSXlCLElBQUlULE1BQU1HLEtBQUtDLEtBQUssQ0FBQ0gsUUFBUWhCLEdBQUcsQ0FBQ29CLFFBQU0sRUFBRSxHQUFHckIsU0FBUztRQUN6RCxNQUFPLENBQUMsQ0FBQ3dCLElBQUlDLENBQUFBLElBQUtkLElBQUcsS0FBTSxFQUFHO1lBQzdCRyxXQUFXLFlBQWEsSUFBS0QsT0FBT0w7WUFDcENnQixJQUFJLEtBQU0sSUFBS1g7WUFDZlksSUFBSSxLQUFNLElBQUtaLE9BQU87UUFDdkI7UUFDQSxNQUFPVyxJQUFJLENBQUNDLElBQUliLEtBQU07WUFDckJFLFdBQVcsV0FBWUgsT0FBUyxZQUFhLElBQU1FLFNBQVMsSUFBTUw7WUFDbEVnQixJQUFJLEtBQU0sSUFBS2I7WUFDZmMsSUFBSSxDQUFFQSxJQUFJZCxJQUFHLEtBQU0sSUFBS0EsT0FBTztRQUNoQztRQUNBSyxNQUFNUTtRQUNOUCxRQUFRLElBQUlRLElBQUlEO0lBQ2pCO0lBQ0EsSUFBSUUsU0FBUzNCLGVBQWU7SUFDNUIsT0FBT2dCLFFBQVFZLEdBQUcsQ0FBQ0MsQ0FBQUE7UUFDbEIsT0FBUUEsSUFBSUY7WUFDWCxLQUFLO2dCQUFHLE9BQU9BLFNBQVMsVUFBVyxNQUFNLENBQUNyQixjQUFjLElBQUksS0FBT1QsS0FBSyxDQUFDUyxjQUFjLElBQUksSUFBS1QsS0FBSyxDQUFDUyxjQUFjO1lBQ3BILEtBQUs7Z0JBQUcsT0FBT3FCLFNBQVMsUUFBUyxNQUFNLENBQUNyQixjQUFjLElBQUksSUFBS1QsS0FBSyxDQUFDUyxjQUFjO1lBQ25GLEtBQUs7Z0JBQUcsT0FBT3FCLFNBQVM5QixLQUFLLENBQUNTLGNBQWM7WUFDNUM7Z0JBQVMsT0FBT3VCLElBQUk7UUFDckI7SUFDRDtBQUNEO0FBRUEsb0RBQW9EO0FBQ3BELFNBQVNDLGFBQWFDLENBQUM7SUFDdEIsSUFBSWpDLE1BQU07SUFDVixPQUFPLElBQU1pQyxDQUFDLENBQUNqQyxNQUFNO0FBQ3RCO0FBQ0EsU0FBU2tDLHdCQUF3QkMsQ0FBQztJQUNqQyxPQUFPSCxhQUFhbEMsa0JBQWtCc0MsWUFBWUQ7QUFDbkQ7QUFFQSx1QkFBdUI7QUFDdkIsMkNBQTJDO0FBQzNDLDJFQUEyRTtBQUMzRSxTQUFTQyxZQUFZRCxDQUFDO0lBQ3JCLElBQUlFLFNBQVMsRUFBRTtJQUNmO1dBQUk7S0FBbUUsQ0FBQ0MsT0FBTyxDQUFDLENBQUNDLEdBQUdsQyxJQUFNZ0MsTUFBTSxDQUFDRSxFQUFFQyxVQUFVLENBQUMsR0FBRyxHQUFHbkM7SUFDcEgsSUFBSW9DLElBQUlOLEVBQUVPLE1BQU07SUFDaEIsSUFBSUMsTUFBTSxJQUFJQyxXQUFXLElBQUtILEtBQU07SUFDcEMsSUFBSyxJQUFJcEMsSUFBSSxHQUFHTCxNQUFNLEdBQUc2QyxRQUFRLEdBQUdDLFFBQVEsR0FBR3pDLElBQUlvQyxHQUFHcEMsSUFBSztRQUMxRHlDLFFBQVEsU0FBVSxJQUFLVCxNQUFNLENBQUNGLEVBQUVLLFVBQVUsQ0FBQ25DLEdBQUc7UUFDOUN3QyxTQUFTO1FBQ1QsSUFBSUEsU0FBUyxHQUFHO1lBQ2ZGLEdBQUcsQ0FBQzNDLE1BQU0sR0FBSThDLFNBQVVELENBQUFBLFNBQVM7UUFDbEM7SUFDRDtJQUNBLE9BQU9GO0FBQ1I7QUFFQSxzQ0FBc0M7QUFDdEMsU0FBU0ksT0FBTzFDLENBQUM7SUFDaEIsT0FBTyxJQUFLLElBQU0sQ0FBQ0EsS0FBSyxJQUFNQSxLQUFLO0FBQ3BDO0FBRUEsU0FBUzJDLFlBQVlQLENBQUMsRUFBRVEsSUFBSTtJQUMzQixJQUFJaEIsSUFBSWlCLE1BQU1UO0lBQ2QsSUFBSyxJQUFJcEMsSUFBSSxHQUFHMEIsSUFBSSxHQUFHMUIsSUFBSW9DLEdBQUdwQyxJQUFLNEIsQ0FBQyxDQUFDNUIsRUFBRSxHQUFHMEIsS0FBS2dCLE9BQU9FO0lBQ3RELE9BQU9oQjtBQUNSO0FBRUEsZ0NBQWdDO0FBQ2hDLFNBQVNrQixZQUFZRixJQUFJO1FBQUVHLE9BQUFBLGlFQUFPO0lBQ2pDLElBQUlULE1BQU0sRUFBRTtJQUNaLE1BQU8sS0FBTTtRQUNaLElBQUlaLElBQUlrQjtRQUNSLElBQUlSLElBQUlRO1FBQ1IsSUFBSSxDQUFDUixHQUFHO1FBQ1JXLFFBQVFyQjtRQUNSLElBQUssSUFBSTFCLElBQUksR0FBR0EsSUFBSW9DLEdBQUdwQyxJQUFLO1lBQzNCc0MsSUFBSXJDLElBQUksQ0FBQzhDLE9BQU8vQztRQUNqQjtRQUNBK0MsUUFBUVgsSUFBSTtJQUNiO0lBQ0EsT0FBT0U7QUFDUjtBQUVBLFNBQVNVLG1CQUFtQkosSUFBSTtJQUMvQixPQUFPSyxpQkFBaUI7UUFDdkIsSUFBSXJCLElBQUlrQixZQUFZRjtRQUNwQixJQUFJaEIsRUFBRVMsTUFBTSxFQUFFLE9BQU9UO0lBQ3RCO0FBQ0Q7QUFFQSx5QkFBeUI7QUFDekIsU0FBU3NCLFlBQVlOLElBQUk7SUFDeEIsSUFBSU4sTUFBTSxFQUFFO0lBQ1osTUFBTyxLQUFNO1FBQ1osSUFBSWEsSUFBSVA7UUFDUixJQUFJTyxLQUFLLEdBQUc7UUFDWmIsSUFBSXJDLElBQUksQ0FBQ21ELGtCQUFrQkQsR0FBR1A7SUFDL0I7SUFDQSxNQUFPLEtBQU07UUFDWixJQUFJTyxJQUFJUCxTQUFTO1FBQ2pCLElBQUlPLElBQUksR0FBRztRQUNYYixJQUFJckMsSUFBSSxDQUFDb0QsdUJBQXVCRixHQUFHUDtJQUNwQztJQUNBLE9BQU9OLElBQUlnQixJQUFJO0FBQ2hCO0FBRUEsMkJBQTJCO0FBQzNCLDhCQUE4QjtBQUM5QixTQUFTTCxpQkFBaUJMLElBQUk7SUFDN0IsSUFBSWhCLElBQUksRUFBRTtJQUNWLE1BQU8sS0FBTTtRQUNaLElBQUlGLElBQUlrQixLQUFLaEIsRUFBRVMsTUFBTTtRQUNyQixJQUFJLENBQUNYLEdBQUc7UUFDUkUsRUFBRTNCLElBQUksQ0FBQ3lCO0lBQ1I7SUFDQSxPQUFPRTtBQUNSO0FBRUEsNkJBQTZCO0FBQzdCLCtCQUErQjtBQUMvQixTQUFTMkIsZ0JBQWdCbkIsQ0FBQyxFQUFFZSxDQUFDLEVBQUVQLElBQUk7SUFDbEMsSUFBSVksSUFBSVgsTUFBTVQsR0FBR3FCLElBQUksR0FBR2hDLEdBQUcsQ0FBQyxJQUFNLEVBQUU7SUFDcEMsSUFBSyxJQUFJekIsSUFBSSxHQUFHQSxJQUFJbUQsR0FBR25ELElBQUs7UUFDM0IyQyxZQUFZUCxHQUFHUSxNQUFNWCxPQUFPLENBQUMsQ0FBQ1AsR0FBR2dDLElBQU1GLENBQUMsQ0FBQ0UsRUFBRSxDQUFDekQsSUFBSSxDQUFDeUI7SUFDbEQ7SUFDQSxPQUFPOEI7QUFDUjtBQUVBLDJEQUEyRDtBQUMzRCxxREFBcUQ7QUFDckQsU0FBU0osa0JBQWtCRCxDQUFDLEVBQUVQLElBQUk7SUFDakMsSUFBSWUsS0FBSyxJQUFJZjtJQUNiLElBQUlnQixLQUFLaEI7SUFDVCxJQUFJaUIsS0FBS1osaUJBQWlCTDtJQUMxQixJQUFJWSxJQUFJRCxnQkFBZ0JNLEdBQUd4QixNQUFNLEVBQUUsSUFBRWMsR0FBR1A7SUFDeEMsT0FBT1ksRUFBRU0sT0FBTyxDQUFDLENBQUNsQyxHQUFHNUI7UUFDcEIsSUFBSSxDQUFDMEIsR0FBRyxHQUFHcUMsR0FBRyxHQUFHbkM7UUFDakIsT0FBT2lCLE1BQU1nQixFQUFFLENBQUM3RCxFQUFFLEVBQUV5RCxJQUFJLEdBQUdoQyxHQUFHLENBQUMsQ0FBQ3VDLEdBQUdOO1lBQ2xDLElBQUlPLE9BQU9QLElBQUlFO1lBQ2YsT0FBTztnQkFBQ2xDLElBQUlnQyxJQUFJQztnQkFBSUksR0FBR3RDLEdBQUcsQ0FBQ3lDLENBQUFBLElBQUtBLElBQUlEO2FBQU07UUFDM0M7SUFDRDtBQUNEO0FBRUEsMkJBQTJCO0FBQzNCLHdCQUF3QjtBQUN4QixTQUFTWix1QkFBdUJGLENBQUMsRUFBRVAsSUFBSTtJQUN0QyxJQUFJUixJQUFJLElBQUlRO0lBQ1osSUFBSVksSUFBSUQsZ0JBQWdCbkIsR0FBRyxJQUFFZSxHQUFHUDtJQUNoQyxPQUFPWSxFQUFFL0IsR0FBRyxDQUFDRyxDQUFBQSxJQUFLO1lBQUNBLENBQUMsQ0FBQyxFQUFFO1lBQUVBLEVBQUV1QyxLQUFLLENBQUM7U0FBRztBQUNyQztBQUdBLFNBQVNDLFVBQVV4QixJQUFJO0lBQ3RCLElBQUlOLE1BQU0sRUFBRTtJQUNaLElBQUkrQixTQUFTdkIsWUFBWUY7SUFDekIwQixPQUFPQyxPQUFPLEVBQUUsR0FBRyxFQUFFO0lBQ3JCLE9BQU9qQyxLQUFLLGFBQWE7SUFDekIsU0FBU2lDLE9BQU9DLENBQUM7UUFDaEIsSUFBSUMsSUFBSTdCLFFBQVEsNEJBQTRCO1FBQzVDLElBQUk4QixJQUFJekIsaUJBQWlCO1lBQ3hCLElBQUkwQixNQUFNN0IsWUFBWUYsTUFBTW5CLEdBQUcsQ0FBQ3pCLENBQUFBLElBQUtxRSxNQUFNLENBQUNyRSxFQUFFO1lBQzlDLElBQUkyRSxJQUFJdEMsTUFBTSxFQUFFLE9BQU9rQyxPQUFPSTtRQUMvQjtRQUNBLE9BQU87WUFBQ0Y7WUFBR0M7WUFBR0Y7UUFBQztJQUNoQjtJQUNBLFNBQVNGLE9BQU8sS0FBTSxFQUFFSyxHQUFHLEVBQUVDLEtBQUs7WUFBbEIsRUFBQ0gsQ0FBQyxFQUFFQyxDQUFDLEVBQUMsR0FBTjtRQUNmLElBQUlELElBQUksS0FBS0csVUFBVUQsR0FBRyxDQUFDQSxJQUFJdEMsTUFBTSxHQUFDLEVBQUUsRUFBRTtRQUMxQyxJQUFJb0MsSUFBSSxHQUFHRyxRQUFRRCxHQUFHLENBQUNBLElBQUl0QyxNQUFNLEdBQUMsRUFBRTtRQUNwQyxJQUFJb0MsSUFBSSxHQUFHbkMsSUFBSXJDLElBQUksQ0FBQzBFO1FBQ3BCLEtBQUssSUFBSUUsTUFBTUgsRUFBRztZQUNqQixLQUFLLElBQUlJLE1BQU1ELEdBQUdMLENBQUMsQ0FBRTtnQkFDcEJGLE9BQU9PLElBQUk7dUJBQUlGO29CQUFLRztpQkFBRyxFQUFFRjtZQUMxQjtRQUNEO0lBQ0Q7QUFDRDtBQUVBLFNBQVNHLE9BQU9ELEVBQUU7SUFDakIsT0FBT0EsR0FBR0UsUUFBUSxDQUFDLElBQUlDLFdBQVcsR0FBR0MsUUFBUSxDQUFDLEdBQUc7QUFDbEQ7QUFFQSxTQUFTQyxTQUFTTCxFQUFFO0lBQ25CLE9BQU8sSUFBZSxPQUFYQyxPQUFPRCxLQUFJLE1BQUksOENBQThDO0FBQ3pFO0FBRUE7Ozs7QUFJQSxHQUNBLFNBQVNNLFdBQVd0RCxDQUFDO0lBQ3BCLElBQUk2QyxNQUFNLEVBQUU7SUFDWixJQUFLLElBQUloRixNQUFNLEdBQUcwRixNQUFNdkQsRUFBRU8sTUFBTSxFQUFFMUMsTUFBTTBGLEtBQU87UUFDOUMsSUFBSVAsS0FBS2hELEVBQUV3RCxXQUFXLENBQUMzRjtRQUN2QkEsT0FBT21GLEtBQUssVUFBVSxJQUFJO1FBQzFCSCxJQUFJMUUsSUFBSSxDQUFDNkU7SUFDVjtJQUNBLE9BQU9IO0FBQ1I7QUFFQSxTQUFTWSxhQUFhWixHQUFHO0lBQ3hCLE1BQU1hLFFBQVE7SUFDZCxJQUFJSCxNQUFNVixJQUFJdEMsTUFBTTtJQUNwQixJQUFJZ0QsTUFBTUcsT0FBTyxPQUFPQyxPQUFPQyxhQUFhLElBQUlmO0lBQ2hELElBQUlnQixNQUFNLEVBQUU7SUFDWixJQUFLLElBQUkzRixJQUFJLEdBQUdBLElBQUlxRixLQUFPO1FBQzFCTSxJQUFJMUYsSUFBSSxDQUFDd0YsT0FBT0MsYUFBYSxJQUFJZixJQUFJUixLQUFLLENBQUNuRSxHQUFHQSxLQUFLd0Y7SUFDcEQ7SUFDQSxPQUFPRyxJQUFJQyxJQUFJLENBQUM7QUFDakI7QUFFQSxTQUFTQyxlQUFldkUsQ0FBQyxFQUFFQyxDQUFDO0lBQzNCLElBQUlhLElBQUlkLEVBQUVlLE1BQU07SUFDaEIsSUFBSUgsSUFBSUUsSUFBSWIsRUFBRWMsTUFBTTtJQUNwQixJQUFLLElBQUlyQyxJQUFJLEdBQUdrQyxLQUFLLEtBQUtsQyxJQUFJb0MsR0FBR3BDLElBQUtrQyxJQUFJWixDQUFDLENBQUN0QixFQUFFLEdBQUd1QixDQUFDLENBQUN2QixFQUFFO0lBQ3JELE9BQU9rQztBQUNSO0FBRUEsbUNBQW1DO0FBQ25DLHFEQUFxRDtBQUNyRCw0RUFBNEU7QUFDNUUsNERBQTREO0FBQzVELDRFQUE0RTtBQUM1RSxJQUFJNEQsYUFBYTtBQUVqQixvQ0FBb0M7QUFDcEMsK0JBQStCO0FBQy9CLHFCQUFxQjtBQUdyQixxQkFBcUI7QUFDckIscUVBQXFFO0FBQ3JFLE1BQU1DLEtBQUs7QUFDWCxNQUFNQyxLQUFLO0FBQ1gsTUFBTUMsS0FBSztBQUNYLE1BQU1DLEtBQUs7QUFDWCxNQUFNQyxVQUFVO0FBQ2hCLE1BQU1DLFVBQVU7QUFDaEIsTUFBTUMsVUFBVTtBQUNoQixNQUFNQyxVQUFVRixVQUFVQztBQUMxQixNQUFNRSxVQUFVSixVQUFVRztBQUMxQixNQUFNRSxLQUFLVCxLQUFLUTtBQUNoQixNQUFNRSxLQUFLVCxLQUFLRztBQUNoQixNQUFNTyxLQUFLVCxLQUFLRztBQUNoQixNQUFNTyxLQUFLVCxLQUFLRztBQUVoQixTQUFTTyxVQUFVQyxNQUFNO0lBQ3hCLE9BQU8sVUFBVyxLQUFNO0FBQ3pCO0FBQ0EsU0FBU0MsVUFBVUQsTUFBTTtJQUN4QixPQUFPQSxTQUFTO0FBQ2pCO0FBRUEsSUFBSUUsY0FBY0MsWUFBWUMsUUFBUUM7QUFFdEMsU0FBU0M7SUFDUixxQkFBcUI7SUFDckIsSUFBSUMsSUFBSXZGLHdCQUF3QmlFO0lBQ2hDaUIsZUFBZSxJQUFJeEgsSUFBSXlELG1CQUFtQm9FLEdBQUd0RCxPQUFPLENBQUMsQ0FBQ2xDLEdBQUc1QixJQUFNNEIsRUFBRUgsR0FBRyxDQUFDQyxDQUFBQSxJQUFLO2dCQUFDQTtnQkFBSTFCLElBQUUsS0FBTTthQUFHLEtBQUssY0FBYztJQUM3R2dILGFBQWEsSUFBSUssSUFBSXZFLFlBQVlzRTtJQUNqQ0gsU0FBUyxJQUFJMUg7SUFDYjJILFNBQVMsSUFBSTNIO0lBQ2IsS0FBSyxJQUFJLENBQUN1RixJQUFJSCxJQUFJLElBQUl6QixZQUFZa0UsR0FBSTtRQUNyQyxJQUFJLENBQUNKLFdBQVdNLEdBQUcsQ0FBQ3hDLE9BQU9ILElBQUl0QyxNQUFNLElBQUksR0FBRztZQUMzQyxJQUFJLENBQUNmLEdBQUdDLEVBQUUsR0FBR29EO1lBQ2IsSUFBSTRDLFNBQVNMLE9BQU9NLEdBQUcsQ0FBQ2xHO1lBQ3hCLElBQUksQ0FBQ2lHLFFBQVE7Z0JBQ1pBLFNBQVMsSUFBSWhJO2dCQUNiMkgsT0FBT08sR0FBRyxDQUFDbkcsR0FBR2lHO1lBQ2Y7WUFDQUEsT0FBT0UsR0FBRyxDQUFDbEcsR0FBR3VEO1FBQ2Y7UUFDQW1DLE9BQU9RLEdBQUcsQ0FBQzNDLElBQUlILElBQUkrQyxPQUFPLEtBQUssa0JBQWtCO0lBQ2xEO0FBQ0Esd0JBQXdCO0FBQ3hCLGlCQUFpQjtBQUNsQjtBQUVBLFNBQVNDLFVBQVU3QyxFQUFFO0lBQ3BCLE9BQU9BLE1BQU1pQixNQUFNakIsS0FBSzBCO0FBQ3pCO0FBRUEsU0FBU29CLGFBQWF0RyxDQUFDLEVBQUVDLENBQUM7SUFDekIsSUFBSUQsS0FBSzBFLE1BQU0xRSxJQUFJbUYsTUFBTWxGLEtBQUswRSxNQUFNMUUsSUFBSW1GLElBQUk7UUFDM0MsT0FBT1gsS0FBSyxDQUFDekUsSUFBSTBFLEVBQUMsSUFBS00sVUFBVSxDQUFDL0UsSUFBSTBFLEVBQUMsSUFBS0k7SUFDN0MsT0FBTyxJQUFJc0IsVUFBVXJHLE1BQU1DLElBQUkyRSxNQUFNM0UsSUFBSW9GLE1BQU0sQ0FBQ3JGLElBQUl5RSxFQUFDLElBQUtNLFdBQVcsR0FBRztRQUN2RSxPQUFPL0UsSUFBS0MsQ0FBQUEsSUFBSTJFLEVBQUM7SUFDbEIsT0FBTztRQUNOLElBQUkyQixTQUFTWCxPQUFPTSxHQUFHLENBQUNsRztRQUN4QixJQUFJdUcsUUFBUTtZQUNYQSxTQUFTQSxPQUFPTCxHQUFHLENBQUNqRztZQUNwQixJQUFJc0csUUFBUTtnQkFDWCxPQUFPQTtZQUNSO1FBQ0Q7UUFDQSxPQUFPLENBQUM7SUFDVDtBQUNEO0FBRUEsU0FBU0MsV0FBV25ELEdBQUc7SUFDdEIsSUFBSSxDQUFDb0MsY0FBY0k7SUFDbkIsSUFBSTdFLE1BQU0sRUFBRTtJQUNaLElBQUlxRCxNQUFNLEVBQUU7SUFDWixJQUFJb0MsY0FBYztJQUNsQixTQUFTQyxJQUFJbEQsRUFBRTtRQUNkLElBQUltRCxLQUFLbEIsYUFBYVMsR0FBRyxDQUFDMUM7UUFDMUIsSUFBSW1ELElBQUk7WUFDUEYsY0FBYztZQUNkakQsTUFBTW1EO1FBQ1A7UUFDQTNGLElBQUlyQyxJQUFJLENBQUM2RTtJQUNWO0lBQ0EsS0FBSyxJQUFJQSxNQUFNSCxJQUFLO1FBQ25CLE1BQU8sS0FBTTtZQUNaLElBQUlHLEtBQUssTUFBTTtnQkFDZHhDLElBQUlyQyxJQUFJLENBQUM2RTtZQUNWLE9BQU8sSUFBSTZDLFVBQVU3QyxLQUFLO2dCQUN6QixJQUFJb0QsVUFBVXBELEtBQUtpQjtnQkFDbkIsSUFBSW9DLFVBQVVELFVBQVU1QixVQUFVO2dCQUNsQyxJQUFJOEIsVUFBVSxVQUFXOUIsVUFBV0QsVUFBVTtnQkFDOUMsSUFBSWdDLFVBQVVILFVBQVU3QjtnQkFDeEIyQixJQUFJaEMsS0FBS21DO2dCQUNUSCxJQUFJL0IsS0FBS21DO2dCQUNULElBQUlDLFVBQVUsR0FBR0wsSUFBSTlCLEtBQUttQztZQUMzQixPQUFPO2dCQUNOLElBQUlDLFNBQVNyQixPQUFPTyxHQUFHLENBQUMxQztnQkFDeEIsSUFBSXdELFFBQVE7b0JBQ1gzQyxJQUFJMUYsSUFBSSxJQUFJcUk7Z0JBQ2IsT0FBTztvQkFDTk4sSUFBSWxEO2dCQUNMO1lBQ0Q7WUFDQSxJQUFJLENBQUNhLElBQUl0RCxNQUFNLEVBQUU7WUFDakJ5QyxLQUFLYSxJQUFJNEMsR0FBRztRQUNiO0lBQ0Q7SUFDQSxJQUFJUixlQUFlekYsSUFBSUQsTUFBTSxHQUFHLEdBQUc7UUFDbEMsSUFBSW1HLFVBQVU1QixVQUFVdEUsR0FBRyxDQUFDLEVBQUU7UUFDOUIsSUFBSyxJQUFJdEMsSUFBSSxHQUFHQSxJQUFJc0MsSUFBSUQsTUFBTSxFQUFFckMsSUFBSztZQUNwQyxJQUFJaUksS0FBS3JCLFVBQVV0RSxHQUFHLENBQUN0QyxFQUFFO1lBQ3pCLElBQUlpSSxNQUFNLEtBQUtPLFdBQVdQLElBQUk7Z0JBQzdCTyxVQUFVUDtnQkFDVjtZQUNEO1lBQ0EsSUFBSXZFLElBQUkxRCxJQUFFO1lBQ1YsTUFBTyxLQUFNO2dCQUNaLElBQUl5SSxNQUFNbkcsR0FBRyxDQUFDb0IsSUFBRSxFQUFFO2dCQUNsQnBCLEdBQUcsQ0FBQ29CLElBQUUsRUFBRSxHQUFHcEIsR0FBRyxDQUFDb0IsRUFBRTtnQkFDakJwQixHQUFHLENBQUNvQixFQUFFLEdBQUcrRTtnQkFDVCxJQUFJLENBQUMvRSxHQUFHO2dCQUNSOEUsVUFBVTVCLFVBQVV0RSxHQUFHLENBQUMsRUFBRW9CLEVBQUU7Z0JBQzVCLElBQUk4RSxXQUFXUCxJQUFJO1lBQ3BCO1lBQ0FPLFVBQVU1QixVQUFVdEUsR0FBRyxDQUFDdEMsRUFBRTtRQUMzQjtJQUNEO0lBQ0EsT0FBT3NDO0FBQ1I7QUFFQSxTQUFTb0cseUJBQXlCOUcsQ0FBQztJQUNsQyxJQUFJVSxNQUFNLEVBQUU7SUFDWixJQUFJcUcsUUFBUSxFQUFFO0lBQ2QsSUFBSUMsVUFBVSxDQUFDO0lBQ2YsSUFBSUosVUFBVTtJQUNkLEtBQUssSUFBSTNCLFVBQVVqRixFQUFHO1FBQ3JCLElBQUlxRyxLQUFLckIsVUFBVUM7UUFDbkIsSUFBSS9CLEtBQUtnQyxVQUFVRDtRQUNuQixJQUFJK0IsV0FBVyxDQUFDLEdBQUc7WUFDbEIsSUFBSVgsTUFBTSxHQUFHO2dCQUNaVyxVQUFVOUQ7WUFDWCxPQUFPO2dCQUNOeEMsSUFBSXJDLElBQUksQ0FBQzZFO1lBQ1Y7UUFDRCxPQUFPLElBQUkwRCxVQUFVLEtBQUtBLFdBQVdQLElBQUk7WUFDeEMsSUFBSUEsTUFBTSxHQUFHO2dCQUNaM0YsSUFBSXJDLElBQUksQ0FBQzJJLFlBQVlEO2dCQUNyQkEsTUFBTXRHLE1BQU0sR0FBRztnQkFDZnVHLFVBQVU5RDtZQUNYLE9BQU87Z0JBQ042RCxNQUFNMUksSUFBSSxDQUFDNkU7WUFDWjtZQUNBMEQsVUFBVVA7UUFDWCxPQUFPO1lBQ04sSUFBSVksV0FBV2pCLGFBQWFnQixTQUFTOUQ7WUFDckMsSUFBSStELFlBQVksR0FBRztnQkFDbEJELFVBQVVDO1lBQ1gsT0FBTyxJQUFJTCxXQUFXLEtBQUtQLE1BQU0sR0FBRztnQkFDbkMzRixJQUFJckMsSUFBSSxDQUFDMkk7Z0JBQ1RBLFVBQVU5RDtZQUNYLE9BQU87Z0JBQ042RCxNQUFNMUksSUFBSSxDQUFDNkU7Z0JBQ1gwRCxVQUFVUDtZQUNYO1FBQ0Q7SUFDRDtJQUNBLElBQUlXLFdBQVcsR0FBRztRQUNqQnRHLElBQUlyQyxJQUFJLENBQUMySSxZQUFZRDtJQUN0QjtJQUNBLE9BQU9yRztBQUNSO0FBRUEsNEJBQTRCO0FBQzVCLFNBQVN3RyxJQUFJbkUsR0FBRztJQUNmLE9BQU9tRCxXQUFXbkQsS0FBS2xELEdBQUcsQ0FBQ3FGO0FBQzVCO0FBQ0EsU0FBU2lDLElBQUlwRSxHQUFHO0lBQ2YsT0FBTytELHlCQUF5QlosV0FBV25EO0FBQzVDO0FBRUEsTUFBTXFFLFNBQVM7QUFDZixNQUFNQyxPQUFPO0FBQ2IsTUFBTUMsVUFBVTtBQUNoQixNQUFNQyxPQUFPO0FBQ2IsTUFBTUMsWUFBWTtBQUVsQixxRUFBcUU7QUFDckUsTUFBTUMsYUFBYTNILENBQUFBLElBQUttQixNQUFNeUcsSUFBSSxDQUFDNUgsSUFBSSwwQkFBMEI7S0FBM0QySDtBQUVOLFNBQVNFLGFBQWFDLENBQUMsRUFBRTFFLEVBQUU7SUFDMUIsZ0ZBQWdGO0lBQ2hGLE9BQU8wRSxFQUFFQyxDQUFDLENBQUNuQyxHQUFHLENBQUN4QyxPQUFPMEUsRUFBRWhGLENBQUMsQ0FBQzhDLEdBQUcsQ0FBQ3hDO0FBQy9CO0FBRUEsTUFBTTRFLGNBQWM3RztJQUNuQixJQUFJOEcsV0FBVztRQUFFLE9BQU87SUFBTTtBQUMvQjtBQUVBLElBQUlDLFFBQVFDLFNBQVNDLElBQUlDLEtBQUtDLFFBQVFDLFdBQVdDLFFBQVFDLGFBQWFDLFdBQVdDLE9BQU9DLFlBQVlDO0FBRXBHLFNBQVNDO0lBQ1IsSUFBSVosUUFBUTtJQUVaLElBQUl4QyxJQUFJdkYsd0JBQXdCeEM7SUFDaEMsTUFBTW9MLG9CQUFvQixJQUFNM0gsWUFBWXNFO0lBQzVDLE1BQU1zRCxrQkFBa0IsSUFBTSxJQUFJckQsSUFBSW9EO0lBQ3RDLE1BQU1FLGVBQWUsQ0FBQ2xELEtBQUs3RixJQUFNQSxFQUFFSyxPQUFPLENBQUNQLENBQUFBLElBQUsrRixJQUFJTyxHQUFHLENBQUN0RztJQUV4RGtJLFNBQVMsSUFBSXJLLElBQUkyRCxZQUFZa0U7SUFDN0J5QyxVQUFVYSxtQkFBbUIsZ0VBQWdFO0lBRTdGOzs7Ozs7Q0FNQSxHQUNBLDZEQUE2RDtJQUM3RCw0REFBNEQ7SUFDNURaLEtBQUtXO0lBQ0xWLE1BQU0sSUFBSTFDLElBQUlvRCxvQkFBb0JoSixHQUFHLENBQUN6QixDQUFBQSxJQUFLOEosRUFBRSxDQUFDOUosRUFBRTtJQUNoRDhKLEtBQUssSUFBSXpDLElBQUl5QztJQUViRSxTQUFTVSxtQkFBbUIsd0NBQXdDO0lBQ3BFVCxZQUFZUyxtQkFBbUIsMkRBQTJEO0lBRTFGLElBQUlFLFNBQVM1SCxtQkFBbUJvRTtJQUNoQyxJQUFJeUQsZUFBZXpEO0lBQ25CLDhHQUE4RztJQUM5RyxNQUFNMEQsZUFBZTtRQUNwQiwwQ0FBMEM7UUFDMUMsSUFBSXJELE1BQU0sSUFBSUo7UUFDZG9ELG9CQUFvQnhJLE9BQU8sQ0FBQ2pDLENBQUFBLElBQUsySyxhQUFhbEQsS0FBS21ELE1BQU0sQ0FBQzVLLEVBQUU7UUFDNUQySyxhQUFhbEQsS0FBS2dEO1FBQ2xCLE9BQU9oRDtJQUNSO0lBQ0F5QyxTQUFTakgsaUJBQWlCakQsQ0FBQUE7UUFDekIsMENBQTBDO1FBQzFDLGdEQUFnRDtRQUNoRCxJQUFJTyxJQUFJMEMsaUJBQWlCbUUsR0FBRzNGLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS0EsSUFBRTtRQUN2QyxJQUFJbkIsRUFBRThCLE1BQU0sRUFBRTtZQUNiLElBQUkwSSxJQUFJL0ssS0FBSzZLLGNBQWMsK0JBQStCO1lBQzFEdEssQ0FBQyxDQUFDLEVBQUUsSUFBSSxJQUFJLGFBQWE7WUFDekJBLElBQUlnRixhQUFhaEY7WUFDakIsSUFBSXdLLEdBQUd4SyxJQUFFLGNBQWdCLE9BQUZBLEdBQUU7WUFDekIsSUFBSWtKLElBQUlxQixnQkFBZ0IsVUFBVTtZQUNsQyxJQUFJdEcsSUFBSXNHLGdCQUFnQixZQUFZO1lBQ3BDLElBQUlFLElBQUksQ0FBQzVELEtBQUssaUNBQWlDO1lBQy9DLDJDQUEyQztZQUMzQzs7Ozs7Ozs7Ozs7SUFXQyxHQUNELE9BQU87Z0JBQUM3RztnQkFBR2tKO2dCQUFHakY7Z0JBQUd3RztnQkFBR0Q7WUFBQztRQUN0QjtJQUNEO0lBRUEsMkJBQTJCO0lBQzNCWixjQUFjTztJQUNkTixZQUFZLElBQUk3SztJQUNoQixJQUFJMEwsU0FBU1Isb0JBQW9CUyxNQUFNLENBQUM3QixXQUFXYyxjQUFjZ0IsSUFBSSxDQUFDLENBQUM3SixHQUFHQyxJQUFNRCxJQUFFQyxJQUFJLGlCQUFpQjtJQUN2RzBKLE9BQU9oSixPQUFPLENBQUMsQ0FBQzZDLElBQUk5RTtRQUNuQixJQUFJb0wsSUFBSWhFO1FBQ1IsSUFBSWpFLElBQUk4SCxNQUFNLENBQUNqTCxFQUFFLEdBQUdvTCxJQUFJSCxNQUFNLENBQUNqTCxJQUFFb0wsRUFBRSxHQUFHO1lBQUNDLEdBQUcsRUFBRTtZQUFFTCxHQUFHLElBQUl6TDtRQUFLO1FBQzFENEQsRUFBRWtJLENBQUMsQ0FBQ3BMLElBQUksQ0FBQzZFLEtBQUssb0JBQW9CO1FBQ2xDLElBQUksQ0FBQ3FGLFlBQVk3QyxHQUFHLENBQUN4QyxLQUFLO1lBQ3pCc0YsVUFBVTNDLEdBQUcsQ0FBQzNDLElBQUkzQixJQUFLLDBCQUEwQjtRQUNsRDtJQUNEO0lBRUEsd0NBQXdDO0lBQ3hDLHNEQUFzRDtJQUN0RCxLQUFLLElBQUksRUFBQ2tJLENBQUMsRUFBRUwsQ0FBQyxFQUFDLElBQUksSUFBSTNELElBQUkrQyxVQUFVa0IsTUFBTSxJQUFLO1FBQy9DLG9EQUFvRDtRQUNwRCxJQUFJQyxPQUFPLEVBQUU7UUFDYixLQUFLLElBQUl6RyxNQUFNdUcsRUFBRztZQUNqQixJQUFJRyxLQUFLdEIsT0FBT3VCLE1BQU0sQ0FBQ2pDLENBQUFBLElBQUtELGFBQWFDLEdBQUcxRTtZQUM1QyxJQUFJNEcsTUFBTUgsS0FBS0ksSUFBSSxDQUFDO29CQUFDLEVBQUNDLENBQUMsRUFBQzt1QkFBS0osR0FBR0ssSUFBSSxDQUFDckMsQ0FBQUEsSUFBS29DLEVBQUV0RSxHQUFHLENBQUNrQzs7WUFDaEQsSUFBSSxDQUFDa0MsS0FBSztnQkFDVEEsTUFBTTtvQkFBQ0UsR0FBRyxJQUFJdkU7b0JBQU9nRSxHQUFHLEVBQUU7Z0JBQUE7Z0JBQzFCRSxLQUFLdEwsSUFBSSxDQUFDeUw7WUFDWDtZQUNBQSxJQUFJTCxDQUFDLENBQUNwTCxJQUFJLENBQUM2RTtZQUNYNkYsYUFBYWUsSUFBSUUsQ0FBQyxFQUFFSjtRQUNyQjtRQUNBLGtFQUFrRTtRQUNsRSxJQUFJTSxRQUFRUCxLQUFLekgsT0FBTyxDQUFDcEMsQ0FBQUEsSUFBSzJILFdBQVczSCxFQUFFa0ssQ0FBQyxJQUFJLHVDQUF1QztRQUN2RixLQUFLLElBQUksRUFBQ0EsQ0FBQyxFQUFFUCxDQUFDLEVBQUMsSUFBSUUsS0FBTTtZQUN4QixJQUFJUSxhQUFhLElBQUkxRSxJQUFJeUUsTUFBTUwsTUFBTSxDQUFDakMsQ0FBQUEsSUFBSyxDQUFDb0MsRUFBRXRFLEdBQUcsQ0FBQ2tDLE1BQU0sbUNBQW1DO1lBQzNGLEtBQUssSUFBSTFFLE1BQU11RyxFQUFHO2dCQUNqQkwsRUFBRXZELEdBQUcsQ0FBQzNDLElBQUlpSCxhQUFhLDZCQUE2QjtZQUNyRDtRQUNEO0lBQ0Q7SUFFQSxvQkFBb0I7SUFDcEIsK0NBQStDO0lBQy9DMUIsUUFBUSxJQUFJaEQsT0FBTyxzQkFBc0I7SUFDekMsSUFBSTJFLFFBQVEsSUFBSTNFLE9BQU8sc0JBQXNCO0lBQzdDLE1BQU00RSxlQUFlbkgsQ0FBQUEsS0FBTXVGLE1BQU0vQyxHQUFHLENBQUN4QyxNQUFNa0gsTUFBTWhFLEdBQUcsQ0FBQ2xELE1BQU11RixNQUFNckMsR0FBRyxDQUFDbEQ7SUFDckUsS0FBSyxJQUFJMEUsS0FBS1UsT0FBUTtRQUNyQixLQUFLLElBQUlwRixNQUFNMEUsRUFBRUMsQ0FBQyxDQUFFd0MsYUFBYW5IO1FBQ2pDLEtBQUssSUFBSUEsTUFBTTBFLEVBQUVoRixDQUFDLENBQUV5SCxhQUFhbkg7SUFDbEM7SUFDQSxzRUFBc0U7SUFDdEUsS0FBSyxJQUFJQSxNQUFNdUYsTUFBTztRQUNyQixJQUFJLENBQUNELFVBQVU5QyxHQUFHLENBQUN4QyxPQUFPLENBQUNrSCxNQUFNMUUsR0FBRyxDQUFDeEMsS0FBSztZQUN6Q3NGLFVBQVUzQyxHQUFHLENBQUMzQyxJQUFJc0U7UUFDbkI7SUFDRDtJQUNBLDJCQUEyQjtJQUMzQixrREFBa0Q7SUFDbER1QixhQUFhTixPQUFPdkIsSUFBSXVCO0lBRXhCLGVBQWU7SUFDZiwrREFBK0Q7SUFDL0RDLGFBQWFsRyxVQUFVZ0QsR0FBRzNGLEdBQUcsQ0FBQ0csQ0FBQUEsSUFBSzhILE1BQU1KLElBQUksQ0FBQzFILElBQUl1SixJQUFJLENBQUN0RjtJQUN2RDBFLGFBQWEsSUFBSWhMLE9BQU8sMENBQTBDO0lBQ2xFLEtBQUssSUFBSW9GLE9BQU8yRixXQUFZO1FBQzNCLHFFQUFxRTtRQUNyRSxxRUFBcUU7UUFDckUsOENBQThDO1FBQzlDLHNEQUFzRDtRQUN0RCx1QkFBdUI7UUFDdkIsMkRBQTJEO1FBQzNELElBQUl2SCxPQUFPO1lBQUN3SDtTQUFXO1FBQ3ZCLEtBQUssSUFBSXpGLE1BQU1ILElBQUs7WUFDbkIsSUFBSS9CLE9BQU9HLEtBQUt0QixHQUFHLENBQUN5SyxDQUFBQTtnQkFDbkIsSUFBSUMsUUFBUUQsS0FBSzFFLEdBQUcsQ0FBQzFDO2dCQUNyQixJQUFJLENBQUNxSCxPQUFPO29CQUNYLDBCQUEwQjtvQkFDMUIsdUNBQXVDO29CQUN2QyxxQ0FBcUM7b0JBQ3JDQSxRQUFRLElBQUk1TTtvQkFDWjJNLEtBQUt6RSxHQUFHLENBQUMzQyxJQUFJcUg7Z0JBQ2Q7Z0JBQ0EsT0FBT0E7WUFDUjtZQUNBLElBQUlySCxPQUFPcUUsTUFBTTtnQkFDaEJwRyxLQUFLOUMsSUFBSSxJQUFJMkMsT0FBTyx3QkFBd0I7WUFDN0MsT0FBTztnQkFDTkcsT0FBT0g7WUFDUjtRQUNEO1FBQ0EsS0FBSyxJQUFJbEIsS0FBS3FCLEtBQU07WUFDbkJyQixFQUFFMkosQ0FBQyxHQUFHMUc7UUFDUDtJQUNEO0FBQ0Q7QUFFQSxvQkFBb0I7QUFDcEIsd0JBQXdCO0FBQ3hCLFNBQVN5SCxVQUFVdEgsRUFBRTtJQUNwQixPQUFPLENBQUN1SCxjQUFjdkgsTUFBTSxLQUFLLEdBQW9DLE9BQWpDd0gsUUFBUUMsa0JBQWtCO1FBQUN6SDtLQUFHLElBQUcsSUFBQyxJQUFLSyxTQUFTTDtBQUNyRjtBQUVBLDJFQUEyRTtBQUMzRSwwRUFBMEU7QUFDMUUsc0NBQXNDO0FBQ3RDLGlGQUFpRjtBQUNqRixTQUFTd0gsUUFBUXhLLENBQUM7SUFDakIsT0FBTyxJQUFNLE9BQUZBLEdBQUUsT0FBVSxhQUFhO0FBQ3JDO0FBRUEsU0FBUzBLLHNCQUFzQjdILEdBQUc7SUFDakMsSUFBSUEsSUFBSXRDLE1BQU0sSUFBSSxLQUFLc0MsR0FBRyxDQUFDLEVBQUUsSUFBSXFFLFVBQVVyRSxHQUFHLENBQUMsRUFBRSxJQUFJcUUsUUFBUTtRQUM1RCxNQUFNLElBQUl5RCxNQUFNLDZCQUEyRCxPQUE5QmxILGFBQWFaLElBQUlSLEtBQUssQ0FBQyxHQUFHLEtBQUksT0FBSyx5Q0FBeUM7SUFDMUg7QUFDRDtBQUNBLFNBQVN1SSx5QkFBeUIvSCxHQUFHO0lBQ3BDLE1BQU1nSSxhQUFhO0lBQ25CLElBQUssSUFBSTNNLElBQUkyRSxJQUFJaUksV0FBVyxDQUFDRCxhQUFhM00sSUFBSSxHQUFLO1FBQ2xELElBQUkyRSxHQUFHLENBQUMsRUFBRTNFLEVBQUUsS0FBSzJNLFlBQVk7WUFDNUIsTUFBTSxJQUFJRixNQUFNO1FBQ2pCO0lBQ0Q7QUFDRDtBQUNBLGlGQUFpRjtBQUNqRixTQUFTSSxhQUFhbEksR0FBRztJQUN4QixJQUFJRyxLQUFLSCxHQUFHLENBQUMsRUFBRTtJQUNmLElBQUk1QixPQUFPekQsT0FBT2tJLEdBQUcsQ0FBQzFDO0lBQ3RCLElBQUkvQixNQUFNLE1BQU0rSixnQkFBZ0IsV0FBZ0IsT0FBTC9KO0lBQzNDLElBQUlYLElBQUl1QyxJQUFJdEMsTUFBTTtJQUNsQixJQUFJMEssT0FBTyxDQUFDLEdBQUcsa0NBQWtDO0lBQ2pELElBQUssSUFBSS9NLElBQUksR0FBR0EsSUFBSW9DLEdBQUdwQyxJQUFLO1FBQzNCOEUsS0FBS0gsR0FBRyxDQUFDM0UsRUFBRTtRQUNYLElBQUlnTixRQUFRMU4sT0FBT2tJLEdBQUcsQ0FBQzFDO1FBQ3ZCLElBQUlrSSxPQUFPO1lBQ1YsaURBQWlEO1lBQ2pELElBQUlELFFBQVEvTSxHQUFHLE1BQU04TSxnQkFBZ0IsR0FBYUUsT0FBVmpLLE1BQUssT0FBVyxPQUFOaUs7WUFDbERELE9BQU8vTSxJQUFJO1lBQ1grQyxPQUFPaUs7UUFDUjtJQUNEO0lBQ0EsSUFBSUQsUUFBUTNLLEdBQUcsTUFBTTBLLGdCQUFnQixZQUFpQixPQUFML0o7QUFDbEQ7QUFFQSxpQ0FBaUM7QUFDakMseUJBQXlCO0FBQ3pCLDhCQUE4QjtBQUM5QixtREFBbUQ7QUFDbkQsNkNBQTZDO0FBQzdDLDJFQUEyRTtBQUMzRSxTQUFTd0osa0JBQWtCNUgsR0FBRztRQUFFc0ksTUFBQUEsaUVBQU1DLFVBQVVDLFNBQUFBLGlFQUFTaEk7SUFDeEQseUNBQXlDO0lBQ3pDLHNFQUFzRTtJQUN0RSxJQUFJUSxNQUFNLEVBQUU7SUFDWixJQUFJeUgsa0JBQWtCekksR0FBRyxDQUFDLEVBQUUsR0FBR2dCLElBQUkxRixJQUFJLENBQUM7SUFDeEMsSUFBSTBFLElBQUl0QyxNQUFNLEdBQUc0SyxLQUFLO1FBQ3JCQSxRQUFRO1FBQ1J0SSxNQUFNO2VBQUlBLElBQUlSLEtBQUssQ0FBQyxHQUFHOEk7WUFBTTtlQUFXdEksSUFBSVIsS0FBSyxDQUFDLENBQUM4STtTQUFLO0lBQ3pEO0lBQ0EsSUFBSWxLLE9BQU87SUFDWCxJQUFJWCxJQUFJdUMsSUFBSXRDLE1BQU07SUFDbEIsSUFBSyxJQUFJckMsSUFBSSxHQUFHQSxJQUFJb0MsR0FBR3BDLElBQUs7UUFDM0IsSUFBSThFLEtBQUtILEdBQUcsQ0FBQzNFLEVBQUU7UUFDZixJQUFJcU0sY0FBY3ZILEtBQUs7WUFDdEJhLElBQUkxRixJQUFJLENBQUNzRixhQUFhWixJQUFJUixLQUFLLENBQUNwQixNQUFNL0M7WUFDdEMyRixJQUFJMUYsSUFBSSxDQUFDa04sT0FBT3JJO1lBQ2hCL0IsT0FBTy9DLElBQUk7UUFDWjtJQUNEO0lBQ0EyRixJQUFJMUYsSUFBSSxDQUFDc0YsYUFBYVosSUFBSVIsS0FBSyxDQUFDcEIsTUFBTVg7SUFDdEMsT0FBT3VELElBQUlDLElBQUksQ0FBQztBQUNqQjtBQUVBLDhEQUE4RDtBQUM5RCxxQ0FBcUM7QUFDckMsU0FBU3dILGtCQUFrQnRJLEVBQUU7SUFDNUIwRjtJQUNBLE9BQU9WLEdBQUd4QyxHQUFHLENBQUN4QztBQUNmO0FBQ0EsU0FBU3VILGNBQWN2SCxFQUFFO0lBQ3hCMEY7SUFDQSxPQUFPUixPQUFPMUMsR0FBRyxDQUFDeEM7QUFDbkI7QUFFQSx1REFBdUQ7QUFDdkQsd0NBQXdDO0FBQ3hDLFNBQVN1STtJQUNSN0M7SUFDQSxPQUFPRixXQUFXN0ksR0FBRyxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFeUMsS0FBSyxLQUFLLDRCQUE0QjtBQUNwRTtBQUVBLFNBQVNtSix1QkFBdUJDLElBQUksRUFBRUMsU0FBUztJQUM5Q2hEO0lBQ0EsSUFBSWlELEtBQUtELFlBQVkxRSxNQUFNQztJQUMzQixPQUFPd0UsS0FBS0csS0FBSyxDQUFDeEUsU0FBU3pILEdBQUcsQ0FBQ2tNLENBQUFBLFFBQVNwSSxhQUFhcUksZ0JBQWdCeEksV0FBV3VJLFFBQVFGLElBQUlJLGFBQWF2SyxJQUFJLEtBQUtzQyxJQUFJLENBQUNzRDtBQUN4SDtBQUVBLFNBQVM0RSxjQUFjQyxJQUFJO0lBQzFCLE9BQU9DLFFBQVFOLE1BQU1LLE1BQU1oRixLQUFLOEU7QUFDakM7QUFFQSxTQUFTSSxhQUFhRixJQUFJO0lBQ3pCLElBQUlHLFNBQVNSLE1BQU1LLE1BQU1oRixLQUFLckgsQ0FBQUEsSUFBS0EsSUFBSSxvQkFBb0I7SUFDM0QsS0FBSyxJQUFJLEVBQUN5TSxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsS0FBSyxFQUFDLElBQUlILE9BQVE7UUFDekMsSUFBSUcsT0FBTyxPQUFPLHFCQUFxQjtRQUV2QyxrQ0FBa0M7UUFDbEMsa0ZBQWtGO1FBQ2xGLG1FQUFtRTtRQUNuRTs7Ozs7Ozs7RUFRQSxHQUNBLGlEQUFpRDtRQUNqRCxvQ0FBb0M7UUFFcEMseUJBQXlCO1FBQ3pCLHNCQUFzQjtRQUN0QixJQUFJRixTQUFTLFNBQVNHLGNBQWNGLFFBQVEsT0FBTztJQUVuRCxrRkFBa0Y7SUFDbEYsNERBQTREO0lBQzVELGdFQUFnRTtJQUNoRSw4QkFBOEI7SUFDL0I7SUFDQSxPQUFPSixRQUFRRTtBQUNoQjtBQUVBLFNBQVNJLGNBQWMxTSxDQUFDLEVBQUVOLENBQUMsRUFBRUMsQ0FBQztJQUM3QixJQUFJd0IsT0FBTztJQUNYLE1BQU8sS0FBTTtRQUNaLElBQUlILE9BQU9oQixFQUFFMk0sT0FBTyxDQUFDak4sR0FBR3lCO1FBQ3hCLElBQUlILE9BQU8sR0FBRztRQUNkaEIsQ0FBQyxDQUFDZ0IsS0FBSyxHQUFHckI7UUFDVndCLE9BQU9ILE9BQU87SUFDZjtBQUNEO0FBRUEsU0FBUzRMLFVBQVVULElBQUksRUFBRVUsY0FBYztJQUN0QyxPQUFPZixNQUFNSyxNQUFNaEYsS0FBSzBGLGlCQUFpQi9NLENBQUFBLElBQUtBLEVBQUV5QyxLQUFLLEtBQUswSixjQUFjLDRCQUE0QjtBQUNyRztBQUVBLFNBQVNILE1BQU1LLElBQUksRUFBRU4sRUFBRSxFQUFFaUIsRUFBRTtJQUMxQixJQUFJLENBQUNYLE1BQU0sT0FBTyxFQUFFLEVBQUUsaUNBQWlDO0lBQ3ZEdkQ7SUFDQSxJQUFJaEosU0FBUztJQUNiLHNEQUFzRDtJQUN0RCw2REFBNkQ7SUFDN0QsT0FBT3VNLEtBQUtMLEtBQUssQ0FBQ3hFLFNBQVN6SCxHQUFHLENBQUNrTSxDQUFBQTtRQUM5QixJQUFJZ0IsUUFBUXZKLFdBQVd1STtRQUN2QixJQUFJaUIsT0FBTztZQUNWRDtZQUNBbk47UUFDRDtRQUNBQSxVQUFVbU4sTUFBTXRNLE1BQU0sR0FBRyxHQUFHLFNBQVM7UUFDckMsSUFBSTtZQUNILDREQUE0RDtZQUM1RCxJQUFJd00sU0FBU0QsS0FBS0MsTUFBTSxHQUFHakIsZ0JBQWdCZSxPQUFPbEIsSUFBSWlCO1lBQ3RELElBQUlJLGNBQWNELE9BQU94TSxNQUFNO1lBQy9CLElBQUk4TDtZQUNKLElBQUksQ0FBQ1csYUFBYTtnQkFDakIsWUFBWTtnQkFDWiwyREFBMkQ7Z0JBQzNELDZCQUE2QjtnQkFDN0Isb0VBQW9FO2dCQUNwRSxNQUFNLElBQUlyQyxNQUFPO1lBQ2xCO1lBQ0EsSUFBSXNDLE9BQU9ILEtBQUtSLE1BQU0sR0FBR1MsT0FBT3ZMLElBQUk7WUFDcENvSix5QkFBeUJxQztZQUN6QixJQUFJQyxRQUFRSixLQUFLSSxLQUFLLEdBQUdGLGNBQWMsS0FBS0QsTUFBTSxDQUFDLEVBQUUsQ0FBQ2xGLFFBQVEsRUFBRSx5Q0FBeUM7WUFDekcsSUFBSSxDQUFDcUYsU0FBU0QsS0FBS0UsS0FBSyxDQUFDbkssQ0FBQUEsS0FBTUEsS0FBSyxPQUFPO2dCQUMxQyxpREFBaUQ7Z0JBQ2pEMEgsc0JBQXNCdUMsT0FBTyx3QkFBd0I7Z0JBQ3JELG1CQUFtQjtnQkFDbkIsZUFBZTtnQkFDZixtQkFBbUI7Z0JBQ25CLCtCQUErQjtnQkFDL0JaLE9BQU87WUFDUixPQUFPO2dCQUNOLElBQUllLFFBQVFMLE9BQU8vSyxPQUFPLENBQUNwQyxDQUFBQSxJQUFLQSxFQUFFaUksUUFBUSxHQUFHLEVBQUUsR0FBR2pJLElBQUksd0NBQXdDO2dCQUM5RixJQUFJLENBQUN3TixNQUFNN00sTUFBTSxFQUFFO29CQUNsQjhMLE9BQU87Z0JBQ1IsT0FBTztvQkFDTix3RkFBd0Y7b0JBQ3hGLElBQUlyRSxHQUFHeEMsR0FBRyxDQUFDeUgsSUFBSSxDQUFDLEVBQUUsR0FBRyxNQUFNakMsZ0JBQWdCO29CQUMzQyxJQUFLLElBQUk5TSxJQUFJLEdBQUdBLElBQUk4TyxhQUFhOU8sSUFBSzt3QkFDckMsSUFBSTJFLE1BQU1rSyxNQUFNLENBQUM3TyxFQUFFO3dCQUNuQixJQUFJLENBQUMyRSxJQUFJZ0YsUUFBUSxJQUFJRyxHQUFHeEMsR0FBRyxDQUFDM0MsR0FBRyxDQUFDLEVBQUUsR0FBRzs0QkFDcEMsMERBQTBEOzRCQUMxRCxNQUFNbUksZ0JBQWdCLDRCQUEyRFAsT0FBL0JoSCxhQUFhc0osTUFBTSxDQUFDN08sSUFBRSxFQUFFLEdBQUUsT0FBaUMsT0FBNUJ1TSxrQkFBa0I7Z0NBQUM1SCxHQUFHLENBQUMsRUFBRTs2QkFBQyxHQUFFO3dCQUM5RztvQkFDRDtvQkFDQWtJLGFBQWFrQztvQkFDYixJQUFJSSxTQUFTOUYsV0FBVyxJQUFJaEMsSUFBSTZIO29CQUNoQyxJQUFJLENBQUMxRixFQUFFLEdBQUc0RixnQkFBZ0JELFNBQVMsdUJBQXVCO29CQUMxRCxtREFBbUQ7b0JBQ25ELDZEQUE2RDtvQkFDN0RFLFlBQVk3RixHQUFHMEYsUUFBUSxxQkFBcUI7b0JBQzVDSSxZQUFZOUYsR0FBRzJGLFNBQVMsZ0ZBQWdGO29CQUN4R2hCLE9BQU8zRSxFQUFFakosQ0FBQztnQkFDViw4Q0FBOEM7Z0JBQzlDLDhDQUE4QztnQkFDOUMscUNBQXFDO2dCQUNyQyxrQ0FBa0M7Z0JBQ25DO1lBQ0Q7WUFDQXFPLEtBQUtULElBQUksR0FBR0E7UUFDYixFQUFFLE9BQU9vQixLQUFLO1lBQ2JYLEtBQUtQLEtBQUssR0FBR2tCLEtBQUssd0JBQXdCO1FBQzNDO1FBQ0EsT0FBT1g7SUFDUjtBQUNEO0FBRUEsU0FBU1UsWUFBWUUsS0FBSyxFQUFFTCxNQUFNO0lBQ2pDLElBQUlNO0lBQ0osSUFBSUMsU0FBUyxFQUFFO0lBQ2YsS0FBSyxJQUFJNUssTUFBTXFLLE9BQVE7UUFDdEIsSUFBSVEsUUFBUXZGLFVBQVU1QyxHQUFHLENBQUMxQztRQUMxQixJQUFJNkssVUFBVXZHLFdBQVcsUUFBUSx5QkFBeUI7UUFDMUQsSUFBSXVHLE9BQU87WUFDVixJQUFJbEksTUFBTWtJLE1BQU0zRSxDQUFDLENBQUN4RCxHQUFHLENBQUMxQyxLQUFLLDhEQUE4RDtZQUN6RjJLLFFBQVFBLFFBQVFBLE1BQU1oRSxNQUFNLENBQUNqQyxDQUFBQSxJQUFLL0IsSUFBSUgsR0FBRyxDQUFDa0MsTUFBTUgsV0FBVzVCO1lBQzNELElBQUksQ0FBQ2dJLE1BQU1wTixNQUFNLEVBQUUsUUFBUSxtQ0FBbUM7UUFDL0QsT0FBTztZQUNOcU4sT0FBT3pQLElBQUksQ0FBQzZFO1FBQ2I7SUFDRDtJQUNBLElBQUkySyxPQUFPO1FBQ1Ysd0JBQXdCO1FBQ3hCLHVDQUF1QztRQUN2QyxvQ0FBb0M7UUFDcEMsS0FBSyxJQUFJakcsS0FBS2lHLE1BQU87WUFDcEIsSUFBSUMsT0FBT1QsS0FBSyxDQUFDbkssQ0FBQUEsS0FBTXlFLGFBQWFDLEdBQUcxRSxNQUFNO2dCQUM1QyxNQUFNLElBQUkySCxNQUFNLDRCQUF1Q2pELE9BQVhnRyxNQUFNalAsQ0FBQyxFQUFDLEtBQU8sT0FBSmlKLEVBQUVqSixDQUFDO1lBQzNEO1FBQ0Q7SUFDRDtBQUNEO0FBRUEsOEJBQThCO0FBQzlCLGtDQUFrQztBQUNsQyxTQUFTNk8sZ0JBQWdCRCxNQUFNO0lBQzlCLElBQUlTLFNBQVMxRjtJQUNiLEtBQUssSUFBSXBGLE1BQU1xSyxPQUFRO1FBQ3RCLGlEQUFpRDtRQUNqRCwwQ0FBMEM7UUFDMUMsSUFBSTNELEtBQUtvRSxPQUFPbkUsTUFBTSxDQUFDakMsQ0FBQUEsSUFBS0QsYUFBYUMsR0FBRzFFO1FBQzVDLElBQUksQ0FBQzBHLEdBQUduSixNQUFNLEVBQUU7WUFDZixJQUFJLENBQUM2SCxPQUFPMkIsSUFBSSxDQUFDckMsQ0FBQUEsSUFBS0QsYUFBYUMsR0FBRzFFLE1BQU07Z0JBQzNDLDRDQUE0QztnQkFDNUMsK0JBQStCO2dCQUMvQix3RUFBd0U7Z0JBQ3hFLDhDQUE4QztnQkFDOUMsaUNBQWlDO2dCQUNqQyxNQUFNK0ssaUJBQWlCL0ssS0FBSyxzQkFBc0I7WUFDbkQsT0FBTztnQkFDTix1REFBdUQ7Z0JBQ3ZELHNEQUFzRDtnQkFDdEQsaUVBQWlFO2dCQUNqRSxNQUFNZ0wsbUJBQW1CRixNQUFNLENBQUMsRUFBRSxFQUFFOUs7WUFDckM7UUFDRDtRQUNBOEssU0FBU3BFO1FBQ1QsSUFBSUEsR0FBR25KLE1BQU0sSUFBSSxHQUFHLE9BQU8sK0JBQStCO0lBQzNEO0lBQ0EsNkRBQTZEO0lBQzdELE9BQU91TjtBQUNSO0FBRUEsdUJBQXVCO0FBQ3ZCLFNBQVM1QixRQUFRTixLQUFLO0lBQ3JCLE9BQU9BLE1BQU1qTSxHQUFHLENBQUM7WUFBQyxFQUFDa04sS0FBSyxFQUFFTixLQUFLLEVBQUVELE1BQU0sRUFBQztRQUN2QyxJQUFJQyxPQUFPO1lBQ1YsaURBQWlEO1lBQ2pELElBQUkwQixNQUFNMUIsTUFBTTJCLE9BQU87WUFDdkIsNENBQTRDO1lBQzVDLE1BQU0sSUFBSXZELE1BQU1pQixNQUFNckwsTUFBTSxJQUFJLElBQUkwTixNQUFNLGlCQUEyREEsT0FBMUN6RCxRQUFRQyxrQkFBa0JvQyxPQUFPLE1BQUssTUFBUSxPQUFKb0I7UUFDdEc7UUFDQSxPQUFPeEssYUFBYTZJO0lBQ3JCLEdBQUd4SSxJQUFJLENBQUNzRDtBQUNUO0FBRUEsU0FBUzJHLGlCQUFpQi9LLEVBQUU7SUFDM0IseUJBQXlCO0lBQ3pCLE9BQU8sSUFBSTJILE1BQU0seUJBQXVDLE9BQWRMLFVBQVV0SDtBQUNyRDtBQUNBLFNBQVNnTCxtQkFBbUJ0RyxDQUFDLEVBQUUxRSxFQUFFO0lBQ2hDLElBQUltTCxTQUFTN0QsVUFBVXRIO0lBQ3ZCLElBQUlvTCxLQUFLaEcsT0FBT3lCLElBQUksQ0FBQ25DLENBQUFBLElBQUtBLEVBQUVDLENBQUMsQ0FBQ25DLEdBQUcsQ0FBQ3hDLE1BQU0scUJBQXFCO0lBQzdELElBQUlvTCxJQUFJO1FBQ1BELFNBQVMsR0FBV0EsT0FBUkMsR0FBRzNQLENBQUMsRUFBQyxLQUFVLE9BQVAwUDtJQUNyQjtJQUNBLE9BQU8sSUFBSXhELE1BQU0sb0JBQTZCd0QsT0FBVHpHLEVBQUVqSixDQUFDLEVBQUMsT0FBWSxPQUFQMFA7QUFDL0M7QUFDQSxTQUFTbkQsZ0JBQWdCcUQsS0FBSztJQUM3QixPQUFPLElBQUkxRCxNQUFNLHNCQUE0QixPQUFOMEQ7QUFDeEM7QUFFQSw2QkFBNkI7QUFDN0IsZ0NBQWdDO0FBQ2hDLG9EQUFvRDtBQUNwRCxTQUFTZCxZQUFZN0YsQ0FBQyxFQUFFN0UsR0FBRztJQUMxQixLQUFLLElBQUlHLE1BQU1ILElBQUs7UUFDbkIsSUFBSSxDQUFDNEUsYUFBYUMsR0FBRzFFLEtBQUs7WUFDekIsNEZBQTRGO1lBQzVGLG1FQUFtRTtZQUNuRSxtREFBbUQ7WUFDbkQsb0RBQW9EO1lBQ3BELHFCQUFxQjtZQUNyQixtREFBbUQ7WUFDbkQsNkNBQTZDO1lBQzdDLGlEQUFpRDtZQUNqRCw2RUFBNkU7WUFDN0Usb0NBQW9DO1lBQ3BDLE1BQU1nTCxtQkFBbUJ0RyxHQUFHMUU7UUFDN0I7SUFDRDtJQUNBLGlEQUFpRDtJQUNqRCxJQUFJMEUsRUFBRXdCLENBQUMsRUFBRTtRQUNSLElBQUlsRCxhQUFhZ0IsSUFBSW5FO1FBQ3JCLElBQUssSUFBSTNFLElBQUksR0FBR29RLElBQUl0SSxXQUFXekYsTUFBTSxFQUFFckMsSUFBSW9RLEdBQUdwUSxJQUFLO1lBQ2xELGtFQUFrRTtZQUNsRTs7Ozs7Ozs7O0dBU0EsR0FDQSxtQ0FBbUM7WUFDbkMsMkRBQTJEO1lBQzNELElBQUkrSixJQUFJekMsR0FBRyxDQUFDUSxVQUFVLENBQUM5SCxFQUFFLEdBQUc7Z0JBQzNCLElBQUkwRCxJQUFJMUQsSUFBSTtnQkFDWixJQUFLLElBQUk4RSxJQUFJcEIsSUFBSTBNLEtBQUtyRyxJQUFJekMsR0FBRyxDQUFDeEMsS0FBS2dELFVBQVUsQ0FBQ3BFLEVBQUUsR0FBR0EsSUFBSztvQkFDdkQsbURBQW1EO29CQUNuRCxJQUFLLElBQUkyTSxJQUFJclEsR0FBR3FRLElBQUkzTSxHQUFHMk0sSUFBSzt3QkFDM0IsSUFBSXZJLFVBQVUsQ0FBQ3VJLEVBQUUsSUFBSXZMLElBQUk7NEJBQ3hCLE1BQU0sSUFBSTJILE1BQU0sZ0NBQThDLE9BQWRMLFVBQVV0SDt3QkFDM0Q7b0JBQ0Q7Z0JBQ0Q7Z0JBQ0EseUNBQXlDO2dCQUN6Qyx3RUFBd0U7Z0JBQ3hFLElBQUlwQixJQUFJMUQsSUFBSVIsU0FBUztvQkFDcEIsOERBQThEO29CQUM5RCxNQUFNLElBQUlpTixNQUFNLGdDQUF5Ri9JLE9BQXpENEksUUFBUUMsa0JBQWtCekUsV0FBVzNELEtBQUssQ0FBQ25FLElBQUUsR0FBRzBELE1BQUssTUFBV2xFLE9BQVBrRSxJQUFFMUQsR0FBRSxLQUFXLE9BQVJSLFNBQVE7Z0JBQ3pIO2dCQUNBUSxJQUFJMEQ7WUFDTDtRQUNEO0lBQ0Q7QUFDQSwyQ0FBMkM7QUFDM0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBNENBLEdBQ0Q7QUFFQSw2QkFBNkI7QUFDN0IsaUZBQWlGO0FBQ2pGLHVFQUF1RTtBQUN2RSw2REFBNkQ7QUFDN0Qsd0RBQXdEO0FBQ3hELFNBQVNrSyxnQkFBZ0JlLEtBQUssRUFBRWxCLEVBQUUsRUFBRWlCLEVBQUU7SUFDckMsSUFBSXBNLE1BQU0sRUFBRTtJQUNaLElBQUk0TSxRQUFRLEVBQUU7SUFDZFAsUUFBUUEsTUFBTXhLLEtBQUssR0FBR3VELE9BQU8sSUFBSSxxQkFBcUI7SUFDdEQsTUFBT2lILE1BQU10TSxNQUFNLENBQUU7UUFDcEIsSUFBSTJNLFFBQVFzQix1QkFBdUIzQjtRQUNuQyxJQUFJSyxPQUFPO1lBQ1YsSUFBSUUsTUFBTTdNLE1BQU0sRUFBRTtnQkFDakJDLElBQUlyQyxJQUFJLENBQUN3TixHQUFHeUI7Z0JBQ1pBLFFBQVEsRUFBRTtZQUNYO1lBQ0E1TSxJQUFJckMsSUFBSSxDQUFDeU8sR0FBR007UUFDYixPQUFPO1lBQ04sSUFBSWxLLEtBQUs2SixNQUFNcEcsR0FBRztZQUNsQixJQUFJOEIsTUFBTS9DLEdBQUcsQ0FBQ3hDLEtBQUs7Z0JBQ2xCb0ssTUFBTWpQLElBQUksQ0FBQzZFO1lBQ1osT0FBTztnQkFDTixJQUFJSCxNQUFNaUYsT0FBT3BDLEdBQUcsQ0FBQzFDO2dCQUNyQixJQUFJSCxLQUFLO29CQUNSdUssTUFBTWpQLElBQUksSUFBSTBFLE1BQU0sd0JBQXdCO2dCQUM3QyxPQUFPLElBQUksQ0FBQ2tGLFFBQVF2QyxHQUFHLENBQUN4QyxLQUFLO29CQUM1QixtRUFBbUU7b0JBQ25FLCtDQUErQztvQkFDL0Msc0RBQXNEO29CQUN0RCxnREFBZ0Q7b0JBQ2hELHFGQUFxRjtvQkFDckYsNkNBQTZDO29CQUM3QyxNQUFNK0ssaUJBQWlCL0s7Z0JBQ3hCO1lBQ0Q7UUFDRDtJQUNEO0lBQ0EsSUFBSW9LLE1BQU03TSxNQUFNLEVBQUU7UUFDakJDLElBQUlyQyxJQUFJLENBQUN3TixHQUFHeUI7SUFDYjtJQUNBLE9BQU81TTtBQUNSO0FBRUEsU0FBU3VMLFlBQVlsSixHQUFHO0lBQ3ZCLE9BQU9BLElBQUk4RyxNQUFNLENBQUMzRyxDQUFBQSxLQUFNQSxNQUFNcUU7QUFDL0I7QUFFQSw0QkFBNEI7QUFDNUIsc0VBQXNFO0FBQ3RFLCtCQUErQjtBQUMvQiwyQ0FBMkM7QUFDM0MsdURBQXVEO0FBQ3ZELFNBQVNtSCx1QkFBdUIzTCxHQUFHLEVBQUU0TCxLQUFLO0lBQ3pDLElBQUlyRSxPQUFPM0I7SUFDWCxJQUFJeUU7SUFDSixJQUFJclAsTUFBTWdGLElBQUl0QyxNQUFNO0lBQ3BCLE1BQU8xQyxJQUFLO1FBQ1h1TSxPQUFPQSxLQUFLMUUsR0FBRyxDQUFDN0MsR0FBRyxDQUFDLEVBQUVoRixJQUFJO1FBQzFCLElBQUksQ0FBQ3VNLE1BQU07UUFDWCxJQUFJLEVBQUNiLENBQUMsRUFBQyxHQUFHYTtRQUNWLElBQUliLEdBQUc7WUFDTjJELFFBQVEzRDtZQUNSLElBQUlrRixPQUFPQSxNQUFNdFEsSUFBSSxJQUFJMEUsSUFBSVIsS0FBSyxDQUFDeEUsS0FBSytILE9BQU8sS0FBSyxpREFBaUQ7WUFDckcvQyxJQUFJdEMsTUFBTSxHQUFHMUMsS0FBSyxXQUFXO1FBQzlCO0lBQ0Q7SUFDQSxPQUFPcVA7QUFDUjtBQUVBLCtEQUErRDtBQUMvRCxhQUFhO0FBRWIsTUFBTXdCLFdBQVc7QUFDakIsTUFBTUMsWUFBWTtBQUNsQixNQUFNQyxhQUFhO0FBQ25CLE1BQU1DLGdCQUFnQjtBQUN0QixNQUFNQyxXQUFXO0FBQ2pCLE1BQU1DLFNBQVM7QUFDZixNQUFNQyxVQUFVO0FBRWhCLFNBQVNDLGFBQWFoRCxJQUFJO1FBQUUsRUFDM0JOLEtBQUssSUFBSSxFQUNULEdBRjJCLGlFQUV4QixDQUFDO0lBQ0pqRDtJQUNBLElBQUltRSxRQUFRdkosV0FBVzJJLE1BQU1yRyxPQUFPO0lBQ3BDLElBQUk2SSxRQUFRLEVBQUU7SUFDZCxJQUFJMUIsU0FBUyxFQUFFO0lBQ2YsTUFBT0YsTUFBTXRNLE1BQU0sQ0FBRTtRQUNwQixJQUFJMk0sUUFBUXNCLHVCQUF1QjNCLE9BQU80QjtRQUMxQyxJQUFJdkIsT0FBTztZQUNWSCxPQUFPNU8sSUFBSSxDQUFDO2dCQUNYa08sTUFBTXlDO2dCQUNONUIsT0FBT0EsTUFBTTdLLEtBQUs7Z0JBQ2xCd0ssT0FBTzRCO2dCQUNQNUwsS0FBS2tKLFlBQVltQjtZQUNsQjtZQUNBdUIsUUFBUSxFQUFFLEVBQUUsZUFBZTtRQUM1QixPQUFPO1lBQ04sSUFBSXpMLEtBQUs2SixNQUFNcEcsR0FBRztZQUNsQixJQUFJekQsTUFBTW1FLE1BQU07Z0JBQ2Y0RixPQUFPNU8sSUFBSSxDQUFDO29CQUFDa08sTUFBTTJDO29CQUFTaE07Z0JBQUU7WUFDL0IsT0FBTyxJQUFJdUYsTUFBTS9DLEdBQUcsQ0FBQ3hDLEtBQUs7Z0JBQ3pCK0osT0FBTzVPLElBQUksQ0FBQztvQkFBQ2tPLE1BQU1xQztvQkFBVTdMLEtBQUs7d0JBQUNHO3FCQUFHO2dCQUFBO1lBQ3ZDLE9BQU8sSUFBSStFLFFBQVF2QyxHQUFHLENBQUN4QyxLQUFLO2dCQUMzQitKLE9BQU81TyxJQUFJLENBQUM7b0JBQUNrTyxNQUFNdUM7b0JBQVk1TDtnQkFBRTtZQUNsQyxPQUFPO2dCQUNOLElBQUlILE1BQU1pRixPQUFPcEMsR0FBRyxDQUFDMUM7Z0JBQ3JCLElBQUlILEtBQUs7b0JBQ1JrSyxPQUFPNU8sSUFBSSxDQUFDO3dCQUFDa08sTUFBTXNDO3dCQUFXM0w7d0JBQUlILEtBQUtBLElBQUlSLEtBQUs7b0JBQUU7Z0JBQ25ELE9BQU87b0JBQ04wSyxPQUFPNU8sSUFBSSxDQUFDO3dCQUFDa08sTUFBTXdDO3dCQUFlN0w7b0JBQUU7Z0JBQ3JDO1lBQ0Q7UUFDRDtJQUNEO0lBQ0EsSUFBSTJJLElBQUk7UUFDUCxJQUFLLElBQUl6TixJQUFJLEdBQUdtQixRQUFRLENBQUMsR0FBR25CLElBQUk2TyxPQUFPeE0sTUFBTSxFQUFFckMsSUFBSztZQUNuRCxJQUFJZ1IsUUFBUW5DLE1BQU0sQ0FBQzdPLEVBQUU7WUFDckIsSUFBSWlSLG1CQUFtQkQsTUFBTTdDLElBQUksR0FBRztnQkFDbkMsSUFBSStDLGVBQWVGLE1BQU1yTSxHQUFHLEdBQUc7b0JBQzlCLElBQUl2RCxNQUFNcEIsSUFBSTtvQkFDZCxJQUFLLElBQUlMLE1BQU15QixLQUFLekIsTUFBTWtQLE9BQU94TSxNQUFNLEVBQUUxQyxNQUFPO3dCQUMvQyxJQUFJLEVBQUN3TyxJQUFJLEVBQUV4SixHQUFHLEVBQUMsR0FBR2tLLE1BQU0sQ0FBQ2xQLElBQUk7d0JBQzdCLElBQUlzUixtQkFBbUI5QyxPQUFPOzRCQUM3QixJQUFJLENBQUMrQyxlQUFldk0sTUFBTTs0QkFDMUJ2RCxNQUFNekIsTUFBTTt3QkFDYixPQUFPLElBQUl3TyxTQUFTdUMsWUFBWTs0QkFDL0I7d0JBQ0Q7b0JBQ0Q7b0JBQ0EsSUFBSXZQLFFBQVEsR0FBR0EsUUFBUW5CO29CQUN2QixJQUFJbUUsUUFBUTBLLE9BQU8xSyxLQUFLLENBQUNoRCxPQUFPQztvQkFDaEMsSUFBSStQLE9BQU9oTixNQUFNTCxPQUFPLENBQUNwQyxDQUFBQSxJQUFLdVAsbUJBQW1CdlAsRUFBRXlNLElBQUksSUFBSXpNLEVBQUVpRCxHQUFHLEdBQUcsRUFBRSxHQUFHLG9CQUFvQjtvQkFDNUYsSUFBSUEsTUFBTW9FLElBQUlvSTtvQkFDZCxJQUFJdEwsZUFBZWxCLEtBQUt3TSxPQUFPO3dCQUM5QnRDLE9BQU91QyxNQUFNLENBQUNqUSxPQUFPQyxNQUFNRCxPQUFPOzRCQUNqQ2dOLE1BQU0wQzs0QkFDTmxDLE9BQU93Qzs0QkFDUHhNOzRCQUNBME0sU0FBU0Msc0JBQXNCbk47NEJBQy9CMEssUUFBUWtDLGFBQWF4TCxhQUFhWixNQUFNO2dDQUFDOEksSUFBSTs0QkFBSzt3QkFDbkQ7d0JBQ0F6TixJQUFJbUI7b0JBQ0wsT0FBTzt3QkFDTm5CLElBQUlvQixNQUFNLEdBQUcsdUJBQXVCO29CQUNyQztvQkFDQUQsUUFBUSxDQUFDLEdBQUcsUUFBUTtnQkFDckIsT0FBTztvQkFDTkEsUUFBUW5CLEdBQUcsZ0JBQWdCO2dCQUM1QjtZQUNELE9BQU8sSUFBSWdSLE1BQU03QyxJQUFJLEtBQUt1QyxZQUFZO2dCQUNyQ3ZQLFFBQVEsQ0FBQyxHQUFHLFFBQVE7WUFDckI7UUFDRDtJQUNEO0lBQ0EsT0FBT21RLHNCQUFzQnpDO0FBQzlCO0FBRUEsU0FBU29DLG1CQUFtQjlDLElBQUk7SUFDL0IsT0FBT0EsUUFBUXFDLFlBQVlyQyxRQUFRc0M7QUFDcEM7QUFFQSxTQUFTUyxlQUFldk0sR0FBRztJQUMxQixPQUFPQSxJQUFJa0gsSUFBSSxDQUFDL0csQ0FBQUEsS0FBTW1GLFVBQVUzQyxHQUFHLENBQUN4QztBQUNyQztBQUVBLFNBQVN3TSxzQkFBc0J6QyxNQUFNO0lBQ3BDLElBQUssSUFBSTdPLElBQUksR0FBR0EsSUFBSTZPLE9BQU94TSxNQUFNLEVBQUVyQyxJQUFLO1FBQ3ZDLElBQUk2TyxNQUFNLENBQUM3TyxFQUFFLENBQUNtTyxJQUFJLElBQUlxQyxVQUFVO1lBQy9CLElBQUk5TSxJQUFJMUQsSUFBSTtZQUNaLE1BQU8wRCxJQUFJbUwsT0FBT3hNLE1BQU0sSUFBSXdNLE1BQU0sQ0FBQ25MLEVBQUUsQ0FBQ3lLLElBQUksSUFBSXFDLFNBQVU5TTtZQUN4RG1MLE9BQU91QyxNQUFNLENBQUNwUixHQUFHMEQsSUFBSTFELEdBQUc7Z0JBQUNtTyxNQUFNcUM7Z0JBQVU3TCxLQUFLa0ssT0FBTzFLLEtBQUssQ0FBQ25FLEdBQUcwRCxHQUFHSSxPQUFPLENBQUNwQyxDQUFBQSxJQUFLQSxFQUFFaUQsR0FBRztZQUFDO1FBQ3JGO0lBQ0Q7SUFDQSxPQUFPa0s7QUFDUjtBQUVrSyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL0BhZHJhZmZ5L2Vucy1ub3JtYWxpemUvZGlzdC9pbmRleC5tanM/MTc5NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIDIwMjMtMDktMjVUMDE6MDE6NTUuMTQ4WlxuLy8gY29tcHJlc3NlZCBiYXNlNjQtZW5jb2RlZCBibG9iIGZvciBpbmNsdWRlLWVucyBkYXRhXG4vLyBzb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9hZHJhZmZ5L2Vucy1ub3JtYWxpemUuanMvYmxvYi9tYWluL3NyYy9tYWtlLmpzXG4vLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hZHJhZmZ5L2Vucy1ub3JtYWxpemUuanMjc2VjdXJpdHlcbi8vIFNIQS0yNTY6IDA1NjVlZDA0OWI5Y2YxNjE0YmI5ZTExYmE3ZDhhYzZhNmZiOTZjODkzMjUzZDg5MGY3ZTJiMjg4NGI5ZGVkMzJcbnZhciBDT01QUkVTU0VEJDEgPSAnQUVFVWR3bWdEUzhCeFFLS0FQNEJPZ0RqQVRBQW5nRFVBSU1Bb0FCb0FPQUFhZ0NPQUVRQWhBQk1BSElBT3dBOUFDc0FOZ0FtQUdJQUhnQXVBQ2dBSndBWEFDMEFHZ0FqQUI4QUx3QVVBQ2tBRWdBZUFBa0FHd0FSQUJrQUZnQTVBQ2dBTFFBckFEY0FGUUFwQUJBQUhnQWlBQkFBR2dBZUFCTUFHQVVoQmU4QkZ4UkVOOHNGMndDNUFLNUhBVzhBclFrRHpRQ3VoemMzTnpjQlA2OE5FZk1BQlFkSEJ1dzVCVjhGWUFBOU16a0k5cjRaQmc3UXlRQVdBOUNlT3dMTkNqY0NqcWtDaHVBL2xtK1JBc1hUQW9QNkFTZm5FUUR5dFFGSkFqV1ZDa2VYQU9zQTZnb2RBQi9jd2RBVUUwV2xCQ04vQVFVQ1FSakZEL01SQmpIeERRU0pidzBqQnpVQXN3QnhtZSt0bkljQVl3YWJBeXNHOFFBakFFTU1teGNEcWdQS1F5RFhDTU14QTdrVVF3RDNOWE9yQUttRklBQWZCQzBEM3g0QkpRREJHZFVGQWhFZ1ZEOEpud21RSmlOV1lVenJnMG9BR3dBVUFCMEFGbk5jQUNrQUZnQlA5aDNnUGZzRE9XREtuZVkyQ2hnbFgxVURZRDMwQUJzQUZBQWRBQlp6SUdSQW53REQ4d0FqQUVFTXpSYkRxZ01CMnNBRll3WHFBdENuQXNTNEF3cFVKS1J0RkhzYWRVejlBTU1WYndMcEFCTTFOSkVYMFprQ2dZTUJFeU1BeFJWdkF1a0FFelVCVUZBdG1Vd1NBeTREQlRFUjMzRWZ0UUhmU3dCNU14Si9BamtXS1FMekw4RS9jd0JCNlFIOUxRRFBEdE85QVNOcmlRQzVEUUFOQXdDSzIxRUZJOTF6SHdDb0w5a0JxUWNIQndjSEt6VURvd0J2QVFvaFB2VTNmQVFnSHdDeUFjOENLUU1BNXpNU2V6cjdVTGdGbURwL0x6VlFCZ0VHQWk4RllRVmd0OEFGY1R0bFFocENXRW1mZTV0bVo2SUFFeHNEelE4dCtYOHJCS3RUQWx0YkFuMGpzeThCbDZ1dFBXTURUUjhFaTJrUkFOa0RCck5ITnlzREJ6RUNRV1VBY3dGcEoza0FpeVVoQUowQlViOEFMM0VmQWJmTkF6ODFLVXNGV3dGM1lRWnRBbTBBK1ZFZkF6RUpEUUJSU1FDekFRQmxBSHNBTTcwR0QvdjNJWldIQndBUktRQXhBTHNqVHdIWkFlTVBFem1YZ0lId0FCSUFHUUE4QUVVQVFEdDNnZHZJRUdjUVpBa0dUUkZNZEVJVkV3SzBENjRMN1JFZEROa3EwOVBnQURTeEIvTURXd2Z6QTFzRFd3ZnpCL01EV3dmekExc0RXd05iQTFzY0V2QWkyOGdRWnc5UUJIVUZsZ1dUQk40SWl5WlJFWWtITUFqYVZCVjBKaHhQQTAwQkJDTXRTU1E3bXpNVEpVcE1GRTBMQ0FRMlNteXZmVUFEVHpHelZQMlFxZ1BUTWxjNWRBa0dIbmtTcUFBeUQzc2tOYjFPaG5wUGNhZ0tVMCsydFlkSmFrNXZBc1k2c0VBQUNpa0ptMi9EZDFZR1JSQWZKNmtRK3d3M0Fia0JQdzN4Uzl3RTlRWS9CTTBmZ1JrZEQ5R1ZvQWlwTGVFTThTYm5McVdBWGlQNUtvY0Y4VXY0UE9FTFVWRnNEMTBMYVFubk9tZUJVZ01sQVJFaWp3cmhEVDBJY1JEM0NzMXZEZWtSU1FjOUE5bEpuZ0NwQndVTEZSMDVGYmttRkdLd0N3MDVld2IvR3ZvTGt5YXpFeTE3QUFYWEdpVUdVUUV0R3dNQTB5N3JoYlJhTlZ3Z1QyTUdCd3NwSThzVXJGQWtEU2xBdTNoTUdoOEhHU1d0QXBWRGRFcUxVVG9lbHlINlBFRU5haTRYVVlBSCtUd0pHVk1MaFR5aVJxOUZFaEhXUHBFOVRDSk5UREFFT1lNc015ZVBDZE1QaVF5OWZIWUJYUWtsQ2JVTWRSTTFFUnMzeVFnOUJ4MHhseWduR1FnbFJwbGduZ1Q3b3dQM0U5VUREd1ZEQ1VVSEZ3TzVIREVUTWhVdEJSR0JLTnNDOXpiWkxyY0NrMWFFQVJzRnp3OHBIK01RVkVma0R1MElud0pwQTRjbDd3QXhGU1VBR3lLZkNFZG5BR09QM0ZNSkxzOEl5MnB3STNnRGF4VHJaUkYzQjVVT1d3ZXJIRGNWd3h6bGNNeGVENFlNS0tlekNWOEJlUW1kQVdNRTV3Z05OVitNcENCRloxZUxYQmlmSUdWQlExNEFBalVNYVJXalJNR0hmQUtQRDI4U0h3RTVBWGNIUFEwRkFuc1I4UkZ2RUprSTc0WUlOYmt6L0RvcEJGTWhoeUFWQ2lzRFUyelNDeXNtL1F6OGJRR25FbVlERURSQmQvSm5yMkM2S0JnQkJ4MHl5VUZrSWZVTGxrL1JES0FheFJoR1ZESVo2QWZEQS9jYTl5ZnVRVnNHQXdPbkJ4YzZVVFB5Qk1FTGJRaVBDVU1BVFE2bkd3ZmJHRzRLZFl6VUFUV1BBYnVkQTF1Vmh3Snprd1k3Qnc4QWF3K0xCWDNwQUNFQ3F3aW5BQWtBMHdOYkFEMENzUWVoQUIwQWlVVUJRUU1yTXdFbDZRS1RBNWNJTmM4Qm1UTUI5eTBFSDhjTUdRRDdPMjVPQXNPMUFvQnVacVlGNFZ3Q2tnSk5PUUZSS1FRSlVrdFZBN04xNVFEZkFFOEdGK05MQVJtdlRzOGU1MGNCNDNNdkFNc0Evd0FKT1FjSlJRSFJBZmR4QUxzQll3czFDYWEzdVFGUjdTMEFod0FaYndIYkFvMEE0UUE1QUlQMUFWY0FVUVZkL1FYWEFsTk5BUlUxSEM5YlpRRy9BeU1CTndFUkFIMEd6NUdwelFzakJIRUgxd0lRSHhYbEF1OHlCN2tGQXlMakU5RkN5UUs5NGxrQU1ob0tQQXFyQ3FwZ1gyUTNDalYyUFZRQUVoK3NQc3MvVWdWVk8xYzdYRHRYTzF3N1Z6dGNPMWM3WER0WE8xd0RtOFBtdytZS2NGOUpZZThNcWczWVJNdzZUUlBmWUZWZ05oUE1MYnNVeFJYU0pWb1pRUnJBSndrbDZGVU5Ed2d0MTJZMENEQTBlUmZBQUVNcGJJTkZZNG9lTkFwUEhPdFRsVlQ4TFI4QXRVdW1NN01Oc0JzWlJFUUZTM1h4WWk0V0Vnb21BbVNGQW1KR1gxR3pBVjgzSkFLaCt3Sm9uQUptRFFLZmlEZ2ZEd0ptUHdKbUtnUnlCSU1EZnhjRGZwWTVDamw3R3ptR09pY25BbXdoQWpJNk9BNENiY3NDYmJMempnTTNhMGt2QVdzQTRnRGxBRTRKQjV3TWtRRUNEOFlBRWJrQ2R6TUNkcVpEQW5sUFJ3SjR2aUZnMzBXeVJ2Y0NmRU1DZXN3Q2ZRMENmUFJJQkVpQlp5Z0FMeGxKWEVwZkdSdEswQUxSQlFMUTBFc3JBNGhUQTRmcVJNbVJOZ0x5cFYwSEF3T3lTOUpNTVNrSDAwMVFUYk1DaTBNQ2l0ekZId3NoUjJzSnV3S09Pd0tPWUVTYmhRS08zUUtPWUh4UnVGTTVBUTVTMkZTSkFwUC9BcE1RQU8wQUlGVWlWYk5WMUFvc0h5bVppakxsZUdwRlB6MENsNk1DNzdaWUphd0FYU2tDbHBNQ2xvQ2dBSzFac0ZvTmhWRUFQd0tXdVFLV1VseElYTlVDbWM4Q21XaGN6bDBMSFFLY256bkdPcUVDbkJvQ241OENucnlPQUNFVE5TNFRBcDMxQXA2V0FMbEJZVGhoOHdLZTF3S2djZ0d0QXA2akl3S2VVcWxqekdRcktTOENKN01DSm9JQ29QOENvRkRiQXFZekFxWFNBcWdEQUlFQ3AvWm9nR2kxQUFkTmFpQnExUUtzNXdLc3NnS3Rhd0t0QmdKWElRSlY0QUt4NWRzREgxSnNtd0t5d1JFQ3N1d2JiT1J0WjIxTVl3TWwwUUsyWUQ5RGJwUURLVWtDdUdJQ3VVc1pBcmt1ZTNBNmNPVUN2UjBETGJZRE1oVUN2b3h5QmdNemRRSytIbk1tYzFNQ3c4OEN3d2h6aG5SUE9VbDA1QU04cXdFRFBKNERQY01DeFlBQ3hrc0N4aFNOQXNodFZRTElTQUxKVXdMSk1nSmtvUUxkMW5oOVpYaXllU2xMMUFNWXAyY0dBbUg0R2ZlVktIc1BYcFpldnhVQ3oyOEN6M0F6VDFmVzl4ZWpBTXF4QXM5M0FTM3VBMDRXZms4SkF0d3JBdHVPQXRKVEExSmdBMU5qQVFVRFZaQ0FqVU1FenhyeFpFbDVBNExTZzVFQzJzc0MyZUtFRklSTnAwQURocWtBTXdOa0VvWjFYZjBBV1FMZmFRTGV2SGQ3QXVJejdSZ0I4elFyQWZTZkFmTFdpd0xyOXdMcGRIMERBdXI5QXVyb0FQMUxBYjBDN28wQzY2Q1dycGNIQXU1REE0WGttSDF3NUhHbEF2TUhBRzBEamhxWmx3TDNGd09SY2dPU2l3TDNuQUw1M1FMNGFwb2dtcSsvTzVzaUE1MkhBdjcrQVI4QVBaOGdBWiszQXdXUkE2WnVBNmJkQU5YSkF3WnVvWXlpQ1EwRERFMEJFd0VqQjNFR1piMXJDUUMvQkcvREZZOGV0eEVBRzNrOUFDY0ROeEpSQTQyREFXY3JKUUNNOHdBbEFPYW5DNk9WQ0xzR0k2ZkpCZ0N2QlJuREJ2RWxSVVlGRm9BRmNEOUdTRE5DS1VLOFgza1pYOFFBbHMwRk9nQ1FWQ0did1RzdVlEb1p1dGNPTnhqT0dKSEovZ1ZmQldBRlh3VmdCV3NGWUFWZkJXQUZYd1ZnQlY4RllBVmZCV0JPSFFqZmpXOEtDZ29LYkY3eE13VFJBN2tHTjhQREFNTUVyOE1BNzBneEZyb0ZUajV4UG5oQ1IwSytYMzAvWC9BQVdCa3pzd0NOQnN4enpBU203MGFDUlM0ckRETWVMejQ5Zm5YZmNzSDVHY29zY1FGejEzWTRId1ZuQlhMSnljbkFDTmRSWXdnSUNBcUVYb1dUeGdBN1A0a0FDeGJaQnUyMUt3MEFqTXNUQXdrVkFPVnRKVVVzSjFKQ3VVTEVTVUFyWHk5Z1BpOUFLd25KUlFZS1REOUxQb0EraVQ1NFBua0NrVUxFVVVwRFg5TldWM0pWRWpRQWMxdzNBM0lCRTNZblgrZzdRaU1KYjZNS2Fpc3pSQ1V1UXJOQ3hEUE1DY3dFWDlFV0p6WVJFQkVFQndJSEtuNmwzM0pDTlZJZnliUEp0QWx0eWRQVUNtaEJady90RUtzWkFKT1ZKVTFDTFJ1eGJVSE9RQW83UDBzK2VFSkhIQThTSlZSUGRHTTBOVnJwdkJvS2hmVWxNMEpISEdVUVVoRVdPMXhMU2o4TU8wdWNOQXFKSXpWQ1J4djlFRnNxS3lBNE9RZ05qMm53WmdwNVpORmdFMkExSzNZSFMyQWhRUW9qSm1DN0RncHpHRzFXWUZVWkNRWUhaTzlnSFdDZFlJVmd1MkJUWUpsd0ZoOEd2UmJjWGJHOFlndERIck1Cd3pQVnlRb25IUWdrQ3lZQmdRSjBBamM0blZxSUF3R1NDc0JQSWdEc0szU1dFdElWQmE1TjhnR2pBbytrVndWSVp3RC9BRVVTQ0R3ZVg0SVRyUlFzSjhLM1R3QlhGRHdFQUIwVHZ6VmNBdG9UUzIwUkl3RGdWZ1o5QkJJbVlnQTVBTDRDb2k4TEZuZXpPa0NuSVFGakFZNEtCQVBoOVJjR3NnWlNCc0VBSmN0ZHNXSVJ1MmtUa1FzdFJ3N0RBY01CS2dwUEJHSUdNREF3S0NZbktUUWFMZzRBS1JTVkFGd0NkbCtZVVowSmRpY0ZEM2xQQWR0MUY5WlpLQ0d4dUUzeUJ4a0ZWR2NBL3dCRkVnaUNCd0FPTEhRU2p4T3RRRGcxejdkZUZSTUFaOFFUQUd0S2IxQXBJaVBIQURrQXZnS2lMeTFERnRZQ21CaURBbEREV05CMGVvN2ZwYU1PL2FFVlJSdjBBVEVRWkJJT0R5TUVBYzhKUWhDYkRSZ3pGRDRUQUVNQXU5WUJDZ0NzQU9rQW01STNBQndBWXh2T05uUitNaFhKQXhnS1F5eEwyK2trSmhNYmhRS0RCTWtTc3ZGMEFEOUJOUTZ1UUM3V3FTUUh3eEVBRUVJdTFoa2hBSDJ6NGlRUHd5SlBITldwZHlZQlJTcG5KQUx6b0JBRVZQUHNIMjBNeEEwQ0NFUUtSZ0FGeUF0RkFsTU53d2pFRFVRSlJBckVMdGFwTWc3RERaZ0pJdytUR3VrRUl3dkRGa01BcUF0REVNTU1CaGlvZStRQU8zTU1SQUFDcmduRUJTUFk5UTBGRG5iU0JvTUFCOE1TWXhrU3hBRUpBUElKQUFCOEZXTU9GdE1jL0hjWHd4aERBQzdEQXZPb3d3QWV3d0pkS0RLSEFBSERBQUxyRlVRVnd3QWJ3eXZ6cFdNV3Y4d0EvQUJwQXkrK2JjWURVS1BEMEtoREN3S21KMU1BQW1NQTUrVVp3eEFhZ3dpcEJSTC9lQURmdzZmREdPTUNHc09qazNsNkJ3T3BvNHNBRXNNT0d4TUFBNXNBYmNNT0FBdkRwME1KR2tNRHdnaXBuTklQQXdmSXFVTUdBT0dEQUFQekFCWERBQWNEQUFuREFHbVRBQnJEQUE3RENoakRqbkVXQXdBQll3QU9jd0F1VXlZQUJzTUFGOE1JS1FBTlVnQzZ3eTRBQThNQURxTXE4d0N5WWdBY0l3QUI4d3FwQUFYT0N4MFY0d0FIb3dCQ3d3RUtBR25EQUF1REFCM0RBQWpEQ2FrQUJkSUFicWNaM1FDWkNDa0FCZElBQUFGREFBZmpBQjJqQ0NrQUJxSUFDWU1BR3pNQWJTTUE1c09JQUFoakFBaERBQlREQkFrcEFBYlNBT09UQUFsREM2a096UHRuQUFkREFHNmtRRkFBVHdBS3d3d0FBME1BQ2JVRFB3QUhJd0FaZ3dBQ0U2Y0RBQW9qQUFwREFBb0RwL01Hd3dBSkl3QURFd0FRUXdnQUZFTUFFWE1BRDVNQURmTUFEY01BR1JNT0ZpTUFGVU1BYnFNV3V3SERBTUlBRTBNTEFHa3pFZ0RoVXdBQ1F3QUVXZ0FYZ3dVakFBYllBQmpEQlNZQmd6QmFBRUZOQUxjUUJ4VU1lZ0F3TW5nQnJBMElaZ0owS3hRSEJSRVBkMU4wWnpLUkp3YUlIQVpxTlQ0RHFRcThCd25nQUI0REF3dDJBWDU2VDFvY0tRTlhBaDFHQVRRR0MzdE94WU5hZ2tnQU1RQTVDUUFEQVFFQVd4TGpBSU9ZTkFFekFIN3RGUms2VGdsU0FGOE5BQWxZQVErUzFBQ0FRd1FvclFCaUFONGRBSjF3UHllVEFOVnp1UURYM0FJZUVNcDlleU1nWGlVQUVka0JrSml6S2x0YlZWQWFSTXFSQUFFQWh5US9TREV6NkJtZlZ3QjZBVEVzT0NsS0lSY0RPRjBFLzgzMkFGTnQ1QUJ5QW5rQ1J4R0NPczk0TmpYZEF3SU5HQm9uREJ3UEFMVzJBd0lDQWdBQUFBQUFBQVlEQlFNREFSclVBd0F0QUFBQUFnRUdCZ1lHQmdZRkJRVUZCUVVFQlFZSENBa0VCUVVGQlFRQUFBSUNBQUFBSWdDTkFKQUFsVDBBNmdDN0FOd0FwRVFBd2dDeUFLMEFxQUR1QUtZQTJnQ2pBT2NCQ0FFREFNY0FnUUJpQU5JQTFBRURBTjRBOGdDUUFLa0JNUURxQU44QTNBc0JDUTh5TzlyYTJ0cTh4dUxUMXRSSk9CMEJVZ0ZjTlUwQldnRnBBV2dCV3dGTVVVbExiaE1CVXhzTkVBczZQaE1PQUNjVUt5MHZNajVBUUVORFEwUkZGRVlHSkZkWFYxZFpXVmhaTDFwYlhWeGNJMk5uWjJab1p5cHNibloxZUhoNGVIaDRlbnA2ZW5wNmVucDZlbnA4ZkgxOGUySUFSUElBU1FDYUFIZ0FNZ0JtK0FDT0FGY0FWd0EzQW5idkFJc0FCZmo0QUdRQWsvSUFud0JQQUdJQVpQLy9zQUNGQUlVQWFRQldBTEVBSkFDMkFJTUNRQUpEQVB3QTV3RCtBUDRBNkFEL0FPa0E2UURvQU9ZQUx3SjdBVkVCUUFFK0FWUUJQZ0UrQVQ0Qk9RRTRBVGdCT0FFY0FWZ1hBREVRQ0FFQVV4OFNIZ3NkSGhZQWpnQ1dBS1lBVVFCcUlBSXhBSFlBYndDWEF4VURKeklESVVsR1R6RUFrUUpQQU1jQ1Z3S2tBTUFDbGdLV0FwWUNsZ0tXQXBZQ2l3S1dBcFlDbGdLV0FwWUNsZ0tWQXBVQ21BS2dBcGNDbGdLV0FwUUNsQUtVQXBRQ2tnS1ZBblVCMUFLWEFwOENsZ0tXQXBVZUFJRVRCUUQrRFFPZkFtRUNPaDhCVkJnOUF1SVpFak1iQVU0L0cxV1pBWHVzUkFGcFlRRUZBMEZQQVFZQW1URWVJSmR5QURGb0FIRUFOZ0NSQTV6TWsvQzJqR0lOd2pNV3lnSVpDYVhkZkRJTEJDczVkQUU3WW5RQnVnRGxob2lIaG9pR2lZcUtob3VPaklhTmtJNklqNHFRaXBHR2tvYVRocFNTbFlhV2hwZUttSWFaaHBxR200YWNpNTJRbm9xZmh1SUM0WFRwQXQ5MEFJcDBMSFNvQUlzQWRIUUVRd1JBQkVJRVJRUkRCRWtFUmdSQkJFY0VTUVJJQkVRRVJnUkpBSjV1ZEFDckE0OTBBTHh1QVExMEFORlpkSFFBMTNRQ0ZIUUEvbUowQVA0QklRRCtBUHdBL0FEOUFQd0RoR1owM0FTTUsyM0hBUDRBL0FEOEFQMEEvQ1IwZEFDUlluUUEvZ0NSQVNFQS9nQ1JBdlFBL2dDUkE0Um1kTndFakN0dHh5UjBBUDlpZEFFaEFQNEEvZ0Q4QVB3QS9RRDhBUDhBL0FEOEFQMEEvQU9FWm5UY0JJd3JiY2NrZEhRQWtXSjBBU0VBL2dDUkFQNEFrUUwwQVA0QWtRT0VablRjQkl3cmJjY2tkQUpMQVQ1MEFsSUJRWFFDVThsMGRBSmZkSFFEcGdMMEE2WURwZ09uQTZjRHB3T25BNFJtZE53RWpDdHR4eVIwZEFDUlluUUJJUU9tQUpFRHBnQ1JBdlFEcGdDUkE0Um1kTndFakN0dHh5UjBCRGgwQUpFRU9RQ1JEcFU1ZFNnQ0FEUjAzZ1YyQ3dBcmRBRUZBTTVpQ25SMEFGMWlBQVljT2dwMGRBQ1JDblFBWEFFSXdXWjBDblJtZEhRQWtXWjBDblJtZEVYZ0FGRjAzZ3AwZEVZMHRsVDJ1M1NPQVFUd3Njd2hqWlpLcmhZY0JTZkZwOVhOYktpVkRPRDJiK2NwZTQvWjE3bVFuYnR6emhhZVF0RTJHR2owSUROVGpSVVN5VHh4dy9SUEhXLyt2UzdkMU5mUnQ5ejlRUFpnNFg3UUZmaENua3ZnTlBJSXRPc0MyZVY2aFBhbm5aTkhsWjl4cndaWElNT2x1M2pTb1FTcTc4V0Vqd0xqdzFFTFNsRjFhQnZmendrNVpYN0FVdlF6alBRS2JEdVErc200d05PcDRBNkFkVnVSUzB0MXkvRFpwZzRSNm03Rk5qTTlIZ3ZXN0JpODh6YU1qT282bE04d3RCQmRqOExQNHlsdjN6Q1hQaGViTUtKYzA2Nm85c0Y3MW9GVy84Slh1ODZISmJ3RElENWx6dzVHV0xSL0xoVDBRcW5wMkpReE5aTmZjYkxJelB5K1l5cHFSbS9sQm1HbWV4KzgyK1Bpc3hVdW1TZUprQUxJVDZySmV6eE1IK0NUSm1RdHQ1dXdUVmJMM3B0bWpEVVF6bFNJdldpOFRsN25nMU5wdVJuMU5nNG4xNFFjKzNJaWw3T3drdk5Xb2dMU1BrbjNwaWhJRnl0eUlHbU1oT2UzbjF0V3N1TXk5QmRLeXFGNFozdjJTZ2dnVEw5S1Z2TVhQbkNiUmUrb091RkZQM0hlakJHL3c5Z3ZtZk5Zdmc2SnVXaWEybGNTU04xdUlqQmt0em9JYXpPSFBKWjdrS0hQejhtUldWZFczbEE4V0dGOWRRRjZCbTY3M2Jvb3YzQlVXRFUySk5jYWhSMjNHdGZIS0xPei92aVorclluWkZhSXpuWE82N0NZRUoxZlh1VFJwWmhZWmtLZTU0eGVvYWdrTkdMcytOVFpIRTByWDQ1L1h2UTJSR0FEWDZ2Y0F2ZHhJVUJWMjd3eEdtMnpqWm80WDNJTGdBbHJPRmhldVo2d3RzdmFJajR5TFk3cXFhd2xsaWFJY3J6MkcrYzN2c2NBbkNrQ3VNek1tWnZNZnU5bEx3VHZmWCszY1ZTeVBkTjlad2dEWmhmalJnTkpjTGlKNjdiOXh4OEpIc3dwcmJpRTN2OVVwaG90QVBJZ25YVklONUttTWMwcGlYaGM2Y0NoUG5OK01SaEc5YWR0ZHR0UVRUd1NJcGw4STQvai8vZDNzejEzMjZxVEJUcFBSTS9IZ2gza3pxRVhzOFpBazRFclFoTk84aHpyUTBETGtXTUEvTis5MXRuMk1kT0puV0MyRkNaZWhrUXJ3endiS09qaHZac2JNOTVRb2VMOXNrWXlNZjRzclZQVkpTZ2c3cE9MVXRyL245ZVQ5OW9lOW5MdEZScGpBOW9rVjJLajhoOWs1SGFDMG9pdlJEOFZ5WGtKODF0Y2Q0ZkhOWFBDZmxvSVFhc3hzdU8xOC80NmRSMmpndWwvVUlldDJHMGtSdm55T05NS2hIczZKMjZGRW9xU3FkK3JmWWplRUd3SFdWRHBYMWZoMWpCQmNLR01xUmVwanU5WTAwbURWSEMrWGRpai9qNDRyS2Z2ZmpHaW5OczFqTy8wRjNqQjgzWENESU5OL0hCODRheGxQKzNFL2tsa3RSbyt2bDNVL2FpeU1KYklvZEUxWFNzRG42VUF6SW9NdFVPYlkyK2svNGdZL2wrQWtaSjVTajJ2UXJreUxtM0ZveGpoRFgrMzFVWEJGZjlYckFIMzFmRnFvQm1ERVp2aHZ2cG5aODdOK29aRXU3VTlPL25uaytRV2ozeDh1eW9SYkVuZitPNVVNcjlpMG5IUDM4SUY1QXZ6ckJXOFlXQlVSMG1JQXpJdm5kUXE5TjN2L0p0bzNhUGpQWFVQbDhBU2RQUHlBcDdqRU5mOGJrN1ZNTTlvbDlYR21sQm1lRE11R3F0K1d6dUw2Q1hBeFhqSWhDUE01dkFDY2hnTUovOFhCR0xPL0QxaXNWdkdod3dISHIxRExhSTVtbjJKci9iMXBVRDkwdWNpRGFTOGNYTkR6Q1d2Tm1UL1BoUWU1ZThuVG5ubmt0OERzL1NJamliY3VtL2ZxRGhLb3B4QVk4QWtTclBuK0lHREVLT08rVTNYT1A2ZGpGczJINU45K29yaE9haGlRazVLbkVVV2ErQ3prVnpocDhiTUhSYmc4MXFoampYdUlLYkhqU0xTSUJLV3FvY2tHdEtpblkrejQvUmRCVUY2cGNjM0ptbmx4VmNOZ3JJNFNFektVWlN3Y0QyUUN5eHpLdmUrZ0FtZzZadVNSa3BQRmE2bWZUaHU3TEpOdTNINUs0MnVDcE52UEFzb2Vkb2xLVi9MSGUvZUorQmJhRzVNRzBOYVNHVlBSVW1ORk1GRlNTcFhFY1h3YlZoN1VFVE9aWnRvVk5SR09JYmJraWczTWNFdFI2OGNHMFJaQW9KZXZXWW83RGcvbFoxQ1F6YmxXZVV2VkhtcjhmWTROcWQ5SkppSC96RVgyNG1KdmlINjBmQXlGcjBBM2M0YkMxajN5WlU2MFZnSnhYbjhKZ0pYTFVJc2lCbm1LbU1Zeis3eUJRRkJ2cWIyZVludVc1OWpvWkJmNTYvd1h2V0lSNFI4d1RtVjgwaTFtWnkrUzQrQlVFUytoemprMHVYcEMvLy96L0lscUhaMW1vbnpsWHA4YUNmaEdLTXRpNzNGSTFLYkwxcTZJS080ZnVCdVo1OWdhZ2puNXhVNzltdU1wSFhnNlMrZStnRE0vVTlCS0xIYmw5bDZvOGN6UUtsNFJVa0pKaXFmdFFHMmkzQk1nL1RRbFVZRmtKRFlCT092QXVnWXV6WVNEblpiRERkL2FTZDl4ME9lNkYrYkpjSGZsOStncDZMNS9UZ0ErQmRGRm92YmZDclE0MHM1dk1Qdzg4NjZwTlg4enlGR2VGV2R4SXBQVnA5UmcxVVBPVkZiRlpydmFGcS9ZQXpIUWdxTVdwYWhNWWZxSHBtd1hmSEwxL2twWW1HdUhGd1Q1NW1RdTBkeWxmTnVxMk9xMGhUTUNQd3FmeG51QklQTFhmY2k0WTFBTnkrMUNVaXBReGxkL2l6VmgxNld5RzJRMENRUTlOcXRBbngxSENId0RqN3NZeE9TQjB3b3BaU25PenhRT2NFeG14clZURjJCa090aFZwR2Z1aGFHRUNmQ0pwSktwam5paFkreE9UMlFKeE42MSs5SzZRU3F0djJTaHI4MkkzamdKcnFCZzB3RUxGWlBqdkhwdnpUdGFKbkxLNlZiOTdZbjkzM2tvTy9zYU43ZnNqd05LenA0bDJsSlZ4Mm9yakNHekMvNFpMNHpDdmVyNmFRWXRDNXNkb3ljaHVGRTZ1Zk9pb2crVldpNVVEa2Jtdm10YWgvM2FBckVCSWkzOXM1SUxVbmxGTGdpbGNHdXo5Q1FzaEVZN2Z3Mm91b0lMQVlQVlQvZ3lBSXEzVEZBSXdWc2wra3RrUnovcUdmbkNER3JtNWdzbC9sOVFkdkNXR3NqUHozZFU3WHVxS2ZkVXJyLzZYSWdqcDRyZXk2QUpCbUNtVUpNaklUSFZkRmI1bTFwK2RMTUNMOHQ1NXpENDJjbWZ0bUxFSkMwRGEwNFlpUkNWVUJMTGE4RDA3MS9ONVVCTkJYRGgwTEZzbWhWLzVCNUV4T0I0ajNXVkcvUzNsZks1bytWNkVMSHZ5NlJSOW40YWMrVnNLNFZFNHlwaFB2VitrRzlGZWdUQkg0WlJYTDJIeXRVSENkdUphekIvS3lramZldFl4T1hUTHdzMjY3YUdPZCtJK0poS1AvLytWblhtUzkwT0QvanZMY1Z1MGFzeXFjdVlOMW1TYjZYVGxDa3F2MXZpZ1pQSVl3TkYvenBXY1QxR1IvNmFFSVJqa2gweWhnNExYSmZhR29iWUpUWTRKSTU4S2lBS2dtbWdBS1dkbDVuWUNlTHFhdlJKR1FOdVl1WnRaRkd4K0lrSTR3NE5TMnh3YmV0Tk11bk9qQnUvaG1LQ0kvdzd0ZmlpeVVkLy80cmJUZVd0NGl6Qlk4WXZHSU42dnlLWW1QLzhYOHdIS0NlTitXUmNLTTcwK3RYS05HeWV2VTlIMkRnNUJzbGpuVGY4WWJzSjFUbU1zNzRDZTJYbEhpc2xlZ3VoeWVnNDRyUU9IWnV3LzZIVGtobm51cksyZDYycTZ5UzcyMTBTc0FJYVIralhNUUErc3Zrckxwc1VZK0YzMFV3ODl1T2RHQVI2dm80RklNRTBFZlZWZUhUdTZlS2ljZmhTcU9lWEpoYmZ0Y2QwOHNXRW5OVUwxQzlmbnByVGdkODNJTXV0OG9uVlVGMGh2cXpaZkhkdVBqYmp3RVhJY29ZbXkrUDZ0Y0paSG1lT3Y2VnJ2RWRrSERKZWNqSHVIZVdBTmU3OVZHNjYycVRqQS9IQ3Z1bVZ2M3FMK0xyT2NwcUdwczJaR3dRZEZKN1BVNGl1eVJsQnJ3Zk8reG5QeXI0N3MyY1hWYld6QXl6bkRpQkdqQ00za3N4ampxTTYyR0U5QzhmNVUzOGtCM1ZqdGFiS3AvblJkdk1FU1BHREc5MGJXUkxBdDFRazVEeUx1YXpSUjFZemRDMWMraFpYdkFXVjh4QTcyUzRBOEI2N3ZqVmhiYmEzTU1vcDI5M0ZlRVhwZTd6SXRNV3JKRy9MT0g5QnlPWG1Zbk5KZmptZnVYOUticnBnTE9iYTRuWitmbDhHYmR2L2lodis2d0ZHS0hDWXJWd21oRkMwSjNWMmJuMnRJQjF3Q2MxQ1NUM2QzWDJPeXhoZ3VYY3M0c202NzlVbmd6b2Z1U2VCZXdNRkpib0lRSGJVaC9tMkpoVzJoRzlESXZHMnQ3eVpJektCVHo5d0J0bk5DKzJwQ1JZaFNJdVExajh4c3o1VnZxbnlVSXRodnVveXl1N2ZOSXJnL0tRVVZtR1FhcWtxWmsvVng1YjMzL2dzRXM4eVg3U0MxSitOVjRpY3o2YnZJRTdDNUc2TWNCYUk4clZnNTZxNVFCSld4bi84N1Exc1BLNCtzUWE4ZkxVNWdYbzRwYWFxNGNPY1E0d1IwVkJIUEdqS2grVWxQQ2JBMW5MWHlFVVg0NXFaOEo3L0xuNEZQSkUyVGR6RDBaOE1MU05RaXlrTU1tU3lPQ2lGZnk4NFJxNjBlbVlCMnZEMDlLall3c29JcGVEY0JEVEVsQmJYeE5ENzJ5aGQ5cEMvMUNNaWQvNUhVTXZBTDI3T3RjSUpEek5LcFJQTnFQT3B5dDJhUEd6OVFXSXM5aFE5TGlYNXM4bTloalRVdS9mN015SWF0ampkK3RTZlEzdWZaeFBwbUpoVGFCdFp0S0xVY2ZPQ1VxQUR1TytRb0g4Qjl2NlUrUDBIVjFHTFFtdG9ORlRiM3M3NGl2WmdqRVMwcWZLKzhSZEdnQmJjQ01TeThlQnZoOTgrZXQxS0lGcVNlMUtRUHlYVUxCTVRzSVlueXNJd2laQkpZZEkyMHZzZVYrd3VKa2NxR2VtZWhLamFBYjlMNTd4Wm0zZzJ6WDBiWjJ4ay9mVStiQ283VGxuYlc3SnVGMVlkVVJvLzJHdzdWY2xERzFXN0xPdGFzMkxYNHVwaWZaLzIzcnpwc25ZL0FMZlJncmNXUDVoWW1WOVZ4Vk9RQTFmWnZwOUYyVU5VKzdkN3hSeVZtNXdpTHAzLzBkbFY3dmR3MVBNaVpyYkRBWXpJVnFFalJZMllVMDNzSmhQbmx3SVBjWlVHNWx0TDZTOFhDeFUxZVlTNWNqcjM0dmVCbVhBdnk3eU40WmpBcklHMGRmRC81VXBCTmxYMVpQb3hKT3d5cVJpM3dRV3RPemQ0b05LaDBMa29UbThjd3FnSWZLaHFxR09od283MUkrelhuTWVtVHYyQjJBVXpBQld5Rnp0R2dHVUxqRER6V1l3SlVWQlRqS0NuNUsyUUdNSzFDUVQ3U3p6aU9qbytCaEFtcUJqenVjM3hZeW0yZWVkR2VPSVJKVnlUd0R3MzdpQ01lNGc1VmJuc2I1WkJkeE9Bbk1UN0hVNERIcHhXR3VRN0dlaVkzMENwYnZ6c3M1NSs1S20xWXNiRDVlYTNOSTlRTllJWG9sNWFwZ1N1OWRaOGY4eFM1ZHRIcGlkbzVCY2xEdUxXWTRsaGlrMHRiSmEwN3lKaEgwQk95RXV0L0dSYllUUzZSZmlUWVdHTUNrTnBmU0hpN0h2ZGlUZ2xFVkhLWlhhVmhlekg0a2tYaUl2S29wWUFsUHVzZnRwRTRhNUlad3Z3MXgvZUx2b0RJaC96cG85RmlRSW5zVGIyU0FrS0hWNDJYWUJqcEpEZzQzNzRYaVZiM3dzNHFNMHM5ZVNRNUh6c01VNE9aSkt1b3BGakJNK2RBWkVsOFJVTXg1dVUyTjQ4NktyMTQxdFZzR1FmR2pPUllNQ0pBTXN4RUxlTlQ0Um1XalJjcGRUR0J3Y3g2WE45ZHJXcVBtSnpjckdySDQrRFJjNytuMXcza1Bad3UwQmtOcjZoUXJxZ283SlRCOUE1a2RKL0g3UDRjV0JNd3NtdWl4QXpKQjN5clFwbkdJcTkwbHhBWEx6RENkbjFMUGlic1J0N3JITmpnUUJrbFJnUFo4dlRialhkZ1hyVFdRc0s1TWRyWFhRVlBwMFJpbnEzZnJ6WktKMHFENlFoYzQwVnpBcmFVWGxvYjFndmtoSzN2cG1IZ0k2RlJsUVpOeDZlUnFrcDB6eTRBUWxYODEzZkFQdEwzak1SYWl0R0ZGam8wem1FcmxvQytoK1lZZFZRNms0Ri9lcHhBb0YwQm1xRW9LTlR0Nmo0dlFaTlEyQm9xRjlWajUzVE9Jb05tRGl1OVhwMTVSa0lnUUlHY29McGZvSWJlbnpwR1VBdHFGSnA1VytMTG54MzhqSGVFQ1RKL25hdktZMU5XZk4wc1kxVDgvcEI4a0lIM0RVM0RYK3U2VzNZd3B5cEJNWU9oYlN4R2pxODRSWjg0ZldKb3c4cHlIcW40Uy85SjE1RWNDTXNYcXJmd3lkOW1oaXUzK3JFbzlwUHBvSmtkWnFIanJhNE52ekZ3dVRoTkt5Nmhhby9TbEx3M1pBRFVjVXAzdzNTUlZmVzJyaGw4MHpPZ1RZbktFMEhzMnFwMUo2SDN4cVBxSWt2VURSTUZEWXlSYnNGSTNNOU1FeW92UGs4cmx3Ny8wYTgxY0RWTG1Cc1IyemUycEJ1S2IyM2ZiZVpDMHVYb0l2RHBwZlR3SUR4azFPcTJkR2VzR2Mrb0pYV0pMR2tPaGEzQ1grRFVuemdBcDlIR0g5UnNQWk42M0huNFJNQTVlU1ZoUEhPKzlSY1JiL0lPZ3RXMzFWMVE1SVBHdG94UGpDK01FSmJWbElNWUFEZDlhSFlXVUlRS29wdVBPSG1vcVNrdWJuQUtuemdLSHFnSU9mVzVSZEFnb3RONkJOK08yWllIa3VlbUxudlE4VTlUSFZyUzFSdExtS2JjQzdQZWVEc1l6bnZxemVnNlZDTndtcjBZeXgxd25ManlUODRCWnozRUp5Q3B0RDN5ZXVlQXlEV0lzMEwycXMvVlEzSFV5cWZyamEwVjFMZER6cUFpa2VXdVY0c2M3UkxJQjY5akVJQmpDa3laZWRvVUhxQ3JPdlNoVnp5ZDczT2RySlcwaFBPdVF2MnFPb0hEYzl4VmI2WXU2dXEzWHFwMlphSDQ2QTdsemV2YnhRRW1mcnp2QVlTSnVaNFdEazFIejNRWDFMVmRpVUswRXZsQUdBWWxHM01kMzByN2RjUE42M3lxQkNJajI1cHJwdlpQMG5JNCtFZ1dvRkc5NVY1OTZDdXJYcEtSQkdSalFsSEN2eTVJYi9pVzhuWkpXd3JFVDNtZ2Q2bUVoZlA0S0N1YUxqb3BXczdoK01kWEZkSXY4ZEhRSmdnMXhpMWVZcUIwdURZanh3Vm1yaTBTdjVYS3V0L29ucWFwQytGUWlDMkMxbHZZSjlNVmNvNnlEWXNTM0FBTlVmTXR2dGJZSTJoZndaYXRpU3Nub1VlTVpkMzRHVmprTU1LQStYbmpKcFhnUlcyU0hUWnBsVm93UG1Kc3ZYeTZ3M2NmTzFBSzJkdnRaRUtUa0MvVFk5TEZpS0hDRzBEbnJNUWRHbTJsemxCSE05aUVZeW5IMlVjVk1oVUVqc2Mwb0RCVGdvMlpTUTFnemtBSGVXZUJYWUZqWUx1dWY4eXpUQ3k3L1JGUjgxV0RqWE1icTJCT0g1ZFVSbnhvNm9pdm14TDNjS3pLSW5sWmtEMzFudnBIQjlLazdHZmNmRTF0KzFWNjRiOUx0Z2VKR2xwUkZ4UUNBcVdKNURvWTc3c2tpOGdzT0VPcjJ1eXdaYW9PL05HYTBYMHkxcE5RSEJpM2IyU1VHTnBjWnhEVDdyTGJCZjFGU25ROGd1eEdXM1crMzZCVzBnQmplNERPejZCYTZTVmsweGlLZ3QrcTJKT0Z5cjRTWWZudStJYzFRWllJdXdIQnJnenI2VXZPY1NDelBUT283RDZJQzRJU2VTN3prbDRoKzJWb2VIcG5HL3VXUjMreXNOZ1BjT0lYUWJ2MG40bXIzQndRY2RLSnhnUFNleXVQL3oxSmpnNGU5blV2b1hlZ3FRVklFMzBFSHg1R0h2K0ZBVlVOVG93WURKZ3lGaGY1SXZsWW1FcVJpZjYrV04xTWtFSm1EY1FJVHg5RlgyM2E0bXh5MUFRUnNPSE8vK2VJbVg5bDhFTUpJM29QV3pWWHhTT2VIVTFkVVdZcjJ1QUE3QU1iK3ZBRVpTYlUzcW9iOWliQ3lYZXlwRU1wWjY4NjNvNlFQcWxxR0haa3VXQUJTVFZOZDRjT2g5aHYzcUVwU3gyWnkvREpNUDZjSXRFbWlCSjVQRnFRbkRFSXQzTnJBM0NPbE9TZ3o0M0Q3Z3BORk5KNU1CaDRvRnpoRFBpZ2xDMnlwc05VNElTeXdZMmVya3liMU5DM1FoL0lmV2owZURnWkk0L2xuOFdQZkJzVDNtZVRqcTFVcXQxRTdabC9xZnRxa3g2YU05S3VlTUNla1NuTXJjSGoxQ3FUV1d6RXpQc1pHY0RlM1VlNFdzK1hGWVZ4TmJPRkY4ZXprdlFHUjZaT3RPTFUybFFFbk1CU3R4NDd2RTZQYjdBWU1CUmoyT09mWlhmaXNqSm5wVGZTTmpvNnNaNnFTdk54Wk5tRGVTN0drM3lZeUNrMUh0S04yVW5oTUlqT1hVekFxRHY5MGx4OU8vcS9BVDFaTW5pdDVYUWU5d21ReG5FL1dTSDBDcVo5LzJIeStTZm1wZWc4UndzSEk1WjhrQzhIMjkzbS9MSFZWTS9CQTdIYVRKWWc1RW5rN00veFdwcTAxOTJBQ2ZCYWkyTEEvcXJDakNyNkRoMUJJTXpNWElOQm1YOTZNSjVIbjJueGxuL1JYUEZod0h4VW1TVjBFVjJWMGptODYvZHh4dVlTVTFXN3NWa0ViTjlFemtHMFFGd1BoeUhLeWIzdCtGajVXb1VVVEVyY2F6RS9ONkVXNkx2cDBkLy9TRFBqN0VWOVVkSk4rQW1uZjNXd2szQTBTbEo5WjAweXZYWjduM3o3MEc0N0hmc293OFdxMUpYY2Z3bkErWXhhNW1Gc2dWNDY0S0tQNFQzMXdxSWd6RlBkM2VDZTNqNW9yeTVmQkYyaGdDRnlWRnJMekk5ZWV0Tlh2TTdvUXF5RmdEbzRDVHAvaERWOU5NWDlKREhRL255SFRMdlpMTkxGNmZ0bjJPeGpHbTgrUHFPd2h4blBIV2lwa0UvOHdidHlyaTgwU3I3cE1Oa1FHTWZvNFpZSzlPY0NDNEVTVkZGYkxNSXZseFNvUnFXaWUwd3hxbkxmY0xTWE1TcE1NUUVKWURWT2JZc1hJUU52NFRHTndqcTFrdlQxVU9raWNUckczSWFCWjNYZFNjUzN1OHNnZVpQVnBPTGtiaUY5NDBGamJDZU5SSU5OdkRiZDAxRVBCclRDUHBtMTJtNDN6ZTFiQkI1OUlhNk92aG51ci9OdngzSXh3U1dvbCszSDJxZkNKUjhkZjZhUWY0djZXaU9OeGtLK0lxVDRwS1FyWksvTHBsZ0RJL1BKWmJPZXA4ZHRiVjdvQ3I2Q2dmcFdhOE5jek9rUHg4MWlTSGJzTmhWU0pCT3RyTElNckwzMUxLOVRxSHFBYkFIZTBSTG1tVjgwNmtSTERMTkVoVUVKZm05dTBzeHBrTDkzWmdkNnJ3K3RxQmZUTWk1OXhxWEhMWFNId1NiU0JsMEVLMCtsb0VDT1B0cmwrL25zYUZlMTk3ZGk0eVVnb2U0aktvQUpEWGM2REdEanJRT29GRFdaSjlIWHd0OHhEclFQKzdhUndXS1dJMUdGOHM4TzRLenhXQkJjd25sM3ZubDFPZXozb2g2RWExdmpSNy96N0REVHJGdHFVMlcvS0FFekF1WEROWjdNWTczTUYyMTZkemRTYldtVXA0bGNtN2tlSmZXYU1IZ3V0OXg1QzltajY2WjBsSit5aHNqVnZ5aVdyZmsxbHpQT1RkaEcxNVk3Z1FsWHRhY3ZJN3F2L1hOU3NjRHdxa2d3SFQvZ1VzRDV5QjdMZFJSdkp4UUdZSU5uOWhUcG9kS0ZWU1RQcnRHdnlRdytIbFJGWElrb2RFckFHdTlJeTFZcGZTUGMzamtGaDVDWDNsUHh2N2FxakUvSkFmVElwRWpHYi9IN01PMGUydnNWaVNXMXFhL0xtaTQvbjRERUkzZzdsWXJjYW5zcERmRXBLa2RWMU9qU0xPeTBCQ1VxVm9FQ2FCNTV2czA2clhsNGpxbUxzUHNGTS83dllKMHZyQmhEQ20vMDBBL0g4MWwxdWVrSi82TG1sM0hiOStOS2lMcUFUSm1EcHl6ZllaRkh1bUVqQzY2MkwwQndreGk3RTlVNGNRQTBYTVZEdU1ZQUllTE1QZ1FhTVZPZDhmbXQ1U2ZsRklmdUJvc3plQXc3b3c1Z1hQRTJZL3lCYy83akV4QVJVZi9CeElIUUJGNVNuM2k2MXc0ejV4SmRDeU8xRjFYMyszYXgrSlN2TWVaN1M2UVNLcDFGcC9zall6NlorVmdDWnppYkdlRW91anJ5Zk11bEg3UmFpNWtBZnQ5ZWJjVzUwRHlKcjJ1bzJ6OTdtVFdJdTQ1WXNTbk5TTXJyTlV1RzFYc1lCdEQ5VERZelFmZktCODd2V2JrTTRFYlBBRmdvQlY0R1FTK3Z0RkRVcU9GQW9pMW5UdG1JT3ZnMzhONGhUMlNuOHI4Y2xtQkNYc3BCbE1CWVRucnFGSkdCVDN3Wk96QXlKRHJlOWRISDcreDdxYWFLRE9CNFVRQUxENWVjUzBERTRvYnViUUVpdUpaMEVwQlZwTHVZY2NlOEFhNFBZZC9WNERMREFKQllLUVBDV1RjckVhWjVIWWJKaTExR2Q2aGpHb20xaWkxOFZIWW5HMjhOS3BrejJVS1ZQeGxoWVNwOHVacjM2N2lPbW95N3pzeGVoVzl3emN5MnpHMGE4MFBCTUNSUU1iMzJobmFIZU9SOGZuTkR6WmhhTlloa09kRHNCVVozbG9ETWExWVAwdVMwY2pVUDNiLzZEQmxxbVpPZU5BQkRzTGw1Qkk1UUp1cHM4dXhBdVdKZGtVQi9wTzZaYXg2dHNnN2ZONW1qakRnTUduZ08rRFBjS3FpSElEYkZJR3VkeHRQVEl5RGk5U0ZNS0JEY2ZkR1FSdjQxcTFBcW14Z2tWZkpNblA4dy9CYzdOOS9UUjZDN21HT2JGcUZrSUVvbThzS2kyeFlxSkxUQ0hLN2N4emFadnFPRG8yMmMzd2lzQkNQNEhlQWdjUmJOUEFzQmtOUmhTbUQ0OGRIdXBkQlJ3NG1JdnRTNW9lRjZ6ZVQxS01DeWhNbm1ocGtGQUdXbkdzY29Oa3d2UThaTTVsRS92Z1RIRllMOTlPdU54ZEZCeFRFRGQ1djJxTFI4eTlXa1hzV2dHNmtaTm5kRkcrcE8vVUFrT0NpcHFJaEwzaHE3Y1JTZHJDcTdZaFVzVG9jRWNuYUZhNm5Wa2huU2VSWVVBMVlPMHo1aXRGOVNseTNWbHhZRHcyMzlUSkpINmYzRVVmWU81bGI3YmNGY3o4QnA3T284UW1uc1VIT3ovZmFnVlVCdEtFdzFpVDg4aithS2t2OGNzY0tOa014allyODM0NEQxa0ZvWjcvdGQxVzZMQ05ZTjU5NDMwMXRVR1JtRmpBemVSZzV2eW9NMUY2K2JKWi9RNTRqTi9rOFNGZDNEeFBUWWFBVXNpdnNCZmdUbjdNeDhIMlNwUHQ0R09kWVJuRUpPSDZqSE0ycDZTZ0IwZ3pJUnE2Zkh4R01tU21xYVBDbWxmd3hpdWxvYVZJaXRMR044d2llMkNEV2hrekxvQ0pjT0RoN0tJT0FxYkhFdlhkVXhhUzRUVFRzMDdDbHpqLzZHbVZzOWtpWkRlck14RW5oVUI2UVFQbGNmcWtHOTg4MlJxSG9MaUhHQm9IZlF1WElzQUc4R1RBdGFvMktWd1JudnZhbThqbzFlMzEyR1FBS1dFYTRzVVZFQU1HNEc2Y2tjT05Ed1JjZzFlMkQzK29oWGdZNFVBV0Y4d0hLUU1yU256Q2dmRnBzeGgrYUhYTUd0UFFyb1Fhc1JZNFU2VWRHMHJ6MVZqYmthME1la09HUlpRRXZxUUZseHNlRm9yOHpXRmdIZWszdjI5K1dxTjZnYUs1Z1pPVE9NWnpwUUlDMTIwMUxrTUNYaWxkM3ZXWFNjNVVYOXhjRllmYlJQekdGYTFGRGNQZlBCL2pVRXEvRmVHdDQxOUNJM1ltQmxWb0hzYTRLZGN3UVA1WlN3SEhoRko3L1BoL1JhcC80dm1HOTFlRHdQUDBsRGZDRFJDTHN6VHFmek03MXhwbWlLaTJId1M0V2xxdkdOd3R2d0Y1RHFwbjZLVHE4YXgwMFVNUGt4RGNackVFRXNJdkhpVVhYRXBoZGI0R0I0RnltbFB3Qno0R3BlcnFxNXBXN1RRNi95TlJoVzhWVDVOaHVQMHVkbHhvNGdJTHE1WnhBWms4WkdoM2c0Q3F4SmxQS1k3QVF4dXBmVWNWcFdUNVZJdHAxKzMwVXFveVA0d1dzUm8zb2xSUmdrV1paMlpONlZDM09aRmVYQjhOYm5VclNkaWtOcHREMVFpR3VLa3I4RW1TUi9BSzlSdytGRjNzNXV3dVBidkhHaVBlRk9WaWx0TUs3QVVhT3NxOSt4OWNuZGszaUpFRTVMS1pSbFdKYktPWndlUk96bVBOVlBrakUzSy9UeUE1N1JzNjhUa1ozTVI4YWtLcG03Y0ZqbmpQZC9EZGtXamdZb0tIU3I1V3U1c3NvQllVNGFjUnM1ZzJESHhVbWRxOFZYT1hSYnVuRDhRTjBMaGdrc3NnYWhjZG9Zc052dVhHVUsvS1hELzdvRmIrVkdkaHFJbjAydmV1TTViTHVkSk9jMkt5MEdNYUc0Vy94V0J4SUpjTDd5bGlKT1hPcHgwQWtCcVVnemxEY3ptTFQ0aUlMWER4eHRSUjFvWmEySldGZ2lBYjQzb2JySm5HL1RaQzJLU0syd3FPelJaVFhhdlpaRk1iMWYzYlh2VmFOYUs4Mjh3OVRPNjEwZ2s4Sk5mM2dNZkVUelhYc2JjdlJHQ0c5SldRWjYrY0RQcWM0NDY2WW8yUmNLSCtQSUxlS09xdG5sYkluUjNNbUJlR0czRkgxMHl6a3lidXFFQzJIU1F3cEEwQW43ZDkrNzNCa0RVVG0zMGJabW9QL1JHYmdGTitHckNPZkFEZ3FyMFdiSTFhMW9rcEZtczhpSFl3OWhtMHpVdmxFTWl2QlJ4TW9kcmJKSis5L3AzalVkUVE5QkN0UWR4bk9HclQ1ZHpSVW13MDU5My9tYlJTZEJnMG5SdlJaTTUvRTE2bTdaSG1ERXRXaHd2ZmRaQ1o4SjhNMTJXMHlSTXN6WGFtV2ZRVHdJWjRheVlrdHJuc2NRdVdyOGlkcDNQalQyZUYvam10ZGhJZmNwTW5iK0lmWlkyRmViVzZVWS9BSzNqUDR1M1R1NHpFNHFsblFnTEZiTTE5RUJJc05mN0toamRicVEvRDZ5aURiK05sRWkyU0tEK2l2WFZVSzhpYjBvQm8zNjZnWGtSOFp4R2pwSklEY0VnWlBhOVRjWWUwVEliaVBsL3JQVVFEdTNYQko5WC9HTnEzRkFVc0tzbGw1N0R6YUdNcmpjVCtnY3RwKzlNTFlYQ3Erc3FQODFlVlEwcjlsdCtnY1FmWmJBQ1JiRWp2bE1za3p0Wkc4Z2JDOFFuOXR0MjZRN3k3bkRyYlpxL0xFejdrUjZKYzZwZzNOOXJWWDhZNU1KckdsTUw5cDlsVTRqYlRrS3FDdmVlWlVKakhCMDNtMktSS1IyVHl0b0ZrVFhPTGc3a2VVMXMxbHJQTVFKcG9PS0x1QUFDK3kxSGxKdWNVNnlzQjVoc1hodlNQUExxNUo3SnRucUhLWjR2WWpDNFZ5ODE1M1FZKzY3ODB4RHVHQVJzR2JPczFXcXpIMFFTNzY1cm5TS0ViYktsa084b0kvVkR3VWQwaXMxM3RLcHFJTHUxbURKRk55L2lKQVdjdkRnanh2dXNJVCtQR3ozU1QvSjlyOU10ZmQwanBhR2VpTFlJcVhjN0RpSFNTOFRjakZWa3NpNjZQRWt4VzF6NnVqYkxMVUdOTlluek9XcEg4QlpHSzRiQ0s3aVIrTWJJdjhuY0RBejF1NFN0TjN2VFR6ZXdyOUlRams5d3hGeG4rNk4xZGRLczB2ZmZKaVMwOE4zYTRHMVNWcmxaOTdRL00rOEc5ZmU1QVA2ZDkvUXE0V1JuT1JWaG9mUElLRWRDcjNsbHNwVWZFMG9LSUlZb0J5QlJQaCtiWDFITFMzSldHSlJoSXZFMWFXNE5UZDhlUGk0WitrWGIrWjhzbllmU05jcWlqaEFnVnN4NFJDTTU0Y1hVaVlramVCbW1DNGFqT0hyQ2hvRUxzY0pKQzcrOWpqTWp3NUJhZ1pLbGdSTWlTTll6N2g3dnZaSW9RcWJ0UW1zcGMwY1VrMUcvNzNpWHRTcFJPbDV3dExnUWkwbVcyRXg4aTNXVUxoY2dneDZFMUxNVkhVc2RjOUdISTFQSDNVMktvMFB5R2RuOUtkVk9MbTdGUEJ1aTBpOWEwSHBBNjBNc2V3VkU0ejhDQXQ1ZDQwMUd2NnpYbElUNVliaXQxVklBMEZDczd3dHZZcmVydTFmVXlXM29MQVovK2FUblpyT2NZUk5WQThzcG9SdGxSb1dmbHNSQ2xGY2d6a3FpSE9yZjAvU1Z3K0VwVmFGbEowZzRLeHExTU1PbWlRZHBNTnB0ZThsTU1RcW02Y0lGWGxuR2JmSmxseXNLRGkrMEpKTW90a3FnSXhPU1FnVTlkbi9sV2tlVmY4blVtM2l3WDJObDNXRHc5aTZBVUszdkJBYlpacmNKcERRL042NEFWd2pUMDdKZWYzMEdTU210TnUyV2xXN1lveVcyRmxXZlpGUVV3azg2N0VkTFlLazlWRzZKZ0VuQmlCeGtZN0xNbzRZTFFKSmxBbzlsL29UdkprU0FSREYvWHR5QXpNOE8ydDNlVC9pWGE2d0ROM1dld05tUUhkUGZzeENoVS9LdExHMk1uOGk0WnFLZFNsSWFCWmFkeEptUnpWUy9vNHlBNjVSVFNWaXE2MG9hMzk1THF3MHB6WTRTaXB3RTBTWFhzS1YrR1pyYUdTa3IvUlcwOHdQUnZxdlNVa1lCTUE5bFB4NG0yNGF6K0lIbUNiWEErMGZheFRSRTl3dUdlTzA2RElYYTZRbEtKM3B1SXlpdUFWZlByNzM2dnpvMnBCaXJTK1Z4ZWwzVE1tM0pLaHo5bzJab1J2YUZWcElreWtiMEhjbTRvSEZCTWNOU05qNy80R0p0NDNvZ29uWTJWZzRuc0RRSVd4QWNvcnBYQUN6Z0JxUVBqWXNFL1ZVcFhwd05NYW5FcnU0TndNQ0ZQa1h2TW9xdm9lTE4zcXl1L04xZVdFSHR0TUQ2NXYxOWwvMGtIMm1SMzVpdi9GSSt5am9ISjlnUE16NjdhZjNNcS9Cb1dYcXUzcnBoaVdNWFZrbW5QU0VrcEdwVUkyaDFNVGhpZGVHRkVPSzZZWkhQd1l6TUJ2cE5DNytaSHhQYjdlcGZlZkd5SUI0SnpPOURUTkVZbkRMVlZIZFF5dk9FVmVmcms2VXY1a1RRWVZZV1dkcXJkY0lsN3lsand3SVdkZlEveSsyUUIzZVIvcXhZT2J1WXlCNGdUYm8yaW40UHphclUxc085bkVUa21qOS9Bb3hEQStKTTNHTXFRdEpSNGp0ZHVIdG5vQ0x4ZDFnUVVzY0hSQi9Nb1JZSUVzUDJwRFo5S3ZIZ3RsazFpVGJXV2JIaG9od0ZFWVg3eTUxZlVWMm51VW1ub1VjcW5XSVFBQWdsOUxUVlgrQmMwUUdORWhDaHhIUjRZamZFNTFQVWRHZnNTRkU2Y2s3QkwzL2hUZjlqTHE0RzFJYWZJTnhPTEtlQXRPN3F1dWxZdkg1WU9CYyt6WDdDck1nV25XNDcvamZSc1duSmpZWW9FN3hNZldWMkhOMml5SXFMSSc7XG5jb25zdCBGRU5DRUQgPSBuZXcgTWFwKFtbODIxNyxcImFwb3N0cm9waGVcIl0sWzgyNjAsXCJmcmFjdGlvbiBzbGFzaFwiXSxbMTI1MzksXCJtaWRkbGUgZG90XCJdXSk7XG5jb25zdCBOU01fTUFYID0gNDtcblxuZnVuY3Rpb24gZGVjb2RlX2FyaXRobWV0aWMoYnl0ZXMpIHtcclxuXHRsZXQgcG9zID0gMDtcclxuXHRmdW5jdGlvbiB1MTYoKSB7IHJldHVybiAoYnl0ZXNbcG9zKytdIDw8IDgpIHwgYnl0ZXNbcG9zKytdOyB9XHJcblx0XHJcblx0Ly8gZGVjb2RlIHRoZSBmcmVxdWVuY3kgdGFibGVcclxuXHRsZXQgc3ltYm9sX2NvdW50ID0gdTE2KCk7XHJcblx0bGV0IHRvdGFsID0gMTtcclxuXHRsZXQgYWNjID0gWzAsIDFdOyAvLyBmaXJzdCBzeW1ib2wgaGFzIGZyZXF1ZW5jeSAxXHJcblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBzeW1ib2xfY291bnQ7IGkrKykge1xyXG5cdFx0YWNjLnB1c2godG90YWwgKz0gdTE2KCkpO1xyXG5cdH1cclxuXHJcblx0Ly8gc2tpcCB0aGUgc2l6ZWQtcGF5bG9hZCB0aGF0IHRoZSBsYXN0IDMgc3ltYm9scyBpbmRleCBpbnRvXHJcblx0bGV0IHNraXAgPSB1MTYoKTtcclxuXHRsZXQgcG9zX3BheWxvYWQgPSBwb3M7XHJcblx0cG9zICs9IHNraXA7XHJcblxyXG5cdGxldCByZWFkX3dpZHRoID0gMDtcclxuXHRsZXQgcmVhZF9idWZmZXIgPSAwOyBcclxuXHRmdW5jdGlvbiByZWFkX2JpdCgpIHtcclxuXHRcdGlmIChyZWFkX3dpZHRoID09IDApIHtcclxuXHRcdFx0Ly8gdGhpcyB3aWxsIHJlYWQgYmV5b25kIGVuZCBvZiBidWZmZXJcclxuXHRcdFx0Ly8gYnV0ICh1bmRlZmluZWR8MCkgPT4gemVybyBwYWRcclxuXHRcdFx0cmVhZF9idWZmZXIgPSAocmVhZF9idWZmZXIgPDwgOCkgfCBieXRlc1twb3MrK107XHJcblx0XHRcdHJlYWRfd2lkdGggPSA4O1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIChyZWFkX2J1ZmZlciA+PiAtLXJlYWRfd2lkdGgpICYgMTtcclxuXHR9XHJcblxyXG5cdGNvbnN0IE4gPSAzMTtcclxuXHRjb25zdCBGVUxMID0gMioqTjtcclxuXHRjb25zdCBIQUxGID0gRlVMTCA+Pj4gMTtcclxuXHRjb25zdCBRUlRSID0gSEFMRiA+PiAxO1xyXG5cdGNvbnN0IE1BU0sgPSBGVUxMIC0gMTtcclxuXHJcblx0Ly8gZmlsbCByZWdpc3RlclxyXG5cdGxldCByZWdpc3RlciA9IDA7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBOOyBpKyspIHJlZ2lzdGVyID0gKHJlZ2lzdGVyIDw8IDEpIHwgcmVhZF9iaXQoKTtcclxuXHJcblx0bGV0IHN5bWJvbHMgPSBbXTtcclxuXHRsZXQgbG93ID0gMDtcclxuXHRsZXQgcmFuZ2UgPSBGVUxMOyAvLyB0cmVhdCBsaWtlIGEgZmxvYXRcclxuXHR3aGlsZSAodHJ1ZSkge1xyXG5cdFx0bGV0IHZhbHVlID0gTWF0aC5mbG9vcigoKChyZWdpc3RlciAtIGxvdyArIDEpICogdG90YWwpIC0gMSkgLyByYW5nZSk7XHJcblx0XHRsZXQgc3RhcnQgPSAwO1xyXG5cdFx0bGV0IGVuZCA9IHN5bWJvbF9jb3VudDtcclxuXHRcdHdoaWxlIChlbmQgLSBzdGFydCA+IDEpIHsgLy8gYmluYXJ5IHNlYXJjaFxyXG5cdFx0XHRsZXQgbWlkID0gKHN0YXJ0ICsgZW5kKSA+Pj4gMTtcclxuXHRcdFx0aWYgKHZhbHVlIDwgYWNjW21pZF0pIHtcclxuXHRcdFx0XHRlbmQgPSBtaWQ7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c3RhcnQgPSBtaWQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmIChzdGFydCA9PSAwKSBicmVhazsgLy8gZmlyc3Qgc3ltYm9sIGlzIGVuZCBtYXJrXHJcblx0XHRzeW1ib2xzLnB1c2goc3RhcnQpO1xyXG5cdFx0bGV0IGEgPSBsb3cgKyBNYXRoLmZsb29yKHJhbmdlICogYWNjW3N0YXJ0XSAgIC8gdG90YWwpO1xyXG5cdFx0bGV0IGIgPSBsb3cgKyBNYXRoLmZsb29yKHJhbmdlICogYWNjW3N0YXJ0KzFdIC8gdG90YWwpIC0gMTtcclxuXHRcdHdoaWxlICgoKGEgXiBiKSAmIEhBTEYpID09IDApIHtcclxuXHRcdFx0cmVnaXN0ZXIgPSAocmVnaXN0ZXIgPDwgMSkgJiBNQVNLIHwgcmVhZF9iaXQoKTtcclxuXHRcdFx0YSA9IChhIDw8IDEpICYgTUFTSztcclxuXHRcdFx0YiA9IChiIDw8IDEpICYgTUFTSyB8IDE7XHJcblx0XHR9XHJcblx0XHR3aGlsZSAoYSAmIH5iICYgUVJUUikge1xyXG5cdFx0XHRyZWdpc3RlciA9IChyZWdpc3RlciAmIEhBTEYpIHwgKChyZWdpc3RlciA8PCAxKSAmIChNQVNLID4+PiAxKSkgfCByZWFkX2JpdCgpO1xyXG5cdFx0XHRhID0gKGEgPDwgMSkgXiBIQUxGO1xyXG5cdFx0XHRiID0gKChiIF4gSEFMRikgPDwgMSkgfCBIQUxGIHwgMTtcclxuXHRcdH1cclxuXHRcdGxvdyA9IGE7XHJcblx0XHRyYW5nZSA9IDEgKyBiIC0gYTtcclxuXHR9XHJcblx0bGV0IG9mZnNldCA9IHN5bWJvbF9jb3VudCAtIDQ7XHJcblx0cmV0dXJuIHN5bWJvbHMubWFwKHggPT4geyAvLyBpbmRleCBpbnRvIHBheWxvYWRcclxuXHRcdHN3aXRjaCAoeCAtIG9mZnNldCkge1xyXG5cdFx0XHRjYXNlIDM6IHJldHVybiBvZmZzZXQgKyAweDEwMTAwICsgKChieXRlc1twb3NfcGF5bG9hZCsrXSA8PCAxNikgfCAoYnl0ZXNbcG9zX3BheWxvYWQrK10gPDwgOCkgfCBieXRlc1twb3NfcGF5bG9hZCsrXSk7XHJcblx0XHRcdGNhc2UgMjogcmV0dXJuIG9mZnNldCArIDB4MTAwICsgKChieXRlc1twb3NfcGF5bG9hZCsrXSA8PCA4KSB8IGJ5dGVzW3Bvc19wYXlsb2FkKytdKTtcclxuXHRcdFx0Y2FzZSAxOiByZXR1cm4gb2Zmc2V0ICsgYnl0ZXNbcG9zX3BheWxvYWQrK107XHJcblx0XHRcdGRlZmF1bHQ6IHJldHVybiB4IC0gMTtcclxuXHRcdH1cclxuXHR9KTtcclxufVx0XHJcblxyXG4vLyByZXR1cm5zIGFuIGl0ZXJhdG9yIHdoaWNoIHJldHVybnMgdGhlIG5leHQgc3ltYm9sXHJcbmZ1bmN0aW9uIHJlYWRfcGF5bG9hZCh2KSB7XHJcblx0bGV0IHBvcyA9IDA7XHJcblx0cmV0dXJuICgpID0+IHZbcG9zKytdO1xyXG59XHJcbmZ1bmN0aW9uIHJlYWRfY29tcHJlc3NlZF9wYXlsb2FkKHMpIHtcclxuXHRyZXR1cm4gcmVhZF9wYXlsb2FkKGRlY29kZV9hcml0aG1ldGljKHVuc2FmZV9hdG9iKHMpKSk7XHJcbn1cclxuXHJcbi8vIHVuc2FmZSBpbiB0aGUgc2Vuc2U6XHJcbi8vIGV4cGVjdGVkIHdlbGwtZm9ybWVkIEJhc2U2NCB3L28gcGFkZGluZyBcclxuLy8gMjAyMjA5MjI6IGFkZGVkIGZvciBodHRwczovL2dpdGh1Yi5jb20vYWRyYWZmeS9lbnMtbm9ybWFsaXplLmpzL2lzc3Vlcy80XHJcbmZ1bmN0aW9uIHVuc2FmZV9hdG9iKHMpIHtcclxuXHRsZXQgbG9va3VwID0gW107XHJcblx0Wy4uLidBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ10uZm9yRWFjaCgoYywgaSkgPT4gbG9va3VwW2MuY2hhckNvZGVBdCgwKV0gPSBpKTtcclxuXHRsZXQgbiA9IHMubGVuZ3RoO1xyXG5cdGxldCByZXQgPSBuZXcgVWludDhBcnJheSgoNiAqIG4pID4+IDMpO1xyXG5cdGZvciAobGV0IGkgPSAwLCBwb3MgPSAwLCB3aWR0aCA9IDAsIGNhcnJ5ID0gMDsgaSA8IG47IGkrKykge1xyXG5cdFx0Y2FycnkgPSAoY2FycnkgPDwgNikgfCBsb29rdXBbcy5jaGFyQ29kZUF0KGkpXTtcclxuXHRcdHdpZHRoICs9IDY7XHJcblx0XHRpZiAod2lkdGggPj0gOCkge1xyXG5cdFx0XHRyZXRbcG9zKytdID0gKGNhcnJ5ID4+ICh3aWR0aCAtPSA4KSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZXQ7XHJcbn1cclxuXHJcbi8vIGVnLiBbMCwxLDIsMy4uLl0gPT4gWzAsLTEsMSwtMiwuLi5dXHJcbmZ1bmN0aW9uIHNpZ25lZChpKSB7IFxyXG5cdHJldHVybiAoaSAmIDEpID8gKH5pID4+IDEpIDogKGkgPj4gMSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRfZGVsdGFzKG4sIG5leHQpIHtcclxuXHRsZXQgdiA9IEFycmF5KG4pO1xyXG5cdGZvciAobGV0IGkgPSAwLCB4ID0gMDsgaSA8IG47IGkrKykgdltpXSA9IHggKz0gc2lnbmVkKG5leHQoKSk7XHJcblx0cmV0dXJuIHY7XHJcbn1cclxuXHJcbi8vIFsxMjNdWzVdID0+IFswIDNdIFsxIDFdIFswIDBdXHJcbmZ1bmN0aW9uIHJlYWRfc29ydGVkKG5leHQsIHByZXYgPSAwKSB7XHJcblx0bGV0IHJldCA9IFtdO1xyXG5cdHdoaWxlICh0cnVlKSB7XHJcblx0XHRsZXQgeCA9IG5leHQoKTtcclxuXHRcdGxldCBuID0gbmV4dCgpO1xyXG5cdFx0aWYgKCFuKSBicmVhaztcclxuXHRcdHByZXYgKz0geDtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcblx0XHRcdHJldC5wdXNoKHByZXYgKyBpKTtcclxuXHRcdH1cclxuXHRcdHByZXYgKz0gbiArIDE7XHJcblx0fVxyXG5cdHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRfc29ydGVkX2FycmF5cyhuZXh0KSB7XHJcblx0cmV0dXJuIHJlYWRfYXJyYXlfd2hpbGUoKCkgPT4geyBcclxuXHRcdGxldCB2ID0gcmVhZF9zb3J0ZWQobmV4dCk7XHJcblx0XHRpZiAodi5sZW5ndGgpIHJldHVybiB2O1xyXG5cdH0pO1xyXG59XHJcblxyXG4vLyByZXR1cm5zIG1hcCBvZiB4ID0+IHlzXHJcbmZ1bmN0aW9uIHJlYWRfbWFwcGVkKG5leHQpIHtcclxuXHRsZXQgcmV0ID0gW107XHJcblx0d2hpbGUgKHRydWUpIHtcclxuXHRcdGxldCB3ID0gbmV4dCgpO1xyXG5cdFx0aWYgKHcgPT0gMCkgYnJlYWs7XHJcblx0XHRyZXQucHVzaChyZWFkX2xpbmVhcl90YWJsZSh3LCBuZXh0KSk7XHJcblx0fVxyXG5cdHdoaWxlICh0cnVlKSB7XHJcblx0XHRsZXQgdyA9IG5leHQoKSAtIDE7XHJcblx0XHRpZiAodyA8IDApIGJyZWFrO1xyXG5cdFx0cmV0LnB1c2gocmVhZF9yZXBsYWNlbWVudF90YWJsZSh3LCBuZXh0KSk7XHJcblx0fVxyXG5cdHJldHVybiByZXQuZmxhdCgpO1xyXG59XHJcblxyXG4vLyByZWFkIHVudGlsIG5leHQgaXMgZmFsc3lcclxuLy8gcmV0dXJuIGFycmF5IG9mIHJlYWQgdmFsdWVzXHJcbmZ1bmN0aW9uIHJlYWRfYXJyYXlfd2hpbGUobmV4dCkge1xyXG5cdGxldCB2ID0gW107XHJcblx0d2hpbGUgKHRydWUpIHtcclxuXHRcdGxldCB4ID0gbmV4dCh2Lmxlbmd0aCk7XHJcblx0XHRpZiAoIXgpIGJyZWFrO1xyXG5cdFx0di5wdXNoKHgpO1xyXG5cdH1cclxuXHRyZXR1cm4gdjtcclxufVxyXG5cclxuLy8gcmVhZCB3IGNvbHVtbnMgb2YgbGVuZ3RoIG5cclxuLy8gcmV0dXJuIGFzIG4gcm93cyBvZiBsZW5ndGggd1xyXG5mdW5jdGlvbiByZWFkX3RyYW5zcG9zZWQobiwgdywgbmV4dCkge1xyXG5cdGxldCBtID0gQXJyYXkobikuZmlsbCgpLm1hcCgoKSA9PiBbXSk7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCB3OyBpKyspIHtcclxuXHRcdHJlYWRfZGVsdGFzKG4sIG5leHQpLmZvckVhY2goKHgsIGopID0+IG1bal0ucHVzaCh4KSk7XHJcblx0fVxyXG5cdHJldHVybiBtO1xyXG59XHJcbiBcclxuLy8gcmV0dXJucyBbW3gsIHlzXSwgW3grZHgsIHlzK2R5XSwgW3grMipkeCwgeXMrMipkeV0sIC4uLl1cclxuLy8gd2hlcmUgZHgvZHkgPSBzdGVwcywgbiA9IHJ1biBzaXplLCB3ID0gbGVuZ3RoIG9mIHlcclxuZnVuY3Rpb24gcmVhZF9saW5lYXJfdGFibGUodywgbmV4dCkge1xyXG5cdGxldCBkeCA9IDEgKyBuZXh0KCk7XHJcblx0bGV0IGR5ID0gbmV4dCgpO1xyXG5cdGxldCB2TiA9IHJlYWRfYXJyYXlfd2hpbGUobmV4dCk7XHJcblx0bGV0IG0gPSByZWFkX3RyYW5zcG9zZWQodk4ubGVuZ3RoLCAxK3csIG5leHQpO1xyXG5cdHJldHVybiBtLmZsYXRNYXAoKHYsIGkpID0+IHtcclxuXHRcdGxldCBbeCwgLi4ueXNdID0gdjtcclxuXHRcdHJldHVybiBBcnJheSh2TltpXSkuZmlsbCgpLm1hcCgoXywgaikgPT4ge1xyXG5cdFx0XHRsZXQgal9keSA9IGogKiBkeTtcclxuXHRcdFx0cmV0dXJuIFt4ICsgaiAqIGR4LCB5cy5tYXAoeSA9PiB5ICsgal9keSldO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn1cclxuXHJcbi8vIHJldHVybiBbW3gsIHlzLi4uXSwgLi4uXVxyXG4vLyB3aGVyZSB3ID0gbGVuZ3RoIG9mIHlcclxuZnVuY3Rpb24gcmVhZF9yZXBsYWNlbWVudF90YWJsZSh3LCBuZXh0KSB7IFxyXG5cdGxldCBuID0gMSArIG5leHQoKTtcclxuXHRsZXQgbSA9IHJlYWRfdHJhbnNwb3NlZChuLCAxK3csIG5leHQpO1xyXG5cdHJldHVybiBtLm1hcCh2ID0+IFt2WzBdLCB2LnNsaWNlKDEpXSk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiByZWFkX3RyaWUobmV4dCkge1xyXG5cdGxldCByZXQgPSBbXTtcclxuXHRsZXQgc29ydGVkID0gcmVhZF9zb3J0ZWQobmV4dCk7IFxyXG5cdGV4cGFuZChkZWNvZGUoW10pLCBbXSk7XHJcblx0cmV0dXJuIHJldDsgLy8gbm90IHNvcnRlZFxyXG5cdGZ1bmN0aW9uIGRlY29kZShRKSB7IC8vIGNoYXJhY3RlcnMgdGhhdCBsZWFkIGludG8gdGhpcyBub2RlXHJcblx0XHRsZXQgUyA9IG5leHQoKTsgLy8gc3RhdGU6IHZhbGlkLCBzYXZlLCBjaGVja1xyXG5cdFx0bGV0IEIgPSByZWFkX2FycmF5X3doaWxlKCgpID0+IHsgLy8gYnVja2V0cyBsZWFkaW5nIHRvIG5ldyBub2Rlc1xyXG5cdFx0XHRsZXQgY3BzID0gcmVhZF9zb3J0ZWQobmV4dCkubWFwKGkgPT4gc29ydGVkW2ldKTtcclxuXHRcdFx0aWYgKGNwcy5sZW5ndGgpIHJldHVybiBkZWNvZGUoY3BzKTtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHtTLCBCLCBRfTtcclxuXHR9XHJcblx0ZnVuY3Rpb24gZXhwYW5kKHtTLCBCfSwgY3BzLCBzYXZlZCkge1xyXG5cdFx0aWYgKFMgJiA0ICYmIHNhdmVkID09PSBjcHNbY3BzLmxlbmd0aC0xXSkgcmV0dXJuO1xyXG5cdFx0aWYgKFMgJiAyKSBzYXZlZCA9IGNwc1tjcHMubGVuZ3RoLTFdO1xyXG5cdFx0aWYgKFMgJiAxKSByZXQucHVzaChjcHMpOyBcclxuXHRcdGZvciAobGV0IGJyIG9mIEIpIHtcclxuXHRcdFx0Zm9yIChsZXQgY3Agb2YgYnIuUSkge1xyXG5cdFx0XHRcdGV4cGFuZChiciwgWy4uLmNwcywgY3BdLCBzYXZlZCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn1cblxuZnVuY3Rpb24gaGV4X2NwKGNwKSB7XHJcblx0cmV0dXJuIGNwLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpLnBhZFN0YXJ0KDIsICcwJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHF1b3RlX2NwKGNwKSB7XHJcblx0cmV0dXJuIGB7JHtoZXhfY3AoY3ApfX1gOyAvLyByYWZmeSBjb252ZW50aW9uOiBsaWtlIFwiXFx1e1h9XCIgdy9vIHRoZSBcIlxcdVwiXHJcbn1cclxuXHJcbi8qXHJcbmV4cG9ydCBmdW5jdGlvbiBleHBsb2RlX2NwKHMpIHtcclxuXHRyZXR1cm4gWy4uLnNdLm1hcChjID0+IGMuY29kZVBvaW50QXQoMCkpO1xyXG59XHJcbiovXHJcbmZ1bmN0aW9uIGV4cGxvZGVfY3AocykgeyAvLyB0aGlzIGlzIGFib3V0IDJ4IGZhc3RlclxyXG5cdGxldCBjcHMgPSBbXTtcclxuXHRmb3IgKGxldCBwb3MgPSAwLCBsZW4gPSBzLmxlbmd0aDsgcG9zIDwgbGVuOyApIHtcclxuXHRcdGxldCBjcCA9IHMuY29kZVBvaW50QXQocG9zKTtcclxuXHRcdHBvcyArPSBjcCA8IDB4MTAwMDAgPyAxIDogMjtcclxuXHRcdGNwcy5wdXNoKGNwKTtcclxuXHR9XHJcblx0cmV0dXJuIGNwcztcclxufVxyXG5cclxuZnVuY3Rpb24gc3RyX2Zyb21fY3BzKGNwcykge1xyXG5cdGNvbnN0IGNodW5rID0gNDA5NjtcclxuXHRsZXQgbGVuID0gY3BzLmxlbmd0aDtcclxuXHRpZiAobGVuIDwgY2h1bmspIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jcHMpO1xyXG5cdGxldCBidWYgPSBbXTtcclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKSB7XHJcblx0XHRidWYucHVzaChTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jcHMuc2xpY2UoaSwgaSArPSBjaHVuaykpKTtcclxuXHR9XHJcblx0cmV0dXJuIGJ1Zi5qb2luKCcnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY29tcGFyZV9hcnJheXMoYSwgYikge1xyXG5cdGxldCBuID0gYS5sZW5ndGg7XHJcblx0bGV0IGMgPSBuIC0gYi5sZW5ndGg7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGMgPT0gMCAmJiBpIDwgbjsgaSsrKSBjID0gYVtpXSAtIGJbaV07XHJcblx0cmV0dXJuIGM7XHJcbn1cblxuLy8gY3JlYXRlZCAyMDIzLTA5LTI1VDAxOjAxOjU1LjE0OFpcbi8vIGNvbXByZXNzZWQgYmFzZTY0LWVuY29kZWQgYmxvYiBmb3IgaW5jbHVkZS1uZiBkYXRhXG4vLyBzb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9hZHJhZmZ5L2Vucy1ub3JtYWxpemUuanMvYmxvYi9tYWluL3NyYy9tYWtlLmpzXG4vLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hZHJhZmZ5L2Vucy1ub3JtYWxpemUuanMjc2VjdXJpdHlcbi8vIFNIQS0yNTY6IGE5NzRiNmY4NTQxZmMyOWQ5MTliYzg1MTE4YWYwYTQ0MDE1ODUxZmFiNTM0M2Y4Njc5Y2IzMWJlMmJkYjIwOWVcbnZhciBDT01QUkVTU0VEID0gJ0FFVURUQUhCQ0ZRQVRRRFJBREFBY2dBZ0FEUUFGQUFzQUJRQUh3QU9BQ1FBRFFBUkFBb0FGd0FIQUJJQUNBQVBBQVVBQ3dBRkFBd0FCQUFRQUFNQUJ3QUVBQW9BQlFBSUFBSUFDZ0FCQUFRQUZBQUxBQUlBQ3dBQkFBSUFBUUFIQUFNQUF3QUVBQXNBREFBTUFBd0FDZ0FOQUEwQUF3QUtBQWtBQkFBZEFBWUFad0RTQWRzREpnQzBDa01COHhoWkFxZm9DMTkwVUdjVGhnQnVyd2Y3UFQwOVBiMDlBamdKdW04T2pEbGx4SFlVS1hBUHh6cTZ0QUJBeGdLOHlzVXZXQWdNUFQwOVBUMDlQU3M2TFQySGNnV1hXd0ZMb1NNRUVFbDVSRlZNS3ZPMFhROEV4RGRKTW5JZ3NqMjZQVFF5eThGZkVROEFZOElQQUdjRWJ3UndCSEVFY2dSekJIUUVkUVIyQkhjRWVBUjZCSHNFZkFSK0JJQUVnZm5kQlFvQllnVUxBV0lGREFGaUJOY0UyQVRaQlJBRkVRVXZCZEFMRkFzVkRQY05CdzEzRFljT01BNHhEak1CNEJsbEhJMEIyZ3JiQU1EcEhMa1E3UUhWQVBSTlFRRm5HUlVFZzB5RUIydWFKRjhBSnBJQnBvYjVBRVJTTUFLTm9BWHFhUUxVQk1DekVpQUNud1JaRWtrVnNTN3RBTkFzQkcwUnVBUUxFUEFCdjlISUNUVUJYaWdQWndSQkFwTURPd0FhbWh0YUFCcUVBWThLdkt4M0xRNEFyQUI4VWh3RUJBVlNhZ0Q4QUVGWkFEa0JJYWRWajJVTVVneDVJbDRBTlFDOUF4SUIxQmxiRVBNQXMzMENHeGxYQWh3WktRSUVDQmM2RWJzQ294bmd6djdVelJRQThNMEJhd0w2WndrTjd3QUJBRDMzT1FSY3NnTEpDak1DanFVQ2h0dy9rbStOQXNYUEFvUDJCVDg0UHdVUkFLMFJBdnB0YjZjQXBRUy9PTU1leTVISlM4NFVkeHB4VFBrQ29nVkZJVGFUT3dFUkFLNXBBdmtOQk9WeUE3cTNCS2xPSlNBTEFnVUlCUmNFZEFTcEJYcXpBQlhGU1daT2F3TENPcXcvL0FvbENaZHZ2M2RTQmtFUUd5ZWxFUGNNTXdHMUFUc043VXZZQlBFR093VEpIMzBaR1EvTmxad0lwUzNkRE8wbTR5NmhnRm9qOVNxREJlMUw5RHpkQzAxUmFBOVpDMlVKNHpwamdVNERJUUVOSW9zSzNRMDVDRzBROHdySmF3M2xFVVVIT1FQVlNab0FwUWNCQ3hFZE5SVzFKaEJpckFzSk9YY0creHIyQzQ4bXJ4TXBldndGMHhvaEJrMEJLUnIvQU04dTU0V3dXakZjSEU5ZkJnTUxKU1BIRktoUUlBMGxRTGQ0U0JvYkJ4VWxxUUtSUTNCS2gxRTJIcE1oOWp3OURXWXVFMUY4Qi9VOEJSbFBDNEU4bmthclJRNFIwajZOUFVnaVNVd3NCRFYvTEM4bml3blBENFVNdVh4eUFWa0pJUW14REhFVE1SRVhOOFVJT1FjWkxaY2tKeFVJSVVhVllKb0U5NThEOHhQUkF3c0ZQd2xCQnhNRHRSd3RFeTRWS1FVTmdTVFhBdk0yMVM2ekFvOVdnQUVYQmNzUEpSL2ZFRkJINEE3cENKc0NaUU9ESmVzQUxSVWhBQmNpbXdoRFl3QmZqOWhUQlM3TENNZHFiQ04wQTJjVTUyRVJjd2VSRGxjSHB4d3pGYjhjNFhESVhndUdDQ2lqcndsYkFYVUptUUZmQk9NSUNUVmJqS0FnUVdkVGkxZ1lteUJoUVQ5ZC9BSXhER1VWbjBTOWgzZ0NpdzlyRWhzQk5RRnpCemtOQVFKM0VlMFJheENWQ091R0JEVzFNL2c2SlFSUElZTWdFUW9uQTA5c3pnc25KdmtNK0drQm94SmlBd3cwUFhmdVo2dGd0aVFYL1FjWk1zVkJZQ0h4QzVKUHpReWNHc0VZUWxRdUdlUUh2d1B6R3ZNbjZrRlhCZjhEb3dNVE9rMHo3Z1M5QzJrSWl3ay9BRWtPb3hjSDF4aHFDbkdNMEFFeGl3RzNtUU5Ya1lNQ2I0OEdOd2NMQUdjTGh3VjU1UUFkQXFjSW93QUZBTThEVndBNUFxMEhuUUFaQUlWQkFUMERKeThCSWVVQ2p3T1RDREhMQVpVdkFmTXBCQnZEREJVQTl6ZHVTZ0xEc1FLQWFtYWlCZDFZQW80Q1NUVUJUU1VFQlU1SFVRT3ZjZUVBMndCTEJoUGZSd0VWcTByTEd1TkRBZDl2S3dESEFQc0FCVFVIQlVFQnpRSHpiUUMzQVY4TE1RbWlzN1VCVGVrcEFJTUFGV3NCMXdLSkFOMEFOUUIvOFFGVEFFMEZXZmtGMHdKUFNRRVJNUmdyVjJFQnV3TWZBVE1CRFFCNUJzdU5wY2tISHdSdEI5TUNFQnNWNFFMdkxnZTFBUU1pM3hQTlFzVUN2ZDVWb1dBQ1pJRUNZa0piVGE5Yk55QUNvZmNDYUpnQ1pna0NuNFE0R3dzQ1pqc0NaaVlFYmdSL0EzOFRBMzZTT1FZNWR4YzVnam9qSXdKc0hRSXlOamdLQW0zSEFtMnU3NG96WjBVckFXY0EzZ0RoQUVvRkI1Z01qUUQrQzhJQURiVUNkeThDZHFJL0FubExRd0o0dWgxYzIwV3VSdGNDZkQ4Q2VzZ0NmUWtDZlBBRldRVWdTQUJJZldNa0FvRnRBb0FBQW9BRkFuK3VTVmhLV3hVWFNzd0MwUUVDME14TEp3T0lUd09INWtURmtUSUM4cUZkQXdNRHJrdk9UQzBsQTg5TlRFMnZBb3MvQW9yWXdSc0hIVU5uQmJjQ2pqY0NqbHhBbDRFQ2p0a0NqbHg0VWJSVE5RcFMxRlNGQXBQN0FwTU1BT2tBSEZVZVZhOVYwQVlzR3ltVmhqTGhlR1pGT3prQ2w1OEM3N0pZSWFnQVdTVUNsbzhDbG55Y0FLbFpyRm9KZ1UwQU93S1d0UUtXVGx4RVhORUNtY3NDbVdSY3lsMEhHUUtjbXpuQ09wMENuQllDbjVzQ25yaUtBQjBQTVNvUEFwM3hBcDZTQUxVOVlUUmg3d0tlMHdLZ2JnR3BBcDZmSHdLZVRxVmp5R1FuSlNzQ0o2OENKbjRDb1BzQ29Fd0NvdDBDb2NRQ3BpOENwYzRDcC84QWZRS244bWg4YUxFQUEwbHFIR3JSQXF6akFxeXVBcTFuQXEwQ0FsY2RBbFhjQXJIaDF3TWZUbXlYQXJLOURRS3k2QmRzNEcxamJVaGZBeVhOQXJaY096OXVrQU1wUlFLNFhnSzVSeFVDdVNwM2NEWnc0UUs5R1FLNzJuQ1dBeklSQXI2SWNnSURNM0VDdmhwekluTlBBc1BMQXNNRWM0SjBTelZGZE9BRFBLY0RQSm9EUGI4Q3hYd0N4a2NDeGhDSkFzaHBVUUxJUkFMSlR3TEpMZ0prblFMZDBuaDVZWGl1ZVNWTDBBTVlvMmNDQW1IMEdmT1ZKSHNMWHBKZXV4RUN6MnNDejJ3dlMxUFM4eE9mQU1hdEFzOXpBU25xQTA0U2Zrc0ZBdHduQXR1S0F0SlBBMUpjQTFOZkFRRURWWXlBaVQ4QXl4YnRZRVdDSElMVGdzNkRqUUxheHdMWjNvUVFoRW1uUEFPR3BRQXZBMlFPaG5GWitRQlZBdDlsQXQ2NGMzY0M0aS90RkFIek1DY0I5SnNCOHRLSEF1dnpBdWx3ZVFMcStRTHE1QUQ1UndHNUF1NkpBdXVjbHFxWEF3THVQd09GNEpoNWNPQnhvUUx6QXdCcEE0NFdtWk1DOXhNRGtXNERrb2NDOTVnQytka0MrR2FhSEpxcnV6ZWJIZ09kZ3dMKytnRWJBRG1mSEorekF3V05BNlpxQTZiWkFOSEZBd1pxb1lpaUJRa0RERWtDd0FBL0F3RGhRUmRUQVJIekEyc0hsMmNGQUpNdEs3ZXZ2ZHNCaVprVWZ4RUVPUUg3S1FVaERwMEpud0NTL1NsWHhRTDNBWjBBdHdXNUFHOExiVUV1RkNhTkxnRkRBWUQ4QWJVbUFIVUREZ1J0QUN3Q0ZneWhBQUFLQWowQ2FnUGRBMzRFa1FFZ1JRVWhmQW9BQlFCRUFCTUFOaElDZHdFQUJkVURhKzhLeFFJQTl3cWZKNyt4dCtVQmtTRkJRZ0hwRkg4Uk5NQ0pBQVFBR3dCYUFrVUNoSXNBQmpwVE9wU05iUUM0T284NjBBQ05PTUU2M0FDbEFPZ0F5d0U2Z1RvN09mdzUrVHQyaVRwYk81NkpPbTg1R0FGV0FUTUJiQVV2TlYwMW5qV3ROV1kxZFRXMk5jVTFnaldSTmRJMTRUV2VOYTAxN2pYOU5iSTF3VFlDTmhFMXhqWFZOaFkySnpYZU5lMDJMalk5Tmk0MUxTRTJPalk5Tmp3MnlUY0lCSkE4VnpZNE50MDNJRGNQTnNvZ040azNNQW9Fc0R4bk5pUTNHVGRzT28wM0lVTFVRd2RDNEVNTEhBOFBDWnNvYlNoUlZRWUE2WDhBNmJBQkZDblhBdWtCb3dDOUJiY0Fid056Qkw4TURBTU1BUWdEQUFrS0N3c0xDUW9HQkFWVkJJL0R2d0R6OWIyOWthVUNiMFF0c1JUTkx0NGVHQmNTSEFNWkZoWVpFaFlFQVJBRUJVRWNRUnhCSEVFY1FSeEJIRUVhUVJ4QkhFRkNTVHhCUEVsSVNVaEJOa00yUVRZYk5rbElTVm1CVklnQkZMV1pBdTBCaFFDakJjRUFieWtCdndHSkFhUWNFWjBlUENrbE1BQWhNdkFJTUFMNTRnQzdCbThFZXNjanpRTXBBUlFwS2dEVUFCYXZBajYyNnhRQUpQMEEzZXR6dWY0Tk5SQTdlZnkyWjlOUXJDbkMwT1N5QU56NUJCSWJKNUlGRFI2bWlJYXZZUzZ0cHJqam11S2VieG01Qzc0UTIyNVgxcGthWVlQYjZmMURLNGszeE1FQmI5UzJXTWpFaWJUTldoc1JKSUErdndOVkVpWFRFNWlYcy93ZXpWNjZvRkxmcDlOWkdZVytHazE5SjIrYkNUNlllMnc2TERZZGd6S01VYWJrNTk1ZUxCQ1hBTno5SFVwV2JBVHE5dnFYVng5WERnK1BjOVhwNCtic1MwMDVTVk0vQkpCTTQ2ODdXVXVmK1VqOWRFaThhRE5hUHh0cGJEeGNHMVRIVEltVU1acTRVQ2FhTllwc1ZxcmFOeUtMSlhEWXNGWi81amw3YkxSdE84OHQ3UDN4WmFBeGhiNU9kUE1YcXNTa3AxV0NpZUc4alhtMVU5OStibHZMbFh6UENTK005M1ZuSkNpSyswOUxmYVNhQkFWQm9teURnSnVhOGRmVXpSN2dhMzRJdlIyTnZqK0E5aGVKNmxzbDFLRzROa0kxMDMyQ25mZjFtMXdvZjJCOW9ISks0Ymk2SmtFZFNxZU5laXVvNlFvWlppbmNvYzczL1RIOVNYRjhzQ0U3WHl1WXlXOFdTZ2JHRkNqUFYwaWhMS2hkUHMwOFR4ODJmWUFrTExjNEkyd2RsNGFwWTdHVTVsSFJGelJXSmVwN1d3M3diZUEzcW1kNTkvODZQNHh1TmFxRHB5Z1h0Nk04NWdsU0JIT0NHZ0pEbnQrcE45Yks3SEFwTWd1WDYrMDZSWk5qelZtY1pKK3djVXJKOS8vYnBSTnhOdUtwTmw5dUZkcytTOXRkeDdMYU01WmtJclBqNm5JVTltbmJGdFZiczlzL3VMZ2w4TVZjekF3ZXQraU9FenpCbFlXN1JDTWdFNmd5TkxlcTYrMXRJeDRkcGdabmQwRGtzSlM1ZitKTkRwd3djUE5YYWFWc3BxMWZiUWFqT3JKZ0swb2ZLdEoxTmU5MEw2Vk80TU9sNVM4ODZwN3U2eG83T0xqRzhUR0wrSFUxSlhHSmdwcGc0bk5iTko1bmx6U3B1UFl5MjFKVUVjVUE5NFBvRmlaZmpadWUrUW55UTgwZWtPdVpWa3h4NGcrY3ZoSmZIZ05sNGh5MS9hNitSS2NLbGFyL0oyOXkvL0V6dGxiVlBIVlVlUTF6WDg2ZVFWQWpSL00zZEE5dzRXOExmYVhwNEVnTTg1d09XYXNsaTgzN1B6Vk1PbnNMelIrazNvNzUvbFJQQUpTRTF4QUtRekVpNXYxMGtlK1ZCdlJ0MWN3UVJNZCtVNW1MQ1RHVmQ2WGladGdCRzVjRGkwdzIyR0tjVk52SGl1NUxRYlpFRFZ0ejBvbm43azUraGV1S1hWc1p0U3ppbGtMUkFVbWpNWEVNQjNKOVlDNTBYQnhQaXo1M1NDK0VoblBsOVdzS0N2OTJTTS9PRkZJTUpaWWZsMFdXOHRJTzNVeFljd2RNQWo3RlNtZ3JzWjJhQVpPMDNCT2hQMWJOTlpJdHlYWVFGVHBDM1NHMVZ1UERxSDlHa2lDRG1FK0p3eHlJVlNPNXNpREVyQU9wRVhGZ2p5NlBRdE9WRGorczZlMXI4aGVXVnZtWm5UY2l1ZjRFaU5aekNBZDdTT01oWEVSSU9sc0hJTUczOTlpOWFMVHkzbTJoUkxaakpWRE5MUzUzaUdJSzExZFBxUXQwekJEeWc2cWM3WXFrRG0yTTVWZTZkQ1dDYUNiVFhYMnJUb2FJZ3o2K3poNGxZVWkvKzZucWNGTUFrUUpLSFlMSzB3WWs1TjlzelY2eGloRGJEREZyNDVsTjFLNGFDWEJxL0ZpdFBTdWQ5Z0x0NVpWbitacUdYN2N3bTJ6NUVHTWdmRnBJRnloR0d1RFBtc282VEl0VE13bnkrN3VQbkxDZjRXNmdvRlFGVjBvUVNzYzlWZk1tVkxjTHI2WmV0RFpiYVNGVExxblNPL2JJUGpBMy96QVVvcWdHRkFFUVM0SWh1TXpFcDJJM2pKemJ6a2svSUVteWF4K3JoWlR3ZDZmK0NHdHdQaXh1OEl2ekFDcXVQV1BSRXU5WnZHa1V6cFJ3dlJSdWFOTjZjcjBXMXdXaXRzOUlDZFlKN2x0YmdNaVNMM3NUUGV1ZmdOY1ZxTVZXRmtDUERINGpHMmpBMFhjVmdRajYyQ2IyOXY5Zi96LysyS2JZdkl2L3p6anBRQVBrbGlhVkR6TnJXNTdUWi9aT3laRDBubGZNbUFJQklBR0FJMEQzay9tZE40eHI5djg1WmJaYmJxZkgyakdkNWhVcU5aV3dsNVNQZm9HbWZFbG1helVJZU5MMWovbWtGN1ZOQXpUcTRqTnQ4Sm9RMTFOUU9jbWhwclhveFN4ZlJHSjlMREVPQVErZG14QVFIOTBpdGk5ZTJ1L01vZXVhR2NEVEhvQyt4c21FZVdteEVLZWZRdUl6SGJwdzVUYzVjRW9jYm9BRDA5b2lwV1FodFRPMXdpdmYvTytEUmUycnBsL0U5d2xyekJvcmpKc09lRzFCL1hQVzRFYUpFRmRObEVDRVpnYTVab0dSSFhnWW91R1J1VmttOHRERVNpRXlGTm8rM3M1TTVwdVNkVHlVTDJsbG5JTlZIRXQ5MVhVTlc0ZXdkTWdKNGJvSmZFeXQvaVk1V1hxYkErQTJGa3Q1WjBsdXRpV2hlOW5aSXlJVWp5WERDM1VzYUcxdCtlTng2ejRXL09Zb1RCN0E2eCtkTlNUT2k5QUluY3RiRVNxbTVndk9Md3c3T1dYUHJtSHdWWmFzcmw0ZUQxMTNwbStKdFQ3SlZPdm5DWHFkenpkVFJIZ0owUGlHVEZZVzVHdnQ5UjlMRDZMemZzMHYvVFpaSFNteVZOcTd2aUlIRTZEQks3UXAwN0l6NTVFTThTWXRRdlpmL29iQm5pVFdpNUMyL292SGZ3NFZuZGtFNVhZZGpPaENNUmpEZU9FZlhlTi9Dd2ZHZHVpVUlmc29GZVV4WGVRWGJhN2M3OTcyWE52OHcrZFRqalVNMFFlTkFSZVcrSjAxNGRLQUQvTWNRWVhUN2MwR1FQSWtuM0xsNlI3Z0dqdWlRb1pEMFRFZUVxUXBLb1oxNWcvME9QUUkxN1FpU3Y5QVVST2EvVi9UUU4zZHZMQXJlYzNScnNZbHZCbTFiOExXemx0ZHVnc0M1MGxOS1lMRXAyYStaWllxUGVqVUxSbE9KaDV6ai9MVk15VER2d0toTXh4d3VEa3hKMVFwb05JME9UV0xvbTRaNzFTTnpJOVRWMWlYSnJJdTlXY25kK01DYUF3OG8xalNYZDk0WVUvMWdua3JDOUJVRU90UXZFSVE3ZzBpNmgrS0wySktrOFlkbDdIcnV2Z1dNU0FtTmUrTHNoR2hWNHFuV0hoTzkvUklQUXpZMXRIUmoyVnFPeU5zRHBLMGN3dys1NkFkREM0Z3NXd1kwWHhvdWNJV0lxcy9HY3duV3FsYVQwS1ByOG1iSzVVOTQvMzAxaTFXTHQ0WUlOVFZ2Q0ZCckZaYkliWThleWNPZGVKMnRlRDVJZlBMQ1JnN2pqY0ZUd2xNRk5sOXpkaC9vM0UvaEhQd2o3QldnME1VMDlwUHJCTGJyQ2dtNTRBNkgrSTZ2Mjcrakw1Z2tqV2cvaVlka3M5amJmVlA1eS9uMGRsZ1dFTWxLYXNsN0p2RlpkNTZMZnliVzFlZWFWTzBneFRmWFp3RDhHNFNJMTE2eXg3VUtWUmd1aTZZYTFZcGl4cVhlTkxjOEl4dEF3Q1U1SWh3UWduK05xSG5SYUR2NjFDeEtoT3E0cE9YN002cGtBK1BtcGQ0ajF2bjZBQ1VBTG9MTGM0dnBYY2k4VmlkTHh6bTdxRkJlN3MrcXV1SnM2RVRZbW5wZ1MzTHdTWnhQSWx0Z0JEWHo4TTFrL1cyeVNOdjJmOS9OUGh4TEdLMkQyMWRrSGVTR21lblJUM1lxY2RsMG0vaDNPWXI4VitsWE5ZR2Y4YUNDcGQ0YldqRTRRSVBqN3ZVS040TnJmczdNTDZZMk95UzgzMEpDbm9mZy9rN2xwRnB0NFNxWmM1SEdnMUhDT3JIdk9kQzhiUDZGR0RiRS9WVjBtWDRJYWt6YmRTL29wK0t0M0cyNC84UWJCVjd5ODZzR1NRL3ZaelU4RlhzN3U2akl2d2Noc0VQMkJwSWhXM0c4dVdOd2EzSG1qZkgvWmpoaENXdmx1QWNGK25NZjE0Q2xLZzVoR2d0UExKOTh1ZU5Ba2M1SHMyV1psazJRSHZmcmVDSzFDQ0dPNm5NWlZTYjk5Vk0vYWpyOFdIVHRlOUpTbWtYcS9pL1U5NDNIRWJkelc2UmUvUzg4ZEtnZzhwR09MbEFlTmlxcmNMa1VSMy9hQ2xGcE1YY09VUDNybUVUY1dTZk1YWkUzVFVPaThpK2ZxUm5UWUxmbFZ4L1ZiLzZHSjdlSVJaVUE2azNSWVIzaUZTSzljNGlEZE53SnVaTDJGS3ovSUs1VmltY05XRXFkWGpTb3hTZ21GMFVQbERvVWxOclBjTTdmdG1BOFk5Z0tpcUtFSHVXTitBWlJJd3RWU3h5ZTJLZjhyTTNsaEo1WGNCWFU5bjR2ME95MVJVMk0rNHFNOEFRUFZ3c2U4RXJOU29iNW9GUFd4dXFablZ6bzFxQi9JQnhrTTNFVlVLRlVVbE8zZTUxMjU5R2dOY0piQ21sdnJkanRvVFc3ckNobTF3eUNLenBDVHdvelVVRU9JY1dMbmVSTGdNWGgrU2pHU0ZrQWxsemJHUzVISzdMbGZDTVJOUkRTdmJRUGpjWGFlbk5ZeEN2dTJReXpuejZTdHV4Vmo2NlNnSTBUOEI2L3NmSEFKWVphWjc4dGhqT1NJRnVtTldMUWJlWml4RENDQyt2MFlCdGt4aUJCM2plZkhxWi9kRkhVK2NyYmo2T3ZTMXgvSkREN3ZsbTd6T1ZQd3BVQzAxbmh4WnVZLzYzRTdnJztcblxuLy8gaHR0cHM6Ly91bmljb2RlLm9yZy9yZXBvcnRzL3RyMTUvXHJcbi8vIGZvciByZWZlcmVuY2UgaW1wbGVtZW50YXRpb25cclxuLy8gc2VlOiAvZGVyaXZlL25mLmpzXHJcblxyXG5cclxuLy8gYWxnb3JpdGhtaWMgaGFuZ3VsXHJcbi8vIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3ZlcnNpb25zL1VuaWNvZGUxNS4wLjAvY2gwMy5wZGYgKHBhZ2UgMTQ0KVxyXG5jb25zdCBTMCA9IDB4QUMwMDtcclxuY29uc3QgTDAgPSAweDExMDA7XHJcbmNvbnN0IFYwID0gMHgxMTYxO1xyXG5jb25zdCBUMCA9IDB4MTFBNztcclxuY29uc3QgTF9DT1VOVCA9IDE5O1xyXG5jb25zdCBWX0NPVU5UID0gMjE7XHJcbmNvbnN0IFRfQ09VTlQgPSAyODtcclxuY29uc3QgTl9DT1VOVCA9IFZfQ09VTlQgKiBUX0NPVU5UO1xyXG5jb25zdCBTX0NPVU5UID0gTF9DT1VOVCAqIE5fQ09VTlQ7XHJcbmNvbnN0IFMxID0gUzAgKyBTX0NPVU5UO1xyXG5jb25zdCBMMSA9IEwwICsgTF9DT1VOVDtcclxuY29uc3QgVjEgPSBWMCArIFZfQ09VTlQ7XHJcbmNvbnN0IFQxID0gVDAgKyBUX0NPVU5UO1xyXG5cclxuZnVuY3Rpb24gdW5wYWNrX2NjKHBhY2tlZCkge1xyXG5cdHJldHVybiAocGFja2VkID4+IDI0KSAmIDB4RkY7XHJcbn1cclxuZnVuY3Rpb24gdW5wYWNrX2NwKHBhY2tlZCkge1xyXG5cdHJldHVybiBwYWNrZWQgJiAweEZGRkZGRjtcclxufVxyXG5cclxubGV0IFNISUZURURfUkFOSywgRVhDTFVTSU9OUywgREVDT01QLCBSRUNPTVA7XHJcblxyXG5mdW5jdGlvbiBpbml0JDEoKSB7XHJcblx0Ly9jb25zb2xlLnRpbWUoJ25mJyk7XHJcblx0bGV0IHIgPSByZWFkX2NvbXByZXNzZWRfcGF5bG9hZChDT01QUkVTU0VEKTtcclxuXHRTSElGVEVEX1JBTksgPSBuZXcgTWFwKHJlYWRfc29ydGVkX2FycmF5cyhyKS5mbGF0TWFwKCh2LCBpKSA9PiB2Lm1hcCh4ID0+IFt4LCAoaSsxKSA8PCAyNF0pKSk7IC8vIHByZS1zaGlmdGVkXHJcblx0RVhDTFVTSU9OUyA9IG5ldyBTZXQocmVhZF9zb3J0ZWQocikpO1xyXG5cdERFQ09NUCA9IG5ldyBNYXAoKTtcclxuXHRSRUNPTVAgPSBuZXcgTWFwKCk7XHJcblx0Zm9yIChsZXQgW2NwLCBjcHNdIG9mIHJlYWRfbWFwcGVkKHIpKSB7XHJcblx0XHRpZiAoIUVYQ0xVU0lPTlMuaGFzKGNwKSAmJiBjcHMubGVuZ3RoID09IDIpIHtcclxuXHRcdFx0bGV0IFthLCBiXSA9IGNwcztcclxuXHRcdFx0bGV0IGJ1Y2tldCA9IFJFQ09NUC5nZXQoYSk7XHJcblx0XHRcdGlmICghYnVja2V0KSB7XHJcblx0XHRcdFx0YnVja2V0ID0gbmV3IE1hcCgpO1xyXG5cdFx0XHRcdFJFQ09NUC5zZXQoYSwgYnVja2V0KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRidWNrZXQuc2V0KGIsIGNwKTtcclxuXHRcdH1cclxuXHRcdERFQ09NUC5zZXQoY3AsIGNwcy5yZXZlcnNlKCkpOyAvLyBzdG9yZWQgcmV2ZXJzZWRcclxuXHR9XHJcblx0Ly9jb25zb2xlLnRpbWVFbmQoJ25mJyk7XHJcblx0Ly8gMjAyMzA5MDU6IDExbXNcclxufVxyXG5cclxuZnVuY3Rpb24gaXNfaGFuZ3VsKGNwKSB7XHJcblx0cmV0dXJuIGNwID49IFMwICYmIGNwIDwgUzE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbXBvc2VfcGFpcihhLCBiKSB7XHJcblx0aWYgKGEgPj0gTDAgJiYgYSA8IEwxICYmIGIgPj0gVjAgJiYgYiA8IFYxKSB7XHJcblx0XHRyZXR1cm4gUzAgKyAoYSAtIEwwKSAqIE5fQ09VTlQgKyAoYiAtIFYwKSAqIFRfQ09VTlQ7XHJcblx0fSBlbHNlIGlmIChpc19oYW5ndWwoYSkgJiYgYiA+IFQwICYmIGIgPCBUMSAmJiAoYSAtIFMwKSAlIFRfQ09VTlQgPT0gMCkge1xyXG5cdFx0cmV0dXJuIGEgKyAoYiAtIFQwKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0bGV0IHJlY29tcCA9IFJFQ09NUC5nZXQoYSk7XHJcblx0XHRpZiAocmVjb21wKSB7XHJcblx0XHRcdHJlY29tcCA9IHJlY29tcC5nZXQoYik7XHJcblx0XHRcdGlmIChyZWNvbXApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVjb21wO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gLTE7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBkZWNvbXBvc2VkKGNwcykge1xyXG5cdGlmICghU0hJRlRFRF9SQU5LKSBpbml0JDEoKTtcclxuXHRsZXQgcmV0ID0gW107XHJcblx0bGV0IGJ1ZiA9IFtdO1xyXG5cdGxldCBjaGVja19vcmRlciA9IGZhbHNlO1xyXG5cdGZ1bmN0aW9uIGFkZChjcCkge1xyXG5cdFx0bGV0IGNjID0gU0hJRlRFRF9SQU5LLmdldChjcCk7XHJcblx0XHRpZiAoY2MpIHtcclxuXHRcdFx0Y2hlY2tfb3JkZXIgPSB0cnVlO1xyXG5cdFx0XHRjcCB8PSBjYztcclxuXHRcdH1cclxuXHRcdHJldC5wdXNoKGNwKTtcclxuXHR9XHJcblx0Zm9yIChsZXQgY3Agb2YgY3BzKSB7XHJcblx0XHR3aGlsZSAodHJ1ZSkge1xyXG5cdFx0XHRpZiAoY3AgPCAweDgwKSB7XHJcblx0XHRcdFx0cmV0LnB1c2goY3ApO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGlzX2hhbmd1bChjcCkpIHtcclxuXHRcdFx0XHRsZXQgc19pbmRleCA9IGNwIC0gUzA7XHJcblx0XHRcdFx0bGV0IGxfaW5kZXggPSBzX2luZGV4IC8gTl9DT1VOVCB8IDA7XHJcblx0XHRcdFx0bGV0IHZfaW5kZXggPSAoc19pbmRleCAlIE5fQ09VTlQpIC8gVF9DT1VOVCB8IDA7XHJcblx0XHRcdFx0bGV0IHRfaW5kZXggPSBzX2luZGV4ICUgVF9DT1VOVDtcclxuXHRcdFx0XHRhZGQoTDAgKyBsX2luZGV4KTtcclxuXHRcdFx0XHRhZGQoVjAgKyB2X2luZGV4KTtcclxuXHRcdFx0XHRpZiAodF9pbmRleCA+IDApIGFkZChUMCArIHRfaW5kZXgpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGxldCBtYXBwZWQgPSBERUNPTVAuZ2V0KGNwKTtcclxuXHRcdFx0XHRpZiAobWFwcGVkKSB7XHJcblx0XHRcdFx0XHRidWYucHVzaCguLi5tYXBwZWQpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRhZGQoY3ApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIWJ1Zi5sZW5ndGgpIGJyZWFrO1xyXG5cdFx0XHRjcCA9IGJ1Zi5wb3AoKTtcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKGNoZWNrX29yZGVyICYmIHJldC5sZW5ndGggPiAxKSB7XHJcblx0XHRsZXQgcHJldl9jYyA9IHVucGFja19jYyhyZXRbMF0pO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDE7IGkgPCByZXQubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0bGV0IGNjID0gdW5wYWNrX2NjKHJldFtpXSk7XHJcblx0XHRcdGlmIChjYyA9PSAwIHx8IHByZXZfY2MgPD0gY2MpIHtcclxuXHRcdFx0XHRwcmV2X2NjID0gY2M7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHRcdFx0bGV0IGogPSBpLTE7XHJcblx0XHRcdHdoaWxlICh0cnVlKSB7XHJcblx0XHRcdFx0bGV0IHRtcCA9IHJldFtqKzFdO1xyXG5cdFx0XHRcdHJldFtqKzFdID0gcmV0W2pdO1xyXG5cdFx0XHRcdHJldFtqXSA9IHRtcDtcclxuXHRcdFx0XHRpZiAoIWopIGJyZWFrO1xyXG5cdFx0XHRcdHByZXZfY2MgPSB1bnBhY2tfY2MocmV0Wy0tal0pO1xyXG5cdFx0XHRcdGlmIChwcmV2X2NjIDw9IGNjKSBicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRwcmV2X2NjID0gdW5wYWNrX2NjKHJldFtpXSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbXBvc2VkX2Zyb21fZGVjb21wb3NlZCh2KSB7XHJcblx0bGV0IHJldCA9IFtdO1xyXG5cdGxldCBzdGFjayA9IFtdO1xyXG5cdGxldCBwcmV2X2NwID0gLTE7XHJcblx0bGV0IHByZXZfY2MgPSAwO1xyXG5cdGZvciAobGV0IHBhY2tlZCBvZiB2KSB7XHJcblx0XHRsZXQgY2MgPSB1bnBhY2tfY2MocGFja2VkKTtcclxuXHRcdGxldCBjcCA9IHVucGFja19jcChwYWNrZWQpO1xyXG5cdFx0aWYgKHByZXZfY3AgPT0gLTEpIHtcclxuXHRcdFx0aWYgKGNjID09IDApIHtcclxuXHRcdFx0XHRwcmV2X2NwID0gY3A7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmV0LnB1c2goY3ApO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKHByZXZfY2MgPiAwICYmIHByZXZfY2MgPj0gY2MpIHtcclxuXHRcdFx0aWYgKGNjID09IDApIHtcclxuXHRcdFx0XHRyZXQucHVzaChwcmV2X2NwLCAuLi5zdGFjayk7XHJcblx0XHRcdFx0c3RhY2subGVuZ3RoID0gMDtcclxuXHRcdFx0XHRwcmV2X2NwID0gY3A7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c3RhY2sucHVzaChjcCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cHJldl9jYyA9IGNjO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bGV0IGNvbXBvc2VkID0gY29tcG9zZV9wYWlyKHByZXZfY3AsIGNwKTtcclxuXHRcdFx0aWYgKGNvbXBvc2VkID49IDApIHtcclxuXHRcdFx0XHRwcmV2X2NwID0gY29tcG9zZWQ7XHJcblx0XHRcdH0gZWxzZSBpZiAocHJldl9jYyA9PSAwICYmIGNjID09IDApIHtcclxuXHRcdFx0XHRyZXQucHVzaChwcmV2X2NwKTtcclxuXHRcdFx0XHRwcmV2X2NwID0gY3A7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c3RhY2sucHVzaChjcCk7XHJcblx0XHRcdFx0cHJldl9jYyA9IGNjO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmIChwcmV2X2NwID49IDApIHtcclxuXHRcdHJldC5wdXNoKHByZXZfY3AsIC4uLnN0YWNrKTtcdFxyXG5cdH1cclxuXHRyZXR1cm4gcmV0O1xyXG59XHJcblxyXG4vLyBub3RlOiBjcHMgY2FuIGJlIGl0ZXJhYmxlXHJcbmZ1bmN0aW9uIG5mZChjcHMpIHtcclxuXHRyZXR1cm4gZGVjb21wb3NlZChjcHMpLm1hcCh1bnBhY2tfY3ApO1xyXG59XHJcbmZ1bmN0aW9uIG5mYyhjcHMpIHtcclxuXHRyZXR1cm4gY29tcG9zZWRfZnJvbV9kZWNvbXBvc2VkKGRlY29tcG9zZWQoY3BzKSk7XHJcbn1cblxuY29uc3QgSFlQSEVOID0gMHgyRDtcclxuY29uc3QgU1RPUCA9IDB4MkU7XHJcbmNvbnN0IFNUT1BfQ0ggPSAnLic7XHJcbmNvbnN0IEZFMEYgPSAweEZFMEY7XHJcbmNvbnN0IFVOSVFVRV9QSCA9IDE7XHJcblxyXG4vLyAyMDIzMDkxMzogcmVwbGFjZSBbLi4udl0gd2l0aCBBcnJheV9mcm9tKHYpIHRvIGF2b2lkIGxhcmdlIHNwcmVhZHNcclxuY29uc3QgQXJyYXlfZnJvbSA9IHggPT4gQXJyYXkuZnJvbSh4KTsgLy8gQXJyYXkuZnJvbS5iaW5kKEFycmF5KTtcclxuXHJcbmZ1bmN0aW9uIGdyb3VwX2hhc19jcChnLCBjcCkge1xyXG5cdC8vIDIwMjMwOTEzOiBrZWVwIHByaW1hcnkgYW5kIHNlY29uZGFyeSBkaXN0aW5jdCBpbnN0ZWFkIG9mIGNyZWF0aW5nIHZhbGlkIHVuaW9uXHJcblx0cmV0dXJuIGcuUC5oYXMoY3ApIHx8IGcuUS5oYXMoY3ApO1xyXG59XHJcblxyXG5jbGFzcyBFbW9qaSBleHRlbmRzIEFycmF5IHtcclxuXHRnZXQgaXNfZW1vamkoKSB7IHJldHVybiB0cnVlOyB9IC8vIGZyZWUgdGFnZ2luZyBzeXN0ZW1cclxufVxyXG5cclxubGV0IE1BUFBFRCwgSUdOT1JFRCwgQ00sIE5TTSwgRVNDQVBFLCBORkNfQ0hFQ0ssIEdST1VQUywgV0hPTEVfVkFMSUQsIFdIT0xFX01BUCwgVkFMSUQsIEVNT0pJX0xJU1QsIEVNT0pJX1JPT1Q7XHJcblxyXG5mdW5jdGlvbiBpbml0KCkge1xyXG5cdGlmIChNQVBQRUQpIHJldHVybjtcclxuXHRcclxuXHRsZXQgciA9IHJlYWRfY29tcHJlc3NlZF9wYXlsb2FkKENPTVBSRVNTRUQkMSk7XHJcblx0Y29uc3QgcmVhZF9zb3J0ZWRfYXJyYXkgPSAoKSA9PiByZWFkX3NvcnRlZChyKTtcclxuXHRjb25zdCByZWFkX3NvcnRlZF9zZXQgPSAoKSA9PiBuZXcgU2V0KHJlYWRfc29ydGVkX2FycmF5KCkpO1xyXG5cdGNvbnN0IHNldF9hZGRfbWFueSA9IChzZXQsIHYpID0+IHYuZm9yRWFjaCh4ID0+IHNldC5hZGQoeCkpO1xyXG5cclxuXHRNQVBQRUQgPSBuZXcgTWFwKHJlYWRfbWFwcGVkKHIpKTsgXHJcblx0SUdOT1JFRCA9IHJlYWRfc29ydGVkX3NldCgpOyAvLyBpZ25vcmVkIGNoYXJhY3RlcnMgYXJlIG5vdCB2YWxpZCwgc28ganVzdCByZWFkIHJhdyBjb2RlcG9pbnRzXHJcblxyXG5cdC8qXHJcblx0Ly8gZGlyZWN0IGluY2x1ZGUgZnJvbSBwYXlsb2FkIGlzIHNtYWxsZXIgdGhhbiB0aGUgZGVjb21wcmVzc2lvbiBjb2RlXHJcblx0Y29uc3QgRkVOQ0VEID0gbmV3IE1hcChyZWFkX2FycmF5X3doaWxlKCgpID0+IHtcclxuXHRcdGxldCBjcCA9IHIoKTtcclxuXHRcdGlmIChjcCkgcmV0dXJuIFtjcCwgcmVhZF9zdHIocigpKV07XHJcblx0fSkpO1xyXG5cdCovXHJcblx0Ly8gMjAyMzAyMTc6IHdlIHN0aWxsIG5lZWQgYWxsIENNIGZvciBwcm9wZXIgZXJyb3IgZm9ybWF0dGluZ1xyXG5cdC8vIGJ1dCBub3JtIG9ubHkgbmVlZHMgTlNNIHN1YnNldCB0aGF0IGFyZSBwb3RlbnRpYWxseS12YWxpZFxyXG5cdENNID0gcmVhZF9zb3J0ZWRfYXJyYXkoKTtcclxuXHROU00gPSBuZXcgU2V0KHJlYWRfc29ydGVkX2FycmF5KCkubWFwKGkgPT4gQ01baV0pKTtcclxuXHRDTSA9IG5ldyBTZXQoQ00pO1xyXG5cdFxyXG5cdEVTQ0FQRSA9IHJlYWRfc29ydGVkX3NldCgpOyAvLyBjaGFyYWN0ZXJzIHRoYXQgc2hvdWxkIG5vdCBiZSBwcmludGVkXHJcblx0TkZDX0NIRUNLID0gcmVhZF9zb3J0ZWRfc2V0KCk7IC8vIG9ubHkgbmVlZGVkIHRvIGlsbHVzdHJhdGUgZW5zX3Rva2VuaXplKCkgdHJhbnNmb3JtYXRpb25zXHJcblxyXG5cdGxldCBjaHVua3MgPSByZWFkX3NvcnRlZF9hcnJheXMocik7XHJcblx0bGV0IHVucmVzdHJpY3RlZCA9IHIoKTtcclxuXHQvL2NvbnN0IHJlYWRfY2h1bmtlZCA9ICgpID0+IG5ldyBTZXQocmVhZF9zb3J0ZWRfYXJyYXkoKS5mbGF0TWFwKGkgPT4gY2h1bmtzW2ldKS5jb25jYXQocmVhZF9zb3J0ZWRfYXJyYXkoKSkpO1xyXG5cdGNvbnN0IHJlYWRfY2h1bmtlZCA9ICgpID0+IHtcclxuXHRcdC8vIDIwMjMwOTIxOiBidWlsZCBzZXQgaW4gcGFydHMsIDJ4IGZhc3RlclxyXG5cdFx0bGV0IHNldCA9IG5ldyBTZXQoKTtcclxuXHRcdHJlYWRfc29ydGVkX2FycmF5KCkuZm9yRWFjaChpID0+IHNldF9hZGRfbWFueShzZXQsIGNodW5rc1tpXSkpO1xyXG5cdFx0c2V0X2FkZF9tYW55KHNldCwgcmVhZF9zb3J0ZWRfYXJyYXkoKSk7XHJcblx0XHRyZXR1cm4gc2V0OyBcclxuXHR9O1xyXG5cdEdST1VQUyA9IHJlYWRfYXJyYXlfd2hpbGUoaSA9PiB7XHJcblx0XHQvLyBtaW5pZmllciBwcm9wZXJ0eSBtYW5nbGluZyBzZWVtcyB1bnNhZmVcclxuXHRcdC8vIHNvIHRoZXNlIGFyZSBtYW51YWxseSByZW5hbWVkIHRvIHNpbmdsZSBjaGFyc1xyXG5cdFx0bGV0IE4gPSByZWFkX2FycmF5X3doaWxlKHIpLm1hcCh4ID0+IHgrMHg2MCk7XHJcblx0XHRpZiAoTi5sZW5ndGgpIHtcclxuXHRcdFx0bGV0IFIgPSBpID49IHVucmVzdHJpY3RlZDsgLy8gdW5yZXN0cmljdGVkIHRoZW4gcmVzdHJpY3RlZFxyXG5cdFx0XHROWzBdIC09IDMyOyAvLyBjYXBpdGFsaXplXHJcblx0XHRcdE4gPSBzdHJfZnJvbV9jcHMoTik7XHJcblx0XHRcdGlmIChSKSBOPWBSZXN0cmljdGVkWyR7Tn1dYDtcclxuXHRcdFx0bGV0IFAgPSByZWFkX2NodW5rZWQoKTsgLy8gcHJpbWFyeVxyXG5cdFx0XHRsZXQgUSA9IHJlYWRfY2h1bmtlZCgpOyAvLyBzZWNvbmRhcnlcclxuXHRcdFx0bGV0IE0gPSAhcigpOyAvLyBub3Qtd2hpdGVsaXN0ZWQsIGNoZWNrIGZvciBOU01cclxuXHRcdFx0Ly8gKioqIHRoaXMgY29kZSBjdXJyZW50bHkgaXNuJ3QgbmVlZGVkICoqKlxyXG5cdFx0XHQvKlxyXG5cdFx0XHRsZXQgViA9IFsuLi5QLCAuLi5RXS5zb3J0KChhLCBiKSA9PiBhLWIpOyAvLyBkZXJpdmU6IHNvcnRlZCB2YWxpZFxyXG5cdFx0XHRsZXQgTSA9IHIoKS0xOyAvLyBudW1iZXIgb2YgY29tYmluaW5nIG1hcmtcclxuXHRcdFx0aWYgKE0gPCAwKSB7IC8vIHdoaXRlbGlzdGVkXHJcblx0XHRcdFx0TSA9IG5ldyBNYXAocmVhZF9hcnJheV93aGlsZSgoKSA9PiB7XHJcblx0XHRcdFx0XHRsZXQgaSA9IHIoKTtcclxuXHRcdFx0XHRcdGlmIChpKSByZXR1cm4gW1ZbaS0xXSwgcmVhZF9hcnJheV93aGlsZSgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdGxldCB2ID0gcmVhZF9hcnJheV93aGlsZShyKTtcclxuXHRcdFx0XHRcdFx0aWYgKHYubGVuZ3RoKSByZXR1cm4gdi5tYXAoeCA9PiB4LTEpO1xyXG5cdFx0XHRcdFx0fSldO1xyXG5cdFx0XHRcdH0pKTtcclxuXHRcdFx0fSovXHJcblx0XHRcdHJldHVybiB7TiwgUCwgUSwgTSwgUn07XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdC8vIGRlY29kZSBjb21wcmVzc2VkIHdob2xlc1xyXG5cdFdIT0xFX1ZBTElEID0gcmVhZF9zb3J0ZWRfc2V0KCk7XHJcblx0V0hPTEVfTUFQID0gbmV3IE1hcCgpO1xyXG5cdGxldCB3aG9sZXMgPSByZWFkX3NvcnRlZF9hcnJheSgpLmNvbmNhdChBcnJheV9mcm9tKFdIT0xFX1ZBTElEKSkuc29ydCgoYSwgYikgPT4gYS1iKTsgLy8gbXVzdCBiZSBzb3J0ZWRcclxuXHR3aG9sZXMuZm9yRWFjaCgoY3AsIGkpID0+IHtcclxuXHRcdGxldCBkID0gcigpOyBcclxuXHRcdGxldCB3ID0gd2hvbGVzW2ldID0gZCA/IHdob2xlc1tpLWRdIDoge1Y6IFtdLCBNOiBuZXcgTWFwKCl9O1xyXG5cdFx0dy5WLnB1c2goY3ApOyAvLyBhZGQgdG8gbWVtYmVyIHNldFxyXG5cdFx0aWYgKCFXSE9MRV9WQUxJRC5oYXMoY3ApKSB7XHJcblx0XHRcdFdIT0xFX01BUC5zZXQoY3AsIHcpOyAgLy8gcmVnaXN0ZXIgd2l0aCB3aG9sZSBtYXBcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0Ly8gY29tcHV0ZSBjb25mdXNhYmxlLWV4dGVudCBjb21wbGVtZW50c1xyXG5cdC8vIHVzYWdlOiBXSE9MRV9NQVAuZ2V0KGNwKS5NLmdldChjcCkgPSBjb21wbGVtZW50IHNldFxyXG5cdGZvciAobGV0IHtWLCBNfSBvZiBuZXcgU2V0KFdIT0xFX01BUC52YWx1ZXMoKSkpIHtcclxuXHRcdC8vIGNvbm5lY3QgYWxsIGdyb3VwcyB0aGF0IGhhdmUgZWFjaCB3aG9sZSBjaGFyYWN0ZXJcclxuXHRcdGxldCByZWNzID0gW107XHJcblx0XHRmb3IgKGxldCBjcCBvZiBWKSB7XHJcblx0XHRcdGxldCBncyA9IEdST1VQUy5maWx0ZXIoZyA9PiBncm91cF9oYXNfY3AoZywgY3ApKTtcclxuXHRcdFx0bGV0IHJlYyA9IHJlY3MuZmluZCgoe0d9KSA9PiBncy5zb21lKGcgPT4gRy5oYXMoZykpKTtcclxuXHRcdFx0aWYgKCFyZWMpIHtcclxuXHRcdFx0XHRyZWMgPSB7RzogbmV3IFNldCgpLCBWOiBbXX07XHJcblx0XHRcdFx0cmVjcy5wdXNoKHJlYyk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmVjLlYucHVzaChjcCk7XHJcblx0XHRcdHNldF9hZGRfbWFueShyZWMuRywgZ3MpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gcGVyIGNoYXJhY3RlciBjYWNoZSBncm91cHMgd2hpY2ggYXJlIG5vdCBhIG1lbWJlciBvZiB0aGUgZXh0ZW50XHJcblx0XHRsZXQgdW5pb24gPSByZWNzLmZsYXRNYXAoeCA9PiBBcnJheV9mcm9tKHguRykpOyAvLyBhbGwgb2YgdGhlIGdyb3VwcyB1c2VkIGJ5IHRoaXMgd2hvbGVcclxuXHRcdGZvciAobGV0IHtHLCBWfSBvZiByZWNzKSB7XHJcblx0XHRcdGxldCBjb21wbGVtZW50ID0gbmV3IFNldCh1bmlvbi5maWx0ZXIoZyA9PiAhRy5oYXMoZykpKTsgLy8gZ3JvdXBzIG5vdCBjb3ZlcmVkIGJ5IHRoZSBleHRlbnRcclxuXHRcdFx0Zm9yIChsZXQgY3Agb2YgVikge1xyXG5cdFx0XHRcdE0uc2V0KGNwLCBjb21wbGVtZW50KTsgLy8gdGhpcyBpcyB0aGUgc2FtZSByZWZlcmVuY2VcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gY29tcHV0ZSB2YWxpZCBzZXRcclxuXHQvLyAyMDIzMDkyNDogVkFMSUQgd2FzIHVuaW9uIGJ1dCBjYW4gYmUgcmUtdXNlZFxyXG5cdFZBTElEID0gbmV3IFNldCgpOyAvLyBleGlzdHMgaW4gMSsgZ3JvdXBzXHJcblx0bGV0IG11bHRpID0gbmV3IFNldCgpOyAvLyBleGlzdHMgaW4gMisgZ3JvdXBzXHJcblx0Y29uc3QgYWRkX3RvX3VuaW9uID0gY3AgPT4gVkFMSUQuaGFzKGNwKSA/IG11bHRpLmFkZChjcCkgOiBWQUxJRC5hZGQoY3ApO1xyXG5cdGZvciAobGV0IGcgb2YgR1JPVVBTKSB7XHJcblx0XHRmb3IgKGxldCBjcCBvZiBnLlApIGFkZF90b191bmlvbihjcCk7XHJcblx0XHRmb3IgKGxldCBjcCBvZiBnLlEpIGFkZF90b191bmlvbihjcCk7XHJcblx0fVxyXG5cdC8vIGR1YWwgcHVycG9zZSBXSE9MRV9NQVA6IHJldHVybiBwbGFjZWhvbGRlciBpZiB1bmlxdWUgbm9uLWNvbmZ1c2FibGVcclxuXHRmb3IgKGxldCBjcCBvZiBWQUxJRCkge1xyXG5cdFx0aWYgKCFXSE9MRV9NQVAuaGFzKGNwKSAmJiAhbXVsdGkuaGFzKGNwKSkge1xyXG5cdFx0XHRXSE9MRV9NQVAuc2V0KGNwLCBVTklRVUVfUEgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHQvLyBhZGQgYWxsIGRlY29tcG9zZWQgcGFydHNcclxuXHQvLyBzZWUgZGVyaXZlOiBcIlZhbGlkIGlzIENsb3NlZCAodmlhIEJydXRlLWZvcmNlKVwiXHJcblx0c2V0X2FkZF9tYW55KFZBTElELCBuZmQoVkFMSUQpKTtcclxuXHRcclxuXHQvLyBkZWNvZGUgZW1vamlcclxuXHQvLyAyMDIzMDcxOTogZW1vamkgYXJlIG5vdyBmdWxseS1leHBhbmRlZCB0byBhdm9pZCBxdWlyayBsb2dpYyBcclxuXHRFTU9KSV9MSVNUID0gcmVhZF90cmllKHIpLm1hcCh2ID0+IEVtb2ppLmZyb20odikpLnNvcnQoY29tcGFyZV9hcnJheXMpO1xyXG5cdEVNT0pJX1JPT1QgPSBuZXcgTWFwKCk7IC8vIHRoaXMgaGFzIGFwcHJveCA3SyBub2RlcyAoMisgcGVyIGVtb2ppKVxyXG5cdGZvciAobGV0IGNwcyBvZiBFTU9KSV9MSVNUKSB7XHJcblx0XHQvLyAyMDIzMDcxOTogY2hhbmdlIHRvICpzbGlnaHRseSogc3RyaWN0ZXIgYWxnb3JpdGhtIHdoaWNoIGRpc2FsbG93cyBcclxuXHRcdC8vIGluc2VydGlvbiBvZiBtaXNwbGFjZWQgRkUwRiBpbiBlbW9qaSBzZXF1ZW5jZXMgKG1hdGNoaW5nIEVOU0lQLTE1KVxyXG5cdFx0Ly8gZXhhbXBsZTogYmVhdXRpZmllZCBbQSBCXSAoZWcuIGZsYWcgZW1vamkpIFxyXG5cdFx0Ly8gIGJlZm9yZTogYWxsb3c6IFtBIEZFMEYgQl0sIGVycm9yOiBbQSBGRTBGIEZFMEYgQl0gXHJcblx0XHQvLyAgIGFmdGVyOiBlcnJvcjogYm90aFxyXG5cdFx0Ly8gbm90ZTogdGhpcyBjb2RlIG5vdyBtYXRjaGVzIEVOU05vcm1hbGl6ZS57Y3MsamF2YX0gbG9naWNcclxuXHRcdGxldCBwcmV2ID0gW0VNT0pJX1JPT1RdO1xyXG5cdFx0Zm9yIChsZXQgY3Agb2YgY3BzKSB7XHJcblx0XHRcdGxldCBuZXh0ID0gcHJldi5tYXAobm9kZSA9PiB7XHJcblx0XHRcdFx0bGV0IGNoaWxkID0gbm9kZS5nZXQoY3ApO1xyXG5cdFx0XHRcdGlmICghY2hpbGQpIHtcclxuXHRcdFx0XHRcdC8vIHNob3VsZCB0aGlzIGJlIG9iamVjdD8gXHJcblx0XHRcdFx0XHQvLyAobW9zdCBoYXZlIDEtMiBpdGVtcywgZmV3IGhhdmUgbWFueSlcclxuXHRcdFx0XHRcdC8vIDIwMjMwNzE5OiBubywgdjggZGVmYXVsdCBtYXAgaXMgND9cclxuXHRcdFx0XHRcdGNoaWxkID0gbmV3IE1hcCgpO1xyXG5cdFx0XHRcdFx0bm9kZS5zZXQoY3AsIGNoaWxkKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGNoaWxkO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0aWYgKGNwID09PSBGRTBGKSB7XHJcblx0XHRcdFx0cHJldi5wdXNoKC4uLm5leHQpOyAvLyBsZXNzIHRoYW4gMjAgZWxlbWVudHNcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRwcmV2ID0gbmV4dDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Zm9yIChsZXQgeCBvZiBwcmV2KSB7XHJcblx0XHRcdHguViA9IGNwcztcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbi8vIGlmIGVzY2FwZWQ6IHtIRVh9XHJcbi8vICAgICAgIGVsc2U6IFwieFwiIHtIRVh9XHJcbmZ1bmN0aW9uIHF1b3RlZF9jcChjcCkge1xyXG5cdHJldHVybiAoc2hvdWxkX2VzY2FwZShjcCkgPyAnJyA6IGAke2JpZGlfcXEoc2FmZV9zdHJfZnJvbV9jcHMoW2NwXSkpfSBgKSArIHF1b3RlX2NwKGNwKTtcclxufVxyXG5cclxuLy8gMjAyMzAyMTE6IHNvbWUgbWVzc2FnZXMgY2FuIGJlIG1peGVkLWRpcmVjdGlvbmFsIGFuZCByZXN1bHQgaW4gc3BpbGxvdmVyXHJcbi8vIHVzZSAyMDBFIGFmdGVyIGEgcXVvdGVkIHN0cmluZyB0byBmb3JjZSB0aGUgcmVtYWluZGVyIG9mIGEgc3RyaW5nIGZyb20gXHJcbi8vIGFjcXVyaW5nIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHF1b3RlXHJcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9JbnRlcm5hdGlvbmFsL3F1ZXN0aW9ucy9xYS1iaWRpLXVuaWNvZGUtY29udHJvbHMjZXhjZXB0aW9uc1xyXG5mdW5jdGlvbiBiaWRpX3FxKHMpIHtcclxuXHRyZXR1cm4gYFwiJHtzfVwiXFx1MjAwRWA7IC8vIHN0cm9uZyBMVFJcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tfbGFiZWxfZXh0ZW5zaW9uKGNwcykge1xyXG5cdGlmIChjcHMubGVuZ3RoID49IDQgJiYgY3BzWzJdID09IEhZUEhFTiAmJiBjcHNbM10gPT0gSFlQSEVOKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgbGFiZWwgZXh0ZW5zaW9uOiBcIiR7c3RyX2Zyb21fY3BzKGNwcy5zbGljZSgwLCA0KSl9XCJgKTsgLy8gdGhpcyBjYW4gb25seSBiZSBhc2NpaSBzbyBjYW50IGJlIGJpZGlcclxuXHR9XHJcbn1cclxuZnVuY3Rpb24gY2hlY2tfbGVhZGluZ191bmRlcnNjb3JlKGNwcykge1xyXG5cdGNvbnN0IFVOREVSU0NPUkUgPSAweDVGO1xyXG5cdGZvciAobGV0IGkgPSBjcHMubGFzdEluZGV4T2YoVU5ERVJTQ09SRSk7IGkgPiAwOyApIHtcclxuXHRcdGlmIChjcHNbLS1pXSAhPT0gVU5ERVJTQ09SRSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ3VuZGVyc2NvcmUgYWxsb3dlZCBvbmx5IGF0IHN0YXJ0Jyk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcbi8vIGNoZWNrIHRoYXQgYSBmZW5jZWQgY3AgaXMgbm90IGxlYWRpbmcsIHRyYWlsaW5nLCBvciB0b3VjaGluZyBhbm90aGVyIGZlbmNlZCBjcFxyXG5mdW5jdGlvbiBjaGVja19mZW5jZWQoY3BzKSB7XHJcblx0bGV0IGNwID0gY3BzWzBdO1xyXG5cdGxldCBwcmV2ID0gRkVOQ0VELmdldChjcCk7XHJcblx0aWYgKHByZXYpIHRocm93IGVycm9yX3BsYWNlbWVudChgbGVhZGluZyAke3ByZXZ9YCk7XHJcblx0bGV0IG4gPSBjcHMubGVuZ3RoO1xyXG5cdGxldCBsYXN0ID0gLTE7IC8vIHByZXZlbnRzIHRyYWlsaW5nIGZyb20gdGhyb3dpbmdcclxuXHRmb3IgKGxldCBpID0gMTsgaSA8IG47IGkrKykge1xyXG5cdFx0Y3AgPSBjcHNbaV07XHJcblx0XHRsZXQgbWF0Y2ggPSBGRU5DRUQuZ2V0KGNwKTtcclxuXHRcdGlmIChtYXRjaCkge1xyXG5cdFx0XHQvLyBzaW5jZSBjcHNbMF0gaXNuJ3QgZmVuY2VkLCBjcHNbMV0gY2Fubm90IHRocm93XHJcblx0XHRcdGlmIChsYXN0ID09IGkpIHRocm93IGVycm9yX3BsYWNlbWVudChgJHtwcmV2fSArICR7bWF0Y2h9YCk7XHJcblx0XHRcdGxhc3QgPSBpICsgMTtcclxuXHRcdFx0cHJldiA9IG1hdGNoO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAobGFzdCA9PSBuKSB0aHJvdyBlcnJvcl9wbGFjZW1lbnQoYHRyYWlsaW5nICR7cHJldn1gKTtcclxufVxyXG5cclxuLy8gY3JlYXRlIGEgc2FmZSB0byBwcmludCBzdHJpbmcgXHJcbi8vIGludmlzaWJsZXMgYXJlIGVzY2FwZWRcclxuLy8gbGVhZGluZyBjbSB1c2VzIHBsYWNlaG9sZGVyXHJcbi8vIGlmIGNwcyBleGNlZWQgbWF4LCBtaWRkbGUgdHJ1bmNhdGUgd2l0aCBlbGxpcHNpc1xyXG4vLyBxdW90ZXIoY3ApID0+IHN0cmluZywgZWcuIDMwMDAgPT4gXCJ7MzAwMH1cIlxyXG4vLyBub3RlOiBpbiBodG1sLCB5b3UnZCBjYWxsIHRoaXMgZnVuY3Rpb24gdGhlbiByZXBsYWNlIFs8PiZdIHdpdGggZW50aXRpZXNcclxuZnVuY3Rpb24gc2FmZV9zdHJfZnJvbV9jcHMoY3BzLCBtYXggPSBJbmZpbml0eSwgcXVvdGVyID0gcXVvdGVfY3ApIHtcclxuXHQvL2lmIChOdW1iZXIuaXNJbnRlZ2VyKGNwcykpIGNwcyA9IFtjcHNdO1xyXG5cdC8vaWYgKCFBcnJheS5pc0FycmF5KGNwcykpIHRocm93IG5ldyBUeXBlRXJyb3IoYGV4cGVjdGVkIGNvZGVwb2ludHNgKTtcclxuXHRsZXQgYnVmID0gW107XHJcblx0aWYgKGlzX2NvbWJpbmluZ19tYXJrKGNwc1swXSkpIGJ1Zi5wdXNoKCfil4wnKTtcclxuXHRpZiAoY3BzLmxlbmd0aCA+IG1heCkge1xyXG5cdFx0bWF4ID4+PSAxO1xyXG5cdFx0Y3BzID0gWy4uLmNwcy5zbGljZSgwLCBtYXgpLCAweDIwMjYsIC4uLmNwcy5zbGljZSgtbWF4KV07XHJcblx0fVxyXG5cdGxldCBwcmV2ID0gMDtcclxuXHRsZXQgbiA9IGNwcy5sZW5ndGg7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuXHRcdGxldCBjcCA9IGNwc1tpXTtcclxuXHRcdGlmIChzaG91bGRfZXNjYXBlKGNwKSkge1xyXG5cdFx0XHRidWYucHVzaChzdHJfZnJvbV9jcHMoY3BzLnNsaWNlKHByZXYsIGkpKSk7XHJcblx0XHRcdGJ1Zi5wdXNoKHF1b3RlcihjcCkpO1xyXG5cdFx0XHRwcmV2ID0gaSArIDE7XHJcblx0XHR9XHJcblx0fVxyXG5cdGJ1Zi5wdXNoKHN0cl9mcm9tX2NwcyhjcHMuc2xpY2UocHJldiwgbikpKTtcclxuXHRyZXR1cm4gYnVmLmpvaW4oJycpO1xyXG59XHJcblxyXG4vLyBub3RlOiBzZXQocykgY2Fubm90IGJlIGV4cG9zZWQgYmVjYXVzZSB0aGV5IGNhbiBiZSBtb2RpZmllZFxyXG4vLyBub3RlOiBPYmplY3QuZnJlZXplKCkgZG9lc24ndCB3b3JrXHJcbmZ1bmN0aW9uIGlzX2NvbWJpbmluZ19tYXJrKGNwKSB7XHJcblx0aW5pdCgpO1xyXG5cdHJldHVybiBDTS5oYXMoY3ApO1xyXG59XHJcbmZ1bmN0aW9uIHNob3VsZF9lc2NhcGUoY3ApIHtcclxuXHRpbml0KCk7XHJcblx0cmV0dXJuIEVTQ0FQRS5oYXMoY3ApO1xyXG59XHJcblxyXG4vLyByZXR1cm4gYWxsIHN1cHBvcnRlZCBlbW9qaSBhcyBmdWxseS1xdWFsaWZpZWQgZW1vamkgXHJcbi8vIG9yZGVyZWQgYnkgbGVuZ3RoIHRoZW4gbGV4aWNvZ3JhcGhpYyBcclxuZnVuY3Rpb24gZW5zX2Vtb2ppKCkge1xyXG5cdGluaXQoKTtcclxuXHRyZXR1cm4gRU1PSklfTElTVC5tYXAoeCA9PiB4LnNsaWNlKCkpOyAvLyBlbW9qaSBhcmUgZXhwb3NlZCBzbyBjb3B5XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuc19ub3JtYWxpemVfZnJhZ21lbnQoZnJhZywgZGVjb21wb3NlKSB7XHJcblx0aW5pdCgpO1xyXG5cdGxldCBuZiA9IGRlY29tcG9zZSA/IG5mZCA6IG5mYztcclxuXHRyZXR1cm4gZnJhZy5zcGxpdChTVE9QX0NIKS5tYXAobGFiZWwgPT4gc3RyX2Zyb21fY3BzKHRva2Vuc19mcm9tX3N0cihleHBsb2RlX2NwKGxhYmVsKSwgbmYsIGZpbHRlcl9mZTBmKS5mbGF0KCkpKS5qb2luKFNUT1BfQ0gpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBlbnNfbm9ybWFsaXplKG5hbWUpIHtcclxuXHRyZXR1cm4gZmxhdHRlbihzcGxpdChuYW1lLCBuZmMsIGZpbHRlcl9mZTBmKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuc19iZWF1dGlmeShuYW1lKSB7XHJcblx0bGV0IGxhYmVscyA9IHNwbGl0KG5hbWUsIG5mYywgeCA9PiB4KTsgLy8gZW1vamkgbm90IGV4cG9zZWRcclxuXHRmb3IgKGxldCB7dHlwZSwgb3V0cHV0LCBlcnJvcn0gb2YgbGFiZWxzKSB7XHJcblx0XHRpZiAoZXJyb3IpIGJyZWFrOyAvLyBmbGF0dGVuIHdpbGwgdGhyb3dcclxuXHJcblx0XHQvLyByZXBsYWNlIGxlYWRpbmcvdHJhaWxpbmcgaHlwaGVuXHJcblx0XHQvLyAyMDIzMDEyMTogY29uc2lkZXIgYmVhdXRpZmluZyBhbGwgb3IgbGVhZGluZy90cmFpbGluZyBoeXBoZW4gdG8gdW5pY29kZSB2YXJpYW50XHJcblx0XHQvLyBub3QgZXhhY3RseSB0aGUgc2FtZSBpbiBldmVyeSBmb250LCBidXQgdmVyeSBzaW1pbGFyOiBcIi1cIiB2cyBcIuKAkFwiXHJcblx0XHQvKlxyXG5cdFx0Y29uc3QgVU5JQ09ERV9IWVBIRU4gPSAweDIwMTA7XHJcblx0XHQvLyBtYXliZSB0aGlzIHNob3VsZCByZXBsYWNlIGFsbCBmb3IgdmlzdWFsIGNvbnNpc3RhbmN5P1xyXG5cdFx0Ly8gYG5vZGUgdG9vbHMvcmVnLWNvdW50LmpzIHJlZ2V4IF4tXFx7MixcXH1gID0+IDU5MlxyXG5cdFx0Ly9mb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dC5sZW5ndGg7IGkrKykgaWYgKG91dHB1dFtpXSA9PSAweDJEKSBvdXRwdXRbaV0gPSAweDIwMTA7XHJcblx0XHRpZiAob3V0cHV0WzBdID09IEhZUEhFTikgb3V0cHV0WzBdID0gVU5JQ09ERV9IWVBIRU47XHJcblx0XHRsZXQgZW5kID0gb3V0cHV0Lmxlbmd0aC0xO1xyXG5cdFx0aWYgKG91dHB1dFtlbmRdID09IEhZUEhFTikgb3V0cHV0W2VuZF0gPSBVTklDT0RFX0hZUEhFTjtcclxuXHRcdCovXHJcblx0XHQvLyAyMDIzMDEyMzogV0hBVFdHIFVSTCB1c2VzIFwiQ2hlY2tIeXBoZW5zXCIgZmFsc2VcclxuXHRcdC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaWRuYVxyXG5cclxuXHRcdC8vIHVwZGF0ZSBldGhlcmV1bSBzeW1ib2xcclxuXHRcdC8vIM6+ID0+IM6eIGlmIG5vdCBncmVla1xyXG5cdFx0aWYgKHR5cGUgIT09ICdHcmVlaycpIGFycmF5X3JlcGxhY2Uob3V0cHV0LCAweDNCRSwgMHgzOUUpO1xyXG5cclxuXHRcdC8vIDIwMjIxMjEzOiBmaXhlcyBiaWRpIHN1YmRvbWFpbiBpc3N1ZSwgYnV0IGJyZWFrcyBpbnZhcmlhbnQgKDIwMEUgaXMgZGlzYWxsb3dlZClcclxuXHRcdC8vIGNvdWxkIGJlIGZpeGVkIHdpdGggc3BlY2lhbCBjYXNlIGZvcjogMkQgKC4pICsgMjAwRSAoTFRSKVxyXG5cdFx0Ly8gaHR0cHM6Ly9kaXNjdXNzLmVucy5kb21haW5zL3QvYmlkaS1sYWJlbC1vcmRlcmluZy1zcG9vZi8xNTgyNFxyXG5cdFx0Ly9vdXRwdXQuc3BsaWNlKDAsIDAsIDB4MjAwRSk7XHJcblx0fVxyXG5cdHJldHVybiBmbGF0dGVuKGxhYmVscyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFycmF5X3JlcGxhY2UodiwgYSwgYikge1xyXG5cdGxldCBwcmV2ID0gMDtcclxuXHR3aGlsZSAodHJ1ZSkge1xyXG5cdFx0bGV0IG5leHQgPSB2LmluZGV4T2YoYSwgcHJldik7XHJcblx0XHRpZiAobmV4dCA8IDApIGJyZWFrO1xyXG5cdFx0dltuZXh0XSA9IGI7IFxyXG5cdFx0cHJldiA9IG5leHQgKyAxO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZW5zX3NwbGl0KG5hbWUsIHByZXNlcnZlX2Vtb2ppKSB7XHJcblx0cmV0dXJuIHNwbGl0KG5hbWUsIG5mYywgcHJlc2VydmVfZW1vamkgPyB4ID0+IHguc2xpY2UoKSA6IGZpbHRlcl9mZTBmKTsgLy8gZW1vamkgYXJlIGV4cG9zZWQgc28gY29weVxyXG59XHJcblxyXG5mdW5jdGlvbiBzcGxpdChuYW1lLCBuZiwgZWYpIHtcclxuXHRpZiAoIW5hbWUpIHJldHVybiBbXTsgLy8gMjAyMzA3MTk6IGVtcHR5IG5hbWUgYWxsb3dhbmNlXHJcblx0aW5pdCgpO1xyXG5cdGxldCBvZmZzZXQgPSAwO1xyXG5cdC8vIGh0dHBzOi8vdW5pY29kZS5vcmcvcmVwb3J0cy90cjQ2LyNWYWxpZGl0eV9Dcml0ZXJpYVxyXG5cdC8vIDQuKSBcIlRoZSBsYWJlbCBtdXN0IG5vdCBjb250YWluIGEgVSswMDJFICggLiApIEZVTEwgU1RPUC5cIlxyXG5cdHJldHVybiBuYW1lLnNwbGl0KFNUT1BfQ0gpLm1hcChsYWJlbCA9PiB7XHJcblx0XHRsZXQgaW5wdXQgPSBleHBsb2RlX2NwKGxhYmVsKTtcclxuXHRcdGxldCBpbmZvID0ge1xyXG5cdFx0XHRpbnB1dCxcclxuXHRcdFx0b2Zmc2V0LCAvLyBjb2RlcG9pbnQsIG5vdCBzdWJzdHJpbmchXHJcblx0XHR9O1xyXG5cdFx0b2Zmc2V0ICs9IGlucHV0Lmxlbmd0aCArIDE7IC8vICsgc3RvcFxyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Ly8gMS4pIFwiVGhlIGxhYmVsIG11c3QgYmUgaW4gVW5pY29kZSBOb3JtYWxpemF0aW9uIEZvcm0gTkZDXCJcclxuXHRcdFx0bGV0IHRva2VucyA9IGluZm8udG9rZW5zID0gdG9rZW5zX2Zyb21fc3RyKGlucHV0LCBuZiwgZWYpO1xyXG5cdFx0XHRsZXQgdG9rZW5fY291bnQgPSB0b2tlbnMubGVuZ3RoO1xyXG5cdFx0XHRsZXQgdHlwZTtcclxuXHRcdFx0aWYgKCF0b2tlbl9jb3VudCkgeyAvLyB0aGUgbGFiZWwgd2FzIGVmZmVjdGl2ZWx5IGVtcHR5IChjb3VsZCBvZiBoYWQgaWdub3JlZCBjaGFyYWN0ZXJzKVxyXG5cdFx0XHRcdC8vbm9ybSA9IFtdO1xyXG5cdFx0XHRcdC8vdHlwZSA9ICdOb25lJzsgLy8gdXNlIHRoaXMgaW5zdGVhZCBvZiBuZXh0IG1hdGNoLCBcIkFTQ0lJXCJcclxuXHRcdFx0XHQvLyAyMDIzMDEyMDogY2hhbmdlIHRvIHN0cmljdFxyXG5cdFx0XHRcdC8vIGh0dHBzOi8vZGlzY3Vzcy5lbnMuZG9tYWlucy90L2Vucy1uYW1lLW5vcm1hbGl6YXRpb24tMm5kLzE0NTY0LzU5XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBlbXB0eSBsYWJlbGApO1xyXG5cdFx0XHR9IFxyXG5cdFx0XHRsZXQgbm9ybSA9IGluZm8ub3V0cHV0ID0gdG9rZW5zLmZsYXQoKTtcclxuXHRcdFx0Y2hlY2tfbGVhZGluZ191bmRlcnNjb3JlKG5vcm0pO1xyXG5cdFx0XHRsZXQgZW1vamkgPSBpbmZvLmVtb2ppID0gdG9rZW5fY291bnQgPiAxIHx8IHRva2Vuc1swXS5pc19lbW9qaTsgLy8gc2FtZSBhczogdG9rZW5zLnNvbWUoeCA9PiB4LmlzX2Vtb2ppKTtcclxuXHRcdFx0aWYgKCFlbW9qaSAmJiBub3JtLmV2ZXJ5KGNwID0+IGNwIDwgMHg4MCkpIHsgLy8gc3BlY2lhbCBjYXNlIGZvciBhc2NpaVxyXG5cdFx0XHRcdC8vIDIwMjMwMTIzOiBtYXRjaGVzIG1hdGNoZXMgV0hBVFdHLCBzZWUgbm90ZSAzLjNcclxuXHRcdFx0XHRjaGVja19sYWJlbF9leHRlbnNpb24obm9ybSk7IC8vIG9ubHkgbmVlZGVkIGZvciBhc2NpaVxyXG5cdFx0XHRcdC8vIGNhbnQgaGF2ZSBmZW5jZWRcclxuXHRcdFx0XHQvLyBjYW50IGhhdmUgY21cclxuXHRcdFx0XHQvLyBjYW50IGhhdmUgd2hvbGVzXHJcblx0XHRcdFx0Ly8gc2VlIGRlcml2ZTogXCJGYXN0cGF0aCBBU0NJSVwiXHJcblx0XHRcdFx0dHlwZSA9ICdBU0NJSSc7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bGV0IGNoYXJzID0gdG9rZW5zLmZsYXRNYXAoeCA9PiB4LmlzX2Vtb2ppID8gW10gOiB4KTsgLy8gYWxsIG9mIHRoZSBuZmMgdG9rZW5zIGNvbmNhdCB0b2dldGhlclxyXG5cdFx0XHRcdGlmICghY2hhcnMubGVuZ3RoKSB7IC8vIHRoZXJlcyBubyB0ZXh0LCBqdXN0IGVtb2ppXHJcblx0XHRcdFx0XHR0eXBlID0gJ0Vtb2ppJztcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gNS4pIFwiVGhlIGxhYmVsIG11c3Qgbm90IGJlZ2luIHdpdGggYSBjb21iaW5pbmcgbWFyaywgdGhhdCBpczogR2VuZXJhbF9DYXRlZ29yeT1NYXJrLlwiXHJcblx0XHRcdFx0XHRpZiAoQ00uaGFzKG5vcm1bMF0pKSB0aHJvdyBlcnJvcl9wbGFjZW1lbnQoJ2xlYWRpbmcgY29tYmluaW5nIG1hcmsnKTtcclxuXHRcdFx0XHRcdGZvciAobGV0IGkgPSAxOyBpIDwgdG9rZW5fY291bnQ7IGkrKykgeyAvLyB3ZSd2ZSBhbHJlYWR5IGNoZWNrZWQgdGhlIGZpcnN0IHRva2VuXHJcblx0XHRcdFx0XHRcdGxldCBjcHMgPSB0b2tlbnNbaV07XHJcblx0XHRcdFx0XHRcdGlmICghY3BzLmlzX2Vtb2ppICYmIENNLmhhcyhjcHNbMF0pKSB7IC8vIGV2ZXJ5IHRleHQgdG9rZW4gaGFzIGVtb2ppIG5laWdoYm9ycywgZWcuIEV0RUVFdEV0Li4uXHJcblx0XHRcdFx0XHRcdFx0Ly8gYmlkaV9xcSgpIG5vdCBuZWVkZWQgc2luY2UgZW1vamkgaXMgTFRSIGFuZCBjcHMgaXMgYSBDTVxyXG5cdFx0XHRcdFx0XHRcdHRocm93IGVycm9yX3BsYWNlbWVudChgZW1vamkgKyBjb21iaW5pbmcgbWFyazogXCIke3N0cl9mcm9tX2Nwcyh0b2tlbnNbaS0xXSl9ICsgJHtzYWZlX3N0cl9mcm9tX2NwcyhbY3BzWzBdXSl9XCJgKTsgXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGNoZWNrX2ZlbmNlZChub3JtKTtcclxuXHRcdFx0XHRcdGxldCB1bmlxdWUgPSBBcnJheV9mcm9tKG5ldyBTZXQoY2hhcnMpKTtcclxuXHRcdFx0XHRcdGxldCBbZ10gPSBkZXRlcm1pbmVfZ3JvdXAodW5pcXVlKTsgLy8gdGFrZSB0aGUgZmlyc3QgbWF0Y2hcclxuXHRcdFx0XHRcdC8vIHNlZSBkZXJpdmU6IFwiTWF0Y2hpbmcgR3JvdXBzIGhhdmUgU2FtZSBDTSBTdHlsZVwiXHJcblx0XHRcdFx0XHQvLyBhbHRlcm5hdGl2ZTogY291bGQgZm9ybSBhIGh5YnJpZCB0eXBlOiBMYXRpbi9KYXBhbmVzZS8uLi5cdFxyXG5cdFx0XHRcdFx0Y2hlY2tfZ3JvdXAoZywgY2hhcnMpOyAvLyBuZWVkIHRleHQgaW4gb3JkZXJcclxuXHRcdFx0XHRcdGNoZWNrX3dob2xlKGcsIHVuaXF1ZSk7IC8vIG9ubHkgbmVlZCB1bmlxdWUgdGV4dCAob3JkZXIgd291bGQgYmUgcmVxdWlyZWQgZm9yIG11bHRpcGxlLWNoYXIgY29uZnVzYWJsZXMpXHJcblx0XHRcdFx0XHR0eXBlID0gZy5OO1xyXG5cdFx0XHRcdFx0Ly8gMjAyMzAxMjE6IGNvbnNpZGVyIGV4cG9zaW5nIHJlc3RyaWN0ZWQgZmxhZ1xyXG5cdFx0XHRcdFx0Ly8gaXQncyBzaW1wbGVyIHRvIGp1c3QgY2hlY2sgZm9yICdSZXN0cmljdGVkJ1xyXG5cdFx0XHRcdFx0Ly8gb3IgZXZlbiBiZXR0ZXI6IHR5cGUuZW5kc1dpdGgoJ10nKVxyXG5cdFx0XHRcdFx0Ly9pZiAoZy5SKSBpbmZvLnJlc3RyaWN0ZWQgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpbmZvLnR5cGUgPSB0eXBlO1xyXG5cdFx0fSBjYXRjaCAoZXJyKSB7XHJcblx0XHRcdGluZm8uZXJyb3IgPSBlcnI7IC8vIHVzZSBmdWxsIGVycm9yIG9iamVjdFxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGluZm87XHJcblx0fSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrX3dob2xlKGdyb3VwLCB1bmlxdWUpIHtcclxuXHRsZXQgbWFrZXI7XHJcblx0bGV0IHNoYXJlZCA9IFtdO1xyXG5cdGZvciAobGV0IGNwIG9mIHVuaXF1ZSkge1xyXG5cdFx0bGV0IHdob2xlID0gV0hPTEVfTUFQLmdldChjcCk7XHJcblx0XHRpZiAod2hvbGUgPT09IFVOSVFVRV9QSCkgcmV0dXJuOyAvLyB1bmlxdWUsIG5vbi1jb25mdXNhYmxlXHJcblx0XHRpZiAod2hvbGUpIHtcclxuXHRcdFx0bGV0IHNldCA9IHdob2xlLk0uZ2V0KGNwKTsgLy8gZ3JvdXBzIHdoaWNoIGhhdmUgYSBjaGFyYWN0ZXIgdGhhdCBsb29rLWxpa2UgdGhpcyBjaGFyYWN0ZXJcclxuXHRcdFx0bWFrZXIgPSBtYWtlciA/IG1ha2VyLmZpbHRlcihnID0+IHNldC5oYXMoZykpIDogQXJyYXlfZnJvbShzZXQpO1xyXG5cdFx0XHRpZiAoIW1ha2VyLmxlbmd0aCkgcmV0dXJuOyAvLyBjb25mdXNhYmxlIGludGVyc2VjdGlvbiBpcyBlbXB0eVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c2hhcmVkLnB1c2goY3ApOyBcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKG1ha2VyKSB7XHJcblx0XHQvLyB3ZSBoYXZlIDErIGNvbmZ1c2FibGVcclxuXHRcdC8vIGNoZWNrIGlmIGFueSBvZiB0aGUgcmVtYWluaW5nIGdyb3Vwc1xyXG5cdFx0Ly8gY29udGFpbiB0aGUgc2hhcmVkIGNoYXJhY3RlcnMgdG9vXHJcblx0XHRmb3IgKGxldCBnIG9mIG1ha2VyKSB7XHJcblx0XHRcdGlmIChzaGFyZWQuZXZlcnkoY3AgPT4gZ3JvdXBfaGFzX2NwKGcsIGNwKSkpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYHdob2xlLXNjcmlwdCBjb25mdXNhYmxlOiAke2dyb3VwLk59LyR7Zy5OfWApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG4vLyBhc3N1bXB0aW9uOiB1bmlxdWUuc2l6ZSA+IDBcclxuLy8gcmV0dXJucyBsaXN0IG9mIG1hdGNoaW5nIGdyb3Vwc1xyXG5mdW5jdGlvbiBkZXRlcm1pbmVfZ3JvdXAodW5pcXVlKSB7XHJcblx0bGV0IGdyb3VwcyA9IEdST1VQUztcclxuXHRmb3IgKGxldCBjcCBvZiB1bmlxdWUpIHtcclxuXHRcdC8vIG5vdGU6IHdlIG5lZWQgdG8gZG9kZ2UgQ00gdGhhdCBhcmUgd2hpdGVsaXN0ZWRcclxuXHRcdC8vIGJ1dCB0aGF0IGNvZGUgaXNuJ3QgY3VycmVudGx5IG5lY2Vzc2FyeVxyXG5cdFx0bGV0IGdzID0gZ3JvdXBzLmZpbHRlcihnID0+IGdyb3VwX2hhc19jcChnLCBjcCkpO1xyXG5cdFx0aWYgKCFncy5sZW5ndGgpIHtcclxuXHRcdFx0aWYgKCFHUk9VUFMuc29tZShnID0+IGdyb3VwX2hhc19jcChnLCBjcCkpKSB7IFxyXG5cdFx0XHRcdC8vIHRoZSBjaGFyYWN0ZXIgd2FzIGNvbXBvc2VkIG9mIHZhbGlkIHBhcnRzXHJcblx0XHRcdFx0Ly8gYnV0IGl0J3MgTkZDIGZvcm0gaXMgaW52YWxpZFxyXG5cdFx0XHRcdC8vIDIwMjMwNzE2OiBjaGFuZ2UgdG8gbW9yZSBleGFjdCBzdGF0ZW1lbnQsIHNlZTogRU5TTm9ybWFsaXplLntjcyxqYXZhfVxyXG5cdFx0XHRcdC8vIG5vdGU6IHRoaXMgZG9lc24ndCBoYXZlIHRvIGJlIGEgY29tcG9zaXRpb25cclxuXHRcdFx0XHQvLyAyMDIzMDcyMDogY2hhbmdlIHRvIGZ1bGwgY2hlY2tcclxuXHRcdFx0XHR0aHJvdyBlcnJvcl9kaXNhbGxvd2VkKGNwKTsgLy8gdGhpcyBzaG91bGQgYmUgcmFyZVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vIHRoZXJlIGlzIG5vIGdyb3VwIHRoYXQgY29udGFpbnMgYWxsIHRoZXNlIGNoYXJhY3RlcnNcclxuXHRcdFx0XHQvLyB0aHJvdyB1c2luZyB0aGUgaGlnaGVzdCBwcmlvcml0eSBncm91cCB0aGF0IG1hdGNoZWRcclxuXHRcdFx0XHQvLyBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzkvI21peGVkX3NjcmlwdF9jb25mdXNhYmxlc1xyXG5cdFx0XHRcdHRocm93IGVycm9yX2dyb3VwX21lbWJlcihncm91cHNbMF0sIGNwKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Z3JvdXBzID0gZ3M7XHJcblx0XHRpZiAoZ3MubGVuZ3RoID09IDEpIGJyZWFrOyAvLyB0aGVyZSBpcyBvbmx5IG9uZSBncm91cCBsZWZ0XHJcblx0fVxyXG5cdC8vIHRoZXJlIGFyZSBhdCBsZWFzdCAxIGdyb3VwKHMpIHdpdGggYWxsIG9mIHRoZXNlIGNoYXJhY3RlcnNcclxuXHRyZXR1cm4gZ3JvdXBzO1xyXG59XHJcblxyXG4vLyB0aHJvdyBvbiBmaXJzdCBlcnJvclxyXG5mdW5jdGlvbiBmbGF0dGVuKHNwbGl0KSB7XHJcblx0cmV0dXJuIHNwbGl0Lm1hcCgoe2lucHV0LCBlcnJvciwgb3V0cHV0fSkgPT4ge1xyXG5cdFx0aWYgKGVycm9yKSB7XHJcblx0XHRcdC8vIGRvbid0IHByaW50IGxhYmVsIGFnYWluIGlmIGp1c3QgYSBzaW5nbGUgbGFiZWxcclxuXHRcdFx0bGV0IG1zZyA9IGVycm9yLm1lc3NhZ2U7XHJcblx0XHRcdC8vIGJpZGlfcXEoKSBvbmx5IG5lY2Vzc2FyeSBpZiBtc2cgaXMgZGlnaXRzXHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihzcGxpdC5sZW5ndGggPT0gMSA/IG1zZyA6IGBJbnZhbGlkIGxhYmVsICR7YmlkaV9xcShzYWZlX3N0cl9mcm9tX2NwcyhpbnB1dCwgNjMpKX06ICR7bXNnfWApOyBcclxuXHRcdH1cclxuXHRcdHJldHVybiBzdHJfZnJvbV9jcHMob3V0cHV0KTtcclxuXHR9KS5qb2luKFNUT1BfQ0gpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBlcnJvcl9kaXNhbGxvd2VkKGNwKSB7XHJcblx0Ly8gVE9ETzogYWRkIGNwIHRvIGVycm9yP1xyXG5cdHJldHVybiBuZXcgRXJyb3IoYGRpc2FsbG93ZWQgY2hhcmFjdGVyOiAke3F1b3RlZF9jcChjcCl9YCk7IFxyXG59XHJcbmZ1bmN0aW9uIGVycm9yX2dyb3VwX21lbWJlcihnLCBjcCkge1xyXG5cdGxldCBxdW90ZWQgPSBxdW90ZWRfY3AoY3ApO1xyXG5cdGxldCBnZyA9IEdST1VQUy5maW5kKGcgPT4gZy5QLmhhcyhjcCkpOyAvLyBvbmx5IGNoZWNrIHByaW1hcnlcclxuXHRpZiAoZ2cpIHtcclxuXHRcdHF1b3RlZCA9IGAke2dnLk59ICR7cXVvdGVkfWA7XHJcblx0fVxyXG5cdHJldHVybiBuZXcgRXJyb3IoYGlsbGVnYWwgbWl4dHVyZTogJHtnLk59ICsgJHtxdW90ZWR9YCk7XHJcbn1cclxuZnVuY3Rpb24gZXJyb3JfcGxhY2VtZW50KHdoZXJlKSB7XHJcblx0cmV0dXJuIG5ldyBFcnJvcihgaWxsZWdhbCBwbGFjZW1lbnQ6ICR7d2hlcmV9YCk7XHJcbn1cclxuXHJcbi8vIGFzc3VtcHRpb246IGNwcy5sZW5ndGggPiAwXHJcbi8vIGFzc3VtcHRpb246IGNwc1swXSBpc24ndCBhIENNXHJcbi8vIGFzc3VtcHRpb246IHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgaXNuJ3QgYW4gZW1vamlcclxuZnVuY3Rpb24gY2hlY2tfZ3JvdXAoZywgY3BzKSB7XHJcblx0Zm9yIChsZXQgY3Agb2YgY3BzKSB7XHJcblx0XHRpZiAoIWdyb3VwX2hhc19jcChnLCBjcCkpIHtcclxuXHRcdFx0Ly8gZm9yIHdoaXRlbGlzdGVkIHNjcmlwdHMsIHRoaXMgd2lsbCB0aHJvdyBpbGxlZ2FsIG1peHR1cmUgb24gaW52YWxpZCBjbSwgZWcuIFwiZXszMDB9ezMwMH1cIlxyXG5cdFx0XHQvLyBhdCB0aGUgbW9tZW50LCBpdCdzIHVubmVjZXNzYXJ5IHRvIGludHJvZHVjZSBhbiBleHRyYSBlcnJvciB0eXBlXHJcblx0XHRcdC8vIHVudGlsIHRoZXJlIGV4aXN0cyBhIHdoaXRlbGlzdGVkIG11bHRpLWNoYXJhY3RlclxyXG5cdFx0XHQvLyAgIGVnLiBpZiAoTSA8IDAgJiYgaXNfY29tYmluaW5nX21hcmsoY3ApKSB7IC4uLiB9XHJcblx0XHRcdC8vIHRoZXJlIGFyZSAzIGNhc2VzOlxyXG5cdFx0XHQvLyAgIDEuIGlsbGVnYWwgY20gZm9yIHdyb25nIGdyb3VwID0+IG1peHR1cmUgZXJyb3JcclxuXHRcdFx0Ly8gICAyLiBpbGxlZ2FsIGNtIGZvciBzYW1lIGdyb3VwID0+IGNtIGVycm9yXHJcblx0XHRcdC8vICAgICAgIHJlcXVpcmVzIHNldCBvZiB3aGl0ZWxpc3QgY20gcGVyIGdyb3VwOiBcclxuXHRcdFx0Ly8gICAgICAgIGVnLiBuZXcgU2V0KFsuLi5nLlAsIC4uLmcuUV0uZmxhdE1hcChuZmMpLmZpbHRlcihjcCA9PiBDTS5oYXMoY3ApKSlcclxuXHRcdFx0Ly8gICAzLiB3cm9uZyBncm91cCA9PiBtaXh0dXJlIGVycm9yXHJcblx0XHRcdHRocm93IGVycm9yX2dyb3VwX21lbWJlcihnLCBjcCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdC8vaWYgKE0gPj0gMCkgeyAvLyB3ZSBoYXZlIGEga25vd24gZml4ZWQgY20gY291bnRcclxuXHRpZiAoZy5NKSB7IC8vIHdlIG5lZWQgdG8gY2hlY2sgZm9yIE5TTVxyXG5cdFx0bGV0IGRlY29tcG9zZWQgPSBuZmQoY3BzKTtcclxuXHRcdGZvciAobGV0IGkgPSAxLCBlID0gZGVjb21wb3NlZC5sZW5ndGg7IGkgPCBlOyBpKyspIHsgLy8gc2VlOiBhc3N1bXB0aW9uXHJcblx0XHRcdC8vIDIwMjMwMjEwOiBidWdmaXg6IHVzaW5nIGNwcyBpbnN0ZWFkIG9mIGRlY29tcG9zZWQgaC90IENhcmJvbjIyNVxyXG5cdFx0XHQvKlxyXG5cdFx0XHRpZiAoQ00uaGFzKGRlY29tcG9zZWRbaV0pKSB7XHJcblx0XHRcdFx0bGV0IGogPSBpICsgMTtcclxuXHRcdFx0XHR3aGlsZSAoaiA8IGUgJiYgQ00uaGFzKGRlY29tcG9zZWRbal0pKSBqKys7XHJcblx0XHRcdFx0aWYgKGogLSBpID4gTSkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGB0b28gbWFueSBjb21iaW5pbmcgbWFya3M6ICR7Zy5OfSAke2JpZGlfcXEoc3RyX2Zyb21fY3BzKGRlY29tcG9zZWQuc2xpY2UoaS0xLCBqKSkpfSAoJHtqLWl9LyR7TX0pYCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGkgPSBqO1xyXG5cdFx0XHR9XHJcblx0XHRcdCovXHJcblx0XHRcdC8vIDIwMjMwMjE3OiBzd2l0Y2ggdG8gTlNNIGNvdW50aW5nXHJcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzOS8jT3B0aW9uYWxfRGV0ZWN0aW9uXHJcblx0XHRcdGlmIChOU00uaGFzKGRlY29tcG9zZWRbaV0pKSB7XHJcblx0XHRcdFx0bGV0IGogPSBpICsgMTtcclxuXHRcdFx0XHRmb3IgKGxldCBjcDsgaiA8IGUgJiYgTlNNLmhhcyhjcCA9IGRlY29tcG9zZWRbal0pOyBqKyspIHtcclxuXHRcdFx0XHRcdC8vIGEuIEZvcmJpZCBzZXF1ZW5jZXMgb2YgdGhlIHNhbWUgbm9uc3BhY2luZyBtYXJrLlxyXG5cdFx0XHRcdFx0Zm9yIChsZXQgayA9IGk7IGsgPCBqOyBrKyspIHsgLy8gTyhuXjIpIGJ1dCBuIDwgMTAwXHJcblx0XHRcdFx0XHRcdGlmIChkZWNvbXBvc2VkW2tdID09IGNwKSB7XHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBkdXBsaWNhdGUgbm9uLXNwYWNpbmcgbWFya3M6ICR7cXVvdGVkX2NwKGNwKX1gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyBwYXJzZSB0byBlbmQgc28gd2UgaGF2ZSBmdWxsIG5zbSBjb3VudFxyXG5cdFx0XHRcdC8vIGIuIEZvcmJpZCBzZXF1ZW5jZXMgb2YgbW9yZSB0aGFuIDQgbm9uc3BhY2luZyBtYXJrcyAoZ2M9TW4gb3IgZ2M9TWUpLlxyXG5cdFx0XHRcdGlmIChqIC0gaSA+IE5TTV9NQVgpIHtcclxuXHRcdFx0XHRcdC8vIG5vdGU6IHRoaXMgc2xpY2Ugc3RhcnRzIHdpdGggYSBiYXNlIGNoYXIgb3Igc3BhY2luZy1tYXJrIGNtXHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYGV4Y2Vzc2l2ZSBub24tc3BhY2luZyBtYXJrczogJHtiaWRpX3FxKHNhZmVfc3RyX2Zyb21fY3BzKGRlY29tcG9zZWQuc2xpY2UoaS0xLCBqKSkpfSAoJHtqLWl9LyR7TlNNX01BWH0pYCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGkgPSBqO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdC8vICoqKiB0aGlzIGNvZGUgY3VycmVudGx5IGlzbid0IG5lZWRlZCAqKipcclxuXHQvKlxyXG5cdGxldCBjbV93aGl0ZWxpc3QgPSBNIGluc3RhbmNlb2YgTWFwO1xyXG5cdGZvciAobGV0IGkgPSAwLCBlID0gY3BzLmxlbmd0aDsgaSA8IGU7ICkge1xyXG5cdFx0bGV0IGNwID0gY3BzW2krK107XHJcblx0XHRsZXQgc2VxcyA9IGNtX3doaXRlbGlzdCAmJiBNLmdldChjcCk7XHJcblx0XHRpZiAoc2VxcykgeyBcclxuXHRcdFx0Ly8gbGlzdCBvZiBjb2RlcG9pbnRzIHRoYXQgY2FuIGZvbGxvd1xyXG5cdFx0XHQvLyBpZiB0aGlzIGV4aXN0cywgdGhpcyB3aWxsIGFsd2F5cyBiZSAxK1xyXG5cdFx0XHRsZXQgaiA9IGk7XHJcblx0XHRcdHdoaWxlIChqIDwgZSAmJiBDTS5oYXMoY3BzW2pdKSkgaisrO1xyXG5cdFx0XHRsZXQgY21zID0gY3BzLnNsaWNlKGksIGopO1xyXG5cdFx0XHRsZXQgbWF0Y2ggPSBzZXFzLmZpbmQoc2VxID0+ICFjb21wYXJlX2FycmF5cyhzZXEsIGNtcykpO1xyXG5cdFx0XHRpZiAoIW1hdGNoKSB0aHJvdyBuZXcgRXJyb3IoYGRpc2FsbG93ZWQgY29tYmluaW5nIG1hcmsgc2VxdWVuY2U6IFwiJHtzYWZlX3N0cl9mcm9tX2NwcyhbY3AsIC4uLmNtc10pfVwiYCk7XHJcblx0XHRcdGkgPSBqO1xyXG5cdFx0fSBlbHNlIGlmICghVi5oYXMoY3ApKSB7XHJcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzOS8jbWl4ZWRfc2NyaXB0X2NvbmZ1c2FibGVzXHJcblx0XHRcdGxldCBxdW90ZWQgPSBxdW90ZWRfY3AoY3ApO1xyXG5cdFx0XHRmb3IgKGxldCBjcCBvZiBjcHMpIHtcclxuXHRcdFx0XHRsZXQgdSA9IFVOSVFVRS5nZXQoY3ApO1xyXG5cdFx0XHRcdGlmICh1ICYmIHUgIT09IGcpIHtcclxuXHRcdFx0XHRcdC8vIGlmIGJvdGggc2NyaXB0cyBhcmUgcmVzdHJpY3RlZCB0aGlzIGVycm9yIGlzIGNvbmZ1c2luZ1xyXG5cdFx0XHRcdFx0Ly8gYmVjYXVzZSB3ZSBkb24ndCBkaWZmZXJlbnRpYXRlIFJlc3RyaWN0ZWRBIGZyb20gUmVzdHJpY3RlZEIgXHJcblx0XHRcdFx0XHRpZiAoIXUuUikgcXVvdGVkID0gYCR7cXVvdGVkfSBpcyAke3UuTn1gO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihgZGlzYWxsb3dlZCAke2cuTn0gY2hhcmFjdGVyOiAke3F1b3RlZH1gKTtcclxuXHRcdFx0Ly90aHJvdyBuZXcgRXJyb3IoYGRpc2FsbG93ZWQgY2hhcmFjdGVyOiAke3F1b3RlZH0gKGV4cGVjdGVkICR7Zy5OfSlgKTtcclxuXHRcdFx0Ly90aHJvdyBuZXcgRXJyb3IoYCR7Zy5OfSBkb2VzIG5vdCBhbGxvdzogJHtxdW90ZWR9YCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmICghY21fd2hpdGVsaXN0KSB7XHJcblx0XHRsZXQgZGVjb21wb3NlZCA9IG5mZChjcHMpO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDEsIGUgPSBkZWNvbXBvc2VkLmxlbmd0aDsgaSA8IGU7IGkrKykgeyAvLyB3ZSBrbm93IGl0IGNhbid0IGJlIGNtIGxlYWRpbmdcclxuXHRcdFx0aWYgKENNLmhhcyhkZWNvbXBvc2VkW2ldKSkge1xyXG5cdFx0XHRcdGxldCBqID0gaSArIDE7XHJcblx0XHRcdFx0d2hpbGUgKGogPCBlICYmIENNLmhhcyhkZWNvbXBvc2VkW2pdKSkgaisrO1xyXG5cdFx0XHRcdGlmIChqIC0gaSA+IE0pIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgdG9vIG1hbnkgY29tYmluaW5nIG1hcmtzOiBcIiR7c3RyX2Zyb21fY3BzKGRlY29tcG9zZWQuc2xpY2UoaS0xLCBqKSl9XCIgKCR7ai1pfS8ke019KWApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpID0gajtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHQqL1xyXG59XHJcblxyXG4vLyBnaXZlbiBhIGxpc3Qgb2YgY29kZXBvaW50c1xyXG4vLyByZXR1cm5zIGEgbGlzdCBvZiBsaXN0cywgd2hlcmUgZW1vamkgYXJlIGEgZnVsbHktcXVhbGlmaWVkIChhcyBBcnJheSBzdWJjbGFzcylcclxuLy8gZWcuIGV4cGxvZGVfY3AoXCJhYmPwn5KpZFwiKSA9PiBbWzYxLCA2MiwgNjNdLCBFbW9qaVsxRjRBOSwgRkUwRl0sIFs2NF1dXHJcbi8vIDIwMjMwODE4OiByZW5hbWUgZm9yICdwcm9jZXNzJyBuYW1lIGNvbGxpc2lvbiBoL3QgSmF2YXJvbWVcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FkcmFmZnkvZW5zLW5vcm1hbGl6ZS5qcy9pc3N1ZXMvMjNcclxuZnVuY3Rpb24gdG9rZW5zX2Zyb21fc3RyKGlucHV0LCBuZiwgZWYpIHtcclxuXHRsZXQgcmV0ID0gW107XHJcblx0bGV0IGNoYXJzID0gW107XHJcblx0aW5wdXQgPSBpbnB1dC5zbGljZSgpLnJldmVyc2UoKTsgLy8gZmxpcCBzbyB3ZSBjYW4gcG9wXHJcblx0d2hpbGUgKGlucHV0Lmxlbmd0aCkge1xyXG5cdFx0bGV0IGVtb2ppID0gY29uc3VtZV9lbW9qaV9yZXZlcnNlZChpbnB1dCk7XHJcblx0XHRpZiAoZW1vamkpIHtcclxuXHRcdFx0aWYgKGNoYXJzLmxlbmd0aCkge1xyXG5cdFx0XHRcdHJldC5wdXNoKG5mKGNoYXJzKSk7XHJcblx0XHRcdFx0Y2hhcnMgPSBbXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXQucHVzaChlZihlbW9qaSkpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bGV0IGNwID0gaW5wdXQucG9wKCk7XHJcblx0XHRcdGlmIChWQUxJRC5oYXMoY3ApKSB7XHJcblx0XHRcdFx0Y2hhcnMucHVzaChjcCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bGV0IGNwcyA9IE1BUFBFRC5nZXQoY3ApO1xyXG5cdFx0XHRcdGlmIChjcHMpIHtcclxuXHRcdFx0XHRcdGNoYXJzLnB1c2goLi4uY3BzKTsgLy8gbGVzcyB0aGFuIDEwIGVsZW1lbnRzXHJcblx0XHRcdFx0fSBlbHNlIGlmICghSUdOT1JFRC5oYXMoY3ApKSB7XHJcblx0XHRcdFx0XHQvLyAyMDIzMDkxMjogdW5pY29kZSAxNS4xIGNoYW5nZWQgdGhlIG9yZGVyIG9mIHByb2Nlc3Npbmcgc3VjaCB0aGF0XHJcblx0XHRcdFx0XHQvLyBkaXNhbGxvd2VkIHBhcnRzIGFyZSBvbmx5IHJlamVjdGVkIGFmdGVyIE5GQ1xyXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly91bmljb2RlLm9yZy9yZXBvcnRzL3RyNDYvI1ZhbGlkaXR5X0NyaXRlcmlhXHJcblx0XHRcdFx0XHQvLyB0aGlzIGRvZXNuJ3QgaW1wYWN0IG5vcm1hbGl6YXRpb24gYXMgb2YgdG9kYXlcclxuXHRcdFx0XHRcdC8vIHRlY2huaWNhbGx5LCB0aGlzIGVycm9yIGNhbiBiZSByZW1vdmVkIGFzIHRoZSBncm91cCBsb2dpYyB3aWxsIGFwcGx5IHNpbWlsYXIgbG9naWNcclxuXHRcdFx0XHRcdC8vIGhvd2V2ZXIgdGhlIGVycm9yIHR5cGUgbWlnaHQgYmUgbGVzcyBjbGVhclxyXG5cdFx0XHRcdFx0dGhyb3cgZXJyb3JfZGlzYWxsb3dlZChjcCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmIChjaGFycy5sZW5ndGgpIHtcclxuXHRcdHJldC5wdXNoKG5mKGNoYXJzKSk7XHJcblx0fVxyXG5cdHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbHRlcl9mZTBmKGNwcykge1xyXG5cdHJldHVybiBjcHMuZmlsdGVyKGNwID0+IGNwICE9IEZFMEYpO1xyXG59XHJcblxyXG4vLyBnaXZlbiBhcnJheSBvZiBjb2RlcG9pbnRzXHJcbi8vIHJldHVybnMgdGhlIGxvbmdlc3QgdmFsaWQgZW1vamkgc2VxdWVuY2UgKG9yIHVuZGVmaW5lZCBpZiBubyBtYXRjaClcclxuLy8gKk1VVEFURVMqIHRoZSBzdXBwbGllZCBhcnJheVxyXG4vLyBkaXNhbGxvd3MgaW50ZXJsZWF2ZWQgaWdub3JlZCBjaGFyYWN0ZXJzXHJcbi8vIGZpbGxzIChvcHRpb25hbCkgZWF0ZW4gYXJyYXkgd2l0aCBtYXRjaGVkIGNvZGVwb2ludHNcclxuZnVuY3Rpb24gY29uc3VtZV9lbW9qaV9yZXZlcnNlZChjcHMsIGVhdGVuKSB7XHJcblx0bGV0IG5vZGUgPSBFTU9KSV9ST09UO1xyXG5cdGxldCBlbW9qaTtcclxuXHRsZXQgcG9zID0gY3BzLmxlbmd0aDtcclxuXHR3aGlsZSAocG9zKSB7XHJcblx0XHRub2RlID0gbm9kZS5nZXQoY3BzWy0tcG9zXSk7XHJcblx0XHRpZiAoIW5vZGUpIGJyZWFrO1xyXG5cdFx0bGV0IHtWfSA9IG5vZGU7XHJcblx0XHRpZiAoVikgeyAvLyB0aGlzIGlzIGEgdmFsaWQgZW1vamkgKHNvIGZhcilcclxuXHRcdFx0ZW1vamkgPSBWO1xyXG5cdFx0XHRpZiAoZWF0ZW4pIGVhdGVuLnB1c2goLi4uY3BzLnNsaWNlKHBvcykucmV2ZXJzZSgpKTsgLy8gKG9wdGlvbmFsKSBjb3B5IGlucHV0LCB1c2VkIGZvciBlbnNfdG9rZW5pemUoKVxyXG5cdFx0XHRjcHMubGVuZ3RoID0gcG9zOyAvLyB0cnVuY2F0ZVxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gZW1vamk7XHJcbn1cclxuXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4vLyB0b2tlbml6ZXIgXHJcblxyXG5jb25zdCBUWV9WQUxJRCA9ICd2YWxpZCc7XHJcbmNvbnN0IFRZX01BUFBFRCA9ICdtYXBwZWQnO1xyXG5jb25zdCBUWV9JR05PUkVEID0gJ2lnbm9yZWQnO1xyXG5jb25zdCBUWV9ESVNBTExPV0VEID0gJ2Rpc2FsbG93ZWQnO1xyXG5jb25zdCBUWV9FTU9KSSA9ICdlbW9qaSc7XHJcbmNvbnN0IFRZX05GQyA9ICduZmMnO1xyXG5jb25zdCBUWV9TVE9QID0gJ3N0b3AnO1xyXG5cclxuZnVuY3Rpb24gZW5zX3Rva2VuaXplKG5hbWUsIHtcclxuXHRuZiA9IHRydWUsIC8vIGNvbGxhcHNlIHVubm9ybWFsaXplZCBydW5zIGludG8gYSBzaW5nbGUgdG9rZW5cclxufSA9IHt9KSB7XHJcblx0aW5pdCgpO1xyXG5cdGxldCBpbnB1dCA9IGV4cGxvZGVfY3AobmFtZSkucmV2ZXJzZSgpO1xyXG5cdGxldCBlYXRlbiA9IFtdO1xyXG5cdGxldCB0b2tlbnMgPSBbXTtcclxuXHR3aGlsZSAoaW5wdXQubGVuZ3RoKSB7XHJcblx0XHRsZXQgZW1vamkgPSBjb25zdW1lX2Vtb2ppX3JldmVyc2VkKGlucHV0LCBlYXRlbik7XHJcblx0XHRpZiAoZW1vamkpIHtcclxuXHRcdFx0dG9rZW5zLnB1c2goe1xyXG5cdFx0XHRcdHR5cGU6IFRZX0VNT0pJLFxyXG5cdFx0XHRcdGVtb2ppOiBlbW9qaS5zbGljZSgpLCAvLyBjb3B5IGVtb2ppXHJcblx0XHRcdFx0aW5wdXQ6IGVhdGVuLFxyXG5cdFx0XHRcdGNwczogZmlsdGVyX2ZlMGYoZW1vamkpXHJcblx0XHRcdH0pO1xyXG5cdFx0XHRlYXRlbiA9IFtdOyAvLyByZXNldCBidWZmZXJcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGxldCBjcCA9IGlucHV0LnBvcCgpO1xyXG5cdFx0XHRpZiAoY3AgPT0gU1RPUCkge1xyXG5cdFx0XHRcdHRva2Vucy5wdXNoKHt0eXBlOiBUWV9TVE9QLCBjcH0pO1xyXG5cdFx0XHR9IGVsc2UgaWYgKFZBTElELmhhcyhjcCkpIHtcclxuXHRcdFx0XHR0b2tlbnMucHVzaCh7dHlwZTogVFlfVkFMSUQsIGNwczogW2NwXX0pO1xyXG5cdFx0XHR9IGVsc2UgaWYgKElHTk9SRUQuaGFzKGNwKSkge1xyXG5cdFx0XHRcdHRva2Vucy5wdXNoKHt0eXBlOiBUWV9JR05PUkVELCBjcH0pO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGxldCBjcHMgPSBNQVBQRUQuZ2V0KGNwKTtcclxuXHRcdFx0XHRpZiAoY3BzKSB7XHJcblx0XHRcdFx0XHR0b2tlbnMucHVzaCh7dHlwZTogVFlfTUFQUEVELCBjcCwgY3BzOiBjcHMuc2xpY2UoKX0pO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0b2tlbnMucHVzaCh7dHlwZTogVFlfRElTQUxMT1dFRCwgY3B9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKG5mKSB7XHJcblx0XHRmb3IgKGxldCBpID0gMCwgc3RhcnQgPSAtMTsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRsZXQgdG9rZW4gPSB0b2tlbnNbaV07XHJcblx0XHRcdGlmIChpc192YWxpZF9vcl9tYXBwZWQodG9rZW4udHlwZSkpIHtcclxuXHRcdFx0XHRpZiAocmVxdWlyZXNfY2hlY2sodG9rZW4uY3BzKSkgeyAvLyBub3JtYWxpemF0aW9uIG1pZ2h0IGJlIG5lZWRlZFxyXG5cdFx0XHRcdFx0bGV0IGVuZCA9IGkgKyAxO1xyXG5cdFx0XHRcdFx0Zm9yIChsZXQgcG9zID0gZW5kOyBwb3MgPCB0b2tlbnMubGVuZ3RoOyBwb3MrKykgeyAvLyBmaW5kIGFkamFjZW50IHRleHRcclxuXHRcdFx0XHRcdFx0bGV0IHt0eXBlLCBjcHN9ID0gdG9rZW5zW3Bvc107XHJcblx0XHRcdFx0XHRcdGlmIChpc192YWxpZF9vcl9tYXBwZWQodHlwZSkpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIXJlcXVpcmVzX2NoZWNrKGNwcykpIGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdGVuZCA9IHBvcyArIDE7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZSAhPT0gVFlfSUdOT1JFRCkgeyAvLyB8fCB0eXBlICE9PSBUWV9ESVNBTExPV0VEKSB7IFxyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoc3RhcnQgPCAwKSBzdGFydCA9IGk7XHJcblx0XHRcdFx0XHRsZXQgc2xpY2UgPSB0b2tlbnMuc2xpY2Uoc3RhcnQsIGVuZCk7XHJcblx0XHRcdFx0XHRsZXQgY3BzMCA9IHNsaWNlLmZsYXRNYXAoeCA9PiBpc192YWxpZF9vcl9tYXBwZWQoeC50eXBlKSA/IHguY3BzIDogW10pOyAvLyBzdHJpcCBqdW5rIHRva2Vuc1xyXG5cdFx0XHRcdFx0bGV0IGNwcyA9IG5mYyhjcHMwKTtcclxuXHRcdFx0XHRcdGlmIChjb21wYXJlX2FycmF5cyhjcHMsIGNwczApKSB7IC8vIGJ1bmRsZSBpbnRvIGFuIG5mYyB0b2tlblxyXG5cdFx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKHN0YXJ0LCBlbmQgLSBzdGFydCwge1xyXG5cdFx0XHRcdFx0XHRcdHR5cGU6IFRZX05GQywgXHJcblx0XHRcdFx0XHRcdFx0aW5wdXQ6IGNwczAsIC8vIHRoZXJlIGFyZSAzIHN0YXRlczogdG9rZW5zMCA9PShwcm9jZXNzKT0+IGlucHV0ID09KG5mYyk9PiB0b2tlbnMvY3BzXHJcblx0XHRcdFx0XHRcdFx0Y3BzLCBcclxuXHRcdFx0XHRcdFx0XHR0b2tlbnMwOiBjb2xsYXBzZV92YWxpZF90b2tlbnMoc2xpY2UpLFxyXG5cdFx0XHRcdFx0XHRcdHRva2VuczogZW5zX3Rva2VuaXplKHN0cl9mcm9tX2NwcyhjcHMpLCB7bmY6IGZhbHNlfSlcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdGkgPSBzdGFydDtcclxuXHRcdFx0XHRcdH0gZWxzZSB7IFxyXG5cdFx0XHRcdFx0XHRpID0gZW5kIC0gMTsgLy8gc2tpcCB0byBlbmQgb2Ygc2xpY2VcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHN0YXJ0ID0gLTE7IC8vIHJlc2V0XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHN0YXJ0ID0gaTsgLy8gcmVtZW1iZXIgbGFzdFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIGlmICh0b2tlbi50eXBlICE9PSBUWV9JR05PUkVEKSB7IC8vIDIwMjIxMDI0OiBpcyB0aGlzIGNvcnJlY3Q/XHJcblx0XHRcdFx0c3RhcnQgPSAtMTsgLy8gcmVzZXRcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gY29sbGFwc2VfdmFsaWRfdG9rZW5zKHRva2Vucyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzX3ZhbGlkX29yX21hcHBlZCh0eXBlKSB7XHJcblx0cmV0dXJuIHR5cGUgPT0gVFlfVkFMSUQgfHwgdHlwZSA9PSBUWV9NQVBQRUQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlcXVpcmVzX2NoZWNrKGNwcykge1xyXG5cdHJldHVybiBjcHMuc29tZShjcCA9PiBORkNfQ0hFQ0suaGFzKGNwKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbGxhcHNlX3ZhbGlkX3Rva2Vucyh0b2tlbnMpIHtcclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xyXG5cdFx0aWYgKHRva2Vuc1tpXS50eXBlID09IFRZX1ZBTElEKSB7XHJcblx0XHRcdGxldCBqID0gaSArIDE7XHJcblx0XHRcdHdoaWxlIChqIDwgdG9rZW5zLmxlbmd0aCAmJiB0b2tlbnNbal0udHlwZSA9PSBUWV9WQUxJRCkgaisrO1xyXG5cdFx0XHR0b2tlbnMuc3BsaWNlKGksIGogLSBpLCB7dHlwZTogVFlfVkFMSUQsIGNwczogdG9rZW5zLnNsaWNlKGksIGopLmZsYXRNYXAoeCA9PiB4LmNwcyl9KTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIHRva2VucztcclxufVxuXG5leHBvcnQgeyBlbnNfYmVhdXRpZnksIGVuc19lbW9qaSwgZW5zX25vcm1hbGl6ZSwgZW5zX25vcm1hbGl6ZV9mcmFnbWVudCwgZW5zX3NwbGl0LCBlbnNfdG9rZW5pemUsIGlzX2NvbWJpbmluZ19tYXJrLCBuZmMsIG5mZCwgc2FmZV9zdHJfZnJvbV9jcHMsIHNob3VsZF9lc2NhcGUgfTtcbiJdLCJuYW1lcyI6WyJDT01QUkVTU0VEJDEiLCJGRU5DRUQiLCJNYXAiLCJOU01fTUFYIiwiZGVjb2RlX2FyaXRobWV0aWMiLCJieXRlcyIsInBvcyIsInUxNiIsInN5bWJvbF9jb3VudCIsInRvdGFsIiwiYWNjIiwiaSIsInB1c2giLCJza2lwIiwicG9zX3BheWxvYWQiLCJyZWFkX3dpZHRoIiwicmVhZF9idWZmZXIiLCJyZWFkX2JpdCIsIk4iLCJGVUxMIiwiSEFMRiIsIlFSVFIiLCJNQVNLIiwicmVnaXN0ZXIiLCJzeW1ib2xzIiwibG93IiwicmFuZ2UiLCJ2YWx1ZSIsIk1hdGgiLCJmbG9vciIsInN0YXJ0IiwiZW5kIiwibWlkIiwiYSIsImIiLCJvZmZzZXQiLCJtYXAiLCJ4IiwicmVhZF9wYXlsb2FkIiwidiIsInJlYWRfY29tcHJlc3NlZF9wYXlsb2FkIiwicyIsInVuc2FmZV9hdG9iIiwibG9va3VwIiwiZm9yRWFjaCIsImMiLCJjaGFyQ29kZUF0IiwibiIsImxlbmd0aCIsInJldCIsIlVpbnQ4QXJyYXkiLCJ3aWR0aCIsImNhcnJ5Iiwic2lnbmVkIiwicmVhZF9kZWx0YXMiLCJuZXh0IiwiQXJyYXkiLCJyZWFkX3NvcnRlZCIsInByZXYiLCJyZWFkX3NvcnRlZF9hcnJheXMiLCJyZWFkX2FycmF5X3doaWxlIiwicmVhZF9tYXBwZWQiLCJ3IiwicmVhZF9saW5lYXJfdGFibGUiLCJyZWFkX3JlcGxhY2VtZW50X3RhYmxlIiwiZmxhdCIsInJlYWRfdHJhbnNwb3NlZCIsIm0iLCJmaWxsIiwiaiIsImR4IiwiZHkiLCJ2TiIsImZsYXRNYXAiLCJ5cyIsIl8iLCJqX2R5IiwieSIsInNsaWNlIiwicmVhZF90cmllIiwic29ydGVkIiwiZXhwYW5kIiwiZGVjb2RlIiwiUSIsIlMiLCJCIiwiY3BzIiwic2F2ZWQiLCJiciIsImNwIiwiaGV4X2NwIiwidG9TdHJpbmciLCJ0b1VwcGVyQ2FzZSIsInBhZFN0YXJ0IiwicXVvdGVfY3AiLCJleHBsb2RlX2NwIiwibGVuIiwiY29kZVBvaW50QXQiLCJzdHJfZnJvbV9jcHMiLCJjaHVuayIsIlN0cmluZyIsImZyb21Db2RlUG9pbnQiLCJidWYiLCJqb2luIiwiY29tcGFyZV9hcnJheXMiLCJDT01QUkVTU0VEIiwiUzAiLCJMMCIsIlYwIiwiVDAiLCJMX0NPVU5UIiwiVl9DT1VOVCIsIlRfQ09VTlQiLCJOX0NPVU5UIiwiU19DT1VOVCIsIlMxIiwiTDEiLCJWMSIsIlQxIiwidW5wYWNrX2NjIiwicGFja2VkIiwidW5wYWNrX2NwIiwiU0hJRlRFRF9SQU5LIiwiRVhDTFVTSU9OUyIsIkRFQ09NUCIsIlJFQ09NUCIsImluaXQkMSIsInIiLCJTZXQiLCJoYXMiLCJidWNrZXQiLCJnZXQiLCJzZXQiLCJyZXZlcnNlIiwiaXNfaGFuZ3VsIiwiY29tcG9zZV9wYWlyIiwicmVjb21wIiwiZGVjb21wb3NlZCIsImNoZWNrX29yZGVyIiwiYWRkIiwiY2MiLCJzX2luZGV4IiwibF9pbmRleCIsInZfaW5kZXgiLCJ0X2luZGV4IiwibWFwcGVkIiwicG9wIiwicHJldl9jYyIsInRtcCIsImNvbXBvc2VkX2Zyb21fZGVjb21wb3NlZCIsInN0YWNrIiwicHJldl9jcCIsImNvbXBvc2VkIiwibmZkIiwibmZjIiwiSFlQSEVOIiwiU1RPUCIsIlNUT1BfQ0giLCJGRTBGIiwiVU5JUVVFX1BIIiwiQXJyYXlfZnJvbSIsImZyb20iLCJncm91cF9oYXNfY3AiLCJnIiwiUCIsIkVtb2ppIiwiaXNfZW1vamkiLCJNQVBQRUQiLCJJR05PUkVEIiwiQ00iLCJOU00iLCJFU0NBUEUiLCJORkNfQ0hFQ0siLCJHUk9VUFMiLCJXSE9MRV9WQUxJRCIsIldIT0xFX01BUCIsIlZBTElEIiwiRU1PSklfTElTVCIsIkVNT0pJX1JPT1QiLCJpbml0IiwicmVhZF9zb3J0ZWRfYXJyYXkiLCJyZWFkX3NvcnRlZF9zZXQiLCJzZXRfYWRkX21hbnkiLCJjaHVua3MiLCJ1bnJlc3RyaWN0ZWQiLCJyZWFkX2NodW5rZWQiLCJSIiwiTSIsIndob2xlcyIsImNvbmNhdCIsInNvcnQiLCJkIiwiViIsInZhbHVlcyIsInJlY3MiLCJncyIsImZpbHRlciIsInJlYyIsImZpbmQiLCJHIiwic29tZSIsInVuaW9uIiwiY29tcGxlbWVudCIsIm11bHRpIiwiYWRkX3RvX3VuaW9uIiwibm9kZSIsImNoaWxkIiwicXVvdGVkX2NwIiwic2hvdWxkX2VzY2FwZSIsImJpZGlfcXEiLCJzYWZlX3N0cl9mcm9tX2NwcyIsImNoZWNrX2xhYmVsX2V4dGVuc2lvbiIsIkVycm9yIiwiY2hlY2tfbGVhZGluZ191bmRlcnNjb3JlIiwiVU5ERVJTQ09SRSIsImxhc3RJbmRleE9mIiwiY2hlY2tfZmVuY2VkIiwiZXJyb3JfcGxhY2VtZW50IiwibGFzdCIsIm1hdGNoIiwibWF4IiwiSW5maW5pdHkiLCJxdW90ZXIiLCJpc19jb21iaW5pbmdfbWFyayIsImVuc19lbW9qaSIsImVuc19ub3JtYWxpemVfZnJhZ21lbnQiLCJmcmFnIiwiZGVjb21wb3NlIiwibmYiLCJzcGxpdCIsImxhYmVsIiwidG9rZW5zX2Zyb21fc3RyIiwiZmlsdGVyX2ZlMGYiLCJlbnNfbm9ybWFsaXplIiwibmFtZSIsImZsYXR0ZW4iLCJlbnNfYmVhdXRpZnkiLCJsYWJlbHMiLCJ0eXBlIiwib3V0cHV0IiwiZXJyb3IiLCJhcnJheV9yZXBsYWNlIiwiaW5kZXhPZiIsImVuc19zcGxpdCIsInByZXNlcnZlX2Vtb2ppIiwiZWYiLCJpbnB1dCIsImluZm8iLCJ0b2tlbnMiLCJ0b2tlbl9jb3VudCIsIm5vcm0iLCJlbW9qaSIsImV2ZXJ5IiwiY2hhcnMiLCJ1bmlxdWUiLCJkZXRlcm1pbmVfZ3JvdXAiLCJjaGVja19ncm91cCIsImNoZWNrX3dob2xlIiwiZXJyIiwiZ3JvdXAiLCJtYWtlciIsInNoYXJlZCIsIndob2xlIiwiZ3JvdXBzIiwiZXJyb3JfZGlzYWxsb3dlZCIsImVycm9yX2dyb3VwX21lbWJlciIsIm1zZyIsIm1lc3NhZ2UiLCJxdW90ZWQiLCJnZyIsIndoZXJlIiwiZSIsImsiLCJjb25zdW1lX2Vtb2ppX3JldmVyc2VkIiwiZWF0ZW4iLCJUWV9WQUxJRCIsIlRZX01BUFBFRCIsIlRZX0lHTk9SRUQiLCJUWV9ESVNBTExPV0VEIiwiVFlfRU1PSkkiLCJUWV9ORkMiLCJUWV9TVE9QIiwiZW5zX3Rva2VuaXplIiwidG9rZW4iLCJpc192YWxpZF9vcl9tYXBwZWQiLCJyZXF1aXJlc19jaGVjayIsImNwczAiLCJzcGxpY2UiLCJ0b2tlbnMwIiwiY29sbGFwc2VfdmFsaWRfdG9rZW5zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@adraffy/ens-normalize/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/curves/esm/_shortw_utils.js":
/*!**********************************************************!*\
  !*** ../node_modules/@noble/curves/esm/_shortw_utils.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCurve: function() { return /* binding */ createCurve; },\n/* harmony export */   getHash: function() { return /* binding */ getHash; }\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \n\n\n// connects noble-curves to noble-hashes\nfunction getHash(hash) {\n    return {\n        hash,\n        hmac: function(key) {\n            for(var _len = arguments.length, msgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                msgs[_key - 1] = arguments[_key];\n            }\n            return (0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__.hmac)(hash, key, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(...msgs));\n        },\n        randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes\n    };\n}\nfunction createCurve(curveDef, defHash) {\n    const create = (hash)=>(0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__.weierstrass)({\n            ...curveDef,\n            ...getHash(hash)\n        });\n    return Object.freeze({\n        ...create(defHash),\n        create\n    });\n} //# sourceMappingURL=_shortw_utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vX3Nob3J0d191dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLG9FQUFvRSxHQUMxQjtBQUNxQjtBQUNQO0FBQ3hELHdDQUF3QztBQUNqQyxTQUFTSSxRQUFRQyxJQUFJO0lBQ3hCLE9BQU87UUFDSEE7UUFDQUwsTUFBTSxTQUFDTTs2Q0FBUUM7Z0JBQUFBOzttQkFBU1Asd0RBQUlBLENBQUNLLE1BQU1DLEtBQUtMLGdFQUFXQSxJQUFJTTs7UUFDdkRMLFdBQVdBLDhEQUFBQTtJQUNmO0FBQ0o7QUFDTyxTQUFTTSxZQUFZQyxRQUFRLEVBQUVDLE9BQU87SUFDekMsTUFBTUMsU0FBUyxDQUFDTixPQUFTRixxRUFBV0EsQ0FBQztZQUFFLEdBQUdNLFFBQVE7WUFBRSxHQUFHTCxRQUFRQyxLQUFLO1FBQUM7SUFDckUsT0FBT08sT0FBT0MsTUFBTSxDQUFDO1FBQUUsR0FBR0YsT0FBT0QsUUFBUTtRQUFFQztJQUFPO0FBQ3RELEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vX3Nob3J0d191dGlscy5qcz84ZTZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBub2JsZS1jdXJ2ZXMgLSBNSVQgTGljZW5zZSAoYykgMjAyMiBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cbmltcG9ydCB7IGhtYWMgfSBmcm9tICdAbm9ibGUvaGFzaGVzL2htYWMnO1xuaW1wb3J0IHsgY29uY2F0Qnl0ZXMsIHJhbmRvbUJ5dGVzIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy91dGlscyc7XG5pbXBvcnQgeyB3ZWllcnN0cmFzcyB9IGZyb20gJy4vYWJzdHJhY3Qvd2VpZXJzdHJhc3MuanMnO1xuLy8gY29ubmVjdHMgbm9ibGUtY3VydmVzIHRvIG5vYmxlLWhhc2hlc1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhhc2goaGFzaCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGhhc2gsXG4gICAgICAgIGhtYWM6IChrZXksIC4uLm1zZ3MpID0+IGhtYWMoaGFzaCwga2V5LCBjb25jYXRCeXRlcyguLi5tc2dzKSksXG4gICAgICAgIHJhbmRvbUJ5dGVzLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ3VydmUoY3VydmVEZWYsIGRlZkhhc2gpIHtcbiAgICBjb25zdCBjcmVhdGUgPSAoaGFzaCkgPT4gd2VpZXJzdHJhc3MoeyAuLi5jdXJ2ZURlZiwgLi4uZ2V0SGFzaChoYXNoKSB9KTtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7IC4uLmNyZWF0ZShkZWZIYXNoKSwgY3JlYXRlIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3Nob3J0d191dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiaG1hYyIsImNvbmNhdEJ5dGVzIiwicmFuZG9tQnl0ZXMiLCJ3ZWllcnN0cmFzcyIsImdldEhhc2giLCJoYXNoIiwia2V5IiwibXNncyIsImNyZWF0ZUN1cnZlIiwiY3VydmVEZWYiLCJkZWZIYXNoIiwiY3JlYXRlIiwiT2JqZWN0IiwiZnJlZXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/curves/esm/_shortw_utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/curve.js":
/*!***********************************************************!*\
  !*** ../node_modules/@noble/curves/esm/abstract/curve.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateBasic: function() { return /* binding */ validateBasic; },\n/* harmony export */   wNAF: function() { return /* binding */ wNAF; }\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modular.js */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Abelian group utilities\n\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nfunction wNAF(c, bits) {\n    const constTimeNegate = (condition, item)=>{\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W)=>{\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return {\n            windows,\n            windowSize\n        };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder (elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while(n > _0n){\n                if (n & _1n) p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */ precomputeWindow (elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for(let window = 0; window < windows; window++){\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for(let i = 1; i < windowSize; i++){\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */ wNAF (W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for(let window = 0; window < windows; window++){\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                } else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return {\n                p,\n                f\n            };\n        },\n        wNAFCached (P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        }\n    };\n}\nfunction validateBasic(curve) {\n    (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.validateField)(curve.Fp);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject)(curve, {\n        n: \"bigint\",\n        h: \"bigint\",\n        Gx: \"field\",\n        Gy: \"field\"\n    }, {\n        nBitLength: \"isSafeInteger\",\n        nByteLength: \"isSafeInteger\"\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        ...{\n            p: curve.Fp.ORDER\n        }\n    });\n} //# sourceMappingURL=curve.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/curve.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/hash-to-curve.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@noble/curves/esm/abstract/hash-to-curve.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHasher: function() { return /* binding */ createHasher; },\n/* harmony export */   expand_message_xmd: function() { return /* binding */ expand_message_xmd; },\n/* harmony export */   expand_message_xof: function() { return /* binding */ expand_message_xof; },\n/* harmony export */   hash_to_field: function() { return /* binding */ hash_to_field; },\n/* harmony export */   isogenyMap: function() { return /* binding */ isogenyMap; }\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/utils.js\");\n\n\nfunction validateDST(dst) {\n    if (dst instanceof Uint8Array) return dst;\n    if (typeof dst === \"string\") return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(dst);\n    throw new Error(\"DST must be Uint8Array or string\");\n}\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << 8 * length) {\n        throw new Error(\"bad I2OSP call: value=\".concat(value, \" length=\").concat(length));\n    }\n    const res = Array.from({\n        length\n    }).fill(0);\n    for(let i = length - 1; i >= 0; i--){\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for(let i = 0; i < a.length; i++){\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction isBytes(item) {\n    if (!(item instanceof Uint8Array)) throw new Error(\"Uint8Array expected\");\n}\nfunction isNum(item) {\n    if (!Number.isSafeInteger(item)) throw new Error(\"number expected\");\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n    isBytes(msg);\n    isBytes(DST);\n    isNum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255) DST = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(\"H2C-OVERSIZE-DST-\"), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255) throw new Error(\"Invalid xmd length\");\n    const DST_prime = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for(let i = 1; i <= ell; i++){\n        const args = [\n            strxor(b_0, b[i - 1]),\n            i2osp(i + 1, 1),\n            DST_prime\n        ];\n        b[i] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n    isBytes(msg);\n    isBytes(DST);\n    isNum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil(2 * k / 8);\n        DST = H.create({\n            dkLen\n        }).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(\"H2C-OVERSIZE-DST-\")).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255) throw new Error(\"expand_message_xof: invalid lenInBytes\");\n    return H.create({\n        dkLen: lenInBytes\n    }).update(msg).update(i2osp(lenInBytes, 2))// 2. DST_prime = DST || I2OSP(len(DST), 1)\n    .update(DST).update(i2osp(DST.length, 1)).digest();\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */ function hash_to_field(msg, count, options) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(options, {\n        DST: \"stringOrUint8Array\",\n        p: \"bigint\",\n        m: \"isSafeInteger\",\n        k: \"isSafeInteger\",\n        hash: \"hash\"\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    isBytes(msg);\n    isNum(count);\n    const DST = validateDST(_DST);\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === \"xmd\") {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    } else if (expand === \"xof\") {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    } else if (expand === \"_internal_pass\") {\n        // for internal tests only\n        prb = msg;\n    } else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for(let i = 0; i < count; i++){\n        const e = new Array(m);\n        for(let j = 0; j < m; j++){\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i)=>Array.from(i).reverse());\n    return (x, y)=>{\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val)=>val.reduce((acc, i)=>field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return {\n            x,\n            y\n        };\n    };\n}\nfunction createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== \"function\") throw new Error(\"mapToCurve() must be defined\");\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve (msg, options) {\n            const u = hash_to_field(msg, 2, {\n                ...def,\n                DST: def.DST,\n                ...options\n            });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve (msg, options) {\n            const u = hash_to_field(msg, 1, {\n                ...def,\n                DST: def.encodeDST,\n                ...options\n            });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        }\n    };\n} //# sourceMappingURL=hash-to-curve.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/hash-to-curve.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/modular.js":
/*!*************************************************************!*\
  !*** ../node_modules/@noble/curves/esm/abstract/modular.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Field: function() { return /* binding */ Field; },\n/* harmony export */   FpDiv: function() { return /* binding */ FpDiv; },\n/* harmony export */   FpInvertBatch: function() { return /* binding */ FpInvertBatch; },\n/* harmony export */   FpIsSquare: function() { return /* binding */ FpIsSquare; },\n/* harmony export */   FpPow: function() { return /* binding */ FpPow; },\n/* harmony export */   FpSqrt: function() { return /* binding */ FpSqrt; },\n/* harmony export */   FpSqrtEven: function() { return /* binding */ FpSqrtEven; },\n/* harmony export */   FpSqrtOdd: function() { return /* binding */ FpSqrtOdd; },\n/* harmony export */   getFieldBytesLength: function() { return /* binding */ getFieldBytesLength; },\n/* harmony export */   getMinHashLength: function() { return /* binding */ getMinHashLength; },\n/* harmony export */   hashToPrivateScalar: function() { return /* binding */ hashToPrivateScalar; },\n/* harmony export */   invert: function() { return /* binding */ invert; },\n/* harmony export */   isNegativeLE: function() { return /* binding */ isNegativeLE; },\n/* harmony export */   mapHashToField: function() { return /* binding */ mapHashToField; },\n/* harmony export */   mod: function() { return /* binding */ mod; },\n/* harmony export */   nLength: function() { return /* binding */ nLength; },\n/* harmony export */   pow: function() { return /* binding */ pow; },\n/* harmony export */   pow2: function() { return /* binding */ pow2; },\n/* harmony export */   tonelliShanks: function() { return /* binding */ tonelliShanks; },\n/* harmony export */   validateField: function() { return /* binding */ validateField; }\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Utilities for modular arithmetics and finite fields\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */ // TODO: use field version && remove\nfunction pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n) throw new Error(\"Expected power/modulo > 0\");\n    if (modulo === _1n) return _0n;\n    let res = _1n;\n    while(power > _0n){\n        if (power & _1n) res = res * num % modulo;\n        num = num * num % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n    let res = x;\n    while(power-- > _0n){\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nfunction invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(\"invert: expected positive integers, got n=\".concat(number, \" mod=\").concat(modulo));\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while(a !== _0n){\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n) throw new Error(\"invert: does not exist\");\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */ function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for(Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for(Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n)) throw new Error(\"Cannot find square root\");\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error(\"Cannot find square root\");\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while(!Fp.eql(b, Fp.ONE)){\n            if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for(let t2 = Fp.sqr(b); m < r; m++){\n                if (Fp.eql(t2, Fp.ONE)) break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nfunction FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n)) throw new Error(\"Cannot find square root\");\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n)) throw new Error(\"Cannot find square root\");\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n_c = FpSqrt;\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo)=>(mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    \"create\",\n    \"isValid\",\n    \"is0\",\n    \"neg\",\n    \"inv\",\n    \"sqrt\",\n    \"sqr\",\n    \"eql\",\n    \"add\",\n    \"sub\",\n    \"mul\",\n    \"pow\",\n    \"div\",\n    \"addN\",\n    \"subN\",\n    \"mulN\",\n    \"sqrN\"\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: \"bigint\",\n        MASK: \"bigint\",\n        BYTES: \"isSafeInteger\",\n        BITS: \"isSafeInteger\"\n    };\n    const opts = FIELD_FIELDS.reduce((map, val)=>{\n        map[val] = \"function\";\n        return map;\n    }, initial);\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */ function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n) throw new Error(\"Expected power > 0\");\n    if (power === _0n) return f.ONE;\n    if (power === _1n) return num;\n    let p = f.ONE;\n    let d = num;\n    while(power > _0n){\n        if (power & _1n) p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n_c1 = FpPow;\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */ function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i)=>{\n        if (f.is0(num)) return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i)=>{\n        if (f.is0(num)) return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\n_c2 = FpInvertBatch;\nfunction FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === \"bigint\" ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n_c3 = FpDiv;\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x)=>{\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n_c4 = FpIsSquare;\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return {\n        nBitLength: _nBitLength,\n        nByteLength\n    };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */ function Field(ORDER, bitLen) {\n    let isLE = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, redef = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    if (ORDER <= _0n) throw new Error(\"Expected Field ORDER > 0, got \".concat(ORDER));\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048) throw new Error(\"Field lengths over 2048 bytes are not supported\");\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bitMask)(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num)=>mod(num, ORDER),\n        isValid: (num)=>{\n            if (typeof num !== \"bigint\") throw new Error(\"Invalid field element: expected bigint, got \".concat(typeof num));\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num)=>num === _0n,\n        isOdd: (num)=>(num & _1n) === _1n,\n        neg: (num)=>mod(-num, ORDER),\n        eql: (lhs, rhs)=>lhs === rhs,\n        sqr: (num)=>mod(num * num, ORDER),\n        add: (lhs, rhs)=>mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs)=>mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs)=>mod(lhs * rhs, ORDER),\n        pow: (num, power)=>FpPow(f, num, power),\n        div: (lhs, rhs)=>mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num)=>num * num,\n        addN: (lhs, rhs)=>lhs + rhs,\n        subN: (lhs, rhs)=>lhs - rhs,\n        mulN: (lhs, rhs)=>lhs * rhs,\n        inv: (num)=>invert(num, ORDER),\n        sqrt: redef.sqrt || ((n)=>sqrtP(f, n)),\n        invertBatch: (lst)=>FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c)=>c ? b : a,\n        toBytes: (num)=>isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(num, BYTES) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(num, BYTES),\n        fromBytes: (bytes)=>{\n            if (bytes.length !== BYTES) throw new Error(\"Fp.fromBytes: expected \".concat(BYTES, \", got \").concat(bytes.length));\n            return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(bytes) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(bytes);\n        }\n    });\n    return Object.freeze(f);\n}\n_c5 = Field;\nfunction FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n_c6 = FpSqrtOdd;\nfunction FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n_c7 = FpSqrtEven;\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */ function hashToPrivateScalar(hash, groupOrder) {\n    let isLE = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    hash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"privateHash\", hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error(\"hashToPrivateScalar: expected \".concat(minLen, \"-1024 bytes of input, got \").concat(hashLen));\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(hash) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */ function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== \"bigint\") throw new Error(\"field order must be bigint\");\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */ function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */ function mapHashToField(key, fieldOrder) {\n    let isLE = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024) throw new Error(\"expected \".concat(minLen, \"-1024 bytes of input, got \").concat(len));\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(key) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(reduced, fieldLen) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(reduced, fieldLen);\n} //# sourceMappingURL=modular.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"FpSqrt\");\n$RefreshReg$(_c1, \"FpPow\");\n$RefreshReg$(_c2, \"FpInvertBatch\");\n$RefreshReg$(_c3, \"FpDiv\");\n$RefreshReg$(_c4, \"FpIsSquare\");\n$RefreshReg$(_c5, \"Field\");\n$RefreshReg$(_c6, \"FpSqrtOdd\");\n$RefreshReg$(_c7, \"FpSqrtEven\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/modular.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/utils.js":
/*!***********************************************************!*\
  !*** ../node_modules/@noble/curves/esm/abstract/utils.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bitGet: function() { return /* binding */ bitGet; },\n/* harmony export */   bitLen: function() { return /* binding */ bitLen; },\n/* harmony export */   bitMask: function() { return /* binding */ bitMask; },\n/* harmony export */   bitSet: function() { return /* binding */ bitSet; },\n/* harmony export */   bytesToHex: function() { return /* binding */ bytesToHex; },\n/* harmony export */   bytesToNumberBE: function() { return /* binding */ bytesToNumberBE; },\n/* harmony export */   bytesToNumberLE: function() { return /* binding */ bytesToNumberLE; },\n/* harmony export */   concatBytes: function() { return /* binding */ concatBytes; },\n/* harmony export */   createHmacDrbg: function() { return /* binding */ createHmacDrbg; },\n/* harmony export */   ensureBytes: function() { return /* binding */ ensureBytes; },\n/* harmony export */   equalBytes: function() { return /* binding */ equalBytes; },\n/* harmony export */   hexToBytes: function() { return /* binding */ hexToBytes; },\n/* harmony export */   hexToNumber: function() { return /* binding */ hexToNumber; },\n/* harmony export */   numberToBytesBE: function() { return /* binding */ numberToBytesBE; },\n/* harmony export */   numberToBytesLE: function() { return /* binding */ numberToBytesLE; },\n/* harmony export */   numberToHexUnpadded: function() { return /* binding */ numberToHexUnpadded; },\n/* harmony export */   numberToVarBytesBE: function() { return /* binding */ numberToVarBytesBE; },\n/* harmony export */   utf8ToBytes: function() { return /* binding */ utf8ToBytes; },\n/* harmony export */   validateObject: function() { return /* binding */ validateObject; }\n/* harmony export */ });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a)=>a instanceof Uint8Array;\nconst hexes = /* @__PURE__ */ Array.from({\n    length: 256\n}, (_, i)=>i.toString(16).padStart(2, \"0\"));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */ function bytesToHex(bytes) {\n    if (!u8a(bytes)) throw new Error(\"Uint8Array expected\");\n    // pre-caching improves the speed 6x\n    let hex = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? \"0\".concat(hex) : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    // Big Endian\n    return BigInt(hex === \"\" ? \"0\" : \"0x\".concat(hex));\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */ function hexToBytes(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    const len = hex.length;\n    if (len % 2) throw new Error(\"padded hex string expected, got unpadded hex of length \" + len);\n    const array = new Uint8Array(len / 2);\n    for(let i = 0; i < array.length; i++){\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0) throw new Error(\"Invalid byte sequence\");\n        array[i] = byte;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n    if (!u8a(bytes)) throw new Error(\"Uint8Array expected\");\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, \"0\"));\n}\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */ function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === \"string\") {\n        try {\n            res = hexToBytes(hex);\n        } catch (e) {\n            throw new Error(\"\".concat(title, ' must be valid hex string, got \"').concat(hex, '\". Cause: ').concat(e));\n        }\n    } else if (u8a(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    } else {\n        throw new Error(\"\".concat(title, \" must be hex string or Uint8Array\"));\n    }\n    const len = res.length;\n    if (typeof expectedLength === \"number\" && len !== expectedLength) throw new Error(\"\".concat(title, \" expected \").concat(expectedLength, \" bytes, got \").concat(len));\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */ function concatBytes() {\n    for(var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++){\n        arrays[_key] = arguments[_key];\n    }\n    const r = new Uint8Array(arrays.reduce((sum, a)=>sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a)=>{\n        if (!u8a(a)) throw new Error(\"Uint8Array expected\");\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nfunction equalBytes(b1, b2) {\n    // We don't care about timing attacks here\n    if (b1.length !== b2.length) return false;\n    for(let i = 0; i < b1.length; i++)if (b1[i] !== b2[i]) return false;\n    return true;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */ function utf8ToBytes(str) {\n    if (typeof str !== \"string\") throw new Error(\"utf8ToBytes expected string, got \".concat(typeof str));\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */ function bitLen(n) {\n    let len;\n    for(len = 0; n > _0n; n >>= _1n, len += 1);\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */ function bitGet(n, pos) {\n    return n >> BigInt(pos) & _1n;\n}\n/**\n * Sets single bit at position.\n */ const bitSet = (n, pos, value)=>{\n    return n | (value ? _1n : _0n) << BigInt(pos);\n};\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */ const bitMask = (n)=>(_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data)=>new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr)=>Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */ function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== \"number\" || hashLen < 2) throw new Error(\"hashLen must be a number\");\n    if (typeof qByteLen !== \"number\" || qByteLen < 2) throw new Error(\"qByteLen must be a number\");\n    if (typeof hmacFn !== \"function\") throw new Error(\"hmacFn must be a function\");\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = ()=>{\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = function() {\n        for(var _len = arguments.length, b = new Array(_len), _key = 0; _key < _len; _key++){\n            b[_key] = arguments[_key];\n        }\n        return hmacFn(k, v, ...b);\n    }; // hmac(k)(v, ...values)\n    const reseed = function() {\n        let seed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : u8n();\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([\n            0x00\n        ]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0) return;\n        k = h(u8fr([\n            0x01\n        ]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = ()=>{\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000) throw new Error(\"drbg: tried 1000 values\");\n        let len = 0;\n        const out = [];\n        while(len < qByteLen){\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred)=>{\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while(!(res = pred(gen())))reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val)=>typeof val === \"bigint\",\n    function: (val)=>typeof val === \"function\",\n    boolean: (val)=>typeof val === \"boolean\",\n    string: (val)=>typeof val === \"string\",\n    stringOrUint8Array: (val)=>typeof val === \"string\" || val instanceof Uint8Array,\n    isSafeInteger: (val)=>Number.isSafeInteger(val),\n    array: (val)=>Array.isArray(val),\n    field: (val, object)=>object.Fp.isValid(val),\n    hash: (val)=>typeof val === \"function\" && Number.isSafeInteger(val.outputLen)\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators) {\n    let optValidators = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const checkField = (fieldName, type, isOptional)=>{\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== \"function\") throw new Error('Invalid validator \"'.concat(type, '\", expected function'));\n        const val = object[fieldName];\n        if (isOptional && val === undefined) return;\n        if (!checkVal(val, object)) {\n            throw new Error(\"Invalid param \".concat(String(fieldName), \"=\").concat(val, \" (\").concat(typeof val, \"), expected \").concat(type));\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))checkField(fieldName, type, true);\n    return object;\n} // validate type tests\n // const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n // const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n // // Should fail type-check\n // const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n // const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n // const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n // const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/weierstrass.js":
/*!*****************************************************************!*\
  !*** ../node_modules/@noble/curves/esm/abstract/weierstrass.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DER: function() { return /* binding */ DER; },\n/* harmony export */   SWUFpSqrtRatio: function() { return /* binding */ SWUFpSqrtRatio; },\n/* harmony export */   mapToCurveSimpleSWU: function() { return /* binding */ mapToCurveSimpleSWU; },\n/* harmony export */   weierstrass: function() { return /* binding */ weierstrass; },\n/* harmony export */   weierstrassPoints: function() { return /* binding */ weierstrassPoints; }\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modular.js */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./curve.js */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Short Weierstrass curve. The formula is: y² = x³ + ax + b\n\n\n\n\nfunction validatePointOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        a: \"field\",\n        b: \"field\"\n    }, {\n        allowedPrivateKeyLengths: \"array\",\n        wrapPrivateKey: \"boolean\",\n        isTorsionFree: \"function\",\n        clearCofactor: \"function\",\n        allowInfinityPoint: \"boolean\",\n        fromBytes: \"function\",\n        toBytes: \"function\"\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error(\"Endomorphism can only be defined for Koblitz curves that have a=0\");\n        }\n        if (typeof endo !== \"object\" || typeof endo.beta !== \"bigint\" || typeof endo.splitScalar !== \"function\") {\n            throw new Error(\"Expected endomorphism with beta: bigint and splitScalar: function\");\n        }\n    }\n    return Object.freeze({\n        ...opts\n    });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = _utils_js__WEBPACK_IMPORTED_MODULE_1__;\nconst DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = \"\"){\n            super(m);\n        }\n    },\n    _parseInt (data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02) throw new E(\"Invalid signature integer tag\");\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len) throw new E(\"Invalid signature integer: wrong length\");\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 128) throw new E(\"Invalid signature integer: negative\");\n        if (res[0] === 0x00 && !(res[1] & 128)) throw new E(\"Invalid signature integer: unnecessary leading zero\");\n        return {\n            d: b2n(res),\n            l: data.subarray(len + 2)\n        }; // d is data, l is left\n    },\n    toSig (hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === \"string\" ? h2b(hex) : hex;\n        if (!(data instanceof Uint8Array)) throw new Error(\"ui8a expected\");\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30) throw new E(\"Invalid signature tag\");\n        if (data[1] !== l - 2) throw new E(\"Invalid signature: incorrect length\");\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length) throw new E(\"Invalid signature: left bytes after parsing\");\n        return {\n            r,\n            s\n        };\n    },\n    hexFromSig (sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s)=>Number.parseInt(s[0], 16) & 8 ? \"00\" + s : s;\n        const h = (num)=>{\n            const hex = num.toString(16);\n            return hex.length & 1 ? \"0\".concat(hex) : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return \"30\".concat(h(rhl + shl + 4), \"02\").concat(rl).concat(r, \"02\").concat(sl).concat(s);\n    }\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes || ((_c, point, _isCompressed)=>{\n        const a = point.toAffine();\n        return _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(Uint8Array.from([\n            0x04\n        ]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n    const fromBytes = CURVE.fromBytes || ((bytes)=>{\n        // const head = bytes[0];\n        const tail = bytes.subarray(1);\n        // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return {\n            x,\n            y\n        };\n    });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */ function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error(\"bad generator point: equation left != right\");\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === \"bigint\" && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num)) throw new Error(\"Expected valid bigint: 0 < bigint < curve.n\");\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== \"bigint\") {\n            if (key instanceof Uint8Array) key = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== \"string\" || !lengths.includes(key.length)) throw new Error(\"Invalid key\");\n            key = key.padStart(nByteLength * 2, \"0\");\n        }\n        let num;\n        try {\n            num = typeof key === \"bigint\" ? key : _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"private key\", key, nByteLength));\n        } catch (error) {\n            throw new Error(\"private key must be \".concat(nByteLength, \" bytes, hex or bigint, not \").concat(typeof key));\n        }\n        if (wrapPrivateKey) num = _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point)) throw new Error(\"ProjectivePoint expected\");\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */ class Point {\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error(\"invalid affine point\");\n            if (p instanceof Point) throw new Error(\"projective point not allowed\");\n            const is0 = (i)=>Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y)) return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */ static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p)=>p.pz));\n            return points.map((p, i)=>p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */ static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"pointHex\", hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n                throw new Error(\"bad point: ZERO\");\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error(\"bad point: x or y not FE\");\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right)) throw new Error(\"bad point: equation left != right\");\n            if (!this.isTorsionFree()) throw new Error(\"bad point: not in prime-order subgroup\");\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd) return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */ equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */ negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp)=>{\n                const toInv = Fp.invertBatch(comp.map((p)=>p.pz));\n                return comp.map((p, i)=>p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */ multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n) return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n) return this;\n            const { endo } = CURVE;\n            if (!endo) return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while(k1 > _0n || k2 > _0n){\n                if (k1 & _1n) k1p = k1p.add(d);\n                if (k2 & _1n) k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg) k1p = k1p.negate();\n            if (k2neg) k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */ multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            } else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([\n                point,\n                fake\n            ])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */ multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            )=>a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0) return {\n                x: Fp.ZERO,\n                y: Fp.ZERO\n            };\n            if (!Fp.eql(zz, Fp.ONE)) throw new Error(\"invZ was invalid\");\n            return {\n                x: ax,\n                y: ay\n            };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n) return true; // No subgroups, always torsion-free\n            if (isTorsionFree) return isTorsionFree(Point, this);\n            throw new Error(\"isTorsionFree() has not been declared for the elliptic curve\");\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n) return this; // Fast-path\n            if (clearCofactor) return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes() {\n            let isCompressed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex() {\n            let isCompressed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(this.toRawBytes(isCompressed));\n        }\n        constructor(px, py, pz){\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px)) throw new Error(\"x required\");\n            if (py == null || !Fp.isValid(py)) throw new Error(\"y required\");\n            if (pz == null || !Fp.isValid(pz)) throw new Error(\"z required\");\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder\n    };\n}\nfunction validateOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        hash: \"hash\",\n        hmac: \"function\",\n        randomBytes: \"function\"\n    }, {\n        bits2int: \"function\",\n        bits2int_modN: \"function\",\n        lowS: \"boolean\"\n    });\n    return Object.freeze({\n        lowS: true,\n        ...opts\n    });\n}\nfunction weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({\n        ...CURVE,\n        toBytes (_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([\n                    point.hasEvenY() ? 0x02 : 0x03\n                ]), x);\n            } else {\n                return cat(Uint8Array.from([\n                    0x04\n                ]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes (bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x)) throw new Error(\"Point is not on curve\");\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n                return {\n                    x,\n                    y\n                };\n            } else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return {\n                    x,\n                    y\n                };\n            } else {\n                throw new Error(\"Point of length \".concat(len, \" was invalid. Expected \").concat(compressedLen, \" compressed bytes or \").concat(uncompressedLen, \" uncompressed bytes\"));\n            }\n        }\n    });\n    const numToNByteStr = (num)=>_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(_utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to)=>_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */ class Signature {\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"compactSignature\", hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"DER\", hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r)) throw new Error(\"r must be 0 < r < CURVE.n\");\n            if (!isWithinCurveOrder(this.s)) throw new Error(\"s must be 0 < s < CURVE.n\");\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"msgHash\", msgHash)); // Truncate hash\n            if (rec == null || ![\n                0,\n                1,\n                2,\n                3\n            ].includes(rec)) throw new Error(\"recovery id invalid\");\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER) throw new Error(\"recovery id 2 or 3 invalid\");\n            const prefix = (rec & 1) === 0 ? \"02\" : \"03\";\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q) throw new Error(\"point at infinify\"); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({\n                r: this.r,\n                s: this.s\n            });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n        constructor(r, s, recovery){\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n    }\n    const utils = {\n        isValidPrivateKey (privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            } catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */ randomPrivateKey: ()=>{\n            const length = _modular_js__WEBPACK_IMPORTED_MODULE_2__.getMinHashLength(CURVE.n);\n            return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */ precompute () {\n            let windowSize = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 8, point = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Point.BASE;\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        }\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */ function getPublicKey(privateKey) {\n        let isCompressed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */ function isProbPub(item) {\n        const arr = item instanceof Uint8Array;\n        const str = typeof item === \"string\";\n        const len = (arr || str) && item.length;\n        if (arr) return len === compressedLen || len === uncompressedLen;\n        if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point) return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */ function getSharedSecret(privateA, publicB) {\n        let isCompressed = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;\n        if (isProbPub(privateA)) throw new Error(\"first arg must be private key\");\n        if (!isProbPub(publicB)) throw new Error(\"second arg must be public key\");\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int || function(bytes) {\n        // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n        // for some cases, since bytes.length * 8 is not actual bitLength.\n        const num = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(bytes); // check for == u8 done here\n        const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n        return delta > 0 ? num >> BigInt(delta) : num;\n    };\n    const bits2int_modN = CURVE.bits2int_modN || function(bytes) {\n        return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */ function int2octets(num) {\n        if (typeof num !== \"bigint\") throw new Error(\"bigint expected\");\n        if (!(_0n <= num && num < ORDER_MASK)) throw new Error(\"bigint expected < 2^\".concat(CURVE.nBitLength));\n        // works with order, can have different size than numToField!\n        return _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey) {\n        let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultSigOpts;\n        if ([\n            \"recovered\",\n            \"canonical\"\n        ].some((k)=>k in opts)) throw new Error(\"sign() legacy options not supported\");\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"msgHash\", msgHash);\n        if (prehash) msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"prehashed msgHash\", hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [\n            int2octets(d),\n            int2octets(h1int)\n        ];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"extraEntropy\", e)); // check for being bytes\n        }\n        const seed = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n) return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n) return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return {\n            seed,\n            k2sig\n        };\n    }\n    const defaultSigOpts = {\n        lowS: CURVE.lowS,\n        prehash: false\n    };\n    const defaultVerOpts = {\n        lowS: CURVE.lowS,\n        prehash: false\n    };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */ function sign(msgHash, privKey) {\n        let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultSigOpts;\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = _utils_js__WEBPACK_IMPORTED_MODULE_1__.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */ function verify(signature, msgHash, publicKey) {\n        let opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : defaultVerOpts;\n        var _Point_BASE_multiplyAndAddUnsafe;\n        const sg = signature;\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"msgHash\", msgHash);\n        publicKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"publicKey\", publicKey);\n        if (\"strict\" in opts) throw new Error(\"options.strict was renamed to lowS\");\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === \"string\" || sg instanceof Uint8Array) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                } catch (derError) {\n                    if (!(derError instanceof DER.Err)) throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            } else if (typeof sg === \"object\" && typeof sg.r === \"bigint\" && typeof sg.s === \"bigint\") {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            } else {\n                throw new Error(\"PARSE\");\n            }\n            P = Point.fromHex(publicKey);\n        } catch (error) {\n            if (error.message === \"PARSE\") throw new Error(\"signature must be Signature instance, Uint8Array or hex string\");\n            return false;\n        }\n        if (lowS && _sig.hasHighS()) return false;\n        if (prehash) msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = (_Point_BASE_multiplyAndAddUnsafe = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)) === null || _Point_BASE_multiplyAndAddUnsafe === void 0 ? void 0 : _Point_BASE_multiplyAndAddUnsafe.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R) return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */ function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for(let o = q - _1n; o % _2n === _0n; o /= _2n)l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v)=>{\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for(let i = c1; i > _1n; i--){\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << tv5 - _1n; // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return {\n            isValid: isQR,\n            value: tv3\n        };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v)=>{\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return {\n                isValid: isQR,\n                value: y\n            }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n_c = SWUFpSqrtRatio;\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */ function mapToCurveSimpleSWU(Fp, opts) {\n    _modular_js__WEBPACK_IMPORTED_MODULE_2__.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error(\"mapToCurveSimpleSWU: invalid opts\");\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd) throw new Error(\"Fp.isOdd is not implemented!\");\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u)=>{\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return {\n            x,\n            y\n        };\n    };\n} //# sourceMappingURL=weierstrass.js.map\nvar _c;\n$RefreshReg$(_c, \"SWUFpSqrtRatio\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/weierstrass.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/curves/esm/secp256k1.js":
/*!******************************************************!*\
  !*** ../node_modules/@noble/curves/esm/secp256k1.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeToCurve: function() { return /* binding */ encodeToCurve; },\n/* harmony export */   hashToCurve: function() { return /* binding */ hashToCurve; },\n/* harmony export */   schnorr: function() { return /* binding */ schnorr; },\n/* harmony export */   secp256k1: function() { return /* binding */ secp256k1; }\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/utils */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/modular.js */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/* harmony import */ var _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/utils.js */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/* harmony import */ var _shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_shortw_utils.js */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/_shortw_utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \n\n\n\n\n\n\nconst secp256k1P = BigInt(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\");\nconst secp256k1N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b)=>(a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */ function sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = y * y * y % P; // x^3, 11\n    const b3 = b2 * b2 * y % P; // x^7\n    const b6 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b3, _3n, P) * b3 % P;\n    const b9 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b6, _3n, P) * b3 % P;\n    const b11 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b9, _2n, P) * b2 % P;\n    const b22 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b11, _11n, P) * b11 % P;\n    const b44 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b22, _22n, P) * b22 % P;\n    const b88 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b44, _44n, P) * b44 % P;\n    const b176 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b88, _88n, P) * b88 % P;\n    const b220 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b176, _44n, P) * b44 % P;\n    const b223 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b220, _3n, P) * b3 % P;\n    const t1 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b223, _23n, P) * b22 % P;\n    const t2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(t1, _6n, P) * b2 % P;\n    const root = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y)) throw new Error(\"Cannot find square root\");\n    return root;\n}\nconst Fp = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(secp256k1P, undefined, undefined, {\n    sqrt: sqrtMod\n});\nconst secp256k1 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCurve)({\n    a: BigInt(0),\n    b: BigInt(7),\n    Fp,\n    n: secp256k1N,\n    // Base point (x, y) aka generator point\n    Gx: BigInt(\"55066263022277343669578718895168534326250603453777594175500187360389116729240\"),\n    Gy: BigInt(\"32670510020758816978083085130507043184471273380659243275938904335757337482424\"),\n    h: BigInt(1),\n    lowS: true,\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */ endo: {\n        beta: BigInt(\"0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\"),\n        splitScalar: (k)=>{\n            const n = secp256k1N;\n            const a1 = BigInt(\"0x3086d221a7d46bcde86c90e49284eb15\");\n            const b1 = -_1n * BigInt(\"0xe4437ed6010e88286f547fa90abfe4c3\");\n            const a2 = BigInt(\"0x114ca50f7a8e2f3f657c1108d9d44cfd8\");\n            const b2 = a1;\n            const POW_2_128 = BigInt(\"0x100000000000000000000000000000000\"); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(k - c1 * a1 - c2 * a2, n);\n            let k2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg) k1 = n - k1;\n            if (k2neg) k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error(\"splitScalar: Endomorphism failed, k=\" + k);\n            }\n            return {\n                k1neg,\n                k1,\n                k2neg,\n                k2\n            };\n        }\n    }\n}, _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x)=>typeof x === \"bigint\" && _0n < x && x < secp256k1P;\nconst ge = (x)=>typeof x === \"bigint\" && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */ const TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag) {\n    for(var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        messages[_key - 1] = arguments[_key];\n    }\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)(Uint8Array.from(tag, (c)=>c.charCodeAt(0)));\n        tagP = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point)=>point.toRawBytes(true).slice(1);\nconst numTo32b = (n)=>(0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.numberToBytesBE)(n, 32);\nconst modP = (x)=>(0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x, secp256k1P);\nconst modN = (x)=>(0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b)=>Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n_c = GmulAdd;\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return {\n        scalar: scalar,\n        bytes: pointToBytes(p)\n    };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */ function lift_x(x) {\n    if (!fe(x)) throw new Error(\"bad x: need 0 < x < p\"); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */ function challenge() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    return modN((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(taggedHash(\"BIP0340/challenge\", ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */ function schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */ function schnorrSign(message, privateKey) {\n    let auxRand = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.randomBytes)(32);\n    const m = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)(\"message\", message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)(\"auxRand\", auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(taggedHash(\"BIP0340/aux\", a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash(\"BIP0340/nonce\", t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n) throw new Error(\"sign failed: k is zero\"); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px)) throw new Error(\"sign: Invalid signature produced\");\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */ function schnorrVerify(signature, message, publicKey) {\n    const sig = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)(\"signature\", signature, 64);\n    const m = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)(\"message\", message);\n    const pub = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)(\"publicKey\", publicKey, 32);\n    try {\n        const P = lift_x((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r)) return false;\n        const s = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s)) return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    } catch (error) {\n        return false;\n    }\n}\nconst schnorr = /* @__PURE__ */ (()=>({\n        getPublicKey: schnorrGetPublicKey,\n        sign: schnorrSign,\n        verify: schnorrVerify,\n        utils: {\n            randomPrivateKey: secp256k1.utils.randomPrivateKey,\n            lift_x,\n            pointToBytes,\n            numberToBytesBE: _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.numberToBytesBE,\n            bytesToNumberBE: _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE,\n            taggedHash,\n            mod: _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod\n        }\n    }))();\nconst isoMap = /* @__PURE__ */ (()=>(0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.isogenyMap)(Fp, [\n        // xNum\n        [\n            \"0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7\",\n            \"0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581\",\n            \"0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262\",\n            \"0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c\"\n        ],\n        // xDen\n        [\n            \"0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b\",\n            \"0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14\",\n            \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n        ],\n        // yNum\n        [\n            \"0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c\",\n            \"0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3\",\n            \"0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931\",\n            \"0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84\"\n        ],\n        // yDen\n        [\n            \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b\",\n            \"0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573\",\n            \"0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f\",\n            \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n        ]\n    ].map((i)=>i.map((j)=>BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (()=>(0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__.mapToCurveSimpleSWU)(Fp, {\n        A: BigInt(\"0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533\"),\n        B: BigInt(\"1771\"),\n        Z: Fp.create(BigInt(\"-11\"))\n    }))();\nconst htf = /* @__PURE__ */ (()=>(0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.createHasher)(secp256k1.ProjectivePoint, (scalars)=>{\n        const { x, y } = mapSWU(Fp.create(scalars[0]));\n        return isoMap(x, y);\n    }, {\n        DST: \"secp256k1_XMD:SHA-256_SSWU_RO_\",\n        encodeDST: \"secp256k1_XMD:SHA-256_SSWU_NU_\",\n        p: Fp.ORDER,\n        m: 1,\n        k: 128,\n        expand: \"xmd\",\n        hash: _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256\n    }))();\nconst hashToCurve = /* @__PURE__ */ (()=>htf.hashToCurve)();\nconst encodeToCurve = /* @__PURE__ */ (()=>htf.encodeToCurve)(); //# sourceMappingURL=secp256k1.js.map\nvar _c;\n$RefreshReg$(_c, \"GmulAdd\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/curves/esm/secp256k1.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/hashes/esm/_assert.js":
/*!****************************************************!*\
  !*** ../node_modules/@noble/hashes/esm/_assert.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: function() { return /* binding */ bool; },\n/* harmony export */   bytes: function() { return /* binding */ bytes; },\n/* harmony export */   exists: function() { return /* binding */ exists; },\n/* harmony export */   hash: function() { return /* binding */ hash; },\n/* harmony export */   number: function() { return /* binding */ number; },\n/* harmony export */   output: function() { return /* binding */ output; }\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0) throw new Error(\"Wrong positive integer: \".concat(n));\n}\nfunction bool(b) {\n    if (typeof b !== \"boolean\") throw new Error(\"Expected boolean, not \".concat(b));\n}\nfunction bytes(b) {\n    for(var _len = arguments.length, lengths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        lengths[_key - 1] = arguments[_key];\n    }\n    if (!(b instanceof Uint8Array)) throw new Error(\"Expected Uint8Array\");\n    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(\"Expected Uint8Array of length \".concat(lengths, \", not of length=\").concat(b.length));\n}\nfunction hash(hash) {\n    if (typeof hash !== \"function\" || typeof hash.create !== \"function\") throw new Error(\"Hash should be wrapped by utils.wrapConstructor\");\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance) {\n    let checkFinished = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n    if (instance.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (checkFinished && instance.finished) throw new Error(\"Hash#digest() has already been called\");\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(\"digestInto() expects output buffer of length at least \".concat(min));\n    }\n}\n\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (assert); //# sourceMappingURL=_assert.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX2Fzc2VydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxTQUFTQSxPQUFPQyxDQUFDO0lBQ2IsSUFBSSxDQUFDQyxPQUFPQyxhQUFhLENBQUNGLE1BQU1BLElBQUksR0FDaEMsTUFBTSxJQUFJRyxNQUFNLDJCQUE2QixPQUFGSDtBQUNuRDtBQUNBLFNBQVNJLEtBQUtDLENBQUM7SUFDWCxJQUFJLE9BQU9BLE1BQU0sV0FDYixNQUFNLElBQUlGLE1BQU0seUJBQTJCLE9BQUZFO0FBQ2pEO0FBQ0EsU0FBU0MsTUFBTUQsQ0FBQztJQUFFO1FBQUdFLFFBQUgsMkJBQVU7O0lBQ3hCLElBQUksQ0FBRUYsQ0FBQUEsYUFBYUcsVUFBUyxHQUN4QixNQUFNLElBQUlMLE1BQU07SUFDcEIsSUFBSUksUUFBUUUsTUFBTSxHQUFHLEtBQUssQ0FBQ0YsUUFBUUcsUUFBUSxDQUFDTCxFQUFFSSxNQUFNLEdBQ2hELE1BQU0sSUFBSU4sTUFBTSxpQ0FBMkRFLE9BQTFCRSxTQUFRLG9CQUEyQixPQUFURixFQUFFSSxNQUFNO0FBQzNGO0FBQ0EsU0FBU0UsS0FBS0EsSUFBSTtJQUNkLElBQUksT0FBT0EsU0FBUyxjQUFjLE9BQU9BLEtBQUtDLE1BQU0sS0FBSyxZQUNyRCxNQUFNLElBQUlULE1BQU07SUFDcEJKLE9BQU9ZLEtBQUtFLFNBQVM7SUFDckJkLE9BQU9ZLEtBQUtHLFFBQVE7QUFDeEI7QUFDQSxTQUFTQyxPQUFPQyxRQUFRO1FBQUVDLGdCQUFBQSxpRUFBZ0I7SUFDdEMsSUFBSUQsU0FBU0UsU0FBUyxFQUNsQixNQUFNLElBQUlmLE1BQU07SUFDcEIsSUFBSWMsaUJBQWlCRCxTQUFTRyxRQUFRLEVBQ2xDLE1BQU0sSUFBSWhCLE1BQU07QUFDeEI7QUFDQSxTQUFTaUIsT0FBT0MsR0FBRyxFQUFFTCxRQUFRO0lBQ3pCVixNQUFNZTtJQUNOLE1BQU1DLE1BQU1OLFNBQVNILFNBQVM7SUFDOUIsSUFBSVEsSUFBSVosTUFBTSxHQUFHYSxLQUFLO1FBQ2xCLE1BQU0sSUFBSW5CLE1BQU0seURBQTZELE9BQUptQjtJQUM3RTtBQUNKO0FBQ3FEO0FBQ3JELE1BQU1DLFNBQVM7SUFBRXhCO0lBQVFLO0lBQU1FO0lBQU9LO0lBQU1JO0lBQVFLO0FBQU87QUFDM0QsK0RBQWVHLE1BQU1BLEVBQUMsQ0FDdEIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX2Fzc2VydC5qcz9lMWEzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG51bWJlcihuKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihuKSB8fCBuIDwgMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXcm9uZyBwb3NpdGl2ZSBpbnRlZ2VyOiAke259YCk7XG59XG5mdW5jdGlvbiBib29sKGIpIHtcbiAgICBpZiAodHlwZW9mIGIgIT09ICdib29sZWFuJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBib29sZWFuLCBub3QgJHtifWApO1xufVxuZnVuY3Rpb24gYnl0ZXMoYiwgLi4ubGVuZ3Rocykge1xuICAgIGlmICghKGIgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBVaW50OEFycmF5Jyk7XG4gICAgaWYgKGxlbmd0aHMubGVuZ3RoID4gMCAmJiAhbGVuZ3Rocy5pbmNsdWRlcyhiLmxlbmd0aCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgVWludDhBcnJheSBvZiBsZW5ndGggJHtsZW5ndGhzfSwgbm90IG9mIGxlbmd0aD0ke2IubGVuZ3RofWApO1xufVxuZnVuY3Rpb24gaGFzaChoYXNoKSB7XG4gICAgaWYgKHR5cGVvZiBoYXNoICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBoYXNoLmNyZWF0ZSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIHNob3VsZCBiZSB3cmFwcGVkIGJ5IHV0aWxzLndyYXBDb25zdHJ1Y3RvcicpO1xuICAgIG51bWJlcihoYXNoLm91dHB1dExlbik7XG4gICAgbnVtYmVyKGhhc2guYmxvY2tMZW4pO1xufVxuZnVuY3Rpb24gZXhpc3RzKGluc3RhbmNlLCBjaGVja0ZpbmlzaGVkID0gdHJ1ZSkge1xuICAgIGlmIChpbnN0YW5jZS5kZXN0cm95ZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBpbnN0YW5jZSBoYXMgYmVlbiBkZXN0cm95ZWQnKTtcbiAgICBpZiAoY2hlY2tGaW5pc2hlZCAmJiBpbnN0YW5jZS5maW5pc2hlZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoI2RpZ2VzdCgpIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkJyk7XG59XG5mdW5jdGlvbiBvdXRwdXQob3V0LCBpbnN0YW5jZSkge1xuICAgIGJ5dGVzKG91dCk7XG4gICAgY29uc3QgbWluID0gaW5zdGFuY2Uub3V0cHV0TGVuO1xuICAgIGlmIChvdXQubGVuZ3RoIDwgbWluKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlnZXN0SW50bygpIGV4cGVjdHMgb3V0cHV0IGJ1ZmZlciBvZiBsZW5ndGggYXQgbGVhc3QgJHttaW59YCk7XG4gICAgfVxufVxuZXhwb3J0IHsgbnVtYmVyLCBib29sLCBieXRlcywgaGFzaCwgZXhpc3RzLCBvdXRwdXQgfTtcbmNvbnN0IGFzc2VydCA9IHsgbnVtYmVyLCBib29sLCBieXRlcywgaGFzaCwgZXhpc3RzLCBvdXRwdXQgfTtcbmV4cG9ydCBkZWZhdWx0IGFzc2VydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9hc3NlcnQuanMubWFwIl0sIm5hbWVzIjpbIm51bWJlciIsIm4iLCJOdW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwiRXJyb3IiLCJib29sIiwiYiIsImJ5dGVzIiwibGVuZ3RocyIsIlVpbnQ4QXJyYXkiLCJsZW5ndGgiLCJpbmNsdWRlcyIsImhhc2giLCJjcmVhdGUiLCJvdXRwdXRMZW4iLCJibG9ja0xlbiIsImV4aXN0cyIsImluc3RhbmNlIiwiY2hlY2tGaW5pc2hlZCIsImRlc3Ryb3llZCIsImZpbmlzaGVkIiwib3V0cHV0Iiwib3V0IiwibWluIiwiYXNzZXJ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/hashes/esm/_assert.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/hashes/esm/_sha2.js":
/*!**************************************************!*\
  !*** ../node_modules/@noble/hashes/esm/_sha2.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA2: function() { return /* binding */ SHA2; }\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/utils.js\");\n\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === \"function\") return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number(value >> _32n & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        const len = data.length;\n        for(let pos = 0; pos < len;){\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);\n                for(; blockLen <= len - pos; pos += blockLen)this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 128;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for(let i = pos; i < blockLen; i++)buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4) throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length) throw new Error(\"_sha2: outputLen bigger than state\");\n        for(let i = 0; i < outLen; i++)oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen) to.buffer.set(buffer);\n        return to;\n    }\n    constructor(blockLen, outputLen, padOffset, isLE){\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);\n    }\n} //# sourceMappingURL=_sha2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/hashes/esm/_sha2.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/hashes/esm/_u64.js":
/*!*************************************************!*\
  !*** ../node_modules/@noble/hashes/esm/_u64.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: function() { return /* binding */ add; },\n/* harmony export */   add3H: function() { return /* binding */ add3H; },\n/* harmony export */   add3L: function() { return /* binding */ add3L; },\n/* harmony export */   add4H: function() { return /* binding */ add4H; },\n/* harmony export */   add4L: function() { return /* binding */ add4L; },\n/* harmony export */   add5H: function() { return /* binding */ add5H; },\n/* harmony export */   add5L: function() { return /* binding */ add5L; },\n/* harmony export */   fromBig: function() { return /* binding */ fromBig; },\n/* harmony export */   rotlBH: function() { return /* binding */ rotlBH; },\n/* harmony export */   rotlBL: function() { return /* binding */ rotlBL; },\n/* harmony export */   rotlSH: function() { return /* binding */ rotlSH; },\n/* harmony export */   rotlSL: function() { return /* binding */ rotlSL; },\n/* harmony export */   rotr32H: function() { return /* binding */ rotr32H; },\n/* harmony export */   rotr32L: function() { return /* binding */ rotr32L; },\n/* harmony export */   rotrBH: function() { return /* binding */ rotrBH; },\n/* harmony export */   rotrBL: function() { return /* binding */ rotrBL; },\n/* harmony export */   rotrSH: function() { return /* binding */ rotrSH; },\n/* harmony export */   rotrSL: function() { return /* binding */ rotrSL; },\n/* harmony export */   shrSH: function() { return /* binding */ shrSH; },\n/* harmony export */   shrSL: function() { return /* binding */ shrSL; },\n/* harmony export */   split: function() { return /* binding */ split; },\n/* harmony export */   toBig: function() { return /* binding */ toBig; }\n/* harmony export */ });\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n) {\n    let le = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    if (le) return {\n        h: Number(n & U32_MASK64),\n        l: Number(n >> _32n & U32_MASK64)\n    };\n    return {\n        h: Number(n >> _32n & U32_MASK64) | 0,\n        l: Number(n & U32_MASK64) | 0\n    };\n}\nfunction split(lst) {\n    let le = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for(let i = 0; i < lst.length; i++){\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [\n            h,\n            l\n        ];\n    }\n    return [\n        Ah,\n        Al\n    ];\n}\nconst toBig = (h, l)=>BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s)=>h >>> s;\nconst shrSL = (h, l, s)=>h << 32 - s | l >>> s;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s)=>h >>> s | l << 32 - s;\nconst rotrSL = (h, l, s)=>h << 32 - s | l >>> s;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;\nconst rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l)=>l;\nconst rotr32L = (h, _l)=>h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s)=>h << s | l >>> 32 - s;\nconst rotlSL = (h, l, s)=>l << s | h >>> 32 - s;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;\nconst rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return {\n        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n        l: l | 0\n    };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nconst add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\n// prettier-ignore\n\n// prettier-ignore\nconst u64 = {\n    fromBig,\n    split,\n    toBig,\n    shrSH,\n    shrSL,\n    rotrSH,\n    rotrSL,\n    rotrBH,\n    rotrBL,\n    rotr32H,\n    rotr32L,\n    rotlSH,\n    rotlSL,\n    rotlBH,\n    rotlBL,\n    add,\n    add3L,\n    add3H,\n    add4L,\n    add4H,\n    add5H,\n    add5L\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (u64); //# sourceMappingURL=_u64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX3U2NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsTUFBTUEsYUFBYSxhQUFhLEdBQUdDLE9BQU8sS0FBSyxLQUFLO0FBQ3BELE1BQU1DLE9BQU8sYUFBYSxHQUFHRCxPQUFPO0FBQ3BDLCtFQUErRTtBQUMvRSxTQUFTRSxRQUFRQyxDQUFDO1FBQUVDLEtBQUFBLGlFQUFLO0lBQ3JCLElBQUlBLElBQ0EsT0FBTztRQUFFQyxHQUFHQyxPQUFPSCxJQUFJSjtRQUFhUSxHQUFHRCxPQUFPLEtBQU1MLE9BQVFGO0lBQVk7SUFDNUUsT0FBTztRQUFFTSxHQUFHQyxPQUFPLEtBQU1MLE9BQVFGLGNBQWM7UUFBR1EsR0FBR0QsT0FBT0gsSUFBSUosY0FBYztJQUFFO0FBQ3BGO0FBQ0EsU0FBU1MsTUFBTUMsR0FBRztRQUFFTCxLQUFBQSxpRUFBSztJQUNyQixJQUFJTSxLQUFLLElBQUlDLFlBQVlGLElBQUlHLE1BQU07SUFDbkMsSUFBSUMsS0FBSyxJQUFJRixZQUFZRixJQUFJRyxNQUFNO0lBQ25DLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJTCxJQUFJRyxNQUFNLEVBQUVFLElBQUs7UUFDakMsTUFBTSxFQUFFVCxDQUFDLEVBQUVFLENBQUMsRUFBRSxHQUFHTCxRQUFRTyxHQUFHLENBQUNLLEVBQUUsRUFBRVY7UUFDakMsQ0FBQ00sRUFBRSxDQUFDSSxFQUFFLEVBQUVELEVBQUUsQ0FBQ0MsRUFBRSxDQUFDLEdBQUc7WUFBQ1Q7WUFBR0U7U0FBRTtJQUMzQjtJQUNBLE9BQU87UUFBQ0c7UUFBSUc7S0FBRztBQUNuQjtBQUNBLE1BQU1FLFFBQVEsQ0FBQ1YsR0FBR0UsSUFBTSxPQUFRRixNQUFNLE1BQU1KLE9BQVFELE9BQU9PLE1BQU07QUFDakUsdUJBQXVCO0FBQ3ZCLE1BQU1TLFFBQVEsQ0FBQ1gsR0FBR1ksSUFBSUMsSUFBTWIs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R0EsRUFBQyxDQUNuQixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fdTY0LmpzP2RjYjYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVTMyX01BU0s2NCA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMiAqKiAzMiAtIDEpO1xuY29uc3QgXzMybiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMzIpO1xuLy8gV2UgYXJlIG5vdCB1c2luZyBCaWdVaW50NjRBcnJheSwgYmVjYXVzZSB0aGV5IGFyZSBleHRyZW1lbHkgc2xvdyBhcyBwZXIgMjAyMlxuZnVuY3Rpb24gZnJvbUJpZyhuLCBsZSA9IGZhbHNlKSB7XG4gICAgaWYgKGxlKVxuICAgICAgICByZXR1cm4geyBoOiBOdW1iZXIobiAmIFUzMl9NQVNLNjQpLCBsOiBOdW1iZXIoKG4gPj4gXzMybikgJiBVMzJfTUFTSzY0KSB9O1xuICAgIHJldHVybiB7IGg6IE51bWJlcigobiA+PiBfMzJuKSAmIFUzMl9NQVNLNjQpIHwgMCwgbDogTnVtYmVyKG4gJiBVMzJfTUFTSzY0KSB8IDAgfTtcbn1cbmZ1bmN0aW9uIHNwbGl0KGxzdCwgbGUgPSBmYWxzZSkge1xuICAgIGxldCBBaCA9IG5ldyBVaW50MzJBcnJheShsc3QubGVuZ3RoKTtcbiAgICBsZXQgQWwgPSBuZXcgVWludDMyQXJyYXkobHN0Lmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgeyBoLCBsIH0gPSBmcm9tQmlnKGxzdFtpXSwgbGUpO1xuICAgICAgICBbQWhbaV0sIEFsW2ldXSA9IFtoLCBsXTtcbiAgICB9XG4gICAgcmV0dXJuIFtBaCwgQWxdO1xufVxuY29uc3QgdG9CaWcgPSAoaCwgbCkgPT4gKEJpZ0ludChoID4+PiAwKSA8PCBfMzJuKSB8IEJpZ0ludChsID4+PiAwKTtcbi8vIGZvciBTaGlmdCBpbiBbMCwgMzIpXG5jb25zdCBzaHJTSCA9IChoLCBfbCwgcykgPT4gaCA+Pj4gcztcbmNvbnN0IHNoclNMID0gKGgsIGwsIHMpID0+IChoIDw8ICgzMiAtIHMpKSB8IChsID4+PiBzKTtcbi8vIFJpZ2h0IHJvdGF0ZSBmb3IgU2hpZnQgaW4gWzEsIDMyKVxuY29uc3Qgcm90clNIID0gKGgsIGwsIHMpID0+IChoID4+PiBzKSB8IChsIDw8ICgzMiAtIHMpKTtcbmNvbnN0IHJvdHJTTCA9IChoLCBsLCBzKSA9PiAoaCA8PCAoMzIgLSBzKSkgfCAobCA+Pj4gcyk7XG4vLyBSaWdodCByb3RhdGUgZm9yIFNoaWZ0IGluICgzMiwgNjQpLCBOT1RFOiAzMiBpcyBzcGVjaWFsIGNhc2UuXG5jb25zdCByb3RyQkggPSAoaCwgbCwgcykgPT4gKGggPDwgKDY0IC0gcykpIHwgKGwgPj4+IChzIC0gMzIpKTtcbmNvbnN0IHJvdHJCTCA9IChoLCBsLCBzKSA9PiAoaCA+Pj4gKHMgLSAzMikpIHwgKGwgPDwgKDY0IC0gcykpO1xuLy8gUmlnaHQgcm90YXRlIGZvciBzaGlmdD09PTMyIChqdXN0IHN3YXBzIGwmaClcbmNvbnN0IHJvdHIzMkggPSAoX2gsIGwpID0+IGw7XG5jb25zdCByb3RyMzJMID0gKGgsIF9sKSA9PiBoO1xuLy8gTGVmdCByb3RhdGUgZm9yIFNoaWZ0IGluIFsxLCAzMilcbmNvbnN0IHJvdGxTSCA9IChoLCBsLCBzKSA9PiAoaCA8PCBzKSB8IChsID4+PiAoMzIgLSBzKSk7XG5jb25zdCByb3RsU0wgPSAoaCwgbCwgcykgPT4gKGwgPDwgcykgfCAoaCA+Pj4gKDMyIC0gcykpO1xuLy8gTGVmdCByb3RhdGUgZm9yIFNoaWZ0IGluICgzMiwgNjQpLCBOT1RFOiAzMiBpcyBzcGVjaWFsIGNhc2UuXG5jb25zdCByb3RsQkggPSAoaCwgbCwgcykgPT4gKGwgPDwgKHMgLSAzMikpIHwgKGggPj4+ICg2NCAtIHMpKTtcbmNvbnN0IHJvdGxCTCA9IChoLCBsLCBzKSA9PiAoaCA8PCAocyAtIDMyKSkgfCAobCA+Pj4gKDY0IC0gcykpO1xuLy8gSlMgdXNlcyAzMi1iaXQgc2lnbmVkIGludGVnZXJzIGZvciBiaXR3aXNlIG9wZXJhdGlvbnMgd2hpY2ggbWVhbnMgd2UgY2Fubm90XG4vLyBzaW1wbGUgdGFrZSBjYXJyeSBvdXQgb2YgbG93IGJpdCBzdW0gYnkgc2hpZnQsIHdlIG5lZWQgdG8gdXNlIGRpdmlzaW9uLlxuZnVuY3Rpb24gYWRkKEFoLCBBbCwgQmgsIEJsKSB7XG4gICAgY29uc3QgbCA9IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApO1xuICAgIHJldHVybiB7IGg6IChBaCArIEJoICsgKChsIC8gMiAqKiAzMikgfCAwKSkgfCAwLCBsOiBsIHwgMCB9O1xufVxuLy8gQWRkaXRpb24gd2l0aCBtb3JlIHRoYW4gMiBlbGVtZW50c1xuY29uc3QgYWRkM0wgPSAoQWwsIEJsLCBDbCkgPT4gKEFsID4+PiAwKSArIChCbCA+Pj4gMCkgKyAoQ2wgPj4+IDApO1xuY29uc3QgYWRkM0ggPSAobG93LCBBaCwgQmgsIENoKSA9PiAoQWggKyBCaCArIENoICsgKChsb3cgLyAyICoqIDMyKSB8IDApKSB8IDA7XG5jb25zdCBhZGQ0TCA9IChBbCwgQmwsIENsLCBEbCkgPT4gKEFsID4+PiAwKSArIChCbCA+Pj4gMCkgKyAoQ2wgPj4+IDApICsgKERsID4+PiAwKTtcbmNvbnN0IGFkZDRIID0gKGxvdywgQWgsIEJoLCBDaCwgRGgpID0+IChBaCArIEJoICsgQ2ggKyBEaCArICgobG93IC8gMiAqKiAzMikgfCAwKSkgfCAwO1xuY29uc3QgYWRkNUwgPSAoQWwsIEJsLCBDbCwgRGwsIEVsKSA9PiAoQWwgPj4+IDApICsgKEJsID4+PiAwKSArIChDbCA+Pj4gMCkgKyAoRGwgPj4+IDApICsgKEVsID4+PiAwKTtcbmNvbnN0IGFkZDVIID0gKGxvdywgQWgsIEJoLCBDaCwgRGgsIEVoKSA9PiAoQWggKyBCaCArIENoICsgRGggKyBFaCArICgobG93IC8gMiAqKiAzMikgfCAwKSkgfCAwO1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgeyBmcm9tQmlnLCBzcGxpdCwgdG9CaWcsIHNoclNILCBzaHJTTCwgcm90clNILCByb3RyU0wsIHJvdHJCSCwgcm90ckJMLCByb3RyMzJILCByb3RyMzJMLCByb3RsU0gsIHJvdGxTTCwgcm90bEJILCByb3RsQkwsIGFkZCwgYWRkM0wsIGFkZDNILCBhZGQ0TCwgYWRkNEgsIGFkZDVILCBhZGQ1TCwgfTtcbi8vIHByZXR0aWVyLWlnbm9yZVxuY29uc3QgdTY0ID0ge1xuICAgIGZyb21CaWcsIHNwbGl0LCB0b0JpZyxcbiAgICBzaHJTSCwgc2hyU0wsXG4gICAgcm90clNILCByb3RyU0wsIHJvdHJCSCwgcm90ckJMLFxuICAgIHJvdHIzMkgsIHJvdHIzMkwsXG4gICAgcm90bFNILCByb3RsU0wsIHJvdGxCSCwgcm90bEJMLFxuICAgIGFkZCwgYWRkM0wsIGFkZDNILCBhZGQ0TCwgYWRkNEgsIGFkZDVILCBhZGQ1TCxcbn07XG5leHBvcnQgZGVmYXVsdCB1NjQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdTY0LmpzLm1hcCJdLCJuYW1lcyI6WyJVMzJfTUFTSzY0IiwiQmlnSW50IiwiXzMybiIsImZyb21CaWciLCJuIiwibGUiLCJoIiwiTnVtYmVyIiwibCIsInNwbGl0IiwibHN0IiwiQWgiLCJVaW50MzJBcnJheSIsImxlbmd0aCIsIkFsIiwiaSIsInRvQmlnIiwic2hyU0giLCJfbCIsInMiLCJzaHJTTCIsInJvdHJTSCIsInJvdHJTTCIsInJvdHJCSCIsInJvdHJCTCIsInJvdHIzMkgiLCJfaCIsInJvdHIzMkwiLCJyb3RsU0giLCJyb3RsU0wiLCJyb3RsQkgiLCJyb3RsQkwiLCJhZGQiLCJCaCIsIkJsIiwiYWRkM0wiLCJDbCIsImFkZDNIIiwibG93IiwiQ2giLCJhZGQ0TCIsIkRsIiwiYWRkNEgiLCJEaCIsImFkZDVMIiwiRWwiLCJhZGQ1SCIsIkVoIiwidTY0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/hashes/esm/_u64.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/hashes/esm/crypto.js":
/*!***************************************************!*\
  !*** ../node_modules/@noble/hashes/esm/crypto.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: function() { return /* binding */ crypto; }\n/* harmony export */ });\nconst crypto = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : undefined; //# sourceMappingURL=crypto.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxTQUFTLE9BQU9DLGVBQWUsWUFBWSxZQUFZQSxhQUFhQSxXQUFXRCxNQUFNLEdBQUdFLFVBQVUsQ0FDL0csa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvLmpzP2E4ODUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGNyeXB0byA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JyAmJiAnY3J5cHRvJyBpbiBnbG9iYWxUaGlzID8gZ2xvYmFsVGhpcy5jcnlwdG8gOiB1bmRlZmluZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG8uanMubWFwIl0sIm5hbWVzIjpbImNyeXB0byIsImdsb2JhbFRoaXMiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/hashes/esm/crypto.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/hashes/esm/hmac.js":
/*!*************************************************!*\
  !*** ../node_modules/@noble/hashes/esm/hmac.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HMAC: function() { return /* binding */ HMAC; },\n/* harmony export */   hmac: function() { return /* binding */ hmac; }\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/utils.js\");\n\n\n// HMAC (RFC 2104)\nclass HMAC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    update(buf) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.bytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n    constructor(hash, _key){\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.hash)(hash);\n        const key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== \"function\") throw new Error(\"Expected instance of class which extends utils.Hash\");\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */ const hmac = (hash, key, message)=>new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key)=>new HMAC(hash, key); //# sourceMappingURL=hmac.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vaG1hYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdHO0FBQ3JEO0FBQzNDLGtCQUFrQjtBQUNYLE1BQU1RLGFBQWFGLDJDQUFJQTtJQTJCMUJHLE9BQU9DLEdBQUcsRUFBRTtRQUNSTCxrREFBWUEsQ0FBQyxJQUFJO1FBQ2pCLElBQUksQ0FBQ00sS0FBSyxDQUFDRixNQUFNLENBQUNDO1FBQ2xCLE9BQU8sSUFBSTtJQUNmO0lBQ0FFLFdBQVdDLEdBQUcsRUFBRTtRQUNaUixrREFBWUEsQ0FBQyxJQUFJO1FBQ2pCRixpREFBV0EsQ0FBQ1UsS0FBSyxJQUFJLENBQUNDLFNBQVM7UUFDL0IsSUFBSSxDQUFDQyxRQUFRLEdBQUc7UUFDaEIsSUFBSSxDQUFDSixLQUFLLENBQUNDLFVBQVUsQ0FBQ0M7UUFDdEIsSUFBSSxDQUFDRyxLQUFLLENBQUNQLE1BQU0sQ0FBQ0k7UUFDbEIsSUFBSSxDQUFDRyxLQUFLLENBQUNKLFVBQVUsQ0FBQ0M7UUFDdEIsSUFBSSxDQUFDSSxPQUFPO0lBQ2hCO0lBQ0FDLFNBQVM7UUFDTCxNQUFNTCxNQUFNLElBQUlNLFdBQVcsSUFBSSxDQUFDSCxLQUFLLENBQUNGLFNBQVM7UUFDL0MsSUFBSSxDQUFDRixVQUFVLENBQUNDO1FBQ2hCLE9BQU9BO0lBQ1g7SUFDQU8sV0FBV0MsRUFBRSxFQUFFO1FBQ1gsbUdBQW1HO1FBQ25HQSxNQUFPQSxDQUFBQSxLQUFLQyxPQUFPQyxNQUFNLENBQUNELE9BQU9FLGNBQWMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFDO1FBQ3pELE1BQU0sRUFBRVIsS0FBSyxFQUFFTCxLQUFLLEVBQUVJLFFBQVEsRUFBRVUsU0FBUyxFQUFFQyxRQUFRLEVBQUVaLFNBQVMsRUFBRSxHQUFHLElBQUk7UUFDdkVPLEtBQUtBO1FBQ0xBLEdBQUdOLFFBQVEsR0FBR0E7UUFDZE0sR0FBR0ksU0FBUyxHQUFHQTtRQUNmSixHQUFHSyxRQUFRLEdBQUdBO1FBQ2RMLEdBQUdQLFNBQVMsR0FBR0E7UUFDZk8sR0FBR0wsS0FBSyxHQUFHQSxNQUFNSSxVQUFVLENBQUNDLEdBQUdMLEtBQUs7UUFDcENLLEdBQUdWLEtBQUssR0FBR0EsTUFBTVMsVUFBVSxDQUFDQyxHQUFHVixLQUFLO1FBQ3BDLE9BQU9VO0lBQ1g7SUFDQUosVUFBVTtRQUNOLElBQUksQ0FBQ1EsU0FBUyxHQUFHO1FBQ2pCLElBQUksQ0FBQ1QsS0FBSyxDQUFDQyxPQUFPO1FBQ2xCLElBQUksQ0FBQ04sS0FBSyxDQUFDTSxPQUFPO0lBQ3RCO0lBOURBVSxZQUFZM0IsSUFBSSxFQUFFNEIsSUFBSSxDQUFFO1FBQ3BCLEtBQUs7UUFDTCxJQUFJLENBQUNiLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNVLFNBQVMsR0FBRztRQUNqQnhCLGdEQUFVQSxDQUFDRDtRQUNYLE1BQU02QixNQUFNdEIsa0RBQU9BLENBQUNxQjtRQUNwQixJQUFJLENBQUNqQixLQUFLLEdBQUdYLEtBQUt1QixNQUFNO1FBQ3hCLElBQUksT0FBTyxJQUFJLENBQUNaLEtBQUssQ0FBQ0YsTUFBTSxLQUFLLFlBQzdCLE1BQU0sSUFBSXFCLE1BQU07UUFDcEIsSUFBSSxDQUFDSixRQUFRLEdBQUcsSUFBSSxDQUFDZixLQUFLLENBQUNlLFFBQVE7UUFDbkMsSUFBSSxDQUFDWixTQUFTLEdBQUcsSUFBSSxDQUFDSCxLQUFLLENBQUNHLFNBQVM7UUFDckMsTUFBTVksV0FBVyxJQUFJLENBQUNBLFFBQVE7UUFDOUIsTUFBTUssTUFBTSxJQUFJWixXQUFXTztRQUMzQix3Q0FBd0M7UUFDeENLLElBQUlDLEdBQUcsQ0FBQ0gsSUFBSUksTUFBTSxHQUFHUCxXQUFXMUIsS0FBS3VCLE1BQU0sR0FBR2QsTUFBTSxDQUFDb0IsS0FBS1gsTUFBTSxLQUFLVztRQUNyRSxJQUFLLElBQUlLLElBQUksR0FBR0EsSUFBSUgsSUFBSUUsTUFBTSxFQUFFQyxJQUM1QkgsR0FBRyxDQUFDRyxFQUFFLElBQUk7UUFDZCxJQUFJLENBQUN2QixLQUFLLENBQUNGLE1BQU0sQ0FBQ3NCO1FBQ2xCLG1IQUFtSDtRQUNuSCxJQUFJLENBQUNmLEtBQUssR0FBR2hCLEtBQUt1QixNQUFNO1FBQ3hCLHVDQUF1QztRQUN2QyxJQUFLLElBQUlXLElBQUksR0FBR0EsSUFBSUgsSUFBSUUsTUFBTSxFQUFFQyxJQUM1QkgsR0FBRyxDQUFDRyxFQUFFLElBQUksT0FBTztRQUNyQixJQUFJLENBQUNsQixLQUFLLENBQUNQLE1BQU0sQ0FBQ3NCO1FBQ2xCQSxJQUFJSSxJQUFJLENBQUM7SUFDYjtBQXNDSjtBQUNBOzs7OztDQUtDLEdBQ00sTUFBTUMsT0FBTyxDQUFDcEMsTUFBTTZCLEtBQUtRLFVBQVksSUFBSTdCLEtBQUtSLE1BQU02QixLQUFLcEIsTUFBTSxDQUFDNEIsU0FBU25CLE1BQU0sR0FBRztBQUN6RmtCLEtBQUtiLE1BQU0sR0FBRyxDQUFDdkIsTUFBTTZCLE1BQVEsSUFBSXJCLEtBQUtSLE1BQU02QixNQUM1QyxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9obWFjLmpzPzdkNTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzaCBhcyBhc3NlcnRIYXNoLCBieXRlcyBhcyBhc3NlcnRCeXRlcywgZXhpc3RzIGFzIGFzc2VydEV4aXN0cyB9IGZyb20gJy4vX2Fzc2VydC5qcyc7XG5pbXBvcnQgeyBIYXNoLCB0b0J5dGVzIH0gZnJvbSAnLi91dGlscy5qcyc7XG4vLyBITUFDIChSRkMgMjEwNClcbmV4cG9ydCBjbGFzcyBITUFDIGV4dGVuZHMgSGFzaCB7XG4gICAgY29uc3RydWN0b3IoaGFzaCwgX2tleSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIGFzc2VydEhhc2goaGFzaCk7XG4gICAgICAgIGNvbnN0IGtleSA9IHRvQnl0ZXMoX2tleSk7XG4gICAgICAgIHRoaXMuaUhhc2ggPSBoYXNoLmNyZWF0ZSgpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuaUhhc2gudXBkYXRlICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBpbnN0YW5jZSBvZiBjbGFzcyB3aGljaCBleHRlbmRzIHV0aWxzLkhhc2gnKTtcbiAgICAgICAgdGhpcy5ibG9ja0xlbiA9IHRoaXMuaUhhc2guYmxvY2tMZW47XG4gICAgICAgIHRoaXMub3V0cHV0TGVuID0gdGhpcy5pSGFzaC5vdXRwdXRMZW47XG4gICAgICAgIGNvbnN0IGJsb2NrTGVuID0gdGhpcy5ibG9ja0xlbjtcbiAgICAgICAgY29uc3QgcGFkID0gbmV3IFVpbnQ4QXJyYXkoYmxvY2tMZW4pO1xuICAgICAgICAvLyBibG9ja0xlbiBjYW4gYmUgYmlnZ2VyIHRoYW4gb3V0cHV0TGVuXG4gICAgICAgIHBhZC5zZXQoa2V5Lmxlbmd0aCA+IGJsb2NrTGVuID8gaGFzaC5jcmVhdGUoKS51cGRhdGUoa2V5KS5kaWdlc3QoKSA6IGtleSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFkLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgcGFkW2ldIF49IDB4MzY7XG4gICAgICAgIHRoaXMuaUhhc2gudXBkYXRlKHBhZCk7XG4gICAgICAgIC8vIEJ5IGRvaW5nIHVwZGF0ZSAocHJvY2Vzc2luZyBvZiBmaXJzdCBibG9jaykgb2Ygb3V0ZXIgaGFzaCBoZXJlIHdlIGNhbiByZS11c2UgaXQgYmV0d2VlbiBtdWx0aXBsZSBjYWxscyB2aWEgY2xvbmVcbiAgICAgICAgdGhpcy5vSGFzaCA9IGhhc2guY3JlYXRlKCk7XG4gICAgICAgIC8vIFVuZG8gaW50ZXJuYWwgWE9SICYmIGFwcGx5IG91dGVyIFhPUlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHBhZFtpXSBePSAweDM2IF4gMHg1YztcbiAgICAgICAgdGhpcy5vSGFzaC51cGRhdGUocGFkKTtcbiAgICAgICAgcGFkLmZpbGwoMCk7XG4gICAgfVxuICAgIHVwZGF0ZShidWYpIHtcbiAgICAgICAgYXNzZXJ0RXhpc3RzKHRoaXMpO1xuICAgICAgICB0aGlzLmlIYXNoLnVwZGF0ZShidWYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGlnZXN0SW50byhvdXQpIHtcbiAgICAgICAgYXNzZXJ0RXhpc3RzKHRoaXMpO1xuICAgICAgICBhc3NlcnRCeXRlcyhvdXQsIHRoaXMub3V0cHV0TGVuKTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaUhhc2guZGlnZXN0SW50byhvdXQpO1xuICAgICAgICB0aGlzLm9IYXNoLnVwZGF0ZShvdXQpO1xuICAgICAgICB0aGlzLm9IYXNoLmRpZ2VzdEludG8ob3V0KTtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgfVxuICAgIGRpZ2VzdCgpIHtcbiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5vSGFzaC5vdXRwdXRMZW4pO1xuICAgICAgICB0aGlzLmRpZ2VzdEludG8ob3V0KTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgX2Nsb25lSW50byh0bykge1xuICAgICAgICAvLyBDcmVhdGUgbmV3IGluc3RhbmNlIHdpdGhvdXQgY2FsbGluZyBjb25zdHJ1Y3RvciBzaW5jZSBrZXkgYWxyZWFkeSBpbiBzdGF0ZSBhbmQgd2UgZG9uJ3Qga25vdyBpdC5cbiAgICAgICAgdG8gfHwgKHRvID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyksIHt9KSk7XG4gICAgICAgIGNvbnN0IHsgb0hhc2gsIGlIYXNoLCBmaW5pc2hlZCwgZGVzdHJveWVkLCBibG9ja0xlbiwgb3V0cHV0TGVuIH0gPSB0aGlzO1xuICAgICAgICB0byA9IHRvO1xuICAgICAgICB0by5maW5pc2hlZCA9IGZpbmlzaGVkO1xuICAgICAgICB0by5kZXN0cm95ZWQgPSBkZXN0cm95ZWQ7XG4gICAgICAgIHRvLmJsb2NrTGVuID0gYmxvY2tMZW47XG4gICAgICAgIHRvLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdG8ub0hhc2ggPSBvSGFzaC5fY2xvbmVJbnRvKHRvLm9IYXNoKTtcbiAgICAgICAgdG8uaUhhc2ggPSBpSGFzaC5fY2xvbmVJbnRvKHRvLmlIYXNoKTtcbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgIHRoaXMub0hhc2guZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmlIYXNoLmRlc3Ryb3koKTtcbiAgICB9XG59XG4vKipcbiAqIEhNQUM6IFJGQzIxMDQgbWVzc2FnZSBhdXRoZW50aWNhdGlvbiBjb2RlLlxuICogQHBhcmFtIGhhc2ggLSBmdW5jdGlvbiB0aGF0IHdvdWxkIGJlIHVzZWQgZS5nLiBzaGEyNTZcbiAqIEBwYXJhbSBrZXkgLSBtZXNzYWdlIGtleVxuICogQHBhcmFtIG1lc3NhZ2UgLSBtZXNzYWdlIGRhdGFcbiAqL1xuZXhwb3J0IGNvbnN0IGhtYWMgPSAoaGFzaCwga2V5LCBtZXNzYWdlKSA9PiBuZXcgSE1BQyhoYXNoLCBrZXkpLnVwZGF0ZShtZXNzYWdlKS5kaWdlc3QoKTtcbmhtYWMuY3JlYXRlID0gKGhhc2gsIGtleSkgPT4gbmV3IEhNQUMoaGFzaCwga2V5KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhtYWMuanMubWFwIl0sIm5hbWVzIjpbImhhc2giLCJhc3NlcnRIYXNoIiwiYnl0ZXMiLCJhc3NlcnRCeXRlcyIsImV4aXN0cyIsImFzc2VydEV4aXN0cyIsIkhhc2giLCJ0b0J5dGVzIiwiSE1BQyIsInVwZGF0ZSIsImJ1ZiIsImlIYXNoIiwiZGlnZXN0SW50byIsIm91dCIsIm91dHB1dExlbiIsImZpbmlzaGVkIiwib0hhc2giLCJkZXN0cm95IiwiZGlnZXN0IiwiVWludDhBcnJheSIsIl9jbG9uZUludG8iLCJ0byIsIk9iamVjdCIsImNyZWF0ZSIsImdldFByb3RvdHlwZU9mIiwiZGVzdHJveWVkIiwiYmxvY2tMZW4iLCJjb25zdHJ1Y3RvciIsIl9rZXkiLCJrZXkiLCJFcnJvciIsInBhZCIsInNldCIsImxlbmd0aCIsImkiLCJmaWxsIiwiaG1hYyIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/hashes/esm/hmac.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/hashes/esm/pbkdf2.js":
/*!***************************************************!*\
  !*** ../node_modules/@noble/hashes/esm/pbkdf2.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pbkdf2: function() { return /* binding */ pbkdf2; },\n/* harmony export */   pbkdf2Async: function() { return /* binding */ pbkdf2Async; }\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _hmac_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hmac.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.hash)(hash);\n    const opts = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.checkOpts)({\n        dkLen: 32,\n        asyncTick: 10\n    }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.number)(c);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.number)(dkLen);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.number)(asyncTick);\n    if (c < 1) throw new Error(\"PBKDF2: iterations (c) should be >= 1\");\n    const password = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(_password);\n    const salt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = _hmac_js__WEBPACK_IMPORTED_MODULE_2__.hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return {\n        c,\n        dkLen,\n        asyncTick,\n        DK,\n        PRF,\n        PRFSalt\n    };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW) prfW.destroy();\n    u.fill(0);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */ function pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for(let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen){\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for(let ui = 1; ui < c; ui++){\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for(let i = 0; i < Ti.length; i++)Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nasync function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for(let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen){\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.asyncLoop)(c - 1, asyncTick, ()=>{\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for(let i = 0; i < Ti.length; i++)Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n} //# sourceMappingURL=pbkdf2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/hashes/esm/pbkdf2.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/hashes/esm/ripemd160.js":
/*!******************************************************!*\
  !*** ../node_modules/@noble/hashes/esm/ripemd160.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RIPEMD160: function() { return /* binding */ RIPEMD160; },\n/* harmony export */   ripemd160: function() { return /* binding */ ripemd160; }\n/* harmony export */ });\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_sha2.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/_sha2.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/utils.js\");\n\n\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = /* @__PURE__ */ new Uint8Array([\n    7,\n    4,\n    13,\n    1,\n    10,\n    6,\n    15,\n    3,\n    12,\n    0,\n    9,\n    5,\n    2,\n    14,\n    11,\n    8\n]);\nconst Id = /* @__PURE__ */ Uint8Array.from({\n    length: 16\n}, (_, i)=>i);\nconst Pi = /* @__PURE__ */ Id.map(_c = (i)=>(9 * i + 5) % 16);\n_c1 = Pi;\nlet idxL = [\n    Id\n];\nlet idxR = [\n    Pi\n];\nfor(let i = 0; i < 4; i++)for (let j of [\n    idxL,\n    idxR\n])j.push(j[i].map((k)=>Rho[k]));\nconst shifts = /* @__PURE__ */ [\n    [\n        11,\n        14,\n        15,\n        12,\n        5,\n        8,\n        7,\n        9,\n        11,\n        13,\n        14,\n        15,\n        6,\n        7,\n        9,\n        8\n    ],\n    [\n        12,\n        13,\n        11,\n        15,\n        6,\n        9,\n        9,\n        7,\n        12,\n        15,\n        11,\n        13,\n        7,\n        8,\n        7,\n        7\n    ],\n    [\n        13,\n        15,\n        14,\n        11,\n        7,\n        7,\n        6,\n        8,\n        13,\n        14,\n        13,\n        12,\n        5,\n        5,\n        6,\n        9\n    ],\n    [\n        14,\n        11,\n        12,\n        14,\n        8,\n        6,\n        5,\n        5,\n        15,\n        12,\n        15,\n        14,\n        9,\n        9,\n        8,\n        6\n    ],\n    [\n        15,\n        12,\n        13,\n        13,\n        9,\n        5,\n        8,\n        6,\n        14,\n        11,\n        12,\n        11,\n        8,\n        6,\n        5,\n        5\n    ]\n].map((i)=>new Uint8Array(i));\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i)=>idx.map((j)=>shifts[i][j]));\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i)=>idx.map((j)=>shifts[i][j]));\nconst Kl = /* @__PURE__ */ new Uint32Array([\n    0x00000000,\n    0x5a827999,\n    0x6ed9eba1,\n    0x8f1bbcdc,\n    0xa953fd4e\n]);\nconst Kr = /* @__PURE__ */ new Uint32Array([\n    0x50a28be6,\n    0x5c4dd124,\n    0x6d703ef3,\n    0x7a6d76e9,\n    0x00000000\n]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift)=>word << shift | word >>> 32 - shift;\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0) return x ^ y ^ z;\n    else if (group === 1) return x & y | ~x & z;\n    else if (group === 2) return (x | ~y) ^ z;\n    else if (group === 3) return x & z | y & ~z;\n    else return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = /* @__PURE__ */ new Uint32Array(16);\nclass RIPEMD160 extends _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA2 {\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [\n            h0,\n            h1,\n            h2,\n            h3,\n            h4\n        ];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for(let i = 0; i < 16; i++, offset += 4)BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for(let group = 0; group < 5; group++){\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for(let i = 0; i < 16; i++){\n                const tl = rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for(let i = 0; i < 16; i++){\n                const tr = rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n    constructor(){\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */ const ripemd160 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(()=>new RIPEMD160()); //# sourceMappingURL=ripemd160.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"Pi$Id.map\");\n$RefreshReg$(_c1, \"Pi\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/hashes/esm/ripemd160.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/hashes/esm/scrypt.js":
/*!***************************************************!*\
  !*** ../node_modules/@noble/hashes/esm/scrypt.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scrypt: function() { return /* binding */ scrypt; },\n/* harmony export */   scryptAsync: function() { return /* binding */ scryptAsync; }\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _sha256_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sha256.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _pbkdf2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pbkdf2.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/pbkdf2.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n\n// RFC 7914 Scrypt KDF\n// Left rotate for uint32\nconst rotl = (a, b)=>a << b | a >>> 32 - b;\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\n    // Based on https://cr.yp.to/salsa20.html\n    // Xor blocks\n    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n    // Save state to temporary variables (salsa)\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n    // Main loop (salsa)\n    for(let i = 0; i < 8; i += 2){\n        x04 ^= rotl(x00 + x12 | 0, 7);\n        x08 ^= rotl(x04 + x00 | 0, 9);\n        x12 ^= rotl(x08 + x04 | 0, 13);\n        x00 ^= rotl(x12 + x08 | 0, 18);\n        x09 ^= rotl(x05 + x01 | 0, 7);\n        x13 ^= rotl(x09 + x05 | 0, 9);\n        x01 ^= rotl(x13 + x09 | 0, 13);\n        x05 ^= rotl(x01 + x13 | 0, 18);\n        x14 ^= rotl(x10 + x06 | 0, 7);\n        x02 ^= rotl(x14 + x10 | 0, 9);\n        x06 ^= rotl(x02 + x14 | 0, 13);\n        x10 ^= rotl(x06 + x02 | 0, 18);\n        x03 ^= rotl(x15 + x11 | 0, 7);\n        x07 ^= rotl(x03 + x15 | 0, 9);\n        x11 ^= rotl(x07 + x03 | 0, 13);\n        x15 ^= rotl(x11 + x07 | 0, 18);\n        x01 ^= rotl(x00 + x03 | 0, 7);\n        x02 ^= rotl(x01 + x00 | 0, 9);\n        x03 ^= rotl(x02 + x01 | 0, 13);\n        x00 ^= rotl(x03 + x02 | 0, 18);\n        x06 ^= rotl(x05 + x04 | 0, 7);\n        x07 ^= rotl(x06 + x05 | 0, 9);\n        x04 ^= rotl(x07 + x06 | 0, 13);\n        x05 ^= rotl(x04 + x07 | 0, 18);\n        x11 ^= rotl(x10 + x09 | 0, 7);\n        x08 ^= rotl(x11 + x10 | 0, 9);\n        x09 ^= rotl(x08 + x11 | 0, 13);\n        x10 ^= rotl(x09 + x08 | 0, 18);\n        x12 ^= rotl(x15 + x14 | 0, 7);\n        x13 ^= rotl(x12 + x15 | 0, 9);\n        x14 ^= rotl(x13 + x12 | 0, 13);\n        x15 ^= rotl(x14 + x13 | 0, 18);\n    }\n    // Write output (salsa)\n    out[oi++] = y00 + x00 | 0;\n    out[oi++] = y01 + x01 | 0;\n    out[oi++] = y02 + x02 | 0;\n    out[oi++] = y03 + x03 | 0;\n    out[oi++] = y04 + x04 | 0;\n    out[oi++] = y05 + x05 | 0;\n    out[oi++] = y06 + x06 | 0;\n    out[oi++] = y07 + x07 | 0;\n    out[oi++] = y08 + x08 | 0;\n    out[oi++] = y09 + x09 | 0;\n    out[oi++] = y10 + x10 | 0;\n    out[oi++] = y11 + x11 | 0;\n    out[oi++] = y12 + x12 | 0;\n    out[oi++] = y13 + x13 | 0;\n    out[oi++] = y14 + x14 | 0;\n    out[oi++] = y15 + x15 | 0;\n}\n_c = XorAndSalsa;\nfunction BlockMix(input, ii, out, oi, r) {\n    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n    let head = oi + 0;\n    let tail = oi + 16 * r;\n    for(let i = 0; i < 16; i++)out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n    for(let i = 0; i < r; i++, head += 16, ii += 16){\n        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n        if (i > 0) tail += 16; // First iteration overwrites tmp value in tail\n        XorAndSalsa(out, head, input, ii += 16, out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n    }\n}\n_c1 = BlockMix;\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password, salt, _opts) {\n    // Maxmem - 1GB+1KB by default\n    const opts = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.checkOpts)({\n        dkLen: 32,\n        asyncTick: 10,\n        maxmem: 1024 ** 3 + 1024\n    }, _opts);\n    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(N);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(r);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(p);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(dkLen);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(asyncTick);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(maxmem);\n    if (onProgress !== undefined && typeof onProgress !== \"function\") throw new Error(\"progressCb should be function\");\n    const blockSize = 128 * r;\n    const blockSize32 = blockSize / 4;\n    if (N <= 1 || (N & N - 1) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n        // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n        // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n        throw new Error(\"Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32\");\n    }\n    if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {\n        throw new Error(\"Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)\");\n    }\n    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n        throw new Error(\"Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32\");\n    }\n    const memUsed = blockSize * (N + p);\n    if (memUsed > maxmem) {\n        throw new Error(\"Scrypt: parameters too large, \".concat(memUsed, \" (128 * r * (N + p)) > \").concat(maxmem, \" (maxmem)\"));\n    }\n    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n    // Since it has only one iteration there is no reason to use async variant\n    const B = (0,_pbkdf2_js__WEBPACK_IMPORTED_MODULE_2__.pbkdf2)(_sha256_js__WEBPACK_IMPORTED_MODULE_3__.sha256, password, salt, {\n        c: 1,\n        dkLen: blockSize * p\n    });\n    const B32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(B);\n    // Re-used between parallel iterations. Array(iterations) of B\n    const V = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(new Uint8Array(blockSize * N));\n    const tmp = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(new Uint8Array(blockSize));\n    let blockMixCb = ()=>{};\n    if (onProgress) {\n        const totalBlockMix = 2 * N * p;\n        // Invoke callback if progress changes from 10.01 to 10.02\n        // Allows to draw smooth progress bar on up to 8K screen\n        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n        let blockMixCnt = 0;\n        blockMixCb = ()=>{\n            blockMixCnt++;\n            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix)) onProgress(blockMixCnt / totalBlockMix);\n        };\n    }\n    return {\n        N,\n        r,\n        p,\n        dkLen,\n        blockSize32,\n        V,\n        B32,\n        B,\n        tmp,\n        blockMixCb,\n        asyncTick\n    };\n}\nfunction scryptOutput(password, dkLen, B, V, tmp) {\n    const res = (0,_pbkdf2_js__WEBPACK_IMPORTED_MODULE_2__.pbkdf2)(_sha256_js__WEBPACK_IMPORTED_MODULE_3__.sha256, password, B, {\n        c: 1,\n        dkLen\n    });\n    B.fill(0);\n    V.fill(0);\n    tmp.fill(0);\n    return res;\n}\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */ function scrypt(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);\n    for(let pi = 0; pi < p; pi++){\n        const Pi = blockSize32 * pi;\n        for(let i = 0; i < blockSize32; i++)V[i] = B32[Pi + i]; // V[0] = B[i]\n        for(let i = 0, pos = 0; i < N - 1; i++){\n            BlockMix(V, pos, V, pos += blockSize32, r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        }\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        for(let i = 0; i < N; i++){\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for(let k = 0; k < blockSize32; k++)tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        }\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\n/**\n * Scrypt KDF from RFC 7914.\n */ async function scryptAsync(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);\n    for(let pi = 0; pi < p; pi++){\n        const Pi = blockSize32 * pi;\n        for(let i = 0; i < blockSize32; i++)V[i] = B32[Pi + i]; // V[0] = B[i]\n        let pos = 0;\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.asyncLoop)(N - 1, asyncTick, ()=>{\n            BlockMix(V, pos, V, pos += blockSize32, r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        });\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.asyncLoop)(N, asyncTick, ()=>{\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for(let k = 0; k < blockSize32; k++)tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        });\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n} //# sourceMappingURL=scrypt.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"XorAndSalsa\");\n$RefreshReg$(_c1, \"BlockMix\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/hashes/esm/scrypt.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/hashes/esm/sha256.js":
/*!***************************************************!*\
  !*** ../node_modules/@noble/hashes/esm/sha256.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha224: function() { return /* binding */ sha224; },\n/* harmony export */   sha256: function() { return /* binding */ sha256; }\n/* harmony export */ });\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_sha2.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/_sha2.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/utils.js\");\n\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Choice: a ? b : c\nconst Chi = (a, b, c)=>a & b ^ ~a & c;\n_c = Chi;\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c)=>a & b ^ a & c ^ b & c;\n_c1 = Maj;\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98,\n    0x71374491,\n    0xb5c0fbcf,\n    0xe9b5dba5,\n    0x3956c25b,\n    0x59f111f1,\n    0x923f82a4,\n    0xab1c5ed5,\n    0xd807aa98,\n    0x12835b01,\n    0x243185be,\n    0x550c7dc3,\n    0x72be5d74,\n    0x80deb1fe,\n    0x9bdc06a7,\n    0xc19bf174,\n    0xe49b69c1,\n    0xefbe4786,\n    0x0fc19dc6,\n    0x240ca1cc,\n    0x2de92c6f,\n    0x4a7484aa,\n    0x5cb0a9dc,\n    0x76f988da,\n    0x983e5152,\n    0xa831c66d,\n    0xb00327c8,\n    0xbf597fc7,\n    0xc6e00bf3,\n    0xd5a79147,\n    0x06ca6351,\n    0x14292967,\n    0x27b70a85,\n    0x2e1b2138,\n    0x4d2c6dfc,\n    0x53380d13,\n    0x650a7354,\n    0x766a0abb,\n    0x81c2c92e,\n    0x92722c85,\n    0xa2bfe8a1,\n    0xa81a664b,\n    0xc24b8b70,\n    0xc76c51a3,\n    0xd192e819,\n    0xd6990624,\n    0xf40e3585,\n    0x106aa070,\n    0x19a4c116,\n    0x1e376c08,\n    0x2748774c,\n    0x34b0bcb5,\n    0x391c0cb3,\n    0x4ed8aa4a,\n    0x5b9cca4f,\n    0x682e6ff3,\n    0x748f82ee,\n    0x78a5636f,\n    0x84c87814,\n    0x8cc70208,\n    0x90befffa,\n    0xa4506ceb,\n    0xbef9a3f7,\n    0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667,\n    0xbb67ae85,\n    0x3c6ef372,\n    0xa54ff53a,\n    0x510e527f,\n    0x9b05688c,\n    0x1f83d9ab,\n    0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA2 {\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [\n            A,\n            B,\n            C,\n            D,\n            E,\n            F,\n            G,\n            H\n        ];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for(let i = 0; i < 16; i++, offset += 4)SHA256_W[i] = view.getUint32(offset, false);\n        for(let i = 16; i < 64; i++){\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ W15 >>> 3;\n            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ W2 >>> 10;\n            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for(let i = 0; i < 64; i++){\n            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);\n            const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;\n            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);\n            const T2 = sigma0 + Maj(A, B, C) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = D + T1 | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = T1 + T2 | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = A + this.A | 0;\n        B = B + this.B | 0;\n        C = C + this.C | 0;\n        D = D + this.D | 0;\n        E = E + this.E | 0;\n        F = F + this.F | 0;\n        G = G + this.G | 0;\n        H = H + this.H | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n    constructor(){\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor(){\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */ const sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(()=>new SHA256());\nconst sha224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(()=>new SHA224()); //# sourceMappingURL=sha256.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"Chi\");\n$RefreshReg$(_c1, \"Maj\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/hashes/esm/sha256.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/hashes/esm/sha3.js":
/*!*************************************************!*\
  !*** ../node_modules/@noble/hashes/esm/sha3.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Keccak: function() { return /* binding */ Keccak; },\n/* harmony export */   keccakP: function() { return /* binding */ keccakP; },\n/* harmony export */   keccak_224: function() { return /* binding */ keccak_224; },\n/* harmony export */   keccak_256: function() { return /* binding */ keccak_256; },\n/* harmony export */   keccak_384: function() { return /* binding */ keccak_384; },\n/* harmony export */   keccak_512: function() { return /* binding */ keccak_512; },\n/* harmony export */   sha3_224: function() { return /* binding */ sha3_224; },\n/* harmony export */   sha3_256: function() { return /* binding */ sha3_256; },\n/* harmony export */   sha3_384: function() { return /* binding */ sha3_384; },\n/* harmony export */   sha3_512: function() { return /* binding */ sha3_512; },\n/* harmony export */   shake128: function() { return /* binding */ shake128; },\n/* harmony export */   shake256: function() { return /* binding */ shake256; }\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_assert.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_u64.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [\n    [],\n    [],\n    []\n];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor(let round = 0, R = _1n, x = 1, y = 0; round < 24; round++){\n    // Pi\n    [x, y] = [\n        y,\n        (2 * x + 3 * y) % 5\n    ];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n    // Iota\n    let t = _0n;\n    for(let j = 0; j < 7; j++){\n        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n        if (R & _2n) t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.split)(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s)=>s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBH)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSH)(h, l, s);\nconst rotlL = (h, l, s)=>s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBL)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSL)(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s) {\n    let rounds = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 24;\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for(let round = 24 - rounds; round < 24; round++){\n        // Theta θ\n        for(let x = 0; x < 10; x++)B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for(let x = 0; x < 10; x += 2){\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for(let y = 0; y < 50; y += 10){\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for(let t = 0; t < 24; t++){\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for(let y = 0; y < 50; y += 10){\n            for(let x = 0; x < 10; x++)B[x] = s[y + x];\n            for(let x = 0; x < 10; x++)s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nclass Keccak extends _utils_js__WEBPACK_IMPORTED_MODULE_1__.Hash {\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.exists)(this);\n        const { blockLen, state } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(data);\n        const len = data.length;\n        for(let pos = 0; pos < len;){\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for(let i = 0; i < take; i++)state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen) this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished) return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.exists)(this, false);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.bytes)(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for(let pos = 0, len = out.length; pos < len;){\n            if (this.posOut >= blockLen) this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF) throw new Error(\"XOF is not possible for this instance\");\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.number)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.output)(out, this);\n        if (this.finished) throw new Error(\"digest() was already called\");\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24){\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.number)(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200) throw new Error(\"Sha3 supports only keccak-f1600 function\");\n        this.state = new Uint8Array(200);\n        this.state32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(this.state);\n    }\n}\nconst gen = (suffix, blockLen, outputLen)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(()=>new Keccak(blockLen, suffix, outputLen));\nconst sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */ const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nconst sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nconst sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nconst keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */ const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nconst keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nconst keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapXOFConstructorWithOpts)(function() {\n        let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        return new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true);\n    });\nconst shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nconst shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8); //# sourceMappingURL=sha3.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/hashes/esm/sha3.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/hashes/esm/sha512.js":
/*!***************************************************!*\
  !*** ../node_modules/@noble/hashes/esm/sha512.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA512: function() { return /* binding */ SHA512; },\n/* harmony export */   sha384: function() { return /* binding */ sha384; },\n/* harmony export */   sha512: function() { return /* binding */ sha512; },\n/* harmony export */   sha512_224: function() { return /* binding */ sha512_224; },\n/* harmony export */   sha512_256: function() { return /* binding */ sha512_256; }\n/* harmony export */ });\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_sha2.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/_sha2.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_u64.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (()=>_u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].split([\n        \"0x428a2f98d728ae22\",\n        \"0x7137449123ef65cd\",\n        \"0xb5c0fbcfec4d3b2f\",\n        \"0xe9b5dba58189dbbc\",\n        \"0x3956c25bf348b538\",\n        \"0x59f111f1b605d019\",\n        \"0x923f82a4af194f9b\",\n        \"0xab1c5ed5da6d8118\",\n        \"0xd807aa98a3030242\",\n        \"0x12835b0145706fbe\",\n        \"0x243185be4ee4b28c\",\n        \"0x550c7dc3d5ffb4e2\",\n        \"0x72be5d74f27b896f\",\n        \"0x80deb1fe3b1696b1\",\n        \"0x9bdc06a725c71235\",\n        \"0xc19bf174cf692694\",\n        \"0xe49b69c19ef14ad2\",\n        \"0xefbe4786384f25e3\",\n        \"0x0fc19dc68b8cd5b5\",\n        \"0x240ca1cc77ac9c65\",\n        \"0x2de92c6f592b0275\",\n        \"0x4a7484aa6ea6e483\",\n        \"0x5cb0a9dcbd41fbd4\",\n        \"0x76f988da831153b5\",\n        \"0x983e5152ee66dfab\",\n        \"0xa831c66d2db43210\",\n        \"0xb00327c898fb213f\",\n        \"0xbf597fc7beef0ee4\",\n        \"0xc6e00bf33da88fc2\",\n        \"0xd5a79147930aa725\",\n        \"0x06ca6351e003826f\",\n        \"0x142929670a0e6e70\",\n        \"0x27b70a8546d22ffc\",\n        \"0x2e1b21385c26c926\",\n        \"0x4d2c6dfc5ac42aed\",\n        \"0x53380d139d95b3df\",\n        \"0x650a73548baf63de\",\n        \"0x766a0abb3c77b2a8\",\n        \"0x81c2c92e47edaee6\",\n        \"0x92722c851482353b\",\n        \"0xa2bfe8a14cf10364\",\n        \"0xa81a664bbc423001\",\n        \"0xc24b8b70d0f89791\",\n        \"0xc76c51a30654be30\",\n        \"0xd192e819d6ef5218\",\n        \"0xd69906245565a910\",\n        \"0xf40e35855771202a\",\n        \"0x106aa07032bbd1b8\",\n        \"0x19a4c116b8d2d0c8\",\n        \"0x1e376c085141ab53\",\n        \"0x2748774cdf8eeb99\",\n        \"0x34b0bcb5e19b48a8\",\n        \"0x391c0cb3c5c95a63\",\n        \"0x4ed8aa4ae3418acb\",\n        \"0x5b9cca4f7763e373\",\n        \"0x682e6ff3d6b2b8a3\",\n        \"0x748f82ee5defb2fc\",\n        \"0x78a5636f43172f60\",\n        \"0x84c87814a1f0ab72\",\n        \"0x8cc702081a6439ec\",\n        \"0x90befffa23631e28\",\n        \"0xa4506cebde82bde9\",\n        \"0xbef9a3f7b2c67915\",\n        \"0xc67178f2e372532b\",\n        \"0xca273eceea26619c\",\n        \"0xd186b8c721c0c207\",\n        \"0xeada7dd6cde0eb1e\",\n        \"0xf57d4f7fee6ed178\",\n        \"0x06f067aa72176fba\",\n        \"0x0a637dc5a2c898a6\",\n        \"0x113f9804bef90dae\",\n        \"0x1b710b35131c471b\",\n        \"0x28db77f523047d84\",\n        \"0x32caab7b40c72493\",\n        \"0x3c9ebe0a15c9bebc\",\n        \"0x431d67c49c100d4c\",\n        \"0x4cc5d4becb3e42b6\",\n        \"0x597f299cfc657e2a\",\n        \"0x5fcb6fab3ad6faec\",\n        \"0x6c44198c4a475817\"\n    ].map((n)=>BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nclass SHA512 extends _sha2_js__WEBPACK_IMPORTED_MODULE_1__.SHA2 {\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [\n            Ah,\n            Al,\n            Bh,\n            Bl,\n            Ch,\n            Cl,\n            Dh,\n            Dl,\n            Eh,\n            El,\n            Fh,\n            Fl,\n            Gh,\n            Gl,\n            Hh,\n            Hl\n        ];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for(let i = 0; i < 16; i++, offset += 4){\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32(offset += 4);\n        }\n        for(let i = 16; i < 80; i++){\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(W15h, W15l, 8) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSH(W15h, W15l, 7);\n            const s0l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(W15h, W15l, 8) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(W2h, W2l, 61) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSH(W2h, W2l, 6);\n            const s1l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(W2h, W2l, 61) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for(let i = 0; i < 80; i++){\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(Eh, El, 18) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(Eh, El, 18) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = Eh & Fh ^ ~Eh & Gh;\n            const CHIl = El & Fl ^ ~El & Gl;\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(Ah, Al, 34) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(Ah, Al, 34) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(Ah, Al, 39);\n            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;\n            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n    constructor(){\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor(){\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor(){\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor(){\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nconst sha512 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(()=>new SHA512());\nconst sha512_224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(()=>new SHA512_224());\nconst sha512_256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(()=>new SHA512_256());\nconst sha384 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(()=>new SHA384()); //# sourceMappingURL=sha512.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/hashes/esm/sha512.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/@noble/hashes/esm/utils.js":
/*!**************************************************!*\
  !*** ../node_modules/@noble/hashes/esm/utils.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: function() { return /* binding */ Hash; },\n/* harmony export */   asyncLoop: function() { return /* binding */ asyncLoop; },\n/* harmony export */   bytesToHex: function() { return /* binding */ bytesToHex; },\n/* harmony export */   checkOpts: function() { return /* binding */ checkOpts; },\n/* harmony export */   concatBytes: function() { return /* binding */ concatBytes; },\n/* harmony export */   createView: function() { return /* binding */ createView; },\n/* harmony export */   hexToBytes: function() { return /* binding */ hexToBytes; },\n/* harmony export */   isLE: function() { return /* binding */ isLE; },\n/* harmony export */   nextTick: function() { return /* binding */ nextTick; },\n/* harmony export */   randomBytes: function() { return /* binding */ randomBytes; },\n/* harmony export */   rotr: function() { return /* binding */ rotr; },\n/* harmony export */   toBytes: function() { return /* binding */ toBytes; },\n/* harmony export */   u32: function() { return /* binding */ u32; },\n/* harmony export */   u8: function() { return /* binding */ u8; },\n/* harmony export */   utf8ToBytes: function() { return /* binding */ utf8ToBytes; },\n/* harmony export */   wrapConstructor: function() { return /* binding */ wrapConstructor; },\n/* harmony export */   wrapConstructorWithOpts: function() { return /* binding */ wrapConstructorWithOpts; },\n/* harmony export */   wrapXOFConstructorWithOpts: function() { return /* binding */ wrapXOFConstructorWithOpts; }\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/crypto.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\n\nconst u8a = (a)=>a instanceof Uint8Array;\n// Cast array to different type\nconst u8 = (arr)=>new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u32 = (arr)=>new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nconst createView = (arr)=>new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift)=>word << 32 - shift | word >>> shift;\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nconst isLE = new Uint8Array(new Uint32Array([\n    0x11223344\n]).buffer)[0] === 0x44;\nif (!isLE) throw new Error(\"Non little-endian hardware is not supported\");\nconst hexes = /* @__PURE__ */ Array.from({\n    length: 256\n}, (_, i)=>i.toString(16).padStart(2, \"0\"));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */ function bytesToHex(bytes) {\n    if (!u8a(bytes)) throw new Error(\"Uint8Array expected\");\n    // pre-caching improves the speed 6x\n    let hex = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */ function hexToBytes(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    const len = hex.length;\n    if (len % 2) throw new Error(\"padded hex string expected, got unpadded hex of length \" + len);\n    const array = new Uint8Array(len / 2);\n    for(let i = 0; i < array.length; i++){\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0) throw new Error(\"Invalid byte sequence\");\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async ()=>{};\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for(let i = 0; i < iters; i++){\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick) continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */ function utf8ToBytes(str) {\n    if (typeof str !== \"string\") throw new Error(\"utf8ToBytes expected string, got \".concat(typeof str));\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */ function toBytes(data) {\n    if (typeof data === \"string\") data = utf8ToBytes(data);\n    if (!u8a(data)) throw new Error(\"expected Uint8Array, got \".concat(typeof data));\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */ function concatBytes() {\n    for(var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++){\n        arrays[_key] = arguments[_key];\n    }\n    const r = new Uint8Array(arrays.reduce((sum, a)=>sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a)=>{\n        if (!u8a(a)) throw new Error(\"Uint8Array expected\");\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== \"[object Object]\") throw new Error(\"Options should be object or undefined\");\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg)=>hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = ()=>hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts)=>hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts)=>hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */ function randomBytes() {\n    let bytesLength = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 32;\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues === \"function\") {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error(\"crypto.getRandomValues must be defined\");\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@noble/hashes/esm/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/aes-js/lib.esm/aes.js":
/*!*********************************************!*\
  !*** ../node_modules/aes-js/lib.esm/aes.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AES: function() { return /* binding */ AES; }\n/* harmony export */ });\n/*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */ var __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _AES_key, _AES_Kd, _AES_Ke;\n// Number of rounds by keysize\nconst numberOfRounds = {\n    16: 10,\n    24: 12,\n    32: 14\n};\n// Round constant words\nconst rcon = [\n    0x01,\n    0x02,\n    0x04,\n    0x08,\n    0x10,\n    0x20,\n    0x40,\n    0x80,\n    0x1b,\n    0x36,\n    0x6c,\n    0xd8,\n    0xab,\n    0x4d,\n    0x9a,\n    0x2f,\n    0x5e,\n    0xbc,\n    0x63,\n    0xc6,\n    0x97,\n    0x35,\n    0x6a,\n    0xd4,\n    0xb3,\n    0x7d,\n    0xfa,\n    0xef,\n    0xc5,\n    0x91\n];\n// S-box and Inverse S-box (S is for Substitution)\nconst S = [\n    0x63,\n    0x7c,\n    0x77,\n    0x7b,\n    0xf2,\n    0x6b,\n    0x6f,\n    0xc5,\n    0x30,\n    0x01,\n    0x67,\n    0x2b,\n    0xfe,\n    0xd7,\n    0xab,\n    0x76,\n    0xca,\n    0x82,\n    0xc9,\n    0x7d,\n    0xfa,\n    0x59,\n    0x47,\n    0xf0,\n    0xad,\n    0xd4,\n    0xa2,\n    0xaf,\n    0x9c,\n    0xa4,\n    0x72,\n    0xc0,\n    0xb7,\n    0xfd,\n    0x93,\n    0x26,\n    0x36,\n    0x3f,\n    0xf7,\n    0xcc,\n    0x34,\n    0xa5,\n    0xe5,\n    0xf1,\n    0x71,\n    0xd8,\n    0x31,\n    0x15,\n    0x04,\n    0xc7,\n    0x23,\n    0xc3,\n    0x18,\n    0x96,\n    0x05,\n    0x9a,\n    0x07,\n    0x12,\n    0x80,\n    0xe2,\n    0xeb,\n    0x27,\n    0xb2,\n    0x75,\n    0x09,\n    0x83,\n    0x2c,\n    0x1a,\n    0x1b,\n    0x6e,\n    0x5a,\n    0xa0,\n    0x52,\n    0x3b,\n    0xd6,\n    0xb3,\n    0x29,\n    0xe3,\n    0x2f,\n    0x84,\n    0x53,\n    0xd1,\n    0x00,\n    0xed,\n    0x20,\n    0xfc,\n    0xb1,\n    0x5b,\n    0x6a,\n    0xcb,\n    0xbe,\n    0x39,\n    0x4a,\n    0x4c,\n    0x58,\n    0xcf,\n    0xd0,\n    0xef,\n    0xaa,\n    0xfb,\n    0x43,\n    0x4d,\n    0x33,\n    0x85,\n    0x45,\n    0xf9,\n    0x02,\n    0x7f,\n    0x50,\n    0x3c,\n    0x9f,\n    0xa8,\n    0x51,\n    0xa3,\n    0x40,\n    0x8f,\n    0x92,\n    0x9d,\n    0x38,\n    0xf5,\n    0xbc,\n    0xb6,\n    0xda,\n    0x21,\n    0x10,\n    0xff,\n    0xf3,\n    0xd2,\n    0xcd,\n    0x0c,\n    0x13,\n    0xec,\n    0x5f,\n    0x97,\n    0x44,\n    0x17,\n    0xc4,\n    0xa7,\n    0x7e,\n    0x3d,\n    0x64,\n    0x5d,\n    0x19,\n    0x73,\n    0x60,\n    0x81,\n    0x4f,\n    0xdc,\n    0x22,\n    0x2a,\n    0x90,\n    0x88,\n    0x46,\n    0xee,\n    0xb8,\n    0x14,\n    0xde,\n    0x5e,\n    0x0b,\n    0xdb,\n    0xe0,\n    0x32,\n    0x3a,\n    0x0a,\n    0x49,\n    0x06,\n    0x24,\n    0x5c,\n    0xc2,\n    0xd3,\n    0xac,\n    0x62,\n    0x91,\n    0x95,\n    0xe4,\n    0x79,\n    0xe7,\n    0xc8,\n    0x37,\n    0x6d,\n    0x8d,\n    0xd5,\n    0x4e,\n    0xa9,\n    0x6c,\n    0x56,\n    0xf4,\n    0xea,\n    0x65,\n    0x7a,\n    0xae,\n    0x08,\n    0xba,\n    0x78,\n    0x25,\n    0x2e,\n    0x1c,\n    0xa6,\n    0xb4,\n    0xc6,\n    0xe8,\n    0xdd,\n    0x74,\n    0x1f,\n    0x4b,\n    0xbd,\n    0x8b,\n    0x8a,\n    0x70,\n    0x3e,\n    0xb5,\n    0x66,\n    0x48,\n    0x03,\n    0xf6,\n    0x0e,\n    0x61,\n    0x35,\n    0x57,\n    0xb9,\n    0x86,\n    0xc1,\n    0x1d,\n    0x9e,\n    0xe1,\n    0xf8,\n    0x98,\n    0x11,\n    0x69,\n    0xd9,\n    0x8e,\n    0x94,\n    0x9b,\n    0x1e,\n    0x87,\n    0xe9,\n    0xce,\n    0x55,\n    0x28,\n    0xdf,\n    0x8c,\n    0xa1,\n    0x89,\n    0x0d,\n    0xbf,\n    0xe6,\n    0x42,\n    0x68,\n    0x41,\n    0x99,\n    0x2d,\n    0x0f,\n    0xb0,\n    0x54,\n    0xbb,\n    0x16\n];\nconst Si = [\n    0x52,\n    0x09,\n    0x6a,\n    0xd5,\n    0x30,\n    0x36,\n    0xa5,\n    0x38,\n    0xbf,\n    0x40,\n    0xa3,\n    0x9e,\n    0x81,\n    0xf3,\n    0xd7,\n    0xfb,\n    0x7c,\n    0xe3,\n    0x39,\n    0x82,\n    0x9b,\n    0x2f,\n    0xff,\n    0x87,\n    0x34,\n    0x8e,\n    0x43,\n    0x44,\n    0xc4,\n    0xde,\n    0xe9,\n    0xcb,\n    0x54,\n    0x7b,\n    0x94,\n    0x32,\n    0xa6,\n    0xc2,\n    0x23,\n    0x3d,\n    0xee,\n    0x4c,\n    0x95,\n    0x0b,\n    0x42,\n    0xfa,\n    0xc3,\n    0x4e,\n    0x08,\n    0x2e,\n    0xa1,\n    0x66,\n    0x28,\n    0xd9,\n    0x24,\n    0xb2,\n    0x76,\n    0x5b,\n    0xa2,\n    0x49,\n    0x6d,\n    0x8b,\n    0xd1,\n    0x25,\n    0x72,\n    0xf8,\n    0xf6,\n    0x64,\n    0x86,\n    0x68,\n    0x98,\n    0x16,\n    0xd4,\n    0xa4,\n    0x5c,\n    0xcc,\n    0x5d,\n    0x65,\n    0xb6,\n    0x92,\n    0x6c,\n    0x70,\n    0x48,\n    0x50,\n    0xfd,\n    0xed,\n    0xb9,\n    0xda,\n    0x5e,\n    0x15,\n    0x46,\n    0x57,\n    0xa7,\n    0x8d,\n    0x9d,\n    0x84,\n    0x90,\n    0xd8,\n    0xab,\n    0x00,\n    0x8c,\n    0xbc,\n    0xd3,\n    0x0a,\n    0xf7,\n    0xe4,\n    0x58,\n    0x05,\n    0xb8,\n    0xb3,\n    0x45,\n    0x06,\n    0xd0,\n    0x2c,\n    0x1e,\n    0x8f,\n    0xca,\n    0x3f,\n    0x0f,\n    0x02,\n    0xc1,\n    0xaf,\n    0xbd,\n    0x03,\n    0x01,\n    0x13,\n    0x8a,\n    0x6b,\n    0x3a,\n    0x91,\n    0x11,\n    0x41,\n    0x4f,\n    0x67,\n    0xdc,\n    0xea,\n    0x97,\n    0xf2,\n    0xcf,\n    0xce,\n    0xf0,\n    0xb4,\n    0xe6,\n    0x73,\n    0x96,\n    0xac,\n    0x74,\n    0x22,\n    0xe7,\n    0xad,\n    0x35,\n    0x85,\n    0xe2,\n    0xf9,\n    0x37,\n    0xe8,\n    0x1c,\n    0x75,\n    0xdf,\n    0x6e,\n    0x47,\n    0xf1,\n    0x1a,\n    0x71,\n    0x1d,\n    0x29,\n    0xc5,\n    0x89,\n    0x6f,\n    0xb7,\n    0x62,\n    0x0e,\n    0xaa,\n    0x18,\n    0xbe,\n    0x1b,\n    0xfc,\n    0x56,\n    0x3e,\n    0x4b,\n    0xc6,\n    0xd2,\n    0x79,\n    0x20,\n    0x9a,\n    0xdb,\n    0xc0,\n    0xfe,\n    0x78,\n    0xcd,\n    0x5a,\n    0xf4,\n    0x1f,\n    0xdd,\n    0xa8,\n    0x33,\n    0x88,\n    0x07,\n    0xc7,\n    0x31,\n    0xb1,\n    0x12,\n    0x10,\n    0x59,\n    0x27,\n    0x80,\n    0xec,\n    0x5f,\n    0x60,\n    0x51,\n    0x7f,\n    0xa9,\n    0x19,\n    0xb5,\n    0x4a,\n    0x0d,\n    0x2d,\n    0xe5,\n    0x7a,\n    0x9f,\n    0x93,\n    0xc9,\n    0x9c,\n    0xef,\n    0xa0,\n    0xe0,\n    0x3b,\n    0x4d,\n    0xae,\n    0x2a,\n    0xf5,\n    0xb0,\n    0xc8,\n    0xeb,\n    0xbb,\n    0x3c,\n    0x83,\n    0x53,\n    0x99,\n    0x61,\n    0x17,\n    0x2b,\n    0x04,\n    0x7e,\n    0xba,\n    0x77,\n    0xd6,\n    0x26,\n    0xe1,\n    0x69,\n    0x14,\n    0x63,\n    0x55,\n    0x21,\n    0x0c,\n    0x7d\n];\n// Transformations for encryption\nconst T1 = [\n    0xc66363a5,\n    0xf87c7c84,\n    0xee777799,\n    0xf67b7b8d,\n    0xfff2f20d,\n    0xd66b6bbd,\n    0xde6f6fb1,\n    0x91c5c554,\n    0x60303050,\n    0x02010103,\n    0xce6767a9,\n    0x562b2b7d,\n    0xe7fefe19,\n    0xb5d7d762,\n    0x4dababe6,\n    0xec76769a,\n    0x8fcaca45,\n    0x1f82829d,\n    0x89c9c940,\n    0xfa7d7d87,\n    0xeffafa15,\n    0xb25959eb,\n    0x8e4747c9,\n    0xfbf0f00b,\n    0x41adadec,\n    0xb3d4d467,\n    0x5fa2a2fd,\n    0x45afafea,\n    0x239c9cbf,\n    0x53a4a4f7,\n    0xe4727296,\n    0x9bc0c05b,\n    0x75b7b7c2,\n    0xe1fdfd1c,\n    0x3d9393ae,\n    0x4c26266a,\n    0x6c36365a,\n    0x7e3f3f41,\n    0xf5f7f702,\n    0x83cccc4f,\n    0x6834345c,\n    0x51a5a5f4,\n    0xd1e5e534,\n    0xf9f1f108,\n    0xe2717193,\n    0xabd8d873,\n    0x62313153,\n    0x2a15153f,\n    0x0804040c,\n    0x95c7c752,\n    0x46232365,\n    0x9dc3c35e,\n    0x30181828,\n    0x379696a1,\n    0x0a05050f,\n    0x2f9a9ab5,\n    0x0e070709,\n    0x24121236,\n    0x1b80809b,\n    0xdfe2e23d,\n    0xcdebeb26,\n    0x4e272769,\n    0x7fb2b2cd,\n    0xea75759f,\n    0x1209091b,\n    0x1d83839e,\n    0x582c2c74,\n    0x341a1a2e,\n    0x361b1b2d,\n    0xdc6e6eb2,\n    0xb45a5aee,\n    0x5ba0a0fb,\n    0xa45252f6,\n    0x763b3b4d,\n    0xb7d6d661,\n    0x7db3b3ce,\n    0x5229297b,\n    0xdde3e33e,\n    0x5e2f2f71,\n    0x13848497,\n    0xa65353f5,\n    0xb9d1d168,\n    0x00000000,\n    0xc1eded2c,\n    0x40202060,\n    0xe3fcfc1f,\n    0x79b1b1c8,\n    0xb65b5bed,\n    0xd46a6abe,\n    0x8dcbcb46,\n    0x67bebed9,\n    0x7239394b,\n    0x944a4ade,\n    0x984c4cd4,\n    0xb05858e8,\n    0x85cfcf4a,\n    0xbbd0d06b,\n    0xc5efef2a,\n    0x4faaaae5,\n    0xedfbfb16,\n    0x864343c5,\n    0x9a4d4dd7,\n    0x66333355,\n    0x11858594,\n    0x8a4545cf,\n    0xe9f9f910,\n    0x04020206,\n    0xfe7f7f81,\n    0xa05050f0,\n    0x783c3c44,\n    0x259f9fba,\n    0x4ba8a8e3,\n    0xa25151f3,\n    0x5da3a3fe,\n    0x804040c0,\n    0x058f8f8a,\n    0x3f9292ad,\n    0x219d9dbc,\n    0x70383848,\n    0xf1f5f504,\n    0x63bcbcdf,\n    0x77b6b6c1,\n    0xafdada75,\n    0x42212163,\n    0x20101030,\n    0xe5ffff1a,\n    0xfdf3f30e,\n    0xbfd2d26d,\n    0x81cdcd4c,\n    0x180c0c14,\n    0x26131335,\n    0xc3ecec2f,\n    0xbe5f5fe1,\n    0x359797a2,\n    0x884444cc,\n    0x2e171739,\n    0x93c4c457,\n    0x55a7a7f2,\n    0xfc7e7e82,\n    0x7a3d3d47,\n    0xc86464ac,\n    0xba5d5de7,\n    0x3219192b,\n    0xe6737395,\n    0xc06060a0,\n    0x19818198,\n    0x9e4f4fd1,\n    0xa3dcdc7f,\n    0x44222266,\n    0x542a2a7e,\n    0x3b9090ab,\n    0x0b888883,\n    0x8c4646ca,\n    0xc7eeee29,\n    0x6bb8b8d3,\n    0x2814143c,\n    0xa7dede79,\n    0xbc5e5ee2,\n    0x160b0b1d,\n    0xaddbdb76,\n    0xdbe0e03b,\n    0x64323256,\n    0x743a3a4e,\n    0x140a0a1e,\n    0x924949db,\n    0x0c06060a,\n    0x4824246c,\n    0xb85c5ce4,\n    0x9fc2c25d,\n    0xbdd3d36e,\n    0x43acacef,\n    0xc46262a6,\n    0x399191a8,\n    0x319595a4,\n    0xd3e4e437,\n    0xf279798b,\n    0xd5e7e732,\n    0x8bc8c843,\n    0x6e373759,\n    0xda6d6db7,\n    0x018d8d8c,\n    0xb1d5d564,\n    0x9c4e4ed2,\n    0x49a9a9e0,\n    0xd86c6cb4,\n    0xac5656fa,\n    0xf3f4f407,\n    0xcfeaea25,\n    0xca6565af,\n    0xf47a7a8e,\n    0x47aeaee9,\n    0x10080818,\n    0x6fbabad5,\n    0xf0787888,\n    0x4a25256f,\n    0x5c2e2e72,\n    0x381c1c24,\n    0x57a6a6f1,\n    0x73b4b4c7,\n    0x97c6c651,\n    0xcbe8e823,\n    0xa1dddd7c,\n    0xe874749c,\n    0x3e1f1f21,\n    0x964b4bdd,\n    0x61bdbddc,\n    0x0d8b8b86,\n    0x0f8a8a85,\n    0xe0707090,\n    0x7c3e3e42,\n    0x71b5b5c4,\n    0xcc6666aa,\n    0x904848d8,\n    0x06030305,\n    0xf7f6f601,\n    0x1c0e0e12,\n    0xc26161a3,\n    0x6a35355f,\n    0xae5757f9,\n    0x69b9b9d0,\n    0x17868691,\n    0x99c1c158,\n    0x3a1d1d27,\n    0x279e9eb9,\n    0xd9e1e138,\n    0xebf8f813,\n    0x2b9898b3,\n    0x22111133,\n    0xd26969bb,\n    0xa9d9d970,\n    0x078e8e89,\n    0x339494a7,\n    0x2d9b9bb6,\n    0x3c1e1e22,\n    0x15878792,\n    0xc9e9e920,\n    0x87cece49,\n    0xaa5555ff,\n    0x50282878,\n    0xa5dfdf7a,\n    0x038c8c8f,\n    0x59a1a1f8,\n    0x09898980,\n    0x1a0d0d17,\n    0x65bfbfda,\n    0xd7e6e631,\n    0x844242c6,\n    0xd06868b8,\n    0x824141c3,\n    0x299999b0,\n    0x5a2d2d77,\n    0x1e0f0f11,\n    0x7bb0b0cb,\n    0xa85454fc,\n    0x6dbbbbd6,\n    0x2c16163a\n];\nconst T2 = [\n    0xa5c66363,\n    0x84f87c7c,\n    0x99ee7777,\n    0x8df67b7b,\n    0x0dfff2f2,\n    0xbdd66b6b,\n    0xb1de6f6f,\n    0x5491c5c5,\n    0x50603030,\n    0x03020101,\n    0xa9ce6767,\n    0x7d562b2b,\n    0x19e7fefe,\n    0x62b5d7d7,\n    0xe64dabab,\n    0x9aec7676,\n    0x458fcaca,\n    0x9d1f8282,\n    0x4089c9c9,\n    0x87fa7d7d,\n    0x15effafa,\n    0xebb25959,\n    0xc98e4747,\n    0x0bfbf0f0,\n    0xec41adad,\n    0x67b3d4d4,\n    0xfd5fa2a2,\n    0xea45afaf,\n    0xbf239c9c,\n    0xf753a4a4,\n    0x96e47272,\n    0x5b9bc0c0,\n    0xc275b7b7,\n    0x1ce1fdfd,\n    0xae3d9393,\n    0x6a4c2626,\n    0x5a6c3636,\n    0x417e3f3f,\n    0x02f5f7f7,\n    0x4f83cccc,\n    0x5c683434,\n    0xf451a5a5,\n    0x34d1e5e5,\n    0x08f9f1f1,\n    0x93e27171,\n    0x73abd8d8,\n    0x53623131,\n    0x3f2a1515,\n    0x0c080404,\n    0x5295c7c7,\n    0x65462323,\n    0x5e9dc3c3,\n    0x28301818,\n    0xa1379696,\n    0x0f0a0505,\n    0xb52f9a9a,\n    0x090e0707,\n    0x36241212,\n    0x9b1b8080,\n    0x3ddfe2e2,\n    0x26cdebeb,\n    0x694e2727,\n    0xcd7fb2b2,\n    0x9fea7575,\n    0x1b120909,\n    0x9e1d8383,\n    0x74582c2c,\n    0x2e341a1a,\n    0x2d361b1b,\n    0xb2dc6e6e,\n    0xeeb45a5a,\n    0xfb5ba0a0,\n    0xf6a45252,\n    0x4d763b3b,\n    0x61b7d6d6,\n    0xce7db3b3,\n    0x7b522929,\n    0x3edde3e3,\n    0x715e2f2f,\n    0x97138484,\n    0xf5a65353,\n    0x68b9d1d1,\n    0x00000000,\n    0x2cc1eded,\n    0x60402020,\n    0x1fe3fcfc,\n    0xc879b1b1,\n    0xedb65b5b,\n    0xbed46a6a,\n    0x468dcbcb,\n    0xd967bebe,\n    0x4b723939,\n    0xde944a4a,\n    0xd4984c4c,\n    0xe8b05858,\n    0x4a85cfcf,\n    0x6bbbd0d0,\n    0x2ac5efef,\n    0xe54faaaa,\n    0x16edfbfb,\n    0xc5864343,\n    0xd79a4d4d,\n    0x55663333,\n    0x94118585,\n    0xcf8a4545,\n    0x10e9f9f9,\n    0x06040202,\n    0x81fe7f7f,\n    0xf0a05050,\n    0x44783c3c,\n    0xba259f9f,\n    0xe34ba8a8,\n    0xf3a25151,\n    0xfe5da3a3,\n    0xc0804040,\n    0x8a058f8f,\n    0xad3f9292,\n    0xbc219d9d,\n    0x48703838,\n    0x04f1f5f5,\n    0xdf63bcbc,\n    0xc177b6b6,\n    0x75afdada,\n    0x63422121,\n    0x30201010,\n    0x1ae5ffff,\n    0x0efdf3f3,\n    0x6dbfd2d2,\n    0x4c81cdcd,\n    0x14180c0c,\n    0x35261313,\n    0x2fc3ecec,\n    0xe1be5f5f,\n    0xa2359797,\n    0xcc884444,\n    0x392e1717,\n    0x5793c4c4,\n    0xf255a7a7,\n    0x82fc7e7e,\n    0x477a3d3d,\n    0xacc86464,\n    0xe7ba5d5d,\n    0x2b321919,\n    0x95e67373,\n    0xa0c06060,\n    0x98198181,\n    0xd19e4f4f,\n    0x7fa3dcdc,\n    0x66442222,\n    0x7e542a2a,\n    0xab3b9090,\n    0x830b8888,\n    0xca8c4646,\n    0x29c7eeee,\n    0xd36bb8b8,\n    0x3c281414,\n    0x79a7dede,\n    0xe2bc5e5e,\n    0x1d160b0b,\n    0x76addbdb,\n    0x3bdbe0e0,\n    0x56643232,\n    0x4e743a3a,\n    0x1e140a0a,\n    0xdb924949,\n    0x0a0c0606,\n    0x6c482424,\n    0xe4b85c5c,\n    0x5d9fc2c2,\n    0x6ebdd3d3,\n    0xef43acac,\n    0xa6c46262,\n    0xa8399191,\n    0xa4319595,\n    0x37d3e4e4,\n    0x8bf27979,\n    0x32d5e7e7,\n    0x438bc8c8,\n    0x596e3737,\n    0xb7da6d6d,\n    0x8c018d8d,\n    0x64b1d5d5,\n    0xd29c4e4e,\n    0xe049a9a9,\n    0xb4d86c6c,\n    0xfaac5656,\n    0x07f3f4f4,\n    0x25cfeaea,\n    0xafca6565,\n    0x8ef47a7a,\n    0xe947aeae,\n    0x18100808,\n    0xd56fbaba,\n    0x88f07878,\n    0x6f4a2525,\n    0x725c2e2e,\n    0x24381c1c,\n    0xf157a6a6,\n    0xc773b4b4,\n    0x5197c6c6,\n    0x23cbe8e8,\n    0x7ca1dddd,\n    0x9ce87474,\n    0x213e1f1f,\n    0xdd964b4b,\n    0xdc61bdbd,\n    0x860d8b8b,\n    0x850f8a8a,\n    0x90e07070,\n    0x427c3e3e,\n    0xc471b5b5,\n    0xaacc6666,\n    0xd8904848,\n    0x05060303,\n    0x01f7f6f6,\n    0x121c0e0e,\n    0xa3c26161,\n    0x5f6a3535,\n    0xf9ae5757,\n    0xd069b9b9,\n    0x91178686,\n    0x5899c1c1,\n    0x273a1d1d,\n    0xb9279e9e,\n    0x38d9e1e1,\n    0x13ebf8f8,\n    0xb32b9898,\n    0x33221111,\n    0xbbd26969,\n    0x70a9d9d9,\n    0x89078e8e,\n    0xa7339494,\n    0xb62d9b9b,\n    0x223c1e1e,\n    0x92158787,\n    0x20c9e9e9,\n    0x4987cece,\n    0xffaa5555,\n    0x78502828,\n    0x7aa5dfdf,\n    0x8f038c8c,\n    0xf859a1a1,\n    0x80098989,\n    0x171a0d0d,\n    0xda65bfbf,\n    0x31d7e6e6,\n    0xc6844242,\n    0xb8d06868,\n    0xc3824141,\n    0xb0299999,\n    0x775a2d2d,\n    0x111e0f0f,\n    0xcb7bb0b0,\n    0xfca85454,\n    0xd66dbbbb,\n    0x3a2c1616\n];\nconst T3 = [\n    0x63a5c663,\n    0x7c84f87c,\n    0x7799ee77,\n    0x7b8df67b,\n    0xf20dfff2,\n    0x6bbdd66b,\n    0x6fb1de6f,\n    0xc55491c5,\n    0x30506030,\n    0x01030201,\n    0x67a9ce67,\n    0x2b7d562b,\n    0xfe19e7fe,\n    0xd762b5d7,\n    0xabe64dab,\n    0x769aec76,\n    0xca458fca,\n    0x829d1f82,\n    0xc94089c9,\n    0x7d87fa7d,\n    0xfa15effa,\n    0x59ebb259,\n    0x47c98e47,\n    0xf00bfbf0,\n    0xadec41ad,\n    0xd467b3d4,\n    0xa2fd5fa2,\n    0xafea45af,\n    0x9cbf239c,\n    0xa4f753a4,\n    0x7296e472,\n    0xc05b9bc0,\n    0xb7c275b7,\n    0xfd1ce1fd,\n    0x93ae3d93,\n    0x266a4c26,\n    0x365a6c36,\n    0x3f417e3f,\n    0xf702f5f7,\n    0xcc4f83cc,\n    0x345c6834,\n    0xa5f451a5,\n    0xe534d1e5,\n    0xf108f9f1,\n    0x7193e271,\n    0xd873abd8,\n    0x31536231,\n    0x153f2a15,\n    0x040c0804,\n    0xc75295c7,\n    0x23654623,\n    0xc35e9dc3,\n    0x18283018,\n    0x96a13796,\n    0x050f0a05,\n    0x9ab52f9a,\n    0x07090e07,\n    0x12362412,\n    0x809b1b80,\n    0xe23ddfe2,\n    0xeb26cdeb,\n    0x27694e27,\n    0xb2cd7fb2,\n    0x759fea75,\n    0x091b1209,\n    0x839e1d83,\n    0x2c74582c,\n    0x1a2e341a,\n    0x1b2d361b,\n    0x6eb2dc6e,\n    0x5aeeb45a,\n    0xa0fb5ba0,\n    0x52f6a452,\n    0x3b4d763b,\n    0xd661b7d6,\n    0xb3ce7db3,\n    0x297b5229,\n    0xe33edde3,\n    0x2f715e2f,\n    0x84971384,\n    0x53f5a653,\n    0xd168b9d1,\n    0x00000000,\n    0xed2cc1ed,\n    0x20604020,\n    0xfc1fe3fc,\n    0xb1c879b1,\n    0x5bedb65b,\n    0x6abed46a,\n    0xcb468dcb,\n    0xbed967be,\n    0x394b7239,\n    0x4ade944a,\n    0x4cd4984c,\n    0x58e8b058,\n    0xcf4a85cf,\n    0xd06bbbd0,\n    0xef2ac5ef,\n    0xaae54faa,\n    0xfb16edfb,\n    0x43c58643,\n    0x4dd79a4d,\n    0x33556633,\n    0x85941185,\n    0x45cf8a45,\n    0xf910e9f9,\n    0x02060402,\n    0x7f81fe7f,\n    0x50f0a050,\n    0x3c44783c,\n    0x9fba259f,\n    0xa8e34ba8,\n    0x51f3a251,\n    0xa3fe5da3,\n    0x40c08040,\n    0x8f8a058f,\n    0x92ad3f92,\n    0x9dbc219d,\n    0x38487038,\n    0xf504f1f5,\n    0xbcdf63bc,\n    0xb6c177b6,\n    0xda75afda,\n    0x21634221,\n    0x10302010,\n    0xff1ae5ff,\n    0xf30efdf3,\n    0xd26dbfd2,\n    0xcd4c81cd,\n    0x0c14180c,\n    0x13352613,\n    0xec2fc3ec,\n    0x5fe1be5f,\n    0x97a23597,\n    0x44cc8844,\n    0x17392e17,\n    0xc45793c4,\n    0xa7f255a7,\n    0x7e82fc7e,\n    0x3d477a3d,\n    0x64acc864,\n    0x5de7ba5d,\n    0x192b3219,\n    0x7395e673,\n    0x60a0c060,\n    0x81981981,\n    0x4fd19e4f,\n    0xdc7fa3dc,\n    0x22664422,\n    0x2a7e542a,\n    0x90ab3b90,\n    0x88830b88,\n    0x46ca8c46,\n    0xee29c7ee,\n    0xb8d36bb8,\n    0x143c2814,\n    0xde79a7de,\n    0x5ee2bc5e,\n    0x0b1d160b,\n    0xdb76addb,\n    0xe03bdbe0,\n    0x32566432,\n    0x3a4e743a,\n    0x0a1e140a,\n    0x49db9249,\n    0x060a0c06,\n    0x246c4824,\n    0x5ce4b85c,\n    0xc25d9fc2,\n    0xd36ebdd3,\n    0xacef43ac,\n    0x62a6c462,\n    0x91a83991,\n    0x95a43195,\n    0xe437d3e4,\n    0x798bf279,\n    0xe732d5e7,\n    0xc8438bc8,\n    0x37596e37,\n    0x6db7da6d,\n    0x8d8c018d,\n    0xd564b1d5,\n    0x4ed29c4e,\n    0xa9e049a9,\n    0x6cb4d86c,\n    0x56faac56,\n    0xf407f3f4,\n    0xea25cfea,\n    0x65afca65,\n    0x7a8ef47a,\n    0xaee947ae,\n    0x08181008,\n    0xbad56fba,\n    0x7888f078,\n    0x256f4a25,\n    0x2e725c2e,\n    0x1c24381c,\n    0xa6f157a6,\n    0xb4c773b4,\n    0xc65197c6,\n    0xe823cbe8,\n    0xdd7ca1dd,\n    0x749ce874,\n    0x1f213e1f,\n    0x4bdd964b,\n    0xbddc61bd,\n    0x8b860d8b,\n    0x8a850f8a,\n    0x7090e070,\n    0x3e427c3e,\n    0xb5c471b5,\n    0x66aacc66,\n    0x48d89048,\n    0x03050603,\n    0xf601f7f6,\n    0x0e121c0e,\n    0x61a3c261,\n    0x355f6a35,\n    0x57f9ae57,\n    0xb9d069b9,\n    0x86911786,\n    0xc15899c1,\n    0x1d273a1d,\n    0x9eb9279e,\n    0xe138d9e1,\n    0xf813ebf8,\n    0x98b32b98,\n    0x11332211,\n    0x69bbd269,\n    0xd970a9d9,\n    0x8e89078e,\n    0x94a73394,\n    0x9bb62d9b,\n    0x1e223c1e,\n    0x87921587,\n    0xe920c9e9,\n    0xce4987ce,\n    0x55ffaa55,\n    0x28785028,\n    0xdf7aa5df,\n    0x8c8f038c,\n    0xa1f859a1,\n    0x89800989,\n    0x0d171a0d,\n    0xbfda65bf,\n    0xe631d7e6,\n    0x42c68442,\n    0x68b8d068,\n    0x41c38241,\n    0x99b02999,\n    0x2d775a2d,\n    0x0f111e0f,\n    0xb0cb7bb0,\n    0x54fca854,\n    0xbbd66dbb,\n    0x163a2c16\n];\nconst T4 = [\n    0x6363a5c6,\n    0x7c7c84f8,\n    0x777799ee,\n    0x7b7b8df6,\n    0xf2f20dff,\n    0x6b6bbdd6,\n    0x6f6fb1de,\n    0xc5c55491,\n    0x30305060,\n    0x01010302,\n    0x6767a9ce,\n    0x2b2b7d56,\n    0xfefe19e7,\n    0xd7d762b5,\n    0xababe64d,\n    0x76769aec,\n    0xcaca458f,\n    0x82829d1f,\n    0xc9c94089,\n    0x7d7d87fa,\n    0xfafa15ef,\n    0x5959ebb2,\n    0x4747c98e,\n    0xf0f00bfb,\n    0xadadec41,\n    0xd4d467b3,\n    0xa2a2fd5f,\n    0xafafea45,\n    0x9c9cbf23,\n    0xa4a4f753,\n    0x727296e4,\n    0xc0c05b9b,\n    0xb7b7c275,\n    0xfdfd1ce1,\n    0x9393ae3d,\n    0x26266a4c,\n    0x36365a6c,\n    0x3f3f417e,\n    0xf7f702f5,\n    0xcccc4f83,\n    0x34345c68,\n    0xa5a5f451,\n    0xe5e534d1,\n    0xf1f108f9,\n    0x717193e2,\n    0xd8d873ab,\n    0x31315362,\n    0x15153f2a,\n    0x04040c08,\n    0xc7c75295,\n    0x23236546,\n    0xc3c35e9d,\n    0x18182830,\n    0x9696a137,\n    0x05050f0a,\n    0x9a9ab52f,\n    0x0707090e,\n    0x12123624,\n    0x80809b1b,\n    0xe2e23ddf,\n    0xebeb26cd,\n    0x2727694e,\n    0xb2b2cd7f,\n    0x75759fea,\n    0x09091b12,\n    0x83839e1d,\n    0x2c2c7458,\n    0x1a1a2e34,\n    0x1b1b2d36,\n    0x6e6eb2dc,\n    0x5a5aeeb4,\n    0xa0a0fb5b,\n    0x5252f6a4,\n    0x3b3b4d76,\n    0xd6d661b7,\n    0xb3b3ce7d,\n    0x29297b52,\n    0xe3e33edd,\n    0x2f2f715e,\n    0x84849713,\n    0x5353f5a6,\n    0xd1d168b9,\n    0x00000000,\n    0xeded2cc1,\n    0x20206040,\n    0xfcfc1fe3,\n    0xb1b1c879,\n    0x5b5bedb6,\n    0x6a6abed4,\n    0xcbcb468d,\n    0xbebed967,\n    0x39394b72,\n    0x4a4ade94,\n    0x4c4cd498,\n    0x5858e8b0,\n    0xcfcf4a85,\n    0xd0d06bbb,\n    0xefef2ac5,\n    0xaaaae54f,\n    0xfbfb16ed,\n    0x4343c586,\n    0x4d4dd79a,\n    0x33335566,\n    0x85859411,\n    0x4545cf8a,\n    0xf9f910e9,\n    0x02020604,\n    0x7f7f81fe,\n    0x5050f0a0,\n    0x3c3c4478,\n    0x9f9fba25,\n    0xa8a8e34b,\n    0x5151f3a2,\n    0xa3a3fe5d,\n    0x4040c080,\n    0x8f8f8a05,\n    0x9292ad3f,\n    0x9d9dbc21,\n    0x38384870,\n    0xf5f504f1,\n    0xbcbcdf63,\n    0xb6b6c177,\n    0xdada75af,\n    0x21216342,\n    0x10103020,\n    0xffff1ae5,\n    0xf3f30efd,\n    0xd2d26dbf,\n    0xcdcd4c81,\n    0x0c0c1418,\n    0x13133526,\n    0xecec2fc3,\n    0x5f5fe1be,\n    0x9797a235,\n    0x4444cc88,\n    0x1717392e,\n    0xc4c45793,\n    0xa7a7f255,\n    0x7e7e82fc,\n    0x3d3d477a,\n    0x6464acc8,\n    0x5d5de7ba,\n    0x19192b32,\n    0x737395e6,\n    0x6060a0c0,\n    0x81819819,\n    0x4f4fd19e,\n    0xdcdc7fa3,\n    0x22226644,\n    0x2a2a7e54,\n    0x9090ab3b,\n    0x8888830b,\n    0x4646ca8c,\n    0xeeee29c7,\n    0xb8b8d36b,\n    0x14143c28,\n    0xdede79a7,\n    0x5e5ee2bc,\n    0x0b0b1d16,\n    0xdbdb76ad,\n    0xe0e03bdb,\n    0x32325664,\n    0x3a3a4e74,\n    0x0a0a1e14,\n    0x4949db92,\n    0x06060a0c,\n    0x24246c48,\n    0x5c5ce4b8,\n    0xc2c25d9f,\n    0xd3d36ebd,\n    0xacacef43,\n    0x6262a6c4,\n    0x9191a839,\n    0x9595a431,\n    0xe4e437d3,\n    0x79798bf2,\n    0xe7e732d5,\n    0xc8c8438b,\n    0x3737596e,\n    0x6d6db7da,\n    0x8d8d8c01,\n    0xd5d564b1,\n    0x4e4ed29c,\n    0xa9a9e049,\n    0x6c6cb4d8,\n    0x5656faac,\n    0xf4f407f3,\n    0xeaea25cf,\n    0x6565afca,\n    0x7a7a8ef4,\n    0xaeaee947,\n    0x08081810,\n    0xbabad56f,\n    0x787888f0,\n    0x25256f4a,\n    0x2e2e725c,\n    0x1c1c2438,\n    0xa6a6f157,\n    0xb4b4c773,\n    0xc6c65197,\n    0xe8e823cb,\n    0xdddd7ca1,\n    0x74749ce8,\n    0x1f1f213e,\n    0x4b4bdd96,\n    0xbdbddc61,\n    0x8b8b860d,\n    0x8a8a850f,\n    0x707090e0,\n    0x3e3e427c,\n    0xb5b5c471,\n    0x6666aacc,\n    0x4848d890,\n    0x03030506,\n    0xf6f601f7,\n    0x0e0e121c,\n    0x6161a3c2,\n    0x35355f6a,\n    0x5757f9ae,\n    0xb9b9d069,\n    0x86869117,\n    0xc1c15899,\n    0x1d1d273a,\n    0x9e9eb927,\n    0xe1e138d9,\n    0xf8f813eb,\n    0x9898b32b,\n    0x11113322,\n    0x6969bbd2,\n    0xd9d970a9,\n    0x8e8e8907,\n    0x9494a733,\n    0x9b9bb62d,\n    0x1e1e223c,\n    0x87879215,\n    0xe9e920c9,\n    0xcece4987,\n    0x5555ffaa,\n    0x28287850,\n    0xdfdf7aa5,\n    0x8c8c8f03,\n    0xa1a1f859,\n    0x89898009,\n    0x0d0d171a,\n    0xbfbfda65,\n    0xe6e631d7,\n    0x4242c684,\n    0x6868b8d0,\n    0x4141c382,\n    0x9999b029,\n    0x2d2d775a,\n    0x0f0f111e,\n    0xb0b0cb7b,\n    0x5454fca8,\n    0xbbbbd66d,\n    0x16163a2c\n];\n// Transformations for decryption\nconst T5 = [\n    0x51f4a750,\n    0x7e416553,\n    0x1a17a4c3,\n    0x3a275e96,\n    0x3bab6bcb,\n    0x1f9d45f1,\n    0xacfa58ab,\n    0x4be30393,\n    0x2030fa55,\n    0xad766df6,\n    0x88cc7691,\n    0xf5024c25,\n    0x4fe5d7fc,\n    0xc52acbd7,\n    0x26354480,\n    0xb562a38f,\n    0xdeb15a49,\n    0x25ba1b67,\n    0x45ea0e98,\n    0x5dfec0e1,\n    0xc32f7502,\n    0x814cf012,\n    0x8d4697a3,\n    0x6bd3f9c6,\n    0x038f5fe7,\n    0x15929c95,\n    0xbf6d7aeb,\n    0x955259da,\n    0xd4be832d,\n    0x587421d3,\n    0x49e06929,\n    0x8ec9c844,\n    0x75c2896a,\n    0xf48e7978,\n    0x99583e6b,\n    0x27b971dd,\n    0xbee14fb6,\n    0xf088ad17,\n    0xc920ac66,\n    0x7dce3ab4,\n    0x63df4a18,\n    0xe51a3182,\n    0x97513360,\n    0x62537f45,\n    0xb16477e0,\n    0xbb6bae84,\n    0xfe81a01c,\n    0xf9082b94,\n    0x70486858,\n    0x8f45fd19,\n    0x94de6c87,\n    0x527bf8b7,\n    0xab73d323,\n    0x724b02e2,\n    0xe31f8f57,\n    0x6655ab2a,\n    0xb2eb2807,\n    0x2fb5c203,\n    0x86c57b9a,\n    0xd33708a5,\n    0x302887f2,\n    0x23bfa5b2,\n    0x02036aba,\n    0xed16825c,\n    0x8acf1c2b,\n    0xa779b492,\n    0xf307f2f0,\n    0x4e69e2a1,\n    0x65daf4cd,\n    0x0605bed5,\n    0xd134621f,\n    0xc4a6fe8a,\n    0x342e539d,\n    0xa2f355a0,\n    0x058ae132,\n    0xa4f6eb75,\n    0x0b83ec39,\n    0x4060efaa,\n    0x5e719f06,\n    0xbd6e1051,\n    0x3e218af9,\n    0x96dd063d,\n    0xdd3e05ae,\n    0x4de6bd46,\n    0x91548db5,\n    0x71c45d05,\n    0x0406d46f,\n    0x605015ff,\n    0x1998fb24,\n    0xd6bde997,\n    0x894043cc,\n    0x67d99e77,\n    0xb0e842bd,\n    0x07898b88,\n    0xe7195b38,\n    0x79c8eedb,\n    0xa17c0a47,\n    0x7c420fe9,\n    0xf8841ec9,\n    0x00000000,\n    0x09808683,\n    0x322bed48,\n    0x1e1170ac,\n    0x6c5a724e,\n    0xfd0efffb,\n    0x0f853856,\n    0x3daed51e,\n    0x362d3927,\n    0x0a0fd964,\n    0x685ca621,\n    0x9b5b54d1,\n    0x24362e3a,\n    0x0c0a67b1,\n    0x9357e70f,\n    0xb4ee96d2,\n    0x1b9b919e,\n    0x80c0c54f,\n    0x61dc20a2,\n    0x5a774b69,\n    0x1c121a16,\n    0xe293ba0a,\n    0xc0a02ae5,\n    0x3c22e043,\n    0x121b171d,\n    0x0e090d0b,\n    0xf28bc7ad,\n    0x2db6a8b9,\n    0x141ea9c8,\n    0x57f11985,\n    0xaf75074c,\n    0xee99ddbb,\n    0xa37f60fd,\n    0xf701269f,\n    0x5c72f5bc,\n    0x44663bc5,\n    0x5bfb7e34,\n    0x8b432976,\n    0xcb23c6dc,\n    0xb6edfc68,\n    0xb8e4f163,\n    0xd731dcca,\n    0x42638510,\n    0x13972240,\n    0x84c61120,\n    0x854a247d,\n    0xd2bb3df8,\n    0xaef93211,\n    0xc729a16d,\n    0x1d9e2f4b,\n    0xdcb230f3,\n    0x0d8652ec,\n    0x77c1e3d0,\n    0x2bb3166c,\n    0xa970b999,\n    0x119448fa,\n    0x47e96422,\n    0xa8fc8cc4,\n    0xa0f03f1a,\n    0x567d2cd8,\n    0x223390ef,\n    0x87494ec7,\n    0xd938d1c1,\n    0x8ccaa2fe,\n    0x98d40b36,\n    0xa6f581cf,\n    0xa57ade28,\n    0xdab78e26,\n    0x3fadbfa4,\n    0x2c3a9de4,\n    0x5078920d,\n    0x6a5fcc9b,\n    0x547e4662,\n    0xf68d13c2,\n    0x90d8b8e8,\n    0x2e39f75e,\n    0x82c3aff5,\n    0x9f5d80be,\n    0x69d0937c,\n    0x6fd52da9,\n    0xcf2512b3,\n    0xc8ac993b,\n    0x10187da7,\n    0xe89c636e,\n    0xdb3bbb7b,\n    0xcd267809,\n    0x6e5918f4,\n    0xec9ab701,\n    0x834f9aa8,\n    0xe6956e65,\n    0xaaffe67e,\n    0x21bccf08,\n    0xef15e8e6,\n    0xbae79bd9,\n    0x4a6f36ce,\n    0xea9f09d4,\n    0x29b07cd6,\n    0x31a4b2af,\n    0x2a3f2331,\n    0xc6a59430,\n    0x35a266c0,\n    0x744ebc37,\n    0xfc82caa6,\n    0xe090d0b0,\n    0x33a7d815,\n    0xf104984a,\n    0x41ecdaf7,\n    0x7fcd500e,\n    0x1791f62f,\n    0x764dd68d,\n    0x43efb04d,\n    0xccaa4d54,\n    0xe49604df,\n    0x9ed1b5e3,\n    0x4c6a881b,\n    0xc12c1fb8,\n    0x4665517f,\n    0x9d5eea04,\n    0x018c355d,\n    0xfa877473,\n    0xfb0b412e,\n    0xb3671d5a,\n    0x92dbd252,\n    0xe9105633,\n    0x6dd64713,\n    0x9ad7618c,\n    0x37a10c7a,\n    0x59f8148e,\n    0xeb133c89,\n    0xcea927ee,\n    0xb761c935,\n    0xe11ce5ed,\n    0x7a47b13c,\n    0x9cd2df59,\n    0x55f2733f,\n    0x1814ce79,\n    0x73c737bf,\n    0x53f7cdea,\n    0x5ffdaa5b,\n    0xdf3d6f14,\n    0x7844db86,\n    0xcaaff381,\n    0xb968c43e,\n    0x3824342c,\n    0xc2a3405f,\n    0x161dc372,\n    0xbce2250c,\n    0x283c498b,\n    0xff0d9541,\n    0x39a80171,\n    0x080cb3de,\n    0xd8b4e49c,\n    0x6456c190,\n    0x7bcb8461,\n    0xd532b670,\n    0x486c5c74,\n    0xd0b85742\n];\nconst T6 = [\n    0x5051f4a7,\n    0x537e4165,\n    0xc31a17a4,\n    0x963a275e,\n    0xcb3bab6b,\n    0xf11f9d45,\n    0xabacfa58,\n    0x934be303,\n    0x552030fa,\n    0xf6ad766d,\n    0x9188cc76,\n    0x25f5024c,\n    0xfc4fe5d7,\n    0xd7c52acb,\n    0x80263544,\n    0x8fb562a3,\n    0x49deb15a,\n    0x6725ba1b,\n    0x9845ea0e,\n    0xe15dfec0,\n    0x02c32f75,\n    0x12814cf0,\n    0xa38d4697,\n    0xc66bd3f9,\n    0xe7038f5f,\n    0x9515929c,\n    0xebbf6d7a,\n    0xda955259,\n    0x2dd4be83,\n    0xd3587421,\n    0x2949e069,\n    0x448ec9c8,\n    0x6a75c289,\n    0x78f48e79,\n    0x6b99583e,\n    0xdd27b971,\n    0xb6bee14f,\n    0x17f088ad,\n    0x66c920ac,\n    0xb47dce3a,\n    0x1863df4a,\n    0x82e51a31,\n    0x60975133,\n    0x4562537f,\n    0xe0b16477,\n    0x84bb6bae,\n    0x1cfe81a0,\n    0x94f9082b,\n    0x58704868,\n    0x198f45fd,\n    0x8794de6c,\n    0xb7527bf8,\n    0x23ab73d3,\n    0xe2724b02,\n    0x57e31f8f,\n    0x2a6655ab,\n    0x07b2eb28,\n    0x032fb5c2,\n    0x9a86c57b,\n    0xa5d33708,\n    0xf2302887,\n    0xb223bfa5,\n    0xba02036a,\n    0x5ced1682,\n    0x2b8acf1c,\n    0x92a779b4,\n    0xf0f307f2,\n    0xa14e69e2,\n    0xcd65daf4,\n    0xd50605be,\n    0x1fd13462,\n    0x8ac4a6fe,\n    0x9d342e53,\n    0xa0a2f355,\n    0x32058ae1,\n    0x75a4f6eb,\n    0x390b83ec,\n    0xaa4060ef,\n    0x065e719f,\n    0x51bd6e10,\n    0xf93e218a,\n    0x3d96dd06,\n    0xaedd3e05,\n    0x464de6bd,\n    0xb591548d,\n    0x0571c45d,\n    0x6f0406d4,\n    0xff605015,\n    0x241998fb,\n    0x97d6bde9,\n    0xcc894043,\n    0x7767d99e,\n    0xbdb0e842,\n    0x8807898b,\n    0x38e7195b,\n    0xdb79c8ee,\n    0x47a17c0a,\n    0xe97c420f,\n    0xc9f8841e,\n    0x00000000,\n    0x83098086,\n    0x48322bed,\n    0xac1e1170,\n    0x4e6c5a72,\n    0xfbfd0eff,\n    0x560f8538,\n    0x1e3daed5,\n    0x27362d39,\n    0x640a0fd9,\n    0x21685ca6,\n    0xd19b5b54,\n    0x3a24362e,\n    0xb10c0a67,\n    0x0f9357e7,\n    0xd2b4ee96,\n    0x9e1b9b91,\n    0x4f80c0c5,\n    0xa261dc20,\n    0x695a774b,\n    0x161c121a,\n    0x0ae293ba,\n    0xe5c0a02a,\n    0x433c22e0,\n    0x1d121b17,\n    0x0b0e090d,\n    0xadf28bc7,\n    0xb92db6a8,\n    0xc8141ea9,\n    0x8557f119,\n    0x4caf7507,\n    0xbbee99dd,\n    0xfda37f60,\n    0x9ff70126,\n    0xbc5c72f5,\n    0xc544663b,\n    0x345bfb7e,\n    0x768b4329,\n    0xdccb23c6,\n    0x68b6edfc,\n    0x63b8e4f1,\n    0xcad731dc,\n    0x10426385,\n    0x40139722,\n    0x2084c611,\n    0x7d854a24,\n    0xf8d2bb3d,\n    0x11aef932,\n    0x6dc729a1,\n    0x4b1d9e2f,\n    0xf3dcb230,\n    0xec0d8652,\n    0xd077c1e3,\n    0x6c2bb316,\n    0x99a970b9,\n    0xfa119448,\n    0x2247e964,\n    0xc4a8fc8c,\n    0x1aa0f03f,\n    0xd8567d2c,\n    0xef223390,\n    0xc787494e,\n    0xc1d938d1,\n    0xfe8ccaa2,\n    0x3698d40b,\n    0xcfa6f581,\n    0x28a57ade,\n    0x26dab78e,\n    0xa43fadbf,\n    0xe42c3a9d,\n    0x0d507892,\n    0x9b6a5fcc,\n    0x62547e46,\n    0xc2f68d13,\n    0xe890d8b8,\n    0x5e2e39f7,\n    0xf582c3af,\n    0xbe9f5d80,\n    0x7c69d093,\n    0xa96fd52d,\n    0xb3cf2512,\n    0x3bc8ac99,\n    0xa710187d,\n    0x6ee89c63,\n    0x7bdb3bbb,\n    0x09cd2678,\n    0xf46e5918,\n    0x01ec9ab7,\n    0xa8834f9a,\n    0x65e6956e,\n    0x7eaaffe6,\n    0x0821bccf,\n    0xe6ef15e8,\n    0xd9bae79b,\n    0xce4a6f36,\n    0xd4ea9f09,\n    0xd629b07c,\n    0xaf31a4b2,\n    0x312a3f23,\n    0x30c6a594,\n    0xc035a266,\n    0x37744ebc,\n    0xa6fc82ca,\n    0xb0e090d0,\n    0x1533a7d8,\n    0x4af10498,\n    0xf741ecda,\n    0x0e7fcd50,\n    0x2f1791f6,\n    0x8d764dd6,\n    0x4d43efb0,\n    0x54ccaa4d,\n    0xdfe49604,\n    0xe39ed1b5,\n    0x1b4c6a88,\n    0xb8c12c1f,\n    0x7f466551,\n    0x049d5eea,\n    0x5d018c35,\n    0x73fa8774,\n    0x2efb0b41,\n    0x5ab3671d,\n    0x5292dbd2,\n    0x33e91056,\n    0x136dd647,\n    0x8c9ad761,\n    0x7a37a10c,\n    0x8e59f814,\n    0x89eb133c,\n    0xeecea927,\n    0x35b761c9,\n    0xede11ce5,\n    0x3c7a47b1,\n    0x599cd2df,\n    0x3f55f273,\n    0x791814ce,\n    0xbf73c737,\n    0xea53f7cd,\n    0x5b5ffdaa,\n    0x14df3d6f,\n    0x867844db,\n    0x81caaff3,\n    0x3eb968c4,\n    0x2c382434,\n    0x5fc2a340,\n    0x72161dc3,\n    0x0cbce225,\n    0x8b283c49,\n    0x41ff0d95,\n    0x7139a801,\n    0xde080cb3,\n    0x9cd8b4e4,\n    0x906456c1,\n    0x617bcb84,\n    0x70d532b6,\n    0x74486c5c,\n    0x42d0b857\n];\nconst T7 = [\n    0xa75051f4,\n    0x65537e41,\n    0xa4c31a17,\n    0x5e963a27,\n    0x6bcb3bab,\n    0x45f11f9d,\n    0x58abacfa,\n    0x03934be3,\n    0xfa552030,\n    0x6df6ad76,\n    0x769188cc,\n    0x4c25f502,\n    0xd7fc4fe5,\n    0xcbd7c52a,\n    0x44802635,\n    0xa38fb562,\n    0x5a49deb1,\n    0x1b6725ba,\n    0x0e9845ea,\n    0xc0e15dfe,\n    0x7502c32f,\n    0xf012814c,\n    0x97a38d46,\n    0xf9c66bd3,\n    0x5fe7038f,\n    0x9c951592,\n    0x7aebbf6d,\n    0x59da9552,\n    0x832dd4be,\n    0x21d35874,\n    0x692949e0,\n    0xc8448ec9,\n    0x896a75c2,\n    0x7978f48e,\n    0x3e6b9958,\n    0x71dd27b9,\n    0x4fb6bee1,\n    0xad17f088,\n    0xac66c920,\n    0x3ab47dce,\n    0x4a1863df,\n    0x3182e51a,\n    0x33609751,\n    0x7f456253,\n    0x77e0b164,\n    0xae84bb6b,\n    0xa01cfe81,\n    0x2b94f908,\n    0x68587048,\n    0xfd198f45,\n    0x6c8794de,\n    0xf8b7527b,\n    0xd323ab73,\n    0x02e2724b,\n    0x8f57e31f,\n    0xab2a6655,\n    0x2807b2eb,\n    0xc2032fb5,\n    0x7b9a86c5,\n    0x08a5d337,\n    0x87f23028,\n    0xa5b223bf,\n    0x6aba0203,\n    0x825ced16,\n    0x1c2b8acf,\n    0xb492a779,\n    0xf2f0f307,\n    0xe2a14e69,\n    0xf4cd65da,\n    0xbed50605,\n    0x621fd134,\n    0xfe8ac4a6,\n    0x539d342e,\n    0x55a0a2f3,\n    0xe132058a,\n    0xeb75a4f6,\n    0xec390b83,\n    0xefaa4060,\n    0x9f065e71,\n    0x1051bd6e,\n    0x8af93e21,\n    0x063d96dd,\n    0x05aedd3e,\n    0xbd464de6,\n    0x8db59154,\n    0x5d0571c4,\n    0xd46f0406,\n    0x15ff6050,\n    0xfb241998,\n    0xe997d6bd,\n    0x43cc8940,\n    0x9e7767d9,\n    0x42bdb0e8,\n    0x8b880789,\n    0x5b38e719,\n    0xeedb79c8,\n    0x0a47a17c,\n    0x0fe97c42,\n    0x1ec9f884,\n    0x00000000,\n    0x86830980,\n    0xed48322b,\n    0x70ac1e11,\n    0x724e6c5a,\n    0xfffbfd0e,\n    0x38560f85,\n    0xd51e3dae,\n    0x3927362d,\n    0xd9640a0f,\n    0xa621685c,\n    0x54d19b5b,\n    0x2e3a2436,\n    0x67b10c0a,\n    0xe70f9357,\n    0x96d2b4ee,\n    0x919e1b9b,\n    0xc54f80c0,\n    0x20a261dc,\n    0x4b695a77,\n    0x1a161c12,\n    0xba0ae293,\n    0x2ae5c0a0,\n    0xe0433c22,\n    0x171d121b,\n    0x0d0b0e09,\n    0xc7adf28b,\n    0xa8b92db6,\n    0xa9c8141e,\n    0x198557f1,\n    0x074caf75,\n    0xddbbee99,\n    0x60fda37f,\n    0x269ff701,\n    0xf5bc5c72,\n    0x3bc54466,\n    0x7e345bfb,\n    0x29768b43,\n    0xc6dccb23,\n    0xfc68b6ed,\n    0xf163b8e4,\n    0xdccad731,\n    0x85104263,\n    0x22401397,\n    0x112084c6,\n    0x247d854a,\n    0x3df8d2bb,\n    0x3211aef9,\n    0xa16dc729,\n    0x2f4b1d9e,\n    0x30f3dcb2,\n    0x52ec0d86,\n    0xe3d077c1,\n    0x166c2bb3,\n    0xb999a970,\n    0x48fa1194,\n    0x642247e9,\n    0x8cc4a8fc,\n    0x3f1aa0f0,\n    0x2cd8567d,\n    0x90ef2233,\n    0x4ec78749,\n    0xd1c1d938,\n    0xa2fe8cca,\n    0x0b3698d4,\n    0x81cfa6f5,\n    0xde28a57a,\n    0x8e26dab7,\n    0xbfa43fad,\n    0x9de42c3a,\n    0x920d5078,\n    0xcc9b6a5f,\n    0x4662547e,\n    0x13c2f68d,\n    0xb8e890d8,\n    0xf75e2e39,\n    0xaff582c3,\n    0x80be9f5d,\n    0x937c69d0,\n    0x2da96fd5,\n    0x12b3cf25,\n    0x993bc8ac,\n    0x7da71018,\n    0x636ee89c,\n    0xbb7bdb3b,\n    0x7809cd26,\n    0x18f46e59,\n    0xb701ec9a,\n    0x9aa8834f,\n    0x6e65e695,\n    0xe67eaaff,\n    0xcf0821bc,\n    0xe8e6ef15,\n    0x9bd9bae7,\n    0x36ce4a6f,\n    0x09d4ea9f,\n    0x7cd629b0,\n    0xb2af31a4,\n    0x23312a3f,\n    0x9430c6a5,\n    0x66c035a2,\n    0xbc37744e,\n    0xcaa6fc82,\n    0xd0b0e090,\n    0xd81533a7,\n    0x984af104,\n    0xdaf741ec,\n    0x500e7fcd,\n    0xf62f1791,\n    0xd68d764d,\n    0xb04d43ef,\n    0x4d54ccaa,\n    0x04dfe496,\n    0xb5e39ed1,\n    0x881b4c6a,\n    0x1fb8c12c,\n    0x517f4665,\n    0xea049d5e,\n    0x355d018c,\n    0x7473fa87,\n    0x412efb0b,\n    0x1d5ab367,\n    0xd25292db,\n    0x5633e910,\n    0x47136dd6,\n    0x618c9ad7,\n    0x0c7a37a1,\n    0x148e59f8,\n    0x3c89eb13,\n    0x27eecea9,\n    0xc935b761,\n    0xe5ede11c,\n    0xb13c7a47,\n    0xdf599cd2,\n    0x733f55f2,\n    0xce791814,\n    0x37bf73c7,\n    0xcdea53f7,\n    0xaa5b5ffd,\n    0x6f14df3d,\n    0xdb867844,\n    0xf381caaf,\n    0xc43eb968,\n    0x342c3824,\n    0x405fc2a3,\n    0xc372161d,\n    0x250cbce2,\n    0x498b283c,\n    0x9541ff0d,\n    0x017139a8,\n    0xb3de080c,\n    0xe49cd8b4,\n    0xc1906456,\n    0x84617bcb,\n    0xb670d532,\n    0x5c74486c,\n    0x5742d0b8\n];\nconst T8 = [\n    0xf4a75051,\n    0x4165537e,\n    0x17a4c31a,\n    0x275e963a,\n    0xab6bcb3b,\n    0x9d45f11f,\n    0xfa58abac,\n    0xe303934b,\n    0x30fa5520,\n    0x766df6ad,\n    0xcc769188,\n    0x024c25f5,\n    0xe5d7fc4f,\n    0x2acbd7c5,\n    0x35448026,\n    0x62a38fb5,\n    0xb15a49de,\n    0xba1b6725,\n    0xea0e9845,\n    0xfec0e15d,\n    0x2f7502c3,\n    0x4cf01281,\n    0x4697a38d,\n    0xd3f9c66b,\n    0x8f5fe703,\n    0x929c9515,\n    0x6d7aebbf,\n    0x5259da95,\n    0xbe832dd4,\n    0x7421d358,\n    0xe0692949,\n    0xc9c8448e,\n    0xc2896a75,\n    0x8e7978f4,\n    0x583e6b99,\n    0xb971dd27,\n    0xe14fb6be,\n    0x88ad17f0,\n    0x20ac66c9,\n    0xce3ab47d,\n    0xdf4a1863,\n    0x1a3182e5,\n    0x51336097,\n    0x537f4562,\n    0x6477e0b1,\n    0x6bae84bb,\n    0x81a01cfe,\n    0x082b94f9,\n    0x48685870,\n    0x45fd198f,\n    0xde6c8794,\n    0x7bf8b752,\n    0x73d323ab,\n    0x4b02e272,\n    0x1f8f57e3,\n    0x55ab2a66,\n    0xeb2807b2,\n    0xb5c2032f,\n    0xc57b9a86,\n    0x3708a5d3,\n    0x2887f230,\n    0xbfa5b223,\n    0x036aba02,\n    0x16825ced,\n    0xcf1c2b8a,\n    0x79b492a7,\n    0x07f2f0f3,\n    0x69e2a14e,\n    0xdaf4cd65,\n    0x05bed506,\n    0x34621fd1,\n    0xa6fe8ac4,\n    0x2e539d34,\n    0xf355a0a2,\n    0x8ae13205,\n    0xf6eb75a4,\n    0x83ec390b,\n    0x60efaa40,\n    0x719f065e,\n    0x6e1051bd,\n    0x218af93e,\n    0xdd063d96,\n    0x3e05aedd,\n    0xe6bd464d,\n    0x548db591,\n    0xc45d0571,\n    0x06d46f04,\n    0x5015ff60,\n    0x98fb2419,\n    0xbde997d6,\n    0x4043cc89,\n    0xd99e7767,\n    0xe842bdb0,\n    0x898b8807,\n    0x195b38e7,\n    0xc8eedb79,\n    0x7c0a47a1,\n    0x420fe97c,\n    0x841ec9f8,\n    0x00000000,\n    0x80868309,\n    0x2bed4832,\n    0x1170ac1e,\n    0x5a724e6c,\n    0x0efffbfd,\n    0x8538560f,\n    0xaed51e3d,\n    0x2d392736,\n    0x0fd9640a,\n    0x5ca62168,\n    0x5b54d19b,\n    0x362e3a24,\n    0x0a67b10c,\n    0x57e70f93,\n    0xee96d2b4,\n    0x9b919e1b,\n    0xc0c54f80,\n    0xdc20a261,\n    0x774b695a,\n    0x121a161c,\n    0x93ba0ae2,\n    0xa02ae5c0,\n    0x22e0433c,\n    0x1b171d12,\n    0x090d0b0e,\n    0x8bc7adf2,\n    0xb6a8b92d,\n    0x1ea9c814,\n    0xf1198557,\n    0x75074caf,\n    0x99ddbbee,\n    0x7f60fda3,\n    0x01269ff7,\n    0x72f5bc5c,\n    0x663bc544,\n    0xfb7e345b,\n    0x4329768b,\n    0x23c6dccb,\n    0xedfc68b6,\n    0xe4f163b8,\n    0x31dccad7,\n    0x63851042,\n    0x97224013,\n    0xc6112084,\n    0x4a247d85,\n    0xbb3df8d2,\n    0xf93211ae,\n    0x29a16dc7,\n    0x9e2f4b1d,\n    0xb230f3dc,\n    0x8652ec0d,\n    0xc1e3d077,\n    0xb3166c2b,\n    0x70b999a9,\n    0x9448fa11,\n    0xe9642247,\n    0xfc8cc4a8,\n    0xf03f1aa0,\n    0x7d2cd856,\n    0x3390ef22,\n    0x494ec787,\n    0x38d1c1d9,\n    0xcaa2fe8c,\n    0xd40b3698,\n    0xf581cfa6,\n    0x7ade28a5,\n    0xb78e26da,\n    0xadbfa43f,\n    0x3a9de42c,\n    0x78920d50,\n    0x5fcc9b6a,\n    0x7e466254,\n    0x8d13c2f6,\n    0xd8b8e890,\n    0x39f75e2e,\n    0xc3aff582,\n    0x5d80be9f,\n    0xd0937c69,\n    0xd52da96f,\n    0x2512b3cf,\n    0xac993bc8,\n    0x187da710,\n    0x9c636ee8,\n    0x3bbb7bdb,\n    0x267809cd,\n    0x5918f46e,\n    0x9ab701ec,\n    0x4f9aa883,\n    0x956e65e6,\n    0xffe67eaa,\n    0xbccf0821,\n    0x15e8e6ef,\n    0xe79bd9ba,\n    0x6f36ce4a,\n    0x9f09d4ea,\n    0xb07cd629,\n    0xa4b2af31,\n    0x3f23312a,\n    0xa59430c6,\n    0xa266c035,\n    0x4ebc3774,\n    0x82caa6fc,\n    0x90d0b0e0,\n    0xa7d81533,\n    0x04984af1,\n    0xecdaf741,\n    0xcd500e7f,\n    0x91f62f17,\n    0x4dd68d76,\n    0xefb04d43,\n    0xaa4d54cc,\n    0x9604dfe4,\n    0xd1b5e39e,\n    0x6a881b4c,\n    0x2c1fb8c1,\n    0x65517f46,\n    0x5eea049d,\n    0x8c355d01,\n    0x877473fa,\n    0x0b412efb,\n    0x671d5ab3,\n    0xdbd25292,\n    0x105633e9,\n    0xd647136d,\n    0xd7618c9a,\n    0xa10c7a37,\n    0xf8148e59,\n    0x133c89eb,\n    0xa927eece,\n    0x61c935b7,\n    0x1ce5ede1,\n    0x47b13c7a,\n    0xd2df599c,\n    0xf2733f55,\n    0x14ce7918,\n    0xc737bf73,\n    0xf7cdea53,\n    0xfdaa5b5f,\n    0x3d6f14df,\n    0x44db8678,\n    0xaff381ca,\n    0x68c43eb9,\n    0x24342c38,\n    0xa3405fc2,\n    0x1dc37216,\n    0xe2250cbc,\n    0x3c498b28,\n    0x0d9541ff,\n    0xa8017139,\n    0x0cb3de08,\n    0xb4e49cd8,\n    0x56c19064,\n    0xcb84617b,\n    0x32b670d5,\n    0x6c5c7448,\n    0xb85742d0\n];\n// Transformations for decryption key expansion\nconst U1 = [\n    0x00000000,\n    0x0e090d0b,\n    0x1c121a16,\n    0x121b171d,\n    0x3824342c,\n    0x362d3927,\n    0x24362e3a,\n    0x2a3f2331,\n    0x70486858,\n    0x7e416553,\n    0x6c5a724e,\n    0x62537f45,\n    0x486c5c74,\n    0x4665517f,\n    0x547e4662,\n    0x5a774b69,\n    0xe090d0b0,\n    0xee99ddbb,\n    0xfc82caa6,\n    0xf28bc7ad,\n    0xd8b4e49c,\n    0xd6bde997,\n    0xc4a6fe8a,\n    0xcaaff381,\n    0x90d8b8e8,\n    0x9ed1b5e3,\n    0x8ccaa2fe,\n    0x82c3aff5,\n    0xa8fc8cc4,\n    0xa6f581cf,\n    0xb4ee96d2,\n    0xbae79bd9,\n    0xdb3bbb7b,\n    0xd532b670,\n    0xc729a16d,\n    0xc920ac66,\n    0xe31f8f57,\n    0xed16825c,\n    0xff0d9541,\n    0xf104984a,\n    0xab73d323,\n    0xa57ade28,\n    0xb761c935,\n    0xb968c43e,\n    0x9357e70f,\n    0x9d5eea04,\n    0x8f45fd19,\n    0x814cf012,\n    0x3bab6bcb,\n    0x35a266c0,\n    0x27b971dd,\n    0x29b07cd6,\n    0x038f5fe7,\n    0x0d8652ec,\n    0x1f9d45f1,\n    0x119448fa,\n    0x4be30393,\n    0x45ea0e98,\n    0x57f11985,\n    0x59f8148e,\n    0x73c737bf,\n    0x7dce3ab4,\n    0x6fd52da9,\n    0x61dc20a2,\n    0xad766df6,\n    0xa37f60fd,\n    0xb16477e0,\n    0xbf6d7aeb,\n    0x955259da,\n    0x9b5b54d1,\n    0x894043cc,\n    0x87494ec7,\n    0xdd3e05ae,\n    0xd33708a5,\n    0xc12c1fb8,\n    0xcf2512b3,\n    0xe51a3182,\n    0xeb133c89,\n    0xf9082b94,\n    0xf701269f,\n    0x4de6bd46,\n    0x43efb04d,\n    0x51f4a750,\n    0x5ffdaa5b,\n    0x75c2896a,\n    0x7bcb8461,\n    0x69d0937c,\n    0x67d99e77,\n    0x3daed51e,\n    0x33a7d815,\n    0x21bccf08,\n    0x2fb5c203,\n    0x058ae132,\n    0x0b83ec39,\n    0x1998fb24,\n    0x1791f62f,\n    0x764dd68d,\n    0x7844db86,\n    0x6a5fcc9b,\n    0x6456c190,\n    0x4e69e2a1,\n    0x4060efaa,\n    0x527bf8b7,\n    0x5c72f5bc,\n    0x0605bed5,\n    0x080cb3de,\n    0x1a17a4c3,\n    0x141ea9c8,\n    0x3e218af9,\n    0x302887f2,\n    0x223390ef,\n    0x2c3a9de4,\n    0x96dd063d,\n    0x98d40b36,\n    0x8acf1c2b,\n    0x84c61120,\n    0xaef93211,\n    0xa0f03f1a,\n    0xb2eb2807,\n    0xbce2250c,\n    0xe6956e65,\n    0xe89c636e,\n    0xfa877473,\n    0xf48e7978,\n    0xdeb15a49,\n    0xd0b85742,\n    0xc2a3405f,\n    0xccaa4d54,\n    0x41ecdaf7,\n    0x4fe5d7fc,\n    0x5dfec0e1,\n    0x53f7cdea,\n    0x79c8eedb,\n    0x77c1e3d0,\n    0x65daf4cd,\n    0x6bd3f9c6,\n    0x31a4b2af,\n    0x3fadbfa4,\n    0x2db6a8b9,\n    0x23bfa5b2,\n    0x09808683,\n    0x07898b88,\n    0x15929c95,\n    0x1b9b919e,\n    0xa17c0a47,\n    0xaf75074c,\n    0xbd6e1051,\n    0xb3671d5a,\n    0x99583e6b,\n    0x97513360,\n    0x854a247d,\n    0x8b432976,\n    0xd134621f,\n    0xdf3d6f14,\n    0xcd267809,\n    0xc32f7502,\n    0xe9105633,\n    0xe7195b38,\n    0xf5024c25,\n    0xfb0b412e,\n    0x9ad7618c,\n    0x94de6c87,\n    0x86c57b9a,\n    0x88cc7691,\n    0xa2f355a0,\n    0xacfa58ab,\n    0xbee14fb6,\n    0xb0e842bd,\n    0xea9f09d4,\n    0xe49604df,\n    0xf68d13c2,\n    0xf8841ec9,\n    0xd2bb3df8,\n    0xdcb230f3,\n    0xcea927ee,\n    0xc0a02ae5,\n    0x7a47b13c,\n    0x744ebc37,\n    0x6655ab2a,\n    0x685ca621,\n    0x42638510,\n    0x4c6a881b,\n    0x5e719f06,\n    0x5078920d,\n    0x0a0fd964,\n    0x0406d46f,\n    0x161dc372,\n    0x1814ce79,\n    0x322bed48,\n    0x3c22e043,\n    0x2e39f75e,\n    0x2030fa55,\n    0xec9ab701,\n    0xe293ba0a,\n    0xf088ad17,\n    0xfe81a01c,\n    0xd4be832d,\n    0xdab78e26,\n    0xc8ac993b,\n    0xc6a59430,\n    0x9cd2df59,\n    0x92dbd252,\n    0x80c0c54f,\n    0x8ec9c844,\n    0xa4f6eb75,\n    0xaaffe67e,\n    0xb8e4f163,\n    0xb6edfc68,\n    0x0c0a67b1,\n    0x02036aba,\n    0x10187da7,\n    0x1e1170ac,\n    0x342e539d,\n    0x3a275e96,\n    0x283c498b,\n    0x26354480,\n    0x7c420fe9,\n    0x724b02e2,\n    0x605015ff,\n    0x6e5918f4,\n    0x44663bc5,\n    0x4a6f36ce,\n    0x587421d3,\n    0x567d2cd8,\n    0x37a10c7a,\n    0x39a80171,\n    0x2bb3166c,\n    0x25ba1b67,\n    0x0f853856,\n    0x018c355d,\n    0x13972240,\n    0x1d9e2f4b,\n    0x47e96422,\n    0x49e06929,\n    0x5bfb7e34,\n    0x55f2733f,\n    0x7fcd500e,\n    0x71c45d05,\n    0x63df4a18,\n    0x6dd64713,\n    0xd731dcca,\n    0xd938d1c1,\n    0xcb23c6dc,\n    0xc52acbd7,\n    0xef15e8e6,\n    0xe11ce5ed,\n    0xf307f2f0,\n    0xfd0efffb,\n    0xa779b492,\n    0xa970b999,\n    0xbb6bae84,\n    0xb562a38f,\n    0x9f5d80be,\n    0x91548db5,\n    0x834f9aa8,\n    0x8d4697a3\n];\nconst U2 = [\n    0x00000000,\n    0x0b0e090d,\n    0x161c121a,\n    0x1d121b17,\n    0x2c382434,\n    0x27362d39,\n    0x3a24362e,\n    0x312a3f23,\n    0x58704868,\n    0x537e4165,\n    0x4e6c5a72,\n    0x4562537f,\n    0x74486c5c,\n    0x7f466551,\n    0x62547e46,\n    0x695a774b,\n    0xb0e090d0,\n    0xbbee99dd,\n    0xa6fc82ca,\n    0xadf28bc7,\n    0x9cd8b4e4,\n    0x97d6bde9,\n    0x8ac4a6fe,\n    0x81caaff3,\n    0xe890d8b8,\n    0xe39ed1b5,\n    0xfe8ccaa2,\n    0xf582c3af,\n    0xc4a8fc8c,\n    0xcfa6f581,\n    0xd2b4ee96,\n    0xd9bae79b,\n    0x7bdb3bbb,\n    0x70d532b6,\n    0x6dc729a1,\n    0x66c920ac,\n    0x57e31f8f,\n    0x5ced1682,\n    0x41ff0d95,\n    0x4af10498,\n    0x23ab73d3,\n    0x28a57ade,\n    0x35b761c9,\n    0x3eb968c4,\n    0x0f9357e7,\n    0x049d5eea,\n    0x198f45fd,\n    0x12814cf0,\n    0xcb3bab6b,\n    0xc035a266,\n    0xdd27b971,\n    0xd629b07c,\n    0xe7038f5f,\n    0xec0d8652,\n    0xf11f9d45,\n    0xfa119448,\n    0x934be303,\n    0x9845ea0e,\n    0x8557f119,\n    0x8e59f814,\n    0xbf73c737,\n    0xb47dce3a,\n    0xa96fd52d,\n    0xa261dc20,\n    0xf6ad766d,\n    0xfda37f60,\n    0xe0b16477,\n    0xebbf6d7a,\n    0xda955259,\n    0xd19b5b54,\n    0xcc894043,\n    0xc787494e,\n    0xaedd3e05,\n    0xa5d33708,\n    0xb8c12c1f,\n    0xb3cf2512,\n    0x82e51a31,\n    0x89eb133c,\n    0x94f9082b,\n    0x9ff70126,\n    0x464de6bd,\n    0x4d43efb0,\n    0x5051f4a7,\n    0x5b5ffdaa,\n    0x6a75c289,\n    0x617bcb84,\n    0x7c69d093,\n    0x7767d99e,\n    0x1e3daed5,\n    0x1533a7d8,\n    0x0821bccf,\n    0x032fb5c2,\n    0x32058ae1,\n    0x390b83ec,\n    0x241998fb,\n    0x2f1791f6,\n    0x8d764dd6,\n    0x867844db,\n    0x9b6a5fcc,\n    0x906456c1,\n    0xa14e69e2,\n    0xaa4060ef,\n    0xb7527bf8,\n    0xbc5c72f5,\n    0xd50605be,\n    0xde080cb3,\n    0xc31a17a4,\n    0xc8141ea9,\n    0xf93e218a,\n    0xf2302887,\n    0xef223390,\n    0xe42c3a9d,\n    0x3d96dd06,\n    0x3698d40b,\n    0x2b8acf1c,\n    0x2084c611,\n    0x11aef932,\n    0x1aa0f03f,\n    0x07b2eb28,\n    0x0cbce225,\n    0x65e6956e,\n    0x6ee89c63,\n    0x73fa8774,\n    0x78f48e79,\n    0x49deb15a,\n    0x42d0b857,\n    0x5fc2a340,\n    0x54ccaa4d,\n    0xf741ecda,\n    0xfc4fe5d7,\n    0xe15dfec0,\n    0xea53f7cd,\n    0xdb79c8ee,\n    0xd077c1e3,\n    0xcd65daf4,\n    0xc66bd3f9,\n    0xaf31a4b2,\n    0xa43fadbf,\n    0xb92db6a8,\n    0xb223bfa5,\n    0x83098086,\n    0x8807898b,\n    0x9515929c,\n    0x9e1b9b91,\n    0x47a17c0a,\n    0x4caf7507,\n    0x51bd6e10,\n    0x5ab3671d,\n    0x6b99583e,\n    0x60975133,\n    0x7d854a24,\n    0x768b4329,\n    0x1fd13462,\n    0x14df3d6f,\n    0x09cd2678,\n    0x02c32f75,\n    0x33e91056,\n    0x38e7195b,\n    0x25f5024c,\n    0x2efb0b41,\n    0x8c9ad761,\n    0x8794de6c,\n    0x9a86c57b,\n    0x9188cc76,\n    0xa0a2f355,\n    0xabacfa58,\n    0xb6bee14f,\n    0xbdb0e842,\n    0xd4ea9f09,\n    0xdfe49604,\n    0xc2f68d13,\n    0xc9f8841e,\n    0xf8d2bb3d,\n    0xf3dcb230,\n    0xeecea927,\n    0xe5c0a02a,\n    0x3c7a47b1,\n    0x37744ebc,\n    0x2a6655ab,\n    0x21685ca6,\n    0x10426385,\n    0x1b4c6a88,\n    0x065e719f,\n    0x0d507892,\n    0x640a0fd9,\n    0x6f0406d4,\n    0x72161dc3,\n    0x791814ce,\n    0x48322bed,\n    0x433c22e0,\n    0x5e2e39f7,\n    0x552030fa,\n    0x01ec9ab7,\n    0x0ae293ba,\n    0x17f088ad,\n    0x1cfe81a0,\n    0x2dd4be83,\n    0x26dab78e,\n    0x3bc8ac99,\n    0x30c6a594,\n    0x599cd2df,\n    0x5292dbd2,\n    0x4f80c0c5,\n    0x448ec9c8,\n    0x75a4f6eb,\n    0x7eaaffe6,\n    0x63b8e4f1,\n    0x68b6edfc,\n    0xb10c0a67,\n    0xba02036a,\n    0xa710187d,\n    0xac1e1170,\n    0x9d342e53,\n    0x963a275e,\n    0x8b283c49,\n    0x80263544,\n    0xe97c420f,\n    0xe2724b02,\n    0xff605015,\n    0xf46e5918,\n    0xc544663b,\n    0xce4a6f36,\n    0xd3587421,\n    0xd8567d2c,\n    0x7a37a10c,\n    0x7139a801,\n    0x6c2bb316,\n    0x6725ba1b,\n    0x560f8538,\n    0x5d018c35,\n    0x40139722,\n    0x4b1d9e2f,\n    0x2247e964,\n    0x2949e069,\n    0x345bfb7e,\n    0x3f55f273,\n    0x0e7fcd50,\n    0x0571c45d,\n    0x1863df4a,\n    0x136dd647,\n    0xcad731dc,\n    0xc1d938d1,\n    0xdccb23c6,\n    0xd7c52acb,\n    0xe6ef15e8,\n    0xede11ce5,\n    0xf0f307f2,\n    0xfbfd0eff,\n    0x92a779b4,\n    0x99a970b9,\n    0x84bb6bae,\n    0x8fb562a3,\n    0xbe9f5d80,\n    0xb591548d,\n    0xa8834f9a,\n    0xa38d4697\n];\nconst U3 = [\n    0x00000000,\n    0x0d0b0e09,\n    0x1a161c12,\n    0x171d121b,\n    0x342c3824,\n    0x3927362d,\n    0x2e3a2436,\n    0x23312a3f,\n    0x68587048,\n    0x65537e41,\n    0x724e6c5a,\n    0x7f456253,\n    0x5c74486c,\n    0x517f4665,\n    0x4662547e,\n    0x4b695a77,\n    0xd0b0e090,\n    0xddbbee99,\n    0xcaa6fc82,\n    0xc7adf28b,\n    0xe49cd8b4,\n    0xe997d6bd,\n    0xfe8ac4a6,\n    0xf381caaf,\n    0xb8e890d8,\n    0xb5e39ed1,\n    0xa2fe8cca,\n    0xaff582c3,\n    0x8cc4a8fc,\n    0x81cfa6f5,\n    0x96d2b4ee,\n    0x9bd9bae7,\n    0xbb7bdb3b,\n    0xb670d532,\n    0xa16dc729,\n    0xac66c920,\n    0x8f57e31f,\n    0x825ced16,\n    0x9541ff0d,\n    0x984af104,\n    0xd323ab73,\n    0xde28a57a,\n    0xc935b761,\n    0xc43eb968,\n    0xe70f9357,\n    0xea049d5e,\n    0xfd198f45,\n    0xf012814c,\n    0x6bcb3bab,\n    0x66c035a2,\n    0x71dd27b9,\n    0x7cd629b0,\n    0x5fe7038f,\n    0x52ec0d86,\n    0x45f11f9d,\n    0x48fa1194,\n    0x03934be3,\n    0x0e9845ea,\n    0x198557f1,\n    0x148e59f8,\n    0x37bf73c7,\n    0x3ab47dce,\n    0x2da96fd5,\n    0x20a261dc,\n    0x6df6ad76,\n    0x60fda37f,\n    0x77e0b164,\n    0x7aebbf6d,\n    0x59da9552,\n    0x54d19b5b,\n    0x43cc8940,\n    0x4ec78749,\n    0x05aedd3e,\n    0x08a5d337,\n    0x1fb8c12c,\n    0x12b3cf25,\n    0x3182e51a,\n    0x3c89eb13,\n    0x2b94f908,\n    0x269ff701,\n    0xbd464de6,\n    0xb04d43ef,\n    0xa75051f4,\n    0xaa5b5ffd,\n    0x896a75c2,\n    0x84617bcb,\n    0x937c69d0,\n    0x9e7767d9,\n    0xd51e3dae,\n    0xd81533a7,\n    0xcf0821bc,\n    0xc2032fb5,\n    0xe132058a,\n    0xec390b83,\n    0xfb241998,\n    0xf62f1791,\n    0xd68d764d,\n    0xdb867844,\n    0xcc9b6a5f,\n    0xc1906456,\n    0xe2a14e69,\n    0xefaa4060,\n    0xf8b7527b,\n    0xf5bc5c72,\n    0xbed50605,\n    0xb3de080c,\n    0xa4c31a17,\n    0xa9c8141e,\n    0x8af93e21,\n    0x87f23028,\n    0x90ef2233,\n    0x9de42c3a,\n    0x063d96dd,\n    0x0b3698d4,\n    0x1c2b8acf,\n    0x112084c6,\n    0x3211aef9,\n    0x3f1aa0f0,\n    0x2807b2eb,\n    0x250cbce2,\n    0x6e65e695,\n    0x636ee89c,\n    0x7473fa87,\n    0x7978f48e,\n    0x5a49deb1,\n    0x5742d0b8,\n    0x405fc2a3,\n    0x4d54ccaa,\n    0xdaf741ec,\n    0xd7fc4fe5,\n    0xc0e15dfe,\n    0xcdea53f7,\n    0xeedb79c8,\n    0xe3d077c1,\n    0xf4cd65da,\n    0xf9c66bd3,\n    0xb2af31a4,\n    0xbfa43fad,\n    0xa8b92db6,\n    0xa5b223bf,\n    0x86830980,\n    0x8b880789,\n    0x9c951592,\n    0x919e1b9b,\n    0x0a47a17c,\n    0x074caf75,\n    0x1051bd6e,\n    0x1d5ab367,\n    0x3e6b9958,\n    0x33609751,\n    0x247d854a,\n    0x29768b43,\n    0x621fd134,\n    0x6f14df3d,\n    0x7809cd26,\n    0x7502c32f,\n    0x5633e910,\n    0x5b38e719,\n    0x4c25f502,\n    0x412efb0b,\n    0x618c9ad7,\n    0x6c8794de,\n    0x7b9a86c5,\n    0x769188cc,\n    0x55a0a2f3,\n    0x58abacfa,\n    0x4fb6bee1,\n    0x42bdb0e8,\n    0x09d4ea9f,\n    0x04dfe496,\n    0x13c2f68d,\n    0x1ec9f884,\n    0x3df8d2bb,\n    0x30f3dcb2,\n    0x27eecea9,\n    0x2ae5c0a0,\n    0xb13c7a47,\n    0xbc37744e,\n    0xab2a6655,\n    0xa621685c,\n    0x85104263,\n    0x881b4c6a,\n    0x9f065e71,\n    0x920d5078,\n    0xd9640a0f,\n    0xd46f0406,\n    0xc372161d,\n    0xce791814,\n    0xed48322b,\n    0xe0433c22,\n    0xf75e2e39,\n    0xfa552030,\n    0xb701ec9a,\n    0xba0ae293,\n    0xad17f088,\n    0xa01cfe81,\n    0x832dd4be,\n    0x8e26dab7,\n    0x993bc8ac,\n    0x9430c6a5,\n    0xdf599cd2,\n    0xd25292db,\n    0xc54f80c0,\n    0xc8448ec9,\n    0xeb75a4f6,\n    0xe67eaaff,\n    0xf163b8e4,\n    0xfc68b6ed,\n    0x67b10c0a,\n    0x6aba0203,\n    0x7da71018,\n    0x70ac1e11,\n    0x539d342e,\n    0x5e963a27,\n    0x498b283c,\n    0x44802635,\n    0x0fe97c42,\n    0x02e2724b,\n    0x15ff6050,\n    0x18f46e59,\n    0x3bc54466,\n    0x36ce4a6f,\n    0x21d35874,\n    0x2cd8567d,\n    0x0c7a37a1,\n    0x017139a8,\n    0x166c2bb3,\n    0x1b6725ba,\n    0x38560f85,\n    0x355d018c,\n    0x22401397,\n    0x2f4b1d9e,\n    0x642247e9,\n    0x692949e0,\n    0x7e345bfb,\n    0x733f55f2,\n    0x500e7fcd,\n    0x5d0571c4,\n    0x4a1863df,\n    0x47136dd6,\n    0xdccad731,\n    0xd1c1d938,\n    0xc6dccb23,\n    0xcbd7c52a,\n    0xe8e6ef15,\n    0xe5ede11c,\n    0xf2f0f307,\n    0xfffbfd0e,\n    0xb492a779,\n    0xb999a970,\n    0xae84bb6b,\n    0xa38fb562,\n    0x80be9f5d,\n    0x8db59154,\n    0x9aa8834f,\n    0x97a38d46\n];\nconst U4 = [\n    0x00000000,\n    0x090d0b0e,\n    0x121a161c,\n    0x1b171d12,\n    0x24342c38,\n    0x2d392736,\n    0x362e3a24,\n    0x3f23312a,\n    0x48685870,\n    0x4165537e,\n    0x5a724e6c,\n    0x537f4562,\n    0x6c5c7448,\n    0x65517f46,\n    0x7e466254,\n    0x774b695a,\n    0x90d0b0e0,\n    0x99ddbbee,\n    0x82caa6fc,\n    0x8bc7adf2,\n    0xb4e49cd8,\n    0xbde997d6,\n    0xa6fe8ac4,\n    0xaff381ca,\n    0xd8b8e890,\n    0xd1b5e39e,\n    0xcaa2fe8c,\n    0xc3aff582,\n    0xfc8cc4a8,\n    0xf581cfa6,\n    0xee96d2b4,\n    0xe79bd9ba,\n    0x3bbb7bdb,\n    0x32b670d5,\n    0x29a16dc7,\n    0x20ac66c9,\n    0x1f8f57e3,\n    0x16825ced,\n    0x0d9541ff,\n    0x04984af1,\n    0x73d323ab,\n    0x7ade28a5,\n    0x61c935b7,\n    0x68c43eb9,\n    0x57e70f93,\n    0x5eea049d,\n    0x45fd198f,\n    0x4cf01281,\n    0xab6bcb3b,\n    0xa266c035,\n    0xb971dd27,\n    0xb07cd629,\n    0x8f5fe703,\n    0x8652ec0d,\n    0x9d45f11f,\n    0x9448fa11,\n    0xe303934b,\n    0xea0e9845,\n    0xf1198557,\n    0xf8148e59,\n    0xc737bf73,\n    0xce3ab47d,\n    0xd52da96f,\n    0xdc20a261,\n    0x766df6ad,\n    0x7f60fda3,\n    0x6477e0b1,\n    0x6d7aebbf,\n    0x5259da95,\n    0x5b54d19b,\n    0x4043cc89,\n    0x494ec787,\n    0x3e05aedd,\n    0x3708a5d3,\n    0x2c1fb8c1,\n    0x2512b3cf,\n    0x1a3182e5,\n    0x133c89eb,\n    0x082b94f9,\n    0x01269ff7,\n    0xe6bd464d,\n    0xefb04d43,\n    0xf4a75051,\n    0xfdaa5b5f,\n    0xc2896a75,\n    0xcb84617b,\n    0xd0937c69,\n    0xd99e7767,\n    0xaed51e3d,\n    0xa7d81533,\n    0xbccf0821,\n    0xb5c2032f,\n    0x8ae13205,\n    0x83ec390b,\n    0x98fb2419,\n    0x91f62f17,\n    0x4dd68d76,\n    0x44db8678,\n    0x5fcc9b6a,\n    0x56c19064,\n    0x69e2a14e,\n    0x60efaa40,\n    0x7bf8b752,\n    0x72f5bc5c,\n    0x05bed506,\n    0x0cb3de08,\n    0x17a4c31a,\n    0x1ea9c814,\n    0x218af93e,\n    0x2887f230,\n    0x3390ef22,\n    0x3a9de42c,\n    0xdd063d96,\n    0xd40b3698,\n    0xcf1c2b8a,\n    0xc6112084,\n    0xf93211ae,\n    0xf03f1aa0,\n    0xeb2807b2,\n    0xe2250cbc,\n    0x956e65e6,\n    0x9c636ee8,\n    0x877473fa,\n    0x8e7978f4,\n    0xb15a49de,\n    0xb85742d0,\n    0xa3405fc2,\n    0xaa4d54cc,\n    0xecdaf741,\n    0xe5d7fc4f,\n    0xfec0e15d,\n    0xf7cdea53,\n    0xc8eedb79,\n    0xc1e3d077,\n    0xdaf4cd65,\n    0xd3f9c66b,\n    0xa4b2af31,\n    0xadbfa43f,\n    0xb6a8b92d,\n    0xbfa5b223,\n    0x80868309,\n    0x898b8807,\n    0x929c9515,\n    0x9b919e1b,\n    0x7c0a47a1,\n    0x75074caf,\n    0x6e1051bd,\n    0x671d5ab3,\n    0x583e6b99,\n    0x51336097,\n    0x4a247d85,\n    0x4329768b,\n    0x34621fd1,\n    0x3d6f14df,\n    0x267809cd,\n    0x2f7502c3,\n    0x105633e9,\n    0x195b38e7,\n    0x024c25f5,\n    0x0b412efb,\n    0xd7618c9a,\n    0xde6c8794,\n    0xc57b9a86,\n    0xcc769188,\n    0xf355a0a2,\n    0xfa58abac,\n    0xe14fb6be,\n    0xe842bdb0,\n    0x9f09d4ea,\n    0x9604dfe4,\n    0x8d13c2f6,\n    0x841ec9f8,\n    0xbb3df8d2,\n    0xb230f3dc,\n    0xa927eece,\n    0xa02ae5c0,\n    0x47b13c7a,\n    0x4ebc3774,\n    0x55ab2a66,\n    0x5ca62168,\n    0x63851042,\n    0x6a881b4c,\n    0x719f065e,\n    0x78920d50,\n    0x0fd9640a,\n    0x06d46f04,\n    0x1dc37216,\n    0x14ce7918,\n    0x2bed4832,\n    0x22e0433c,\n    0x39f75e2e,\n    0x30fa5520,\n    0x9ab701ec,\n    0x93ba0ae2,\n    0x88ad17f0,\n    0x81a01cfe,\n    0xbe832dd4,\n    0xb78e26da,\n    0xac993bc8,\n    0xa59430c6,\n    0xd2df599c,\n    0xdbd25292,\n    0xc0c54f80,\n    0xc9c8448e,\n    0xf6eb75a4,\n    0xffe67eaa,\n    0xe4f163b8,\n    0xedfc68b6,\n    0x0a67b10c,\n    0x036aba02,\n    0x187da710,\n    0x1170ac1e,\n    0x2e539d34,\n    0x275e963a,\n    0x3c498b28,\n    0x35448026,\n    0x420fe97c,\n    0x4b02e272,\n    0x5015ff60,\n    0x5918f46e,\n    0x663bc544,\n    0x6f36ce4a,\n    0x7421d358,\n    0x7d2cd856,\n    0xa10c7a37,\n    0xa8017139,\n    0xb3166c2b,\n    0xba1b6725,\n    0x8538560f,\n    0x8c355d01,\n    0x97224013,\n    0x9e2f4b1d,\n    0xe9642247,\n    0xe0692949,\n    0xfb7e345b,\n    0xf2733f55,\n    0xcd500e7f,\n    0xc45d0571,\n    0xdf4a1863,\n    0xd647136d,\n    0x31dccad7,\n    0x38d1c1d9,\n    0x23c6dccb,\n    0x2acbd7c5,\n    0x15e8e6ef,\n    0x1ce5ede1,\n    0x07f2f0f3,\n    0x0efffbfd,\n    0x79b492a7,\n    0x70b999a9,\n    0x6bae84bb,\n    0x62a38fb5,\n    0x5d80be9f,\n    0x548db591,\n    0x4f9aa883,\n    0x4697a38d\n];\nfunction convertToInt32(bytes) {\n    const result = [];\n    for(let i = 0; i < bytes.length; i += 4){\n        result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);\n    }\n    return result;\n}\nclass AES {\n    get key() {\n        return __classPrivateFieldGet(this, _AES_key, \"f\").slice();\n    }\n    encrypt(plaintext) {\n        if (plaintext.length != 16) {\n            throw new TypeError(\"invalid plaintext size (must be 16 bytes)\");\n        }\n        const rounds = __classPrivateFieldGet(this, _AES_Ke, \"f\").length - 1;\n        const a = [\n            0,\n            0,\n            0,\n            0\n        ];\n        // convert plaintext to (ints ^ key)\n        let t = convertToInt32(plaintext);\n        for(let i = 0; i < 4; i++){\n            t[i] ^= __classPrivateFieldGet(this, _AES_Ke, \"f\")[0][i];\n        }\n        // apply round transforms\n        for(let r = 1; r < rounds; r++){\n            for(let i = 0; i < 4; i++){\n                a[i] = T1[t[i] >> 24 & 0xff] ^ T2[t[(i + 1) % 4] >> 16 & 0xff] ^ T3[t[(i + 2) % 4] >> 8 & 0xff] ^ T4[t[(i + 3) % 4] & 0xff] ^ __classPrivateFieldGet(this, _AES_Ke, \"f\")[r][i];\n            }\n            t = a.slice();\n        }\n        // the last round is special\n        const result = new Uint8Array(16);\n        let tt = 0;\n        for(let i = 0; i < 4; i++){\n            tt = __classPrivateFieldGet(this, _AES_Ke, \"f\")[rounds][i];\n            result[4 * i] = (S[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;\n            result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;\n            result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;\n            result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;\n        }\n        return result;\n    }\n    decrypt(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new TypeError(\"invalid ciphertext size (must be 16 bytes)\");\n        }\n        const rounds = __classPrivateFieldGet(this, _AES_Kd, \"f\").length - 1;\n        const a = [\n            0,\n            0,\n            0,\n            0\n        ];\n        // convert plaintext to (ints ^ key)\n        let t = convertToInt32(ciphertext);\n        for(let i = 0; i < 4; i++){\n            t[i] ^= __classPrivateFieldGet(this, _AES_Kd, \"f\")[0][i];\n        }\n        // apply round transforms\n        for(let r = 1; r < rounds; r++){\n            for(let i = 0; i < 4; i++){\n                a[i] = T5[t[i] >> 24 & 0xff] ^ T6[t[(i + 3) % 4] >> 16 & 0xff] ^ T7[t[(i + 2) % 4] >> 8 & 0xff] ^ T8[t[(i + 1) % 4] & 0xff] ^ __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][i];\n            }\n            t = a.slice();\n        }\n        // the last round is special\n        const result = new Uint8Array(16);\n        let tt = 0;\n        for(let i = 0; i < 4; i++){\n            tt = __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds][i];\n            result[4 * i] = (Si[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;\n            result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;\n            result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;\n            result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;\n        }\n        return result;\n    }\n    constructor(key){\n        _AES_key.set(this, void 0);\n        _AES_Kd.set(this, void 0);\n        _AES_Ke.set(this, void 0);\n        if (!(this instanceof AES)) {\n            throw Error(\"AES must be instanitated with `new`\");\n        }\n        __classPrivateFieldSet(this, _AES_key, new Uint8Array(key), \"f\");\n        const rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new TypeError(\"invalid key size (must be 16, 24 or 32 bytes)\");\n        }\n        // encryption round keys\n        __classPrivateFieldSet(this, _AES_Ke, [], \"f\");\n        // decryption round keys\n        __classPrivateFieldSet(this, _AES_Kd, [], \"f\");\n        for(let i = 0; i <= rounds; i++){\n            __classPrivateFieldGet(this, _AES_Ke, \"f\").push([\n                0,\n                0,\n                0,\n                0\n            ]);\n            __classPrivateFieldGet(this, _AES_Kd, \"f\").push([\n                0,\n                0,\n                0,\n                0\n            ]);\n        }\n        const roundKeyCount = (rounds + 1) * 4;\n        const KC = this.key.length / 4;\n        // convert the key into ints\n        const tk = convertToInt32(this.key);\n        // copy values into round key arrays\n        let index;\n        for(let i = 0; i < KC; i++){\n            index = i >> 2;\n            __classPrivateFieldGet(this, _AES_Ke, \"f\")[index][i % 4] = tk[i];\n            __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds - index][i % 4] = tk[i];\n        }\n        // key expansion (fips-197 section 5.2)\n        let rconpointer = 0;\n        let t = KC, tt;\n        while(t < roundKeyCount){\n            tt = tk[KC - 1];\n            tk[0] ^= S[tt >> 16 & 0xFF] << 24 ^ S[tt >> 8 & 0xFF] << 16 ^ S[tt & 0xFF] << 8 ^ S[tt >> 24 & 0xFF] ^ rcon[rconpointer] << 24;\n            rconpointer += 1;\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for(let i = 1; i < KC; i++){\n                    tk[i] ^= tk[i - 1];\n                }\n            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            } else {\n                for(let i = 1; i < KC / 2; i++){\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[KC / 2 - 1];\n                tk[KC / 2] ^= S[tt & 0xFF] ^ S[tt >> 8 & 0xFF] << 8 ^ S[tt >> 16 & 0xFF] << 16 ^ S[tt >> 24 & 0xFF] << 24;\n                for(let i = KC / 2 + 1; i < KC; i++){\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n            // copy values into round key arrays\n            let i = 0, r, c;\n            while(i < KC && t < roundKeyCount){\n                r = t >> 2;\n                c = t % 4;\n                __classPrivateFieldGet(this, _AES_Ke, \"f\")[r][c] = tk[i];\n                __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for(let r = 1; r < rounds; r++){\n            for(let c = 0; c < 4; c++){\n                tt = __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][c];\n                __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][c] = U1[tt >> 24 & 0xFF] ^ U2[tt >> 16 & 0xFF] ^ U3[tt >> 8 & 0xFF] ^ U4[tt & 0xFF];\n            }\n        }\n    }\n}\n_AES_key = new WeakMap(), _AES_Kd = new WeakMap(), _AES_Ke = new WeakMap(); //# sourceMappingURL=aes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/aes-js/lib.esm/aes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/aes-js/lib.esm/index.js":
/*!***********************************************!*\
  !*** ../node_modules/aes-js/lib.esm/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AES: function() { return /* reexport safe */ _aes_js__WEBPACK_IMPORTED_MODULE_0__.AES; },\n/* harmony export */   CBC: function() { return /* reexport safe */ _mode_cbc_js__WEBPACK_IMPORTED_MODULE_2__.CBC; },\n/* harmony export */   CFB: function() { return /* reexport safe */ _mode_cfb_js__WEBPACK_IMPORTED_MODULE_3__.CFB; },\n/* harmony export */   CTR: function() { return /* reexport safe */ _mode_ctr_js__WEBPACK_IMPORTED_MODULE_4__.CTR; },\n/* harmony export */   ECB: function() { return /* reexport safe */ _mode_ecb_js__WEBPACK_IMPORTED_MODULE_5__.ECB; },\n/* harmony export */   ModeOfOperation: function() { return /* reexport safe */ _mode_js__WEBPACK_IMPORTED_MODULE_1__.ModeOfOperation; },\n/* harmony export */   OFB: function() { return /* reexport safe */ _mode_ofb_js__WEBPACK_IMPORTED_MODULE_6__.OFB; },\n/* harmony export */   pkcs7Pad: function() { return /* reexport safe */ _padding_js__WEBPACK_IMPORTED_MODULE_7__.pkcs7Pad; },\n/* harmony export */   pkcs7Strip: function() { return /* reexport safe */ _padding_js__WEBPACK_IMPORTED_MODULE_7__.pkcs7Strip; }\n/* harmony export */ });\n/* harmony import */ var _aes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aes.js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/aes.js\");\n/* harmony import */ var _mode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mode.js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/mode.js\");\n/* harmony import */ var _mode_cbc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mode-cbc.js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-cbc.js\");\n/* harmony import */ var _mode_cfb_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mode-cfb.js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-cfb.js\");\n/* harmony import */ var _mode_ctr_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mode-ctr.js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-ctr.js\");\n/* harmony import */ var _mode_ecb_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mode-ecb.js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-ecb.js\");\n/* harmony import */ var _mode_ofb_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mode-ofb.js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-ofb.js\");\n/* harmony import */ var _padding_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./padding.js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/padding.js\");\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvYWVzLWpzL2xpYi5lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0I7QUFDYTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZ0IsQ0FDcEQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvYWVzLWpzL2xpYi5lc20vaW5kZXguanM/MGU4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBBRVMgfSBmcm9tIFwiLi9hZXMuanNcIjtcbmV4cG9ydCB7IE1vZGVPZk9wZXJhdGlvbiB9IGZyb20gXCIuL21vZGUuanNcIjtcbmV4cG9ydCB7IENCQyB9IGZyb20gXCIuL21vZGUtY2JjLmpzXCI7XG5leHBvcnQgeyBDRkIgfSBmcm9tIFwiLi9tb2RlLWNmYi5qc1wiO1xuZXhwb3J0IHsgQ1RSIH0gZnJvbSBcIi4vbW9kZS1jdHIuanNcIjtcbmV4cG9ydCB7IEVDQiB9IGZyb20gXCIuL21vZGUtZWNiLmpzXCI7XG5leHBvcnQgeyBPRkIgfSBmcm9tIFwiLi9tb2RlLW9mYi5qc1wiO1xuZXhwb3J0IHsgcGtjczdQYWQsIHBrY3M3U3RyaXAgfSBmcm9tIFwiLi9wYWRkaW5nLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiQUVTIiwiTW9kZU9mT3BlcmF0aW9uIiwiQ0JDIiwiQ0ZCIiwiQ1RSIiwiRUNCIiwiT0ZCIiwicGtjczdQYWQiLCJwa2NzN1N0cmlwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/aes-js/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-cbc.js":
/*!**************************************************!*\
  !*** ../node_modules/aes-js/lib.esm/mode-cbc.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CBC: function() { return /* binding */ CBC; }\n/* harmony export */ });\n/* harmony import */ var _mode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mode.js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/mode.js\");\n// Cipher Block Chaining\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CBC_iv, _CBC_lastBlock;\n\nclass CBC extends _mode_js__WEBPACK_IMPORTED_MODULE_0__.ModeOfOperation {\n    get iv() {\n        return new Uint8Array(__classPrivateFieldGet(this, _CBC_iv, \"f\"));\n    }\n    encrypt(plaintext) {\n        if (plaintext.length % 16) {\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n        }\n        const ciphertext = new Uint8Array(plaintext.length);\n        for(let i = 0; i < plaintext.length; i += 16){\n            for(let j = 0; j < 16; j++){\n                __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] ^= plaintext[i + j];\n            }\n            __classPrivateFieldSet(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\")), \"f\");\n            ciphertext.set(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\"), i);\n        }\n        return ciphertext;\n    }\n    decrypt(ciphertext) {\n        if (ciphertext.length % 16) {\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n        }\n        const plaintext = new Uint8Array(ciphertext.length);\n        for(let i = 0; i < ciphertext.length; i += 16){\n            const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));\n            for(let j = 0; j < 16; j++){\n                plaintext[i + j] = block[j] ^ __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j];\n                __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] = ciphertext[i + j];\n            }\n        }\n        return plaintext;\n    }\n    constructor(key, iv){\n        super(\"ECC\", key, CBC);\n        _CBC_iv.set(this, void 0);\n        _CBC_lastBlock.set(this, void 0);\n        if (iv) {\n            if (iv.length % 16) {\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n            }\n            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(iv), \"f\");\n        } else {\n            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(16), \"f\");\n        }\n        __classPrivateFieldSet(this, _CBC_lastBlock, this.iv, \"f\");\n    }\n}\n_CBC_iv = new WeakMap(), _CBC_lastBlock = new WeakMap(); //# sourceMappingURL=mode-cbc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvYWVzLWpzL2xpYi5lc20vbW9kZS1jYmMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3QkFBd0I7QUFDeEIsSUFBSUEseUJBQXlCLFNBQUssSUFBSSxTQUFJLENBQUNBLHNCQUFzQixJQUFLLFNBQVVDLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsQ0FBQztJQUMzRyxJQUFJRCxTQUFTLEtBQUssTUFBTSxJQUFJRSxVQUFVO0lBQ3RDLElBQUlGLFNBQVMsT0FBTyxDQUFDQyxHQUFHLE1BQU0sSUFBSUMsVUFBVTtJQUM1QyxJQUFJLE9BQU9KLFVBQVUsYUFBYUQsYUFBYUMsU0FBUyxDQUFDRyxJQUFJLENBQUNILE1BQU1LLEdBQUcsQ0FBQ04sV0FBVyxNQUFNLElBQUlLLFVBQVU7SUFDdkcsT0FBTyxTQUFVLE1BQU1ELEVBQUVHLElBQUksQ0FBQ1AsVUFBVUUsU0FBU0UsSUFBSUEsRUFBRUYsS0FBSyxHQUFHQSxRQUFRRCxNQUFNTyxHQUFHLENBQUNSLFVBQVVFLFFBQVNBO0FBQ3hHO0FBQ0EsSUFBSU8seUJBQXlCLFNBQUssSUFBSSxTQUFJLENBQUNBLHNCQUFzQixJQUFLLFNBQVVULFFBQVEsRUFBRUMsS0FBSyxFQUFFRSxJQUFJLEVBQUVDLENBQUM7SUFDcEcsSUFBSUQsU0FBUyxPQUFPLENBQUNDLEdBQUcsTUFBTSxJQUFJQyxVQUFVO0lBQzVDLElBQUksT0FBT0osVUFBVSxhQUFhRCxhQUFhQyxTQUFTLENBQUNHLElBQUksQ0FBQ0gsTUFBTUssR0FBRyxDQUFDTixXQUFXLE1BQU0sSUFBSUssVUFBVTtJQUN2RyxPQUFPRixTQUFTLE1BQU1DLElBQUlELFNBQVMsTUFBTUMsRUFBRUcsSUFBSSxDQUFDUCxZQUFZSSxJQUFJQSxFQUFFRixLQUFLLEdBQUdELE1BQU1TLEdBQUcsQ0FBQ1Y7QUFDeEY7QUFDQSxJQUFJVyxTQUFTQztBQUMrQjtBQUNyQyxNQUFNRSxZQUFZRCxxREFBZUE7SUFnQnBDLElBQUlFLEtBQUs7UUFBRSxPQUFPLElBQUlDLFdBQVdQLHVCQUF1QixJQUFJLEVBQUVFLFNBQVM7SUFBTztJQUM5RU0sUUFBUUMsU0FBUyxFQUFFO1FBQ2YsSUFBSUEsVUFBVUMsTUFBTSxHQUFHLElBQUk7WUFDdkIsTUFBTSxJQUFJZCxVQUFVO1FBQ3hCO1FBQ0EsTUFBTWUsYUFBYSxJQUFJSixXQUFXRSxVQUFVQyxNQUFNO1FBQ2xELElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJSCxVQUFVQyxNQUFNLEVBQUVFLEtBQUssR0FBSTtZQUMzQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxJQUFJQSxJQUFLO2dCQUN6QmIsdUJBQXVCLElBQUksRUFBRUcsZ0JBQWdCLElBQUksQ0FBQ1UsRUFBRSxJQUFJSixTQUFTLENBQUNHLElBQUlDLEVBQUU7WUFDNUU7WUFDQXZCLHVCQUF1QixJQUFJLEVBQUVhLGdCQUFnQixJQUFJLENBQUNXLEdBQUcsQ0FBQ04sT0FBTyxDQUFDUix1QkFBdUIsSUFBSSxFQUFFRyxnQkFBZ0IsT0FBTztZQUNsSFEsV0FBV1osR0FBRyxDQUFDQyx1QkFBdUIsSUFBSSxFQUFFRyxnQkFBZ0IsTUFBTVM7UUFDdEU7UUFDQSxPQUFPRDtJQUNYO0lBQ0FJLFFBQVFKLFVBQVUsRUFBRTtRQUNoQixJQUFJQSxXQUFXRCxNQUFNLEdBQUcsSUFBSTtZQUN4QixNQUFNLElBQUlkLFVBQVU7UUFDeEI7UUFDQSxNQUFNYSxZQUFZLElBQUlGLFdBQVdJLFdBQVdELE1BQU07UUFDbEQsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUlELFdBQVdELE1BQU0sRUFBRUUsS0FBSyxHQUFJO1lBQzVDLE1BQU1JLFFBQVEsSUFBSSxDQUFDRixHQUFHLENBQUNDLE9BQU8sQ0FBQ0osV0FBV00sUUFBUSxDQUFDTCxHQUFHQSxJQUFJO1lBQzFELElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLElBQUlBLElBQUs7Z0JBQ3pCSixTQUFTLENBQUNHLElBQUlDLEVBQUUsR0FBR0csS0FBSyxDQUFDSCxFQUFFLEdBQUdiLHVCQUF1QixJQUFJLEVBQUVHLGdCQUFnQixJQUFJLENBQUNVLEVBQUU7Z0JBQ2xGYix1QkFBdUIsSUFBSSxFQUFFRyxnQkFBZ0IsSUFBSSxDQUFDVSxFQUFFLEdBQUdGLFVBQVUsQ0FBQ0MsSUFBSUMsRUFBRTtZQUM1RTtRQUNKO1FBQ0EsT0FBT0o7SUFDWDtJQTNDQVMsWUFBWUMsR0FBRyxFQUFFYixFQUFFLENBQUU7UUFDakIsS0FBSyxDQUFDLE9BQU9hLEtBQUtkO1FBQ2xCSCxRQUFRSCxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUs7UUFDdkJJLGVBQWVKLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSztRQUM5QixJQUFJTyxJQUFJO1lBQ0osSUFBSUEsR0FBR0ksTUFBTSxHQUFHLElBQUk7Z0JBQ2hCLE1BQU0sSUFBSWQsVUFBVTtZQUN4QjtZQUNBTix1QkFBdUIsSUFBSSxFQUFFWSxTQUFTLElBQUlLLFdBQVdELEtBQUs7UUFDOUQsT0FDSztZQUNEaEIsdUJBQXVCLElBQUksRUFBRVksU0FBUyxJQUFJSyxXQUFXLEtBQUs7UUFDOUQ7UUFDQWpCLHVCQUF1QixJQUFJLEVBQUVhLGdCQUFnQixJQUFJLENBQUNHLEVBQUUsRUFBRTtJQUMxRDtBQThCSjtBQUNBSixVQUFVLElBQUlrQixXQUFXakIsaUJBQWlCLElBQUlpQixXQUM5QyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmVzbS9tb2RlLWNiYy5qcz83YTVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENpcGhlciBCbG9jayBDaGFpbmluZ1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9DQkNfaXYsIF9DQkNfbGFzdEJsb2NrO1xuaW1wb3J0IHsgTW9kZU9mT3BlcmF0aW9uIH0gZnJvbSBcIi4vbW9kZS5qc1wiO1xuZXhwb3J0IGNsYXNzIENCQyBleHRlbmRzIE1vZGVPZk9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3Ioa2V5LCBpdikge1xuICAgICAgICBzdXBlcihcIkVDQ1wiLCBrZXksIENCQyk7XG4gICAgICAgIF9DQkNfaXYuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9DQkNfbGFzdEJsb2NrLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBpZiAoaXYpIHtcbiAgICAgICAgICAgIGlmIChpdi5sZW5ndGggJSAxNikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIGl2IHNpemUgKG11c3QgYmUgMTYgYnl0ZXMpXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ0JDX2l2LCBuZXcgVWludDhBcnJheShpdiksIFwiZlwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0NCQ19pdiwgbmV3IFVpbnQ4QXJyYXkoMTYpLCBcImZcIik7XG4gICAgICAgIH1cbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ0JDX2xhc3RCbG9jaywgdGhpcy5pdiwgXCJmXCIpO1xuICAgIH1cbiAgICBnZXQgaXYoKSB7IHJldHVybiBuZXcgVWludDhBcnJheShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DQkNfaXYsIFwiZlwiKSk7IH1cbiAgICBlbmNyeXB0KHBsYWludGV4dCkge1xuICAgICAgICBpZiAocGxhaW50ZXh0Lmxlbmd0aCAlIDE2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiaW52YWxpZCBwbGFpbnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcylcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2lwaGVydGV4dCA9IG5ldyBVaW50OEFycmF5KHBsYWludGV4dC5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsYWludGV4dC5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTY7IGorKykge1xuICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NCQ19sYXN0QmxvY2ssIFwiZlwiKVtqXSBePSBwbGFpbnRleHRbaSArIGpdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ0JDX2xhc3RCbG9jaywgdGhpcy5hZXMuZW5jcnlwdChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DQkNfbGFzdEJsb2NrLCBcImZcIikpLCBcImZcIik7XG4gICAgICAgICAgICBjaXBoZXJ0ZXh0LnNldChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DQkNfbGFzdEJsb2NrLCBcImZcIiksIGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaXBoZXJ0ZXh0O1xuICAgIH1cbiAgICBkZWNyeXB0KGNpcGhlcnRleHQpIHtcbiAgICAgICAgaWYgKGNpcGhlcnRleHQubGVuZ3RoICUgMTYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcylcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGxhaW50ZXh0ID0gbmV3IFVpbnQ4QXJyYXkoY2lwaGVydGV4dC5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNpcGhlcnRleHQubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuYWVzLmRlY3J5cHQoY2lwaGVydGV4dC5zdWJhcnJheShpLCBpICsgMTYpKTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTY7IGorKykge1xuICAgICAgICAgICAgICAgIHBsYWludGV4dFtpICsgal0gPSBibG9ja1tqXSBeIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NCQ19sYXN0QmxvY2ssIFwiZlwiKVtqXTtcbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DQkNfbGFzdEJsb2NrLCBcImZcIilbal0gPSBjaXBoZXJ0ZXh0W2kgKyBqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGxhaW50ZXh0O1xuICAgIH1cbn1cbl9DQkNfaXYgPSBuZXcgV2Vha01hcCgpLCBfQ0JDX2xhc3RCbG9jayA9IG5ldyBXZWFrTWFwKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlLWNiYy5qcy5tYXAiXSwibmFtZXMiOlsiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsInJlY2VpdmVyIiwic3RhdGUiLCJ2YWx1ZSIsImtpbmQiLCJmIiwiVHlwZUVycm9yIiwiaGFzIiwiY2FsbCIsInNldCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJnZXQiLCJfQ0JDX2l2IiwiX0NCQ19sYXN0QmxvY2siLCJNb2RlT2ZPcGVyYXRpb24iLCJDQkMiLCJpdiIsIlVpbnQ4QXJyYXkiLCJlbmNyeXB0IiwicGxhaW50ZXh0IiwibGVuZ3RoIiwiY2lwaGVydGV4dCIsImkiLCJqIiwiYWVzIiwiZGVjcnlwdCIsImJsb2NrIiwic3ViYXJyYXkiLCJjb25zdHJ1Y3RvciIsImtleSIsIldlYWtNYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-cbc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-cfb.js":
/*!**************************************************!*\
  !*** ../node_modules/aes-js/lib.esm/mode-cfb.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CFB: function() { return /* binding */ CFB; }\n/* harmony export */ });\n/* harmony import */ var _mode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mode.js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/mode.js\");\n// Cipher Feedback\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CFB_instances, _CFB_iv, _CFB_shiftRegister, _CFB_shift;\n\nclass CFB extends _mode_js__WEBPACK_IMPORTED_MODULE_0__.ModeOfOperation {\n    get iv() {\n        return new Uint8Array(__classPrivateFieldGet(this, _CFB_iv, \"f\"));\n    }\n    encrypt(plaintext) {\n        if (8 * plaintext.length % this.segmentSize) {\n            throw new TypeError(\"invalid plaintext size (must be multiple of segmentSize bytes)\");\n        }\n        const segmentSize = this.segmentSize / 8;\n        const ciphertext = new Uint8Array(plaintext);\n        for(let i = 0; i < ciphertext.length; i += segmentSize){\n            const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\"));\n            for(let j = 0; j < segmentSize; j++){\n                ciphertext[i + j] ^= xorSegment[j];\n            }\n            __classPrivateFieldGet(this, _CFB_instances, \"m\", _CFB_shift).call(this, ciphertext.subarray(i));\n        }\n        return ciphertext;\n    }\n    decrypt(ciphertext) {\n        if (8 * ciphertext.length % this.segmentSize) {\n            throw new TypeError(\"invalid ciphertext size (must be multiple of segmentSize bytes)\");\n        }\n        const segmentSize = this.segmentSize / 8;\n        const plaintext = new Uint8Array(ciphertext);\n        for(let i = 0; i < plaintext.length; i += segmentSize){\n            const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\"));\n            for(let j = 0; j < segmentSize; j++){\n                plaintext[i + j] ^= xorSegment[j];\n            }\n            __classPrivateFieldGet(this, _CFB_instances, \"m\", _CFB_shift).call(this, ciphertext.subarray(i));\n        }\n        return plaintext;\n    }\n    constructor(key, iv, segmentSize = 8){\n        super(\"CFB\", key, CFB);\n        _CFB_instances.add(this);\n        _CFB_iv.set(this, void 0);\n        _CFB_shiftRegister.set(this, void 0);\n        // This library currently only handles byte-aligned segmentSize\n        if (!Number.isInteger(segmentSize) || segmentSize % 8) {\n            throw new TypeError(\"invalid segmentSize\");\n        }\n        Object.defineProperties(this, {\n            segmentSize: {\n                enumerable: true,\n                value: segmentSize\n            }\n        });\n        if (iv) {\n            if (iv.length % 16) {\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n            }\n            __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(iv), \"f\");\n        } else {\n            __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(16), \"f\");\n        }\n        __classPrivateFieldSet(this, _CFB_shiftRegister, this.iv, \"f\");\n    }\n}\n_CFB_iv = new WeakMap(), _CFB_shiftRegister = new WeakMap(), _CFB_instances = new WeakSet(), _CFB_shift = function _CFB_shift(data) {\n    const segmentSize = this.segmentSize / 8;\n    // Shift the register\n    __classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").set(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").subarray(segmentSize));\n    __classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").set(data.subarray(0, segmentSize), 16 - segmentSize);\n}; //# sourceMappingURL=mode-cfb.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-cfb.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-ctr.js":
/*!**************************************************!*\
  !*** ../node_modules/aes-js/lib.esm/mode-ctr.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CTR: function() { return /* binding */ CTR; }\n/* harmony export */ });\n/* harmony import */ var _mode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mode.js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/mode.js\");\n// Counter Mode\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CTR_remaining, _CTR_remainingIndex, _CTR_counter;\n\nclass CTR extends _mode_js__WEBPACK_IMPORTED_MODULE_0__.ModeOfOperation {\n    get counter() {\n        return new Uint8Array(__classPrivateFieldGet(this, _CTR_counter, \"f\"));\n    }\n    setCounterValue(value) {\n        if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n            throw new TypeError(\"invalid counter initial integer value\");\n        }\n        for(let index = 15; index >= 0; --index){\n            __classPrivateFieldGet(this, _CTR_counter, \"f\")[index] = value % 256;\n            value = Math.floor(value / 256);\n        }\n    }\n    setCounterBytes(value) {\n        if (value.length !== 16) {\n            throw new TypeError(\"invalid counter initial Uint8Array value length\");\n        }\n        __classPrivateFieldGet(this, _CTR_counter, \"f\").set(value);\n    }\n    increment() {\n        for(let i = 15; i >= 0; i--){\n            if (__classPrivateFieldGet(this, _CTR_counter, \"f\")[i] === 255) {\n                __classPrivateFieldGet(this, _CTR_counter, \"f\")[i] = 0;\n            } else {\n                __classPrivateFieldGet(this, _CTR_counter, \"f\")[i]++;\n                break;\n            }\n        }\n    }\n    encrypt(plaintext) {\n        var _a, _b;\n        const crypttext = new Uint8Array(plaintext);\n        for(let i = 0; i < crypttext.length; i++){\n            if (__classPrivateFieldGet(this, _CTR_remainingIndex, \"f\") === 16) {\n                __classPrivateFieldSet(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet(this, _CTR_counter, \"f\")), \"f\");\n                __classPrivateFieldSet(this, _CTR_remainingIndex, 0, \"f\");\n                this.increment();\n            }\n            crypttext[i] ^= __classPrivateFieldGet(this, _CTR_remaining, \"f\")[__classPrivateFieldSet(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet(this, _CTR_remainingIndex, \"f\"), _a = _b++, _b), \"f\"), _a];\n        }\n        return crypttext;\n    }\n    decrypt(ciphertext) {\n        return this.encrypt(ciphertext);\n    }\n    constructor(key, initialValue){\n        super(\"CTR\", key, CTR);\n        // Remaining bytes for the one-time pad\n        _CTR_remaining.set(this, void 0);\n        _CTR_remainingIndex.set(this, void 0);\n        // The current counter\n        _CTR_counter.set(this, void 0);\n        __classPrivateFieldSet(this, _CTR_counter, new Uint8Array(16), \"f\");\n        __classPrivateFieldGet(this, _CTR_counter, \"f\").fill(0);\n        __classPrivateFieldSet(this, _CTR_remaining, __classPrivateFieldGet(this, _CTR_counter, \"f\"), \"f\"); // This will be discarded immediately\n        __classPrivateFieldSet(this, _CTR_remainingIndex, 16, \"f\");\n        if (initialValue == null) {\n            initialValue = 1;\n        }\n        if (typeof initialValue === \"number\") {\n            this.setCounterValue(initialValue);\n        } else {\n            this.setCounterBytes(initialValue);\n        }\n    }\n}\n_CTR_remaining = new WeakMap(), _CTR_remainingIndex = new WeakMap(), _CTR_counter = new WeakMap(); //# sourceMappingURL=mode-ctr.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-ctr.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-ecb.js":
/*!**************************************************!*\
  !*** ../node_modules/aes-js/lib.esm/mode-ecb.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ECB: function() { return /* binding */ ECB; }\n/* harmony export */ });\n/* harmony import */ var _mode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mode.js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/mode.js\");\n// Electronic Code Book\n\nclass ECB extends _mode_js__WEBPACK_IMPORTED_MODULE_0__.ModeOfOperation {\n    encrypt(plaintext) {\n        if (plaintext.length % 16) {\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n        }\n        const crypttext = new Uint8Array(plaintext.length);\n        for(let i = 0; i < plaintext.length; i += 16){\n            crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);\n        }\n        return crypttext;\n    }\n    decrypt(crypttext) {\n        if (crypttext.length % 16) {\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n        }\n        const plaintext = new Uint8Array(crypttext.length);\n        for(let i = 0; i < crypttext.length; i += 16){\n            plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);\n        }\n        return plaintext;\n    }\n    constructor(key){\n        super(\"ECB\", key, ECB);\n    }\n} //# sourceMappingURL=mode-ecb.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvYWVzLWpzL2xpYi5lc20vbW9kZS1lY2IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1QkFBdUI7QUFDcUI7QUFDckMsTUFBTUMsWUFBWUQscURBQWVBO0lBSXBDRSxRQUFRQyxTQUFTLEVBQUU7UUFDZixJQUFJQSxVQUFVQyxNQUFNLEdBQUcsSUFBSTtZQUN2QixNQUFNLElBQUlDLFVBQVU7UUFDeEI7UUFDQSxNQUFNQyxZQUFZLElBQUlDLFdBQVdKLFVBQVVDLE1BQU07UUFDakQsSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUlMLFVBQVVDLE1BQU0sRUFBRUksS0FBSyxHQUFJO1lBQzNDRixVQUFVRyxHQUFHLENBQUMsSUFBSSxDQUFDQyxHQUFHLENBQUNSLE9BQU8sQ0FBQ0MsVUFBVVEsUUFBUSxDQUFDSCxHQUFHQSxJQUFJLE1BQU1BO1FBQ25FO1FBQ0EsT0FBT0Y7SUFDWDtJQUNBTSxRQUFRTixTQUFTLEVBQUU7UUFDZixJQUFJQSxVQUFVRixNQUFNLEdBQUcsSUFBSTtZQUN2QixNQUFNLElBQUlDLFVBQVU7UUFDeEI7UUFDQSxNQUFNRixZQUFZLElBQUlJLFdBQVdELFVBQVVGLE1BQU07UUFDakQsSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUlGLFVBQVVGLE1BQU0sRUFBRUksS0FBSyxHQUFJO1lBQzNDTCxVQUFVTSxHQUFHLENBQUMsSUFBSSxDQUFDQyxHQUFHLENBQUNFLE9BQU8sQ0FBQ04sVUFBVUssUUFBUSxDQUFDSCxHQUFHQSxJQUFJLE1BQU1BO1FBQ25FO1FBQ0EsT0FBT0w7SUFDWDtJQXRCQVUsWUFBWUMsR0FBRyxDQUFFO1FBQ2IsS0FBSyxDQUFDLE9BQU9BLEtBQUtiO0lBQ3RCO0FBcUJKLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvYWVzLWpzL2xpYi5lc20vbW9kZS1lY2IuanM/YTQ4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBFbGVjdHJvbmljIENvZGUgQm9va1xuaW1wb3J0IHsgTW9kZU9mT3BlcmF0aW9uIH0gZnJvbSBcIi4vbW9kZS5qc1wiO1xuZXhwb3J0IGNsYXNzIEVDQiBleHRlbmRzIE1vZGVPZk9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3Ioa2V5KSB7XG4gICAgICAgIHN1cGVyKFwiRUNCXCIsIGtleSwgRUNCKTtcbiAgICB9XG4gICAgZW5jcnlwdChwbGFpbnRleHQpIHtcbiAgICAgICAgaWYgKHBsYWludGV4dC5sZW5ndGggJSAxNikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImludmFsaWQgcGxhaW50ZXh0IHNpemUgKG11c3QgYmUgbXVsdGlwbGUgb2YgMTYgYnl0ZXMpXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNyeXB0dGV4dCA9IG5ldyBVaW50OEFycmF5KHBsYWludGV4dC5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsYWludGV4dC5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICAgICAgICAgIGNyeXB0dGV4dC5zZXQodGhpcy5hZXMuZW5jcnlwdChwbGFpbnRleHQuc3ViYXJyYXkoaSwgaSArIDE2KSksIGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcnlwdHRleHQ7XG4gICAgfVxuICAgIGRlY3J5cHQoY3J5cHR0ZXh0KSB7XG4gICAgICAgIGlmIChjcnlwdHRleHQubGVuZ3RoICUgMTYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcylcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGxhaW50ZXh0ID0gbmV3IFVpbnQ4QXJyYXkoY3J5cHR0ZXh0Lmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3J5cHR0ZXh0Lmxlbmd0aDsgaSArPSAxNikge1xuICAgICAgICAgICAgcGxhaW50ZXh0LnNldCh0aGlzLmFlcy5kZWNyeXB0KGNyeXB0dGV4dC5zdWJhcnJheShpLCBpICsgMTYpKSwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBsYWludGV4dDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlLWVjYi5qcy5tYXAiXSwibmFtZXMiOlsiTW9kZU9mT3BlcmF0aW9uIiwiRUNCIiwiZW5jcnlwdCIsInBsYWludGV4dCIsImxlbmd0aCIsIlR5cGVFcnJvciIsImNyeXB0dGV4dCIsIlVpbnQ4QXJyYXkiLCJpIiwic2V0IiwiYWVzIiwic3ViYXJyYXkiLCJkZWNyeXB0IiwiY29uc3RydWN0b3IiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-ecb.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-ofb.js":
/*!**************************************************!*\
  !*** ../node_modules/aes-js/lib.esm/mode-ofb.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OFB: function() { return /* binding */ OFB; }\n/* harmony export */ });\n/* harmony import */ var _mode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mode.js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/mode.js\");\n// Output Feedback\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _OFB_iv, _OFB_lastPrecipher, _OFB_lastPrecipherIndex;\n\nclass OFB extends _mode_js__WEBPACK_IMPORTED_MODULE_0__.ModeOfOperation {\n    get iv() {\n        return new Uint8Array(__classPrivateFieldGet(this, _OFB_iv, \"f\"));\n    }\n    encrypt(plaintext) {\n        var _a, _b;\n        if (plaintext.length % 16) {\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n        }\n        const ciphertext = new Uint8Array(plaintext);\n        for(let i = 0; i < ciphertext.length; i++){\n            if (__classPrivateFieldGet(this, _OFB_lastPrecipherIndex, \"f\") === 16) {\n                __classPrivateFieldSet(this, _OFB_lastPrecipher, this.aes.encrypt(__classPrivateFieldGet(this, _OFB_lastPrecipher, \"f\")), \"f\");\n                __classPrivateFieldSet(this, _OFB_lastPrecipherIndex, 0, \"f\");\n            }\n            ciphertext[i] ^= __classPrivateFieldGet(this, _OFB_lastPrecipher, \"f\")[__classPrivateFieldSet(this, _OFB_lastPrecipherIndex, (_b = __classPrivateFieldGet(this, _OFB_lastPrecipherIndex, \"f\"), _a = _b++, _b), \"f\"), _a];\n        }\n        return ciphertext;\n    }\n    decrypt(ciphertext) {\n        if (ciphertext.length % 16) {\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n        }\n        return this.encrypt(ciphertext);\n    }\n    constructor(key, iv){\n        super(\"OFB\", key, OFB);\n        _OFB_iv.set(this, void 0);\n        _OFB_lastPrecipher.set(this, void 0);\n        _OFB_lastPrecipherIndex.set(this, void 0);\n        if (iv) {\n            if (iv.length % 16) {\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n            }\n            __classPrivateFieldSet(this, _OFB_iv, new Uint8Array(iv), \"f\");\n        } else {\n            __classPrivateFieldSet(this, _OFB_iv, new Uint8Array(16), \"f\");\n        }\n        __classPrivateFieldSet(this, _OFB_lastPrecipher, this.iv, \"f\");\n        __classPrivateFieldSet(this, _OFB_lastPrecipherIndex, 16, \"f\");\n    }\n}\n_OFB_iv = new WeakMap(), _OFB_lastPrecipher = new WeakMap(), _OFB_lastPrecipherIndex = new WeakMap(); //# sourceMappingURL=mode-ofb.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/aes-js/lib.esm/mode-ofb.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/aes-js/lib.esm/mode.js":
/*!**********************************************!*\
  !*** ../node_modules/aes-js/lib.esm/mode.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModeOfOperation: function() { return /* binding */ ModeOfOperation; }\n/* harmony export */ });\n/* harmony import */ var _aes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aes.js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/aes.js\");\n\nclass ModeOfOperation {\n    constructor(name, key, cls){\n        if (cls && !(this instanceof cls)) {\n            throw new Error(\"\".concat(name, ' must be instantiated with \"new\"'));\n        }\n        Object.defineProperties(this, {\n            aes: {\n                enumerable: true,\n                value: new _aes_js__WEBPACK_IMPORTED_MODULE_0__.AES(key)\n            },\n            name: {\n                enumerable: true,\n                value: name\n            }\n        });\n    }\n} //# sourceMappingURL=mode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvYWVzLWpzL2xpYi5lc20vbW9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErQjtBQUN4QixNQUFNQztJQUNUQyxZQUFZQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxDQUFFO1FBQ3hCLElBQUlBLE9BQU8sQ0FBRSxLQUFJLFlBQVlBLEdBQUUsR0FBSTtZQUMvQixNQUFNLElBQUlDLE1BQU0sR0FBUSxPQUFMSCxNQUFLO1FBQzVCO1FBQ0FJLE9BQU9DLGdCQUFnQixDQUFDLElBQUksRUFBRTtZQUMxQkMsS0FBSztnQkFBRUMsWUFBWTtnQkFBTUMsT0FBTyxJQUFJWCx3Q0FBR0EsQ0FBQ0k7WUFBSztZQUM3Q0QsTUFBTTtnQkFBRU8sWUFBWTtnQkFBTUMsT0FBT1I7WUFBSztRQUMxQztJQUNKO0FBQ0osRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmVzbS9tb2RlLmpzPzA5NDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQUVTIH0gZnJvbSBcIi4vYWVzLmpzXCI7XG5leHBvcnQgY2xhc3MgTW9kZU9mT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBrZXksIGNscykge1xuICAgICAgICBpZiAoY2xzICYmICEodGhpcyBpbnN0YW5jZW9mIGNscykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtuYW1lfSBtdXN0IGJlIGluc3RhbnRpYXRlZCB3aXRoIFwibmV3XCJgKTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAgICAgICBhZXM6IHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IG5ldyBBRVMoa2V5KSB9LFxuICAgICAgICAgICAgbmFtZTogeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogbmFtZSB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZGUuanMubWFwIl0sIm5hbWVzIjpbIkFFUyIsIk1vZGVPZk9wZXJhdGlvbiIsImNvbnN0cnVjdG9yIiwibmFtZSIsImtleSIsImNscyIsIkVycm9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydGllcyIsImFlcyIsImVudW1lcmFibGUiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/aes-js/lib.esm/mode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/aes-js/lib.esm/padding.js":
/*!*************************************************!*\
  !*** ../node_modules/aes-js/lib.esm/padding.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pkcs7Pad: function() { return /* binding */ pkcs7Pad; },\n/* harmony export */   pkcs7Strip: function() { return /* binding */ pkcs7Strip; }\n/* harmony export */ });\nfunction pkcs7Pad(data) {\n    const padder = 16 - data.length % 16;\n    const result = new Uint8Array(data.length + padder);\n    result.set(data);\n    for(let i = data.length; i < result.length; i++){\n        result[i] = padder;\n    }\n    return result;\n}\nfunction pkcs7Strip(data) {\n    if (data.length < 16) {\n        throw new TypeError(\"PKCS#7 invalid length\");\n    }\n    const padder = data[data.length - 1];\n    if (padder > 16) {\n        throw new TypeError(\"PKCS#7 padding byte out of range\");\n    }\n    const length = data.length - padder;\n    for(let i = 0; i < padder; i++){\n        if (data[length + i] !== padder) {\n            throw new TypeError(\"PKCS#7 invalid padding byte\");\n        }\n    }\n    return new Uint8Array(data.subarray(0, length));\n} //# sourceMappingURL=padding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvYWVzLWpzL2xpYi5lc20vcGFkZGluZy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLFNBQVNBLFNBQVNDLElBQUk7SUFDekIsTUFBTUMsU0FBUyxLQUFNRCxLQUFLRSxNQUFNLEdBQUc7SUFDbkMsTUFBTUMsU0FBUyxJQUFJQyxXQUFXSixLQUFLRSxNQUFNLEdBQUdEO0lBQzVDRSxPQUFPRSxHQUFHLENBQUNMO0lBQ1gsSUFBSyxJQUFJTSxJQUFJTixLQUFLRSxNQUFNLEVBQUVJLElBQUlILE9BQU9ELE1BQU0sRUFBRUksSUFBSztRQUM5Q0gsTUFBTSxDQUFDRyxFQUFFLEdBQUdMO0lBQ2hCO0lBQ0EsT0FBT0U7QUFDWDtBQUNPLFNBQVNJLFdBQVdQLElBQUk7SUFDM0IsSUFBSUEsS0FBS0UsTUFBTSxHQUFHLElBQUk7UUFDbEIsTUFBTSxJQUFJTSxVQUFVO0lBQ3hCO0lBQ0EsTUFBTVAsU0FBU0QsSUFBSSxDQUFDQSxLQUFLRSxNQUFNLEdBQUcsRUFBRTtJQUNwQyxJQUFJRCxTQUFTLElBQUk7UUFDYixNQUFNLElBQUlPLFVBQVU7SUFDeEI7SUFDQSxNQUFNTixTQUFTRixLQUFLRSxNQUFNLEdBQUdEO0lBQzdCLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJTCxRQUFRSyxJQUFLO1FBQzdCLElBQUlOLElBQUksQ0FBQ0UsU0FBU0ksRUFBRSxLQUFLTCxRQUFRO1lBQzdCLE1BQU0sSUFBSU8sVUFBVTtRQUN4QjtJQUNKO0lBQ0EsT0FBTyxJQUFJSixXQUFXSixLQUFLUyxRQUFRLENBQUMsR0FBR1A7QUFDM0MsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmVzbS9wYWRkaW5nLmpzP2JhODgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHBrY3M3UGFkKGRhdGEpIHtcbiAgICBjb25zdCBwYWRkZXIgPSAxNiAtIChkYXRhLmxlbmd0aCAlIDE2KTtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCArIHBhZGRlcik7XG4gICAgcmVzdWx0LnNldChkYXRhKTtcbiAgICBmb3IgKGxldCBpID0gZGF0YS5sZW5ndGg7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0W2ldID0gcGFkZGVyO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBrY3M3U3RyaXAoZGF0YSkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA8IDE2KSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BLQ1MjNyBpbnZhbGlkIGxlbmd0aCcpO1xuICAgIH1cbiAgICBjb25zdCBwYWRkZXIgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV07XG4gICAgaWYgKHBhZGRlciA+IDE2KSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BLQ1MjNyBwYWRkaW5nIGJ5dGUgb3V0IG9mIHJhbmdlJyk7XG4gICAgfVxuICAgIGNvbnN0IGxlbmd0aCA9IGRhdGEubGVuZ3RoIC0gcGFkZGVyO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFkZGVyOyBpKyspIHtcbiAgICAgICAgaWYgKGRhdGFbbGVuZ3RoICsgaV0gIT09IHBhZGRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUEtDUyM3IGludmFsaWQgcGFkZGluZyBieXRlJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEuc3ViYXJyYXkoMCwgbGVuZ3RoKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWRkaW5nLmpzLm1hcCJdLCJuYW1lcyI6WyJwa2NzN1BhZCIsImRhdGEiLCJwYWRkZXIiLCJsZW5ndGgiLCJyZXN1bHQiLCJVaW50OEFycmF5Iiwic2V0IiwiaSIsInBrY3M3U3RyaXAiLCJUeXBlRXJyb3IiLCJzdWJhcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/aes-js/lib.esm/padding.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/_version.js":
/*!**************************************************!*\
  !*** ../node_modules/ethers/lib.esm/_version.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\n/* Do NOT modify this file; see /src.ts/_admin/update-version.ts */ /**\n *  The current version of Ethers.\n */ const version = \"6.11.1\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFpRSxHQUNqRTs7Q0FFQyxHQUNNLE1BQU1BLFVBQVUsU0FBUyxDQUNoQyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9fdmVyc2lvbi5qcz83MzIyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIERvIE5PVCBtb2RpZnkgdGhpcyBmaWxlOyBzZWUgL3NyYy50cy9fYWRtaW4vdXBkYXRlLXZlcnNpb24udHMgKi9cbi8qKlxuICogIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgRXRoZXJzLlxuICovXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiNi4xMS4xXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/abi-coder.js":
/*!*******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/abi-coder.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbiCoder: function() { return /* binding */ AbiCoder; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _coders_abstract_coder_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./coders/abstract-coder.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n/* harmony import */ var _coders_address_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./coders/address.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/address.js\");\n/* harmony import */ var _coders_array_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./coders/array.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/array.js\");\n/* harmony import */ var _coders_boolean_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./coders/boolean.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/boolean.js\");\n/* harmony import */ var _coders_bytes_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./coders/bytes.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/bytes.js\");\n/* harmony import */ var _coders_fixed_bytes_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./coders/fixed-bytes.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js\");\n/* harmony import */ var _coders_null_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./coders/null.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/null.js\");\n/* harmony import */ var _coders_number_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./coders/number.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/number.js\");\n/* harmony import */ var _coders_string_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./coders/string.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/string.js\");\n/* harmony import */ var _coders_tuple_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./coders/tuple.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/tuple.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fragments.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/fragments.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/**\n *  When sending values to or receiving values from a [[Contract]], the\n *  data is generally encoded using the [ABI standard](link-solc-abi).\n *\n *  The AbiCoder provides a utility to encode values to ABI data and\n *  decode values from ABI data.\n *\n *  Most of the time, developers should favour the [[Contract]] class,\n *  which further abstracts a lot of the finer details of ABI data.\n *\n *  @_section api/abi/abi-coder:ABI Encoding\n */ // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// https://docs.soliditylang.org/en/v0.8.17/control-structures.html\nconst PanicReasons = new Map();\nPanicReasons.set(0x00, \"GENERIC_PANIC\");\nPanicReasons.set(0x01, \"ASSERT_FALSE\");\nPanicReasons.set(0x11, \"OVERFLOW\");\nPanicReasons.set(0x12, \"DIVIDE_BY_ZERO\");\nPanicReasons.set(0x21, \"ENUM_RANGE_ERROR\");\nPanicReasons.set(0x22, \"BAD_STORAGE_DATA\");\nPanicReasons.set(0x31, \"STACK_UNDERFLOW\");\nPanicReasons.set(0x32, \"ARRAY_RANGE_ERROR\");\nPanicReasons.set(0x41, \"OUT_OF_MEMORY\");\nPanicReasons.set(0x51, \"UNINITIALIZED_FUNCTION_CALL\");\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nlet defaultCoder = null;\nlet defaultMaxInflation = 1024;\nfunction getBuiltinCallException(action, tx, data, abiCoder) {\n    let message = \"missing revert data\";\n    let reason = null;\n    const invocation = null;\n    let revert = null;\n    if (data) {\n        message = \"execution reverted\";\n        const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(data);\n        data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(data);\n        if (bytes.length === 0) {\n            message += \" (no data present; likely require(false) occurred\";\n            reason = \"require(false)\";\n        } else if (bytes.length % 32 !== 4) {\n            message += \" (could not decode reason; invalid data length)\";\n        } else if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(0, 4)) === \"0x08c379a0\") {\n            // Error(string)\n            try {\n                reason = abiCoder.decode([\n                    \"string\"\n                ], bytes.slice(4))[0];\n                revert = {\n                    signature: \"Error(string)\",\n                    name: \"Error\",\n                    args: [\n                        reason\n                    ]\n                };\n                message += \": \".concat(JSON.stringify(reason));\n            } catch (error) {\n                message += \" (could not decode reason; invalid string data)\";\n            }\n        } else if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(0, 4)) === \"0x4e487b71\") {\n            // Panic(uint256)\n            try {\n                const code = Number(abiCoder.decode([\n                    \"uint256\"\n                ], bytes.slice(4))[0]);\n                revert = {\n                    signature: \"Panic(uint256)\",\n                    name: \"Panic\",\n                    args: [\n                        code\n                    ]\n                };\n                reason = \"Panic due to \".concat(PanicReasons.get(code) || \"UNKNOWN\", \"(\").concat(code, \")\");\n                message += \": \".concat(reason);\n            } catch (error) {\n                message += \" (could not decode panic code)\";\n            }\n        } else {\n            message += \" (unknown custom error)\";\n        }\n    }\n    const transaction = {\n        to: tx.to ? (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(tx.to) : null,\n        data: tx.data || \"0x\"\n    };\n    if (tx.from) {\n        transaction.from = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(tx.from);\n    }\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(message, \"CALL_EXCEPTION\", {\n        action,\n        data,\n        reason,\n        transaction,\n        invocation,\n        revert\n    });\n}\nvar _getCoder = /*#__PURE__*/ new WeakSet();\n/**\n *  The **AbiCoder** is a low-level class responsible for encoding JavaScript\n *  values into binary data and decoding binary data into JavaScript values.\n */ class AbiCoder {\n    /**\n     *  Get the default values for the given %%types%%.\n     *\n     *  For example, a ``uint`` is by default ``0`` and ``bool``\n     *  is by default ``false``.\n     */ getDefaultValue(types) {\n        const coders = types.map((type)=>(0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _getCoder, getCoder).call(this, _fragments_js__WEBPACK_IMPORTED_MODULE_4__.ParamType.from(type)));\n        const coder = new _coders_tuple_js__WEBPACK_IMPORTED_MODULE_5__.TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n    /**\n     *  Encode the %%values%% as the %%types%% into ABI data.\n     *\n     *  @returns DataHexstring\n     */ encode(types, values) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgumentCount)(values.length, types.length, \"types/values length mismatch\");\n        const coders = types.map((type)=>(0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _getCoder, getCoder).call(this, _fragments_js__WEBPACK_IMPORTED_MODULE_4__.ParamType.from(type)));\n        const coder = new _coders_tuple_js__WEBPACK_IMPORTED_MODULE_5__.TupleCoder(coders, \"_\");\n        const writer = new _coders_abstract_coder_js__WEBPACK_IMPORTED_MODULE_6__.Writer();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    /**\n     *  Decode the ABI %%data%% as the %%types%% into values.\n     *\n     *  If %%loose%% decoding is enabled, then strict padding is\n     *  not enforced. Some older versions of Solidity incorrectly\n     *  padded event data emitted from ``external`` functions.\n     */ decode(types, data, loose) {\n        const coders = types.map((type)=>(0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _getCoder, getCoder).call(this, _fragments_js__WEBPACK_IMPORTED_MODULE_4__.ParamType.from(type)));\n        const coder = new _coders_tuple_js__WEBPACK_IMPORTED_MODULE_5__.TupleCoder(coders, \"_\");\n        return coder.decode(new _coders_abstract_coder_js__WEBPACK_IMPORTED_MODULE_6__.Reader(data, loose, defaultMaxInflation));\n    }\n    static _setDefaultMaxInflation(value) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(typeof value === \"number\" && Number.isInteger(value), \"invalid defaultMaxInflation factor\", \"value\", value);\n        defaultMaxInflation = value;\n    }\n    /**\n     *  Returns the shared singleton instance of a default [[AbiCoder]].\n     *\n     *  On the first call, the instance is created internally.\n     */ static defaultAbiCoder() {\n        if (defaultCoder == null) {\n            defaultCoder = new AbiCoder();\n        }\n        return defaultCoder;\n    }\n    /**\n     *  Returns an ethers-compatible [[CallExceptionError]] Error for the given\n     *  result %%data%% for the [[CallExceptionAction]] %%action%% against\n     *  the Transaction %%tx%%.\n     */ static getBuiltinCallException(action, tx, data) {\n        return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());\n    }\n    constructor(){\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_7__._)(this, _getCoder);\n    }\n} //# sourceMappingURL=abi-coder.js.map\nfunction getCoder(param) {\n    if (param.isArray()) {\n        return new _coders_array_js__WEBPACK_IMPORTED_MODULE_8__.ArrayCoder((0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _getCoder, getCoder).call(this, param.arrayChildren), param.arrayLength, param.name);\n    }\n    if (param.isTuple()) {\n        return new _coders_tuple_js__WEBPACK_IMPORTED_MODULE_5__.TupleCoder(param.components.map((c)=>(0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _getCoder, getCoder).call(this, c)), param.name);\n    }\n    switch(param.baseType){\n        case \"address\":\n            return new _coders_address_js__WEBPACK_IMPORTED_MODULE_9__.AddressCoder(param.name);\n        case \"bool\":\n            return new _coders_boolean_js__WEBPACK_IMPORTED_MODULE_10__.BooleanCoder(param.name);\n        case \"string\":\n            return new _coders_string_js__WEBPACK_IMPORTED_MODULE_11__.StringCoder(param.name);\n        case \"bytes\":\n            return new _coders_bytes_js__WEBPACK_IMPORTED_MODULE_12__.BytesCoder(param.name);\n        case \"\":\n            return new _coders_null_js__WEBPACK_IMPORTED_MODULE_13__.NullCoder(param.name);\n    }\n    // u?int[0-9]*\n    let match = param.type.match(paramTypeNumber);\n    if (match) {\n        let size = parseInt(match[2] || \"256\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, \"invalid \" + match[1] + \" bit length\", \"param\", param);\n        return new _coders_number_js__WEBPACK_IMPORTED_MODULE_14__.NumberCoder(size / 8, match[1] === \"int\", param.name);\n    }\n    // bytes[0-9]+\n    match = param.type.match(paramTypeBytes);\n    if (match) {\n        let size = parseInt(match[1]);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(size !== 0 && size <= 32, \"invalid bytes length\", \"param\", param);\n        return new _coders_fixed_bytes_js__WEBPACK_IMPORTED_MODULE_15__.FixedBytesCoder(size, param.name);\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(false, \"invalid type\", \"type\", param.type);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/abi-coder.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/bytes32.js":
/*!*****************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/bytes32.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeBytes32String: function() { return /* binding */ decodeBytes32String; },\n/* harmony export */   encodeBytes32String: function() { return /* binding */ encodeBytes32String; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/**\n *  About bytes32 strings...\n *\n *  @_docloc: api/utils:Bytes32 Strings\n */ \n/**\n *  Encodes %%text%% as a Bytes32 string.\n */ function encodeBytes32String(text) {\n    // Get the bytes\n    const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(text);\n    // Check we have room for null-termination\n    if (bytes.length > 31) {\n        throw new Error(\"bytes32 string must be less than 32 bytes\");\n    }\n    // Zero-pad (implicitly null-terminates)\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.zeroPadBytes)(bytes, 32);\n}\n/**\n *  Encodes the Bytes32-encoded %%bytes%% into a string.\n */ function decodeBytes32String(_bytes) {\n    const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_bytes, \"bytes\");\n    // Must be 32 bytes with a null-termination\n    if (data.length !== 32) {\n        throw new Error(\"invalid bytes32 - not 32 bytes long\");\n    }\n    if (data[31] !== 0) {\n        throw new Error(\"invalid bytes32 string - no null terminator\");\n    }\n    // Find the null termination\n    let length = 31;\n    while(data[length - 1] === 0){\n        length--;\n    }\n    // Determine the string value\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8String)(data.slice(0, length));\n} //# sourceMappingURL=bytes32.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2J5dGVzMzIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0NBSUMsR0FDcUY7QUFDdEY7O0NBRUMsR0FDTSxTQUFTSSxvQkFBb0JDLElBQUk7SUFDcEMsZ0JBQWdCO0lBQ2hCLE1BQU1DLFFBQVFMLDREQUFXQSxDQUFDSTtJQUMxQiwwQ0FBMEM7SUFDMUMsSUFBSUMsTUFBTUMsTUFBTSxHQUFHLElBQUk7UUFDbkIsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBQ0Esd0NBQXdDO0lBQ3hDLE9BQU9MLDZEQUFZQSxDQUFDRyxPQUFPO0FBQy9CO0FBQ0E7O0NBRUMsR0FDTSxTQUFTRyxvQkFBb0JDLE1BQU07SUFDdEMsTUFBTUMsT0FBT1gseURBQVFBLENBQUNVLFFBQVE7SUFDOUIsMkNBQTJDO0lBQzNDLElBQUlDLEtBQUtKLE1BQU0sS0FBSyxJQUFJO1FBQ3BCLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBLElBQUlHLElBQUksQ0FBQyxHQUFHLEtBQUssR0FBRztRQUNoQixNQUFNLElBQUlILE1BQU07SUFDcEI7SUFDQSw0QkFBNEI7SUFDNUIsSUFBSUQsU0FBUztJQUNiLE1BQU9JLElBQUksQ0FBQ0osU0FBUyxFQUFFLEtBQUssRUFBRztRQUMzQkE7SUFDSjtJQUNBLDZCQUE2QjtJQUM3QixPQUFPTCw2REFBWUEsQ0FBQ1MsS0FBS0MsS0FBSyxDQUFDLEdBQUdMO0FBQ3RDLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2J5dGVzMzIuanM/ZTU5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBBYm91dCBieXRlczMyIHN0cmluZ3MuLi5cbiAqXG4gKiAgQF9kb2Nsb2M6IGFwaS91dGlsczpCeXRlczMyIFN0cmluZ3NcbiAqL1xuaW1wb3J0IHsgZ2V0Qnl0ZXMsIHRvVXRmOEJ5dGVzLCB0b1V0ZjhTdHJpbmcsIHplcm9QYWRCeXRlcyB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuLyoqXG4gKiAgRW5jb2RlcyAlJXRleHQlJSBhcyBhIEJ5dGVzMzIgc3RyaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlQnl0ZXMzMlN0cmluZyh0ZXh0KSB7XG4gICAgLy8gR2V0IHRoZSBieXRlc1xuICAgIGNvbnN0IGJ5dGVzID0gdG9VdGY4Qnl0ZXModGV4dCk7XG4gICAgLy8gQ2hlY2sgd2UgaGF2ZSByb29tIGZvciBudWxsLXRlcm1pbmF0aW9uXG4gICAgaWYgKGJ5dGVzLmxlbmd0aCA+IDMxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImJ5dGVzMzIgc3RyaW5nIG11c3QgYmUgbGVzcyB0aGFuIDMyIGJ5dGVzXCIpO1xuICAgIH1cbiAgICAvLyBaZXJvLXBhZCAoaW1wbGljaXRseSBudWxsLXRlcm1pbmF0ZXMpXG4gICAgcmV0dXJuIHplcm9QYWRCeXRlcyhieXRlcywgMzIpO1xufVxuLyoqXG4gKiAgRW5jb2RlcyB0aGUgQnl0ZXMzMi1lbmNvZGVkICUlYnl0ZXMlJSBpbnRvIGEgc3RyaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlQnl0ZXMzMlN0cmluZyhfYnl0ZXMpIHtcbiAgICBjb25zdCBkYXRhID0gZ2V0Qnl0ZXMoX2J5dGVzLCBcImJ5dGVzXCIpO1xuICAgIC8vIE11c3QgYmUgMzIgYnl0ZXMgd2l0aCBhIG51bGwtdGVybWluYXRpb25cbiAgICBpZiAoZGF0YS5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYnl0ZXMzMiAtIG5vdCAzMiBieXRlcyBsb25nXCIpO1xuICAgIH1cbiAgICBpZiAoZGF0YVszMV0gIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBieXRlczMyIHN0cmluZyAtIG5vIG51bGwgdGVybWluYXRvclwiKTtcbiAgICB9XG4gICAgLy8gRmluZCB0aGUgbnVsbCB0ZXJtaW5hdGlvblxuICAgIGxldCBsZW5ndGggPSAzMTtcbiAgICB3aGlsZSAoZGF0YVtsZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBsZW5ndGgtLTtcbiAgICB9XG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBzdHJpbmcgdmFsdWVcbiAgICByZXR1cm4gdG9VdGY4U3RyaW5nKGRhdGEuc2xpY2UoMCwgbGVuZ3RoKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ieXRlczMyLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRCeXRlcyIsInRvVXRmOEJ5dGVzIiwidG9VdGY4U3RyaW5nIiwiemVyb1BhZEJ5dGVzIiwiZW5jb2RlQnl0ZXMzMlN0cmluZyIsInRleHQiLCJieXRlcyIsImxlbmd0aCIsIkVycm9yIiwiZGVjb2RlQnl0ZXMzMlN0cmluZyIsIl9ieXRlcyIsImRhdGEiLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/bytes32.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js":
/*!*******************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Coder: function() { return /* binding */ Coder; },\n/* harmony export */   Reader: function() { return /* binding */ Reader; },\n/* harmony export */   Result: function() { return /* binding */ Result; },\n/* harmony export */   WordSize: function() { return /* binding */ WordSize; },\n/* harmony export */   Writer: function() { return /* binding */ Writer; },\n/* harmony export */   checkResultErrors: function() { return /* binding */ checkResultErrors; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n\n\n\n\n\n\n/**\n * @_ignore:\n */ const WordSize = 32;\nconst Padding = new Uint8Array(WordSize);\n// Properties used to immediate pass through to the underlying object\n// - `then` is used to detect if an object is a Promise for await\nconst passProperties = [\n    \"then\"\n];\nconst _guard = {};\nfunction throwError(name, error) {\n    const wrapped = new Error(\"deferred error during ABI decoding triggered accessing \".concat(name));\n    wrapped.error = error;\n    throw wrapped;\n}\nvar _names = /*#__PURE__*/ new WeakMap();\n/**\n *  A [[Result]] is a sub-class of Array, which allows accessing any\n *  of its values either positionally by its index or, if keys are\n *  provided by its name.\n *\n *  @_docloc: api/abi\n */ class Result extends Array {\n    /**\n     *  Returns the Result as a normal Array.\n     *\n     *  This will throw if there are any outstanding deferred\n     *  errors.\n     */ toArray() {\n        const result = [];\n        this.forEach((item, index)=>{\n            if (item instanceof Error) {\n                throwError(\"index \".concat(index), item);\n            }\n            result.push(item);\n        });\n        return result;\n    }\n    /**\n     *  Returns the Result as an Object with each name-value pair.\n     *\n     *  This will throw if any value is unnamed, or if there are\n     *  any outstanding deferred errors.\n     */ toObject() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _names).reduce((accum, name, index)=>{\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(name != null, \"value at index ${ index } unnamed\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"toObject()\"\n            });\n            // Add values for names that don't conflict\n            if (!(name in accum)) {\n                accum[name] = this.getValue(name);\n            }\n            return accum;\n        }, {});\n    }\n    /**\n     *  @_ignore\n     */ slice(start, end) {\n        if (start == null) {\n            start = 0;\n        }\n        if (start < 0) {\n            start += this.length;\n            if (start < 0) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.length;\n        }\n        if (end < 0) {\n            end += this.length;\n            if (end < 0) {\n                end = 0;\n            }\n        }\n        if (end > this.length) {\n            end = this.length;\n        }\n        const result = [], names = [];\n        for(let i = start; i < end; i++){\n            result.push(this[i]);\n            names.push((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _names)[i]);\n        }\n        return new Result(_guard, result, names);\n    }\n    /**\n     *  @_ignore\n     */ filter(callback, thisArg) {\n        const result = [], names = [];\n        for(let i = 0; i < this.length; i++){\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(\"index \".concat(i), item);\n            }\n            if (callback.call(thisArg, item, i, this)) {\n                result.push(item);\n                names.push((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _names)[i]);\n            }\n        }\n        return new Result(_guard, result, names);\n    }\n    /**\n     *  @_ignore\n     */ map(callback, thisArg) {\n        const result = [];\n        for(let i = 0; i < this.length; i++){\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(\"index \".concat(i), item);\n            }\n            result.push(callback.call(thisArg, item, i, this));\n        }\n        return result;\n    }\n    /**\n     *  Returns the value for %%name%%.\n     *\n     *  Since it is possible to have a key whose name conflicts with\n     *  a method on a [[Result]] or its superclass Array, or any\n     *  JavaScript keyword, this ensures all named values are still\n     *  accessible by name.\n     */ getValue(name) {\n        const index = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _names).indexOf(name);\n        if (index === -1) {\n            return undefined;\n        }\n        const value = this[index];\n        if (value instanceof Error) {\n            throwError(\"property \".concat(JSON.stringify(name)), value.error);\n        }\n        return value;\n    }\n    /**\n     *  Creates a new [[Result]] for %%items%% with each entry\n     *  also accessible by its corresponding name in %%keys%%.\n     */ static fromItems(items, keys) {\n        return new Result(_guard, items, keys);\n    }\n    /**\n     *  @private\n     */ constructor(...args){\n        // To properly sub-class Array so the other built-in\n        // functions work, the constructor has to behave fairly\n        // well. So, in the event we are created via fromItems()\n        // we build the read-only Result object we want, but on\n        // any other input, we use the default constructor\n        // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);\n        const guard = args[0];\n        let items = args[1];\n        let names = (args[2] || []).slice();\n        let wrap = true;\n        if (guard !== _guard) {\n            items = args;\n            names = [];\n            wrap = false;\n        }\n        // Can't just pass in ...items since an array of length 1\n        // is a special case in the super.\n        super(items.length);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_2__._)(this, _names, {\n            writable: true,\n            value: void 0\n        });\n        items.forEach((item, index)=>{\n            this[index] = item;\n        });\n        // Find all unique keys\n        const nameCounts = names.reduce((accum, name)=>{\n            if (typeof name === \"string\") {\n                accum.set(name, (accum.get(name) || 0) + 1);\n            }\n            return accum;\n        }, new Map());\n        // Remove any key thats not unique\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _names, Object.freeze(items.map((item, index)=>{\n            const name = names[index];\n            if (name != null && nameCounts.get(name) === 1) {\n                return name;\n            }\n            return null;\n        })));\n        if (!wrap) {\n            return;\n        }\n        // A wrapped Result is immutable\n        Object.freeze(this);\n        // Proxy indices and names so we can trap deferred errors\n        return new Proxy(this, {\n            get: (target, prop, receiver)=>{\n                if (typeof prop === \"string\") {\n                    // Index accessor\n                    if (prop.match(/^[0-9]+$/)) {\n                        const index = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.getNumber)(prop, \"%index\");\n                        if (index < 0 || index >= this.length) {\n                            throw new RangeError(\"out of result range\");\n                        }\n                        const item = target[index];\n                        if (item instanceof Error) {\n                            throwError(\"index \".concat(index), item);\n                        }\n                        return item;\n                    }\n                    // Pass important checks (like `then` for Promise) through\n                    if (passProperties.indexOf(prop) >= 0) {\n                        return Reflect.get(target, prop, receiver);\n                    }\n                    const value = target[prop];\n                    if (value instanceof Function) {\n                        // Make sure functions work with private variables\n                        // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding\n                        return function() {\n                            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                                args[_key] = arguments[_key];\n                            }\n                            return value.apply(this === receiver ? target : this, args);\n                        };\n                    } else if (!(prop in target)) {\n                        // Possible name accessor\n                        return target.getValue.apply(this === receiver ? target : this, [\n                            prop\n                        ]);\n                    }\n                }\n                return Reflect.get(target, prop, receiver);\n            }\n        });\n    }\n}\n/**\n *  Returns all errors found in a [[Result]].\n *\n *  Since certain errors encountered when creating a [[Result]] do\n *  not impact the ability to continue parsing data, they are\n *  deferred until they are actually accessed. Hence a faulty string\n *  in an Event that is never used does not impact the program flow.\n *\n *  However, sometimes it may be useful to access, identify or\n *  validate correctness of a [[Result]].\n *\n *  @_docloc api/abi\n */ function checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function(path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for(let key in object){\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            } catch (error) {\n                errors.push({\n                    path: childPath,\n                    error: error\n                });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nfunction getValue(value) {\n    let bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.toBeArray)(value);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(bytes.length <= WordSize, \"value out-of-bounds\", \"BUFFER_OVERRUN\", {\n        buffer: bytes,\n        length: WordSize,\n        offset: bytes.length\n    });\n    if (bytes.length !== WordSize) {\n        bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.getBytesCopy)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.concat)([\n            Padding.slice(bytes.length % WordSize),\n            bytes\n        ]));\n    }\n    return bytes;\n}\n/**\n *  @_ignore\n */ class Coder {\n    _throwError(message, value) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(false, message, this.localName, value);\n    }\n    constructor(name, type, localName, dynamic){\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.defineProperties)(this, {\n            name,\n            type,\n            localName,\n            dynamic\n        }, {\n            name: \"string\",\n            type: \"string\",\n            localName: \"string\",\n            dynamic: \"boolean\"\n        });\n    }\n}\nvar // An array of WordSize lengthed objects to concatenation\n_data = /*#__PURE__*/ new WeakMap(), _dataLength = /*#__PURE__*/ new WeakMap(), _writeData = /*#__PURE__*/ new WeakSet();\n/**\n *  @_ignore\n */ class Writer {\n    get data() {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.concat)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data));\n    }\n    get length() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _dataLength);\n    }\n    appendWriter(writer) {\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_7__._)(this, _writeData, writeData).call(this, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.getBytesCopy)(writer.data));\n    }\n    // Arrayish item; pad on the right to *nearest* WordSize\n    writeBytes(value) {\n        let bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.getBytesCopy)(value);\n        const paddingOffset = bytes.length % WordSize;\n        if (paddingOffset) {\n            bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.getBytesCopy)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.concat)([\n                bytes,\n                Padding.slice(paddingOffset)\n            ]));\n        }\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_7__._)(this, _writeData, writeData).call(this, bytes);\n    }\n    // Numeric item; pad on the left *to* WordSize\n    writeValue(value) {\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_7__._)(this, _writeData, writeData).call(this, getValue(value));\n    }\n    // Inserts a numeric place-holder, returning a callback that can\n    // be used to asjust the value later\n    writeUpdatableValue() {\n        const offset = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data).length;\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data).push(Padding);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _dataLength, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _dataLength) + WordSize);\n        return (value)=>{\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data)[offset] = getValue(value);\n        };\n    }\n    constructor(){\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_8__._)(this, _writeData);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_2__._)(this, _data, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_2__._)(this, _dataLength, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _data, []);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _dataLength, 0);\n    }\n}\nfunction writeData(data) {\n    (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data).push(data);\n    (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _dataLength, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _dataLength) + data.length);\n    return data.length;\n}\nvar _data1 = /*#__PURE__*/ new WeakMap(), _offset = /*#__PURE__*/ new WeakMap(), _bytesRead = /*#__PURE__*/ new WeakMap(), _parent = /*#__PURE__*/ new WeakMap(), _maxInflation = /*#__PURE__*/ new WeakMap(), _incrementBytesRead = /*#__PURE__*/ new WeakSet(), _peekBytes = /*#__PURE__*/ new WeakSet();\n/**\n *  @_ignore\n */ class Reader {\n    get data() {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.hexlify)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data1));\n    }\n    get dataLength() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data1).length;\n    }\n    get consumed() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset);\n    }\n    get bytes() {\n        return new Uint8Array((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data1));\n    }\n    // Create a sub-reader with the same underlying data, but offset\n    subReader(offset) {\n        const reader = new Reader((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data1).slice((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset) + offset), this.allowLoose, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _maxInflation));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(reader, _parent, this);\n        return reader;\n    }\n    // Read bytes\n    readBytes(length, loose) {\n        let bytes = (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_7__._)(this, _peekBytes, peekBytes).call(this, 0, length, !!loose);\n        (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_7__._)(this, _incrementBytesRead, incrementBytesRead).call(this, length);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _offset, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset) + bytes.length);\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    // Read a numeric values\n    readValue() {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.toBigInt)(this.readBytes(WordSize));\n    }\n    readIndex() {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.toNumber)(this.readBytes(WordSize));\n    }\n    constructor(data, allowLoose, maxInflation){\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_8__._)(this, _incrementBytesRead);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_8__._)(this, _peekBytes);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_2__._)(this, _data1, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_2__._)(this, _offset, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_2__._)(this, _bytesRead, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_2__._)(this, _parent, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_2__._)(this, _maxInflation, {\n            writable: true,\n            value: void 0\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.defineProperties)(this, {\n            allowLoose: !!allowLoose\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _data1, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.getBytesCopy)(data));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _bytesRead, 0);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _parent, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _maxInflation, maxInflation != null ? maxInflation : 1024);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _offset, 0);\n    }\n} //# sourceMappingURL=abstract-coder.js.map\nfunction incrementBytesRead(count) {\n    var _class_private_field_get1;\n    if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _parent)) {\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_7__._)(_class_private_field_get1 = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _parent), _incrementBytesRead, incrementBytesRead).call(_class_private_field_get1, count);\n    }\n    (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _bytesRead, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _bytesRead) + count);\n    // Check for excessive inflation (see: #4537)\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _maxInflation) < 1 || (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _bytesRead) <= (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _maxInflation) * this.dataLength, \"compressed ABI data exceeds inflation ratio of \".concat((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _maxInflation), \" ( see: https://github.com/ethers-io/ethers.js/issues/4537 )\"), \"BUFFER_OVERRUN\", {\n        buffer: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.getBytesCopy)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data1)),\n        offset: (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset),\n        length: count,\n        info: {\n            bytesRead: (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _bytesRead),\n            dataLength: this.dataLength\n        }\n    });\n}\nfunction peekBytes(offset, length, loose) {\n    let alignedLength = Math.ceil(length / WordSize) * WordSize;\n    if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset) + alignedLength > (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data1).length) {\n        if (this.allowLoose && loose && (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset) + length <= (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data1).length) {\n            alignedLength = length;\n        } else {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, \"data out-of-bounds\", \"BUFFER_OVERRUN\", {\n                buffer: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.getBytesCopy)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data1)),\n                length: (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data1).length,\n                offset: (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset) + alignedLength\n            });\n        }\n    }\n    return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _data1).slice((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset) + alignedLength);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/address.js":
/*!************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/coders/address.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddressCoder: function() { return /* binding */ AddressCoder; }\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/maths.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../typed.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n\n\n\n\n/**\n *  @_ignore\n */ class AddressCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n    encode(writer, _value) {\n        let value = _typed_js__WEBPACK_IMPORTED_MODULE_1__.Typed.dereference(_value, \"string\");\n        try {\n            value = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress)(value);\n        } catch (error) {\n            return this._throwError(error.message, _value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress)((0,_utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.toBeHex)(reader.readValue(), 20));\n    }\n    constructor(localName){\n        super(\"address\", \"address\", localName, false);\n    }\n} //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW9EO0FBQ0w7QUFDWDtBQUNRO0FBQzVDOztDQUVDLEdBQ00sTUFBTUkscUJBQXFCRCxxREFBS0E7SUFJbkNFLGVBQWU7UUFDWCxPQUFPO0lBQ1g7SUFDQUMsT0FBT0MsTUFBTSxFQUFFQyxNQUFNLEVBQUU7UUFDbkIsSUFBSUMsUUFBUVAsNENBQUtBLENBQUNRLFdBQVcsQ0FBQ0YsUUFBUTtRQUN0QyxJQUFJO1lBQ0FDLFFBQVFULDZEQUFVQSxDQUFDUztRQUN2QixFQUNBLE9BQU9FLE9BQU87WUFDVixPQUFPLElBQUksQ0FBQ0MsV0FBVyxDQUFDRCxNQUFNRSxPQUFPLEVBQUVMO1FBQzNDO1FBQ0EsT0FBT0QsT0FBT08sVUFBVSxDQUFDTDtJQUM3QjtJQUNBTSxPQUFPQyxNQUFNLEVBQUU7UUFDWCxPQUFPaEIsNkRBQVVBLENBQUNDLHdEQUFPQSxDQUFDZSxPQUFPQyxTQUFTLElBQUk7SUFDbEQ7SUFsQkFDLFlBQVlDLFNBQVMsQ0FBRTtRQUNuQixLQUFLLENBQUMsV0FBVyxXQUFXQSxXQUFXO0lBQzNDO0FBaUJKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9hZGRyZXNzLmpzPzQ4M2QiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QWRkcmVzcyB9IGZyb20gXCIuLi8uLi9hZGRyZXNzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyB0b0JlSGV4IH0gZnJvbSBcIi4uLy4uL3V0aWxzL21hdGhzLmpzXCI7XG5pbXBvcnQgeyBUeXBlZCB9IGZyb20gXCIuLi90eXBlZC5qc1wiO1xuaW1wb3J0IHsgQ29kZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2Rlci5qc1wiO1xuLyoqXG4gKiAgQF9pZ25vcmVcbiAqL1xuZXhwb3J0IGNsYXNzIEFkZHJlc3NDb2RlciBleHRlbmRzIENvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpIHtcbiAgICAgICAgc3VwZXIoXCJhZGRyZXNzXCIsIFwiYWRkcmVzc1wiLCBsb2NhbE5hbWUsIGZhbHNlKTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgX3ZhbHVlKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IFR5cGVkLmRlcmVmZXJlbmNlKF92YWx1ZSwgXCJzdHJpbmdcIik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGdldEFkZHJlc3ModmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Rocm93RXJyb3IoZXJyb3IubWVzc2FnZSwgX3ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlVmFsdWUodmFsdWUpO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBnZXRBZGRyZXNzKHRvQmVIZXgocmVhZGVyLnJlYWRWYWx1ZSgpLCAyMCkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbImdldEFkZHJlc3MiLCJ0b0JlSGV4IiwiVHlwZWQiLCJDb2RlciIsIkFkZHJlc3NDb2RlciIsImRlZmF1bHRWYWx1ZSIsImVuY29kZSIsIndyaXRlciIsIl92YWx1ZSIsInZhbHVlIiwiZGVyZWZlcmVuY2UiLCJlcnJvciIsIl90aHJvd0Vycm9yIiwibWVzc2FnZSIsIndyaXRlVmFsdWUiLCJkZWNvZGUiLCJyZWFkZXIiLCJyZWFkVmFsdWUiLCJjb25zdHJ1Y3RvciIsImxvY2FsTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/address.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/anonymous.js":
/*!**************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/coders/anonymous.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnonymousCoder: function() { return /* binding */ AnonymousCoder; }\n/* harmony export */ });\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n\n/**\n *  Clones the functionality of an existing Coder, but without a localName\n *\n *  @_ignore\n */ class AnonymousCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        return this.coder.defaultValue();\n    }\n    encode(writer, value) {\n        return this.coder.encode(writer, value);\n    }\n    decode(reader) {\n        return this.coder.decode(reader);\n    }\n    constructor(coder){\n        super(coder.name, coder.type, \"_\", coder.dynamic);\n        this.coder = coder;\n    }\n} //# sourceMappingURL=anonymous.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9hbm9ueW1vdXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEM7QUFDNUM7Ozs7Q0FJQyxHQUNNLE1BQU1DLHVCQUF1QkQscURBQUtBO0lBTXJDRSxlQUFlO1FBQ1gsT0FBTyxJQUFJLENBQUNDLEtBQUssQ0FBQ0QsWUFBWTtJQUNsQztJQUNBRSxPQUFPQyxNQUFNLEVBQUVDLEtBQUssRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0gsS0FBSyxDQUFDQyxNQUFNLENBQUNDLFFBQVFDO0lBQ3JDO0lBQ0FDLE9BQU9DLE1BQU0sRUFBRTtRQUNYLE9BQU8sSUFBSSxDQUFDTCxLQUFLLENBQUNJLE1BQU0sQ0FBQ0M7SUFDN0I7SUFaQUMsWUFBWU4sS0FBSyxDQUFFO1FBQ2YsS0FBSyxDQUFDQSxNQUFNTyxJQUFJLEVBQUVQLE1BQU1RLElBQUksRUFBRSxLQUFLUixNQUFNUyxPQUFPO1FBQ2hELElBQUksQ0FBQ1QsS0FBSyxHQUFHQTtJQUNqQjtBQVVKLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9hbm9ueW1vdXMuanM/YWRkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2RlciB9IGZyb20gXCIuL2Fic3RyYWN0LWNvZGVyLmpzXCI7XG4vKipcbiAqICBDbG9uZXMgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgYW4gZXhpc3RpbmcgQ29kZXIsIGJ1dCB3aXRob3V0IGEgbG9jYWxOYW1lXG4gKlxuICogIEBfaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBBbm9ueW1vdXNDb2RlciBleHRlbmRzIENvZGVyIHtcbiAgICBjb2RlcjtcbiAgICBjb25zdHJ1Y3Rvcihjb2Rlcikge1xuICAgICAgICBzdXBlcihjb2Rlci5uYW1lLCBjb2Rlci50eXBlLCBcIl9cIiwgY29kZXIuZHluYW1pYyk7XG4gICAgICAgIHRoaXMuY29kZXIgPSBjb2RlcjtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2Rlci5kZWZhdWx0VmFsdWUoKTtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29kZXIuZW5jb2RlKHdyaXRlciwgdmFsdWUpO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvZGVyLmRlY29kZShyZWFkZXIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFub255bW91cy5qcy5tYXAiXSwibmFtZXMiOlsiQ29kZXIiLCJBbm9ueW1vdXNDb2RlciIsImRlZmF1bHRWYWx1ZSIsImNvZGVyIiwiZW5jb2RlIiwid3JpdGVyIiwidmFsdWUiLCJkZWNvZGUiLCJyZWFkZXIiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0eXBlIiwiZHluYW1pYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/anonymous.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/array.js":
/*!**********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/coders/array.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrayCoder: function() { return /* binding */ ArrayCoder; },\n/* harmony export */   pack: function() { return /* binding */ pack; },\n/* harmony export */   unpack: function() { return /* binding */ unpack; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../typed.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abstract-coder.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n/* harmony import */ var _anonymous_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./anonymous.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/anonymous.js\");\n\n\n\n\n/**\n *  @_ignore\n */ function pack(writer, coders, values) {\n    let arrayValues = [];\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    } else if (values && typeof values === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder)=>{\n            const name = coder.localName;\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(name, \"cannot encode object for signature with missing names\", \"INVALID_ARGUMENT\", {\n                argument: \"values\",\n                info: {\n                    coder\n                },\n                value: values\n            });\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!unique[name], \"cannot encode object for signature with duplicate names\", \"INVALID_ARGUMENT\", {\n                argument: \"values\",\n                info: {\n                    coder\n                },\n                value: values\n            });\n            unique[name] = true;\n            return values[name];\n        });\n    } else {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid tuple value\", \"tuple\", values);\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(coders.length === arrayValues.length, \"types/value length mismatch\", \"tuple\", values);\n    let staticWriter = new _abstract_coder_js__WEBPACK_IMPORTED_MODULE_1__.Writer();\n    let dynamicWriter = new _abstract_coder_js__WEBPACK_IMPORTED_MODULE_1__.Writer();\n    let updateFuncs = [];\n    coders.forEach((coder, index)=>{\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset)=>{\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        } else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func)=>{\n        func(staticWriter.length);\n    });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\n/**\n *  @_ignore\n */ function unpack(reader, coders) {\n    let values = [];\n    let keys = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder)=>{\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readIndex();\n            let offsetReader = baseReader.subReader(offset);\n            try {\n                value = coder.decode(offsetReader);\n            } catch (error) {\n                // Cannot recover from this\n                if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        } else {\n            try {\n                value = coder.decode(reader);\n            } catch (error) {\n                // Cannot recover from this\n                if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value == undefined) {\n            throw new Error(\"investigate\");\n        }\n        values.push(value);\n        keys.push(coder.localName || null);\n    });\n    return _abstract_coder_js__WEBPACK_IMPORTED_MODULE_1__.Result.fromItems(values, keys);\n}\n/**\n *  @_ignore\n */ class ArrayCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_1__.Coder {\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for(let i = 0; i < this.length; i++){\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, _value) {\n        const value = _typed_js__WEBPACK_IMPORTED_MODULE_2__.Typed.dereference(_value, \"array\");\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgumentCount)(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n        let coders = [];\n        for(let i = 0; i < value.length; i++){\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readIndex();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(count * _abstract_coder_js__WEBPACK_IMPORTED_MODULE_1__.WordSize <= reader.dataLength, \"insufficient data length\", \"BUFFER_OVERRUN\", {\n                buffer: reader.bytes,\n                offset: count * _abstract_coder_js__WEBPACK_IMPORTED_MODULE_1__.WordSize,\n                length: reader.dataLength\n            });\n        }\n        let coders = [];\n        for(let i = 0; i < count; i++){\n            coders.push(new _anonymous_js__WEBPACK_IMPORTED_MODULE_3__.AnonymousCoder(this.coder));\n        }\n        return unpack(reader, coders);\n    }\n    constructor(coder, length, localName){\n        const type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n        const dynamic = length === -1 || coder.dynamic;\n        super(\"array\", type, localName, dynamic);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.defineProperties)(this, {\n            coder,\n            length\n        });\n    }\n} //# sourceMappingURL=array.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/array.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/boolean.js":
/*!************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/coders/boolean.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BooleanCoder: function() { return /* binding */ BooleanCoder; }\n/* harmony export */ });\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../typed.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n\n\n/**\n *  @_ignore\n */ class BooleanCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        return false;\n    }\n    encode(writer, _value) {\n        const value = _typed_js__WEBPACK_IMPORTED_MODULE_1__.Typed.dereference(_value, \"bool\");\n        return writer.writeValue(value ? 1 : 0);\n    }\n    decode(reader) {\n        return !!reader.readValue();\n    }\n    constructor(localName){\n        super(\"bool\", \"bool\", localName, false);\n    }\n} //# sourceMappingURL=boolean.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9ib29sZWFuLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvQztBQUNRO0FBQzVDOztDQUVDLEdBQ00sTUFBTUUscUJBQXFCRCxxREFBS0E7SUFJbkNFLGVBQWU7UUFDWCxPQUFPO0lBQ1g7SUFDQUMsT0FBT0MsTUFBTSxFQUFFQyxNQUFNLEVBQUU7UUFDbkIsTUFBTUMsUUFBUVAsNENBQUtBLENBQUNRLFdBQVcsQ0FBQ0YsUUFBUTtRQUN4QyxPQUFPRCxPQUFPSSxVQUFVLENBQUNGLFFBQVEsSUFBSTtJQUN6QztJQUNBRyxPQUFPQyxNQUFNLEVBQUU7UUFDWCxPQUFPLENBQUMsQ0FBQ0EsT0FBT0MsU0FBUztJQUM3QjtJQVpBQyxZQUFZQyxTQUFTLENBQUU7UUFDbkIsS0FBSyxDQUFDLFFBQVEsUUFBUUEsV0FBVztJQUNyQztBQVdKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9ib29sZWFuLmpzPzU5MzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZWQgfSBmcm9tIFwiLi4vdHlwZWQuanNcIjtcbmltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXIuanNcIjtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBCb29sZWFuQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgY29uc3RydWN0b3IobG9jYWxOYW1lKSB7XG4gICAgICAgIHN1cGVyKFwiYm9vbFwiLCBcImJvb2xcIiwgbG9jYWxOYW1lLCBmYWxzZSk7XG4gICAgfVxuICAgIGRlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbmNvZGUod3JpdGVyLCBfdmFsdWUpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBUeXBlZC5kZXJlZmVyZW5jZShfdmFsdWUsIFwiYm9vbFwiKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlci53cml0ZVZhbHVlKHZhbHVlID8gMSA6IDApO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiAhIXJlYWRlci5yZWFkVmFsdWUoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib29sZWFuLmpzLm1hcCJdLCJuYW1lcyI6WyJUeXBlZCIsIkNvZGVyIiwiQm9vbGVhbkNvZGVyIiwiZGVmYXVsdFZhbHVlIiwiZW5jb2RlIiwid3JpdGVyIiwiX3ZhbHVlIiwidmFsdWUiLCJkZXJlZmVyZW5jZSIsIndyaXRlVmFsdWUiLCJkZWNvZGUiLCJyZWFkZXIiLCJyZWFkVmFsdWUiLCJjb25zdHJ1Y3RvciIsImxvY2FsTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/boolean.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/bytes.js":
/*!**********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/coders/bytes.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BytesCoder: function() { return /* binding */ BytesCoder; },\n/* harmony export */   DynamicBytesCoder: function() { return /* binding */ DynamicBytesCoder; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n\n\n/**\n *  @_ignore\n */ class DynamicBytesCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        return \"0x\";\n    }\n    encode(writer, value) {\n        value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytesCopy)(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n    decode(reader) {\n        return reader.readBytes(reader.readIndex(), true);\n    }\n    constructor(type, localName){\n        super(type, type, localName, true);\n    }\n}\n/**\n *  @_ignore\n */ class BytesCoder extends DynamicBytesCoder {\n    decode(reader) {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(super.decode(reader));\n    }\n    constructor(localName){\n        super(\"bytes\", localName);\n    }\n} //# sourceMappingURL=bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9ieXRlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZEO0FBQ2pCO0FBQzVDOztDQUVDLEdBQ00sTUFBTUcsMEJBQTBCRCxxREFBS0E7SUFJeENFLGVBQWU7UUFDWCxPQUFPO0lBQ1g7SUFDQUMsT0FBT0MsTUFBTSxFQUFFQyxLQUFLLEVBQUU7UUFDbEJBLFFBQVFQLDZEQUFZQSxDQUFDTztRQUNyQixJQUFJQyxTQUFTRixPQUFPRyxVQUFVLENBQUNGLE1BQU1DLE1BQU07UUFDM0NBLFVBQVVGLE9BQU9JLFVBQVUsQ0FBQ0g7UUFDNUIsT0FBT0M7SUFDWDtJQUNBRyxPQUFPQyxNQUFNLEVBQUU7UUFDWCxPQUFPQSxPQUFPQyxTQUFTLENBQUNELE9BQU9FLFNBQVMsSUFBSTtJQUNoRDtJQWRBQyxZQUFZQyxJQUFJLEVBQUVDLFNBQVMsQ0FBRTtRQUN6QixLQUFLLENBQUNELE1BQU1BLE1BQU1DLFdBQVc7SUFDakM7QUFhSjtBQUNBOztDQUVDLEdBQ00sTUFBTUMsbUJBQW1CZjtJQUk1QlEsT0FBT0MsTUFBTSxFQUFFO1FBQ1gsT0FBT1gsd0RBQU9BLENBQUMsS0FBSyxDQUFDVSxPQUFPQztJQUNoQztJQUxBRyxZQUFZRSxTQUFTLENBQUU7UUFDbkIsS0FBSyxDQUFDLFNBQVNBO0lBQ25CO0FBSUosRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvY29kZXJzL2J5dGVzLmpzP2E0ZjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Qnl0ZXNDb3B5LCBoZXhsaWZ5IH0gZnJvbSBcIi4uLy4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBDb2RlciB9IGZyb20gXCIuL2Fic3RyYWN0LWNvZGVyLmpzXCI7XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5leHBvcnQgY2xhc3MgRHluYW1pY0J5dGVzQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgY29uc3RydWN0b3IodHlwZSwgbG9jYWxOYW1lKSB7XG4gICAgICAgIHN1cGVyKHR5cGUsIHR5cGUsIGxvY2FsTmFtZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGRlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiMHhcIjtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSBnZXRCeXRlc0NvcHkodmFsdWUpO1xuICAgICAgICBsZXQgbGVuZ3RoID0gd3JpdGVyLndyaXRlVmFsdWUodmFsdWUubGVuZ3RoKTtcbiAgICAgICAgbGVuZ3RoICs9IHdyaXRlci53cml0ZUJ5dGVzKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gcmVhZGVyLnJlYWRCeXRlcyhyZWFkZXIucmVhZEluZGV4KCksIHRydWUpO1xuICAgIH1cbn1cbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBCeXRlc0NvZGVyIGV4dGVuZHMgRHluYW1pY0J5dGVzQ29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsTmFtZSkge1xuICAgICAgICBzdXBlcihcImJ5dGVzXCIsIGxvY2FsTmFtZSk7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIGhleGxpZnkoc3VwZXIuZGVjb2RlKHJlYWRlcikpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ5dGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRCeXRlc0NvcHkiLCJoZXhsaWZ5IiwiQ29kZXIiLCJEeW5hbWljQnl0ZXNDb2RlciIsImRlZmF1bHRWYWx1ZSIsImVuY29kZSIsIndyaXRlciIsInZhbHVlIiwibGVuZ3RoIiwid3JpdGVWYWx1ZSIsIndyaXRlQnl0ZXMiLCJkZWNvZGUiLCJyZWFkZXIiLCJyZWFkQnl0ZXMiLCJyZWFkSW5kZXgiLCJjb25zdHJ1Y3RvciIsInR5cGUiLCJsb2NhbE5hbWUiLCJCeXRlc0NvZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/bytes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js":
/*!****************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FixedBytesCoder: function() { return /* binding */ FixedBytesCoder; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../typed.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n\n\n\n/**\n *  @_ignore\n */ class FixedBytesCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000000000000000000000000000\".substring(0, 2 + this.size * 2);\n    }\n    encode(writer, _value) {\n        let data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytesCopy)(_typed_js__WEBPACK_IMPORTED_MODULE_2__.Typed.dereference(_value, this.type));\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", _value);\n        }\n        return writer.writeBytes(data);\n    }\n    decode(reader) {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(reader.readBytes(this.size));\n    }\n    constructor(size, localName){\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.defineProperties)(this, {\n            size\n        }, {\n            size: \"number\"\n        });\n    }\n} //# sourceMappingURL=fixed-bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9maXhlZC1ieXRlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUErRTtBQUMzQztBQUNRO0FBQzVDOztDQUVDLEdBQ00sTUFBTUssd0JBQXdCRCxxREFBS0E7SUFPdENFLGVBQWU7UUFDWCxPQUFPLHFFQUF1RUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUNDLElBQUksR0FBRztJQUMvRztJQUNBQyxPQUFPQyxNQUFNLEVBQUVDLE1BQU0sRUFBRTtRQUNuQixJQUFJQyxPQUFPWCw2REFBWUEsQ0FBQ0UsNENBQUtBLENBQUNVLFdBQVcsQ0FBQ0YsUUFBUSxJQUFJLENBQUNHLElBQUk7UUFDM0QsSUFBSUYsS0FBS0csTUFBTSxLQUFLLElBQUksQ0FBQ1AsSUFBSSxFQUFFO1lBQzNCLElBQUksQ0FBQ1EsV0FBVyxDQUFDLHlCQUF5Qkw7UUFDOUM7UUFDQSxPQUFPRCxPQUFPTyxVQUFVLENBQUNMO0lBQzdCO0lBQ0FNLE9BQU9DLE1BQU0sRUFBRTtRQUNYLE9BQU9qQix3REFBT0EsQ0FBQ2lCLE9BQU9DLFNBQVMsQ0FBQyxJQUFJLENBQUNaLElBQUk7SUFDN0M7SUFqQkFhLFlBQVliLElBQUksRUFBRWMsU0FBUyxDQUFFO1FBQ3pCLElBQUlDLE9BQU8sVUFBVUMsT0FBT2hCO1FBQzVCLEtBQUssQ0FBQ2UsTUFBTUEsTUFBTUQsV0FBVztRQUM3QnRCLGlFQUFnQkEsQ0FBQyxJQUFJLEVBQUU7WUFBRVE7UUFBSyxHQUFHO1lBQUVBLE1BQU07UUFBUztJQUN0RDtBQWNKLEVBQ0EsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9maXhlZC1ieXRlcy5qcz8wNjdlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZVByb3BlcnRpZXMsIGdldEJ5dGVzQ29weSwgaGV4bGlmeSB9IGZyb20gXCIuLi8uLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgVHlwZWQgfSBmcm9tIFwiLi4vdHlwZWQuanNcIjtcbmltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXIuanNcIjtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBGaXhlZEJ5dGVzQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgc2l6ZTtcbiAgICBjb25zdHJ1Y3RvcihzaXplLCBsb2NhbE5hbWUpIHtcbiAgICAgICAgbGV0IG5hbWUgPSBcImJ5dGVzXCIgKyBTdHJpbmcoc2l6ZSk7XG4gICAgICAgIHN1cGVyKG5hbWUsIG5hbWUsIGxvY2FsTmFtZSwgZmFsc2UpO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgc2l6ZSB9LCB7IHNpemU6IFwibnVtYmVyXCIgfSk7XG4gICAgfVxuICAgIGRlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIChcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiKS5zdWJzdHJpbmcoMCwgMiArIHRoaXMuc2l6ZSAqIDIpO1xuICAgIH1cbiAgICBlbmNvZGUod3JpdGVyLCBfdmFsdWUpIHtcbiAgICAgICAgbGV0IGRhdGEgPSBnZXRCeXRlc0NvcHkoVHlwZWQuZGVyZWZlcmVuY2UoX3ZhbHVlLCB0aGlzLnR5cGUpKTtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoICE9PSB0aGlzLnNpemUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoXCJpbmNvcnJlY3QgZGF0YSBsZW5ndGhcIiwgX3ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlQnl0ZXMoZGF0YSk7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIGhleGxpZnkocmVhZGVyLnJlYWRCeXRlcyh0aGlzLnNpemUpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maXhlZC1ieXRlcy5qcy5tYXAiXSwibmFtZXMiOlsiZGVmaW5lUHJvcGVydGllcyIsImdldEJ5dGVzQ29weSIsImhleGxpZnkiLCJUeXBlZCIsIkNvZGVyIiwiRml4ZWRCeXRlc0NvZGVyIiwiZGVmYXVsdFZhbHVlIiwic3Vic3RyaW5nIiwic2l6ZSIsImVuY29kZSIsIndyaXRlciIsIl92YWx1ZSIsImRhdGEiLCJkZXJlZmVyZW5jZSIsInR5cGUiLCJsZW5ndGgiLCJfdGhyb3dFcnJvciIsIndyaXRlQnl0ZXMiLCJkZWNvZGUiLCJyZWFkZXIiLCJyZWFkQnl0ZXMiLCJjb25zdHJ1Y3RvciIsImxvY2FsTmFtZSIsIm5hbWUiLCJTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/null.js":
/*!*********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/coders/null.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NullCoder: function() { return /* binding */ NullCoder; }\n/* harmony export */ });\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n\nconst Empty = new Uint8Array([]);\n/**\n *  @_ignore\n */ class NullCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        return null;\n    }\n    encode(writer, value) {\n        if (value != null) {\n            this._throwError(\"not null\", value);\n        }\n        return writer.writeBytes(Empty);\n    }\n    decode(reader) {\n        reader.readBytes(0);\n        return null;\n    }\n    constructor(localName){\n        super(\"null\", \"\", localName, false);\n    }\n} //# sourceMappingURL=null.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9udWxsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQzVDLE1BQU1DLFFBQVEsSUFBSUMsV0FBVyxFQUFFO0FBQy9COztDQUVDLEdBQ00sTUFBTUMsa0JBQWtCSCxxREFBS0E7SUFJaENJLGVBQWU7UUFDWCxPQUFPO0lBQ1g7SUFDQUMsT0FBT0MsTUFBTSxFQUFFQyxLQUFLLEVBQUU7UUFDbEIsSUFBSUEsU0FBUyxNQUFNO1lBQ2YsSUFBSSxDQUFDQyxXQUFXLENBQUMsWUFBWUQ7UUFDakM7UUFDQSxPQUFPRCxPQUFPRyxVQUFVLENBQUNSO0lBQzdCO0lBQ0FTLE9BQU9DLE1BQU0sRUFBRTtRQUNYQSxPQUFPQyxTQUFTLENBQUM7UUFDakIsT0FBTztJQUNYO0lBZkFDLFlBQVlDLFNBQVMsQ0FBRTtRQUNuQixLQUFLLENBQUMsUUFBUSxJQUFJQSxXQUFXO0lBQ2pDO0FBY0osRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvY29kZXJzL251bGwuanM/ZTIwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2RlciB9IGZyb20gXCIuL2Fic3RyYWN0LWNvZGVyLmpzXCI7XG5jb25zdCBFbXB0eSA9IG5ldyBVaW50OEFycmF5KFtdKTtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBOdWxsQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgY29uc3RydWN0b3IobG9jYWxOYW1lKSB7XG4gICAgICAgIHN1cGVyKFwibnVsbFwiLCBcIlwiLCBsb2NhbE5hbWUsIGZhbHNlKTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoXCJub3QgbnVsbFwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlci53cml0ZUJ5dGVzKEVtcHR5KTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZWFkZXIucmVhZEJ5dGVzKDApO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1udWxsLmpzLm1hcCJdLCJuYW1lcyI6WyJDb2RlciIsIkVtcHR5IiwiVWludDhBcnJheSIsIk51bGxDb2RlciIsImRlZmF1bHRWYWx1ZSIsImVuY29kZSIsIndyaXRlciIsInZhbHVlIiwiX3Rocm93RXJyb3IiLCJ3cml0ZUJ5dGVzIiwiZGVjb2RlIiwicmVhZGVyIiwicmVhZEJ5dGVzIiwiY29uc3RydWN0b3IiLCJsb2NhbE5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/null.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/number.js":
/*!***********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/coders/number.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NumberCoder: function() { return /* binding */ NumberCoder; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../typed.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n\n\n\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n *  @_ignore\n */ class NumberCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        return 0;\n    }\n    encode(writer, _value) {\n        let value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(_typed_js__WEBPACK_IMPORTED_MODULE_2__.Typed.dereference(_value, this.type));\n        // Check bounds are safe for encoding\n        let maxUintValue = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.mask)(BN_MAX_UINT256, _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.WordSize * 8);\n        if (this.signed) {\n            let bounds = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.mask)(maxUintValue, this.size * 8 - 1);\n            if (value > bounds || value < -(bounds + BN_1)) {\n                this._throwError(\"value out-of-bounds\", _value);\n            }\n            value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toTwos)(value, 8 * _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.WordSize);\n        } else if (value < BN_0 || value > (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.mask)(maxUintValue, this.size * 8)) {\n            this._throwError(\"value out-of-bounds\", _value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        let value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.mask)(reader.readValue(), this.size * 8);\n        if (this.signed) {\n            value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.fromTwos)(value, this.size * 8);\n        }\n        return value;\n    }\n    constructor(size, signed, localName){\n        const name = (signed ? \"int\" : \"uint\") + size * 8;\n        super(name, name, localName, false);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.defineProperties)(this, {\n            size,\n            signed\n        }, {\n            size: \"number\",\n            signed: \"boolean\"\n        });\n    }\n} //# sourceMappingURL=number.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9udW1iZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMkY7QUFDdkQ7QUFDa0I7QUFDdEQsTUFBTVEsT0FBT0MsT0FBTztBQUNwQixNQUFNQyxPQUFPRCxPQUFPO0FBQ3BCLE1BQU1FLGlCQUFpQkYsT0FBTztBQUM5Qjs7Q0FFQyxHQUNNLE1BQU1HLG9CQUFvQk4scURBQUtBO0lBUWxDTyxlQUFlO1FBQ1gsT0FBTztJQUNYO0lBQ0FDLE9BQU9DLE1BQU0sRUFBRUMsTUFBTSxFQUFFO1FBQ25CLElBQUlDLFFBQVFmLDBEQUFTQSxDQUFDRyw0Q0FBS0EsQ0FBQ2EsV0FBVyxDQUFDRixRQUFRLElBQUksQ0FBQ0csSUFBSTtRQUN6RCxxQ0FBcUM7UUFDckMsSUFBSUMsZUFBZWpCLHFEQUFJQSxDQUFDUSxnQkFBZ0JKLHdEQUFRQSxHQUFHO1FBQ25ELElBQUksSUFBSSxDQUFDYyxNQUFNLEVBQUU7WUFDYixJQUFJQyxTQUFTbkIscURBQUlBLENBQUNpQixjQUFjLElBQUssQ0FBQ0csSUFBSSxHQUFHLElBQUs7WUFDbEQsSUFBSU4sUUFBUUssVUFBVUwsUUFBUSxDQUFFSyxDQUFBQSxTQUFTWixJQUFHLEdBQUk7Z0JBQzVDLElBQUksQ0FBQ2MsV0FBVyxDQUFDLHVCQUF1QlI7WUFDNUM7WUFDQUMsUUFBUWIsdURBQU1BLENBQUNhLE9BQU8sSUFBSVYsd0RBQVFBO1FBQ3RDLE9BQ0ssSUFBSVUsUUFBUVQsUUFBUVMsUUFBUWQscURBQUlBLENBQUNpQixjQUFjLElBQUksQ0FBQ0csSUFBSSxHQUFHLElBQUk7WUFDaEUsSUFBSSxDQUFDQyxXQUFXLENBQUMsdUJBQXVCUjtRQUM1QztRQUNBLE9BQU9ELE9BQU9VLFVBQVUsQ0FBQ1I7SUFDN0I7SUFDQVMsT0FBT0MsTUFBTSxFQUFFO1FBQ1gsSUFBSVYsUUFBUWQscURBQUlBLENBQUN3QixPQUFPQyxTQUFTLElBQUksSUFBSSxDQUFDTCxJQUFJLEdBQUc7UUFDakQsSUFBSSxJQUFJLENBQUNGLE1BQU0sRUFBRTtZQUNiSixRQUFRaEIseURBQVFBLENBQUNnQixPQUFPLElBQUksQ0FBQ00sSUFBSSxHQUFHO1FBQ3hDO1FBQ0EsT0FBT047SUFDWDtJQTlCQVksWUFBWU4sSUFBSSxFQUFFRixNQUFNLEVBQUVTLFNBQVMsQ0FBRTtRQUNqQyxNQUFNQyxPQUFRLENBQUNWLFNBQVMsUUFBUSxNQUFLLElBQU1FLE9BQU87UUFDbEQsS0FBSyxDQUFDUSxNQUFNQSxNQUFNRCxXQUFXO1FBQzdCOUIsaUVBQWdCQSxDQUFDLElBQUksRUFBRTtZQUFFdUI7WUFBTUY7UUFBTyxHQUFHO1lBQUVFLE1BQU07WUFBVUYsUUFBUTtRQUFVO0lBQ2pGO0FBMkJKLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9udW1iZXIuanM/YzhiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVQcm9wZXJ0aWVzLCBmcm9tVHdvcywgZ2V0QmlnSW50LCBtYXNrLCB0b1R3b3MgfSBmcm9tIFwiLi4vLi4vdXRpbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IFR5cGVkIH0gZnJvbSBcIi4uL3R5cGVkLmpzXCI7XG5pbXBvcnQgeyBDb2RlciwgV29yZFNpemUgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2Rlci5qc1wiO1xuY29uc3QgQk5fMCA9IEJpZ0ludCgwKTtcbmNvbnN0IEJOXzEgPSBCaWdJbnQoMSk7XG5jb25zdCBCTl9NQVhfVUlOVDI1NiA9IEJpZ0ludChcIjB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlwiKTtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBOdW1iZXJDb2RlciBleHRlbmRzIENvZGVyIHtcbiAgICBzaXplO1xuICAgIHNpZ25lZDtcbiAgICBjb25zdHJ1Y3RvcihzaXplLCBzaWduZWQsIGxvY2FsTmFtZSkge1xuICAgICAgICBjb25zdCBuYW1lID0gKChzaWduZWQgPyBcImludFwiIDogXCJ1aW50XCIpICsgKHNpemUgKiA4KSk7XG4gICAgICAgIHN1cGVyKG5hbWUsIG5hbWUsIGxvY2FsTmFtZSwgZmFsc2UpO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgc2l6ZSwgc2lnbmVkIH0sIHsgc2l6ZTogXCJudW1iZXJcIiwgc2lnbmVkOiBcImJvb2xlYW5cIiB9KTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgX3ZhbHVlKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGdldEJpZ0ludChUeXBlZC5kZXJlZmVyZW5jZShfdmFsdWUsIHRoaXMudHlwZSkpO1xuICAgICAgICAvLyBDaGVjayBib3VuZHMgYXJlIHNhZmUgZm9yIGVuY29kaW5nXG4gICAgICAgIGxldCBtYXhVaW50VmFsdWUgPSBtYXNrKEJOX01BWF9VSU5UMjU2LCBXb3JkU2l6ZSAqIDgpO1xuICAgICAgICBpZiAodGhpcy5zaWduZWQpIHtcbiAgICAgICAgICAgIGxldCBib3VuZHMgPSBtYXNrKG1heFVpbnRWYWx1ZSwgKHRoaXMuc2l6ZSAqIDgpIC0gMSk7XG4gICAgICAgICAgICBpZiAodmFsdWUgPiBib3VuZHMgfHwgdmFsdWUgPCAtKGJvdW5kcyArIEJOXzEpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGhyb3dFcnJvcihcInZhbHVlIG91dC1vZi1ib3VuZHNcIiwgX3ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlID0gdG9Ud29zKHZhbHVlLCA4ICogV29yZFNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIDwgQk5fMCB8fCB2YWx1ZSA+IG1hc2sobWF4VWludFZhbHVlLCB0aGlzLnNpemUgKiA4KSkge1xuICAgICAgICAgICAgdGhpcy5fdGhyb3dFcnJvcihcInZhbHVlIG91dC1vZi1ib3VuZHNcIiwgX3ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlVmFsdWUodmFsdWUpO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IG1hc2socmVhZGVyLnJlYWRWYWx1ZSgpLCB0aGlzLnNpemUgKiA4KTtcbiAgICAgICAgaWYgKHRoaXMuc2lnbmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGZyb21Ud29zKHZhbHVlLCB0aGlzLnNpemUgKiA4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bnVtYmVyLmpzLm1hcCJdLCJuYW1lcyI6WyJkZWZpbmVQcm9wZXJ0aWVzIiwiZnJvbVR3b3MiLCJnZXRCaWdJbnQiLCJtYXNrIiwidG9Ud29zIiwiVHlwZWQiLCJDb2RlciIsIldvcmRTaXplIiwiQk5fMCIsIkJpZ0ludCIsIkJOXzEiLCJCTl9NQVhfVUlOVDI1NiIsIk51bWJlckNvZGVyIiwiZGVmYXVsdFZhbHVlIiwiZW5jb2RlIiwid3JpdGVyIiwiX3ZhbHVlIiwidmFsdWUiLCJkZXJlZmVyZW5jZSIsInR5cGUiLCJtYXhVaW50VmFsdWUiLCJzaWduZWQiLCJib3VuZHMiLCJzaXplIiwiX3Rocm93RXJyb3IiLCJ3cml0ZVZhbHVlIiwiZGVjb2RlIiwicmVhZGVyIiwicmVhZFZhbHVlIiwiY29uc3RydWN0b3IiLCJsb2NhbE5hbWUiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/number.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/string.js":
/*!***********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/coders/string.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringCoder: function() { return /* binding */ StringCoder; }\n/* harmony export */ });\n/* harmony import */ var _utils_utf8_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utf8.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../typed.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/bytes.js\");\n\n\n\n/**\n *  @_ignore\n */ class StringCoder extends _bytes_js__WEBPACK_IMPORTED_MODULE_0__.DynamicBytesCoder {\n    defaultValue() {\n        return \"\";\n    }\n    encode(writer, _value) {\n        return super.encode(writer, (0,_utils_utf8_js__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(_typed_js__WEBPACK_IMPORTED_MODULE_2__.Typed.dereference(_value, \"string\")));\n    }\n    decode(reader) {\n        return (0,_utils_utf8_js__WEBPACK_IMPORTED_MODULE_1__.toUtf8String)(super.decode(reader));\n    }\n    constructor(localName){\n        super(\"string\", localName);\n    }\n} //# sourceMappingURL=string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9zdHJpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnRTtBQUM1QjtBQUNXO0FBQy9DOztDQUVDLEdBQ00sTUFBTUksb0JBQW9CRCx3REFBaUJBO0lBSTlDRSxlQUFlO1FBQ1gsT0FBTztJQUNYO0lBQ0FDLE9BQU9DLE1BQU0sRUFBRUMsTUFBTSxFQUFFO1FBQ25CLE9BQU8sS0FBSyxDQUFDRixPQUFPQyxRQUFRUCwyREFBV0EsQ0FBQ0UsNENBQUtBLENBQUNPLFdBQVcsQ0FBQ0QsUUFBUTtJQUN0RTtJQUNBRSxPQUFPQyxNQUFNLEVBQUU7UUFDWCxPQUFPViw0REFBWUEsQ0FBQyxLQUFLLENBQUNTLE9BQU9DO0lBQ3JDO0lBWEFDLFlBQVlDLFNBQVMsQ0FBRTtRQUNuQixLQUFLLENBQUMsVUFBVUE7SUFDcEI7QUFVSixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2FiaS9jb2RlcnMvc3RyaW5nLmpzPzE1YjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdG9VdGY4Qnl0ZXMsIHRvVXRmOFN0cmluZyB9IGZyb20gXCIuLi8uLi91dGlscy91dGY4LmpzXCI7XG5pbXBvcnQgeyBUeXBlZCB9IGZyb20gXCIuLi90eXBlZC5qc1wiO1xuaW1wb3J0IHsgRHluYW1pY0J5dGVzQ29kZXIgfSBmcm9tIFwiLi9ieXRlcy5qc1wiO1xuLyoqXG4gKiAgQF9pZ25vcmVcbiAqL1xuZXhwb3J0IGNsYXNzIFN0cmluZ0NvZGVyIGV4dGVuZHMgRHluYW1pY0J5dGVzQ29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsTmFtZSkge1xuICAgICAgICBzdXBlcihcInN0cmluZ1wiLCBsb2NhbE5hbWUpO1xuICAgIH1cbiAgICBkZWZhdWx0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBlbmNvZGUod3JpdGVyLCBfdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmVuY29kZSh3cml0ZXIsIHRvVXRmOEJ5dGVzKFR5cGVkLmRlcmVmZXJlbmNlKF92YWx1ZSwgXCJzdHJpbmdcIikpKTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gdG9VdGY4U3RyaW5nKHN1cGVyLmRlY29kZShyZWFkZXIpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpbmcuanMubWFwIl0sIm5hbWVzIjpbInRvVXRmOEJ5dGVzIiwidG9VdGY4U3RyaW5nIiwiVHlwZWQiLCJEeW5hbWljQnl0ZXNDb2RlciIsIlN0cmluZ0NvZGVyIiwiZGVmYXVsdFZhbHVlIiwiZW5jb2RlIiwid3JpdGVyIiwiX3ZhbHVlIiwiZGVyZWZlcmVuY2UiLCJkZWNvZGUiLCJyZWFkZXIiLCJjb25zdHJ1Y3RvciIsImxvY2FsTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/string.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/tuple.js":
/*!**********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/coders/tuple.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TupleCoder: function() { return /* binding */ TupleCoder; }\n/* harmony export */ });\n/* harmony import */ var _utils_properties_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/properties.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../typed.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./array.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/array.js\");\n\n\n\n\n/**\n *  @_ignore\n */ class TupleCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder)=>{\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder)=>{\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index)=>{\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, _value) {\n        const value = _typed_js__WEBPACK_IMPORTED_MODULE_1__.Typed.dereference(_value, \"tuple\");\n        return (0,_array_js__WEBPACK_IMPORTED_MODULE_2__.pack)(writer, this.coders, value);\n    }\n    decode(reader) {\n        return (0,_array_js__WEBPACK_IMPORTED_MODULE_2__.unpack)(reader, this.coders);\n    }\n    constructor(coders, localName){\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder)=>{\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = \"tuple(\" + types.join(\",\") + \")\";\n        super(\"tuple\", type, localName, dynamic);\n        (0,_utils_properties_js__WEBPACK_IMPORTED_MODULE_3__.defineProperties)(this, {\n            coders: Object.freeze(coders.slice())\n        });\n    }\n} //# sourceMappingURL=tuple.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy90dXBsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE2RDtBQUN6QjtBQUNRO0FBQ0Y7QUFDMUM7O0NBRUMsR0FDTSxNQUFNSyxtQkFBbUJILHFEQUFLQTtJQWVqQ0ksZUFBZTtRQUNYLE1BQU1DLFNBQVMsRUFBRTtRQUNqQixJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLENBQUNDO1lBQ2pCSCxPQUFPSSxJQUFJLENBQUNELE1BQU1KLFlBQVk7UUFDbEM7UUFDQSw0REFBNEQ7UUFDNUQsTUFBTU0sY0FBYyxJQUFJLENBQUNKLE1BQU0sQ0FBQ0ssTUFBTSxDQUFDLENBQUNDLE9BQU9KO1lBQzNDLE1BQU1LLE9BQU9MLE1BQU1NLFNBQVM7WUFDNUIsSUFBSUQsTUFBTTtnQkFDTixJQUFJLENBQUNELEtBQUssQ0FBQ0MsS0FBSyxFQUFFO29CQUNkRCxLQUFLLENBQUNDLEtBQUssR0FBRztnQkFDbEI7Z0JBQ0FELEtBQUssQ0FBQ0MsS0FBSztZQUNmO1lBQ0EsT0FBT0Q7UUFDWCxHQUFHLENBQUM7UUFDSixtQkFBbUI7UUFDbkIsSUFBSSxDQUFDTixNQUFNLENBQUNDLE9BQU8sQ0FBQyxDQUFDQyxPQUFPTztZQUN4QixJQUFJRixPQUFPTCxNQUFNTSxTQUFTO1lBQzFCLElBQUksQ0FBQ0QsUUFBUUgsV0FBVyxDQUFDRyxLQUFLLEtBQUssR0FBRztnQkFDbEM7WUFDSjtZQUNBLElBQUlBLFNBQVMsVUFBVTtnQkFDbkJBLE9BQU87WUFDWDtZQUNBLElBQUlSLE1BQU0sQ0FBQ1EsS0FBSyxJQUFJLE1BQU07Z0JBQ3RCO1lBQ0o7WUFDQVIsTUFBTSxDQUFDUSxLQUFLLEdBQUdSLE1BQU0sQ0FBQ1UsTUFBTTtRQUNoQztRQUNBLE9BQU9DLE9BQU9DLE1BQU0sQ0FBQ1o7SUFDekI7SUFDQWEsT0FBT0MsTUFBTSxFQUFFQyxNQUFNLEVBQUU7UUFDbkIsTUFBTUMsUUFBUXRCLDRDQUFLQSxDQUFDdUIsV0FBVyxDQUFDRixRQUFRO1FBQ3hDLE9BQU9uQiwrQ0FBSUEsQ0FBQ2tCLFFBQVEsSUFBSSxDQUFDYixNQUFNLEVBQUVlO0lBQ3JDO0lBQ0FFLE9BQU9DLE1BQU0sRUFBRTtRQUNYLE9BQU90QixpREFBTUEsQ0FBQ3NCLFFBQVEsSUFBSSxDQUFDbEIsTUFBTTtJQUNyQztJQW5EQW1CLFlBQVluQixNQUFNLEVBQUVRLFNBQVMsQ0FBRTtRQUMzQixJQUFJWSxVQUFVO1FBQ2QsTUFBTUMsUUFBUSxFQUFFO1FBQ2hCckIsT0FBT0MsT0FBTyxDQUFDLENBQUNDO1lBQ1osSUFBSUEsTUFBTWtCLE9BQU8sRUFBRTtnQkFDZkEsVUFBVTtZQUNkO1lBQ0FDLE1BQU1sQixJQUFJLENBQUNELE1BQU1vQixJQUFJO1FBQ3pCO1FBQ0EsTUFBTUEsT0FBUSxXQUFXRCxNQUFNRSxJQUFJLENBQUMsT0FBTztRQUMzQyxLQUFLLENBQUMsU0FBU0QsTUFBTWQsV0FBV1k7UUFDaEM1QixzRUFBZ0JBLENBQUMsSUFBSSxFQUFFO1lBQUVRLFFBQVFVLE9BQU9DLE1BQU0sQ0FBQ1gsT0FBT3dCLEtBQUs7UUFBSTtJQUNuRTtBQXdDSixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2FiaS9jb2RlcnMvdHVwbGUuanM/Y2IwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVQcm9wZXJ0aWVzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3Byb3BlcnRpZXMuanNcIjtcbmltcG9ydCB7IFR5cGVkIH0gZnJvbSBcIi4uL3R5cGVkLmpzXCI7XG5pbXBvcnQgeyBDb2RlciB9IGZyb20gXCIuL2Fic3RyYWN0LWNvZGVyLmpzXCI7XG5pbXBvcnQgeyBwYWNrLCB1bnBhY2sgfSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuLyoqXG4gKiAgQF9pZ25vcmVcbiAqL1xuZXhwb3J0IGNsYXNzIFR1cGxlQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgY29kZXJzO1xuICAgIGNvbnN0cnVjdG9yKGNvZGVycywgbG9jYWxOYW1lKSB7XG4gICAgICAgIGxldCBkeW5hbWljID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHR5cGVzID0gW107XG4gICAgICAgIGNvZGVycy5mb3JFYWNoKChjb2RlcikgPT4ge1xuICAgICAgICAgICAgaWYgKGNvZGVyLmR5bmFtaWMpIHtcbiAgICAgICAgICAgICAgICBkeW5hbWljID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHR5cGVzLnB1c2goY29kZXIudHlwZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB0eXBlID0gKFwidHVwbGUoXCIgKyB0eXBlcy5qb2luKFwiLFwiKSArIFwiKVwiKTtcbiAgICAgICAgc3VwZXIoXCJ0dXBsZVwiLCB0eXBlLCBsb2NhbE5hbWUsIGR5bmFtaWMpO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgY29kZXJzOiBPYmplY3QuZnJlZXplKGNvZGVycy5zbGljZSgpKSB9KTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jb2RlcnMuZm9yRWFjaCgoY29kZXIpID0+IHtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKGNvZGVyLmRlZmF1bHRWYWx1ZSgpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFdlIG9ubHkgb3V0cHV0IG5hbWVkIHByb3BlcnRpZXMgZm9yIHVuaXF1ZWx5IG5hbWVkIGNvZGVyc1xuICAgICAgICBjb25zdCB1bmlxdWVOYW1lcyA9IHRoaXMuY29kZXJzLnJlZHVjZSgoYWNjdW0sIGNvZGVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gY29kZXIubG9jYWxOYW1lO1xuICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFjY3VtW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY3VtW25hbWVdID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWNjdW1bbmFtZV0rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2N1bTtcbiAgICAgICAgfSwge30pO1xuICAgICAgICAvLyBBZGQgbmFtZWQgdmFsdWVzXG4gICAgICAgIHRoaXMuY29kZXJzLmZvckVhY2goKGNvZGVyLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IG5hbWUgPSBjb2Rlci5sb2NhbE5hbWU7XG4gICAgICAgICAgICBpZiAoIW5hbWUgfHwgdW5pcXVlTmFtZXNbbmFtZV0gIT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gXCJsZW5ndGhcIikge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBcIl9sZW5ndGhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlc1tuYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh2YWx1ZXMpO1xuICAgIH1cbiAgICBlbmNvZGUod3JpdGVyLCBfdmFsdWUpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBUeXBlZC5kZXJlZmVyZW5jZShfdmFsdWUsIFwidHVwbGVcIik7XG4gICAgICAgIHJldHVybiBwYWNrKHdyaXRlciwgdGhpcy5jb2RlcnMsIHZhbHVlKTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gdW5wYWNrKHJlYWRlciwgdGhpcy5jb2RlcnMpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR1cGxlLmpzLm1hcCJdLCJuYW1lcyI6WyJkZWZpbmVQcm9wZXJ0aWVzIiwiVHlwZWQiLCJDb2RlciIsInBhY2siLCJ1bnBhY2siLCJUdXBsZUNvZGVyIiwiZGVmYXVsdFZhbHVlIiwidmFsdWVzIiwiY29kZXJzIiwiZm9yRWFjaCIsImNvZGVyIiwicHVzaCIsInVuaXF1ZU5hbWVzIiwicmVkdWNlIiwiYWNjdW0iLCJuYW1lIiwibG9jYWxOYW1lIiwiaW5kZXgiLCJPYmplY3QiLCJmcmVlemUiLCJlbmNvZGUiLCJ3cml0ZXIiLCJfdmFsdWUiLCJ2YWx1ZSIsImRlcmVmZXJlbmNlIiwiZGVjb2RlIiwicmVhZGVyIiwiY29uc3RydWN0b3IiLCJkeW5hbWljIiwidHlwZXMiLCJ0eXBlIiwiam9pbiIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/tuple.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/fragments.js":
/*!*******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/fragments.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConstructorFragment: function() { return /* binding */ ConstructorFragment; },\n/* harmony export */   ErrorFragment: function() { return /* binding */ ErrorFragment; },\n/* harmony export */   EventFragment: function() { return /* binding */ EventFragment; },\n/* harmony export */   FallbackFragment: function() { return /* binding */ FallbackFragment; },\n/* harmony export */   Fragment: function() { return /* binding */ Fragment; },\n/* harmony export */   FunctionFragment: function() { return /* binding */ FunctionFragment; },\n/* harmony export */   NamedFragment: function() { return /* binding */ NamedFragment; },\n/* harmony export */   ParamType: function() { return /* binding */ ParamType; },\n/* harmony export */   StructFragment: function() { return /* binding */ StructFragment; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _swc_helpers_class_private_field_update__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_update */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_update.js\");\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../hash/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/id.js\");\n/**\n *  A fragment is a single item from an ABI, which may represent any of:\n *\n *  - [Functions](FunctionFragment)\n *  - [Events](EventFragment)\n *  - [Constructors](ConstructorFragment)\n *  - Custom [Errors](ErrorFragment)\n *  - [Fallback or Receive](FallbackFragment) functions\n *\n *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]\n */ \n\n\n\n\n\n\n\n;\n// [ \"a\", \"b\" ] => { \"a\": 1, \"b\": 1 }\nfunction setify(items) {\n    const result = new Set();\n    items.forEach((k)=>result.add(k));\n    return Object.freeze(result);\n}\nconst _kwVisibDeploy = \"external public payable override\";\nconst KwVisibDeploy = setify(_kwVisibDeploy.split(\" \"));\n// Visibility Keywords\nconst _kwVisib = \"constant external internal payable private public pure view override\";\nconst KwVisib = setify(_kwVisib.split(\" \"));\nconst _kwTypes = \"constructor error event fallback function receive struct\";\nconst KwTypes = setify(_kwTypes.split(\" \"));\nconst _kwModifiers = \"calldata memory storage payable indexed\";\nconst KwModifiers = setify(_kwModifiers.split(\" \"));\nconst _kwOther = \"tuple returns\";\n// All Keywords\nconst _keywords = [\n    _kwTypes,\n    _kwModifiers,\n    _kwOther,\n    _kwVisib\n].join(\" \");\nconst Keywords = setify(_keywords.split(\" \"));\n// Single character tokens\nconst SimpleTokens = {\n    \"(\": \"OPEN_PAREN\",\n    \")\": \"CLOSE_PAREN\",\n    \"[\": \"OPEN_BRACKET\",\n    \"]\": \"CLOSE_BRACKET\",\n    \",\": \"COMMA\",\n    \"@\": \"AT\"\n};\n// Parser regexes to consume the next token\nconst regexWhitespacePrefix = new RegExp(\"^(\\\\s*)\");\nconst regexNumberPrefix = new RegExp(\"^([0-9]+)\");\nconst regexIdPrefix = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\");\n// Parser regexs to check validity\nconst regexId = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\");\nconst regexType = new RegExp(\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\");\nvar _offset = /*#__PURE__*/ new WeakMap(), _tokens = /*#__PURE__*/ new WeakMap(), _subTokenString = /*#__PURE__*/ new WeakSet();\nclass TokenString {\n    get offset() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset);\n    }\n    get length() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _tokens).length - (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset);\n    }\n    clone() {\n        return new TokenString((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _tokens));\n    }\n    reset() {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _offset, 0);\n    }\n    // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\n    popKeyword(allowed) {\n        const top = this.peek();\n        if (top.type !== \"KEYWORD\" || !allowed.has(top.text)) {\n            throw new Error(\"expected keyword \".concat(top.text));\n        }\n        return this.pop().text;\n    }\n    // Pops and returns the value of the next token if it is `type`; throws if out of tokens\n    popType(type) {\n        if (this.peek().type !== type) {\n            const top = this.peek();\n            throw new Error(\"expected \".concat(type, \"; got \").concat(top.type, \" \").concat(JSON.stringify(top.text)));\n        }\n        return this.pop().text;\n    }\n    // Pops and returns a \"(\" TOKENS \")\"\n    popParen() {\n        const top = this.peek();\n        if (top.type !== \"OPEN_PAREN\") {\n            throw new Error(\"bad start\");\n        }\n        const result = (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _subTokenString, subTokenString).call(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset) + 1, top.match + 1);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _offset, top.match + 1);\n        return result;\n    }\n    // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\n    popParams() {\n        const top = this.peek();\n        if (top.type !== \"OPEN_PAREN\") {\n            throw new Error(\"bad start\");\n        }\n        const result = [];\n        while((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset) < top.match - 1){\n            const link = this.peek().linkNext;\n            result.push((0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _subTokenString, subTokenString).call(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset) + 1, link));\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _offset, link);\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _offset, top.match + 1);\n        return result;\n    }\n    // Returns the top Token, throwing if out of tokens\n    peek() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset) >= (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _tokens).length) {\n            throw new Error(\"out-of-bounds\");\n        }\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _tokens)[(0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset)];\n    }\n    // Returns the next value, if it is a keyword in `allowed`\n    peekKeyword(allowed) {\n        const top = this.peekType(\"KEYWORD\");\n        return top != null && allowed.has(top) ? top : null;\n    }\n    // Returns the value of the next token if it is `type`\n    peekType(type) {\n        if (this.length === 0) {\n            return null;\n        }\n        const top = this.peek();\n        return top.type === type ? top.text : null;\n    }\n    // Returns the next token; throws if out of tokens\n    pop() {\n        const result = this.peek();\n        (0,_swc_helpers_class_private_field_update__WEBPACK_IMPORTED_MODULE_3__._)(this, _offset).value++;\n        return result;\n    }\n    toString() {\n        const tokens = [];\n        for(let i = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _offset); i < (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _tokens).length; i++){\n            const token = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _tokens)[i];\n            tokens.push(\"\".concat(token.type, \":\").concat(token.text));\n        }\n        return \"<TokenString \".concat(tokens.join(\" \"), \">\");\n    }\n    constructor(tokens){\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _subTokenString);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_5__._)(this, _offset, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_5__._)(this, _tokens, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _offset, 0);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _tokens, tokens.slice());\n    }\n}\nfunction subTokenString() {\n    let from = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, to = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return new TokenString((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _tokens).slice(from, to).map((t)=>{\n        return Object.freeze(Object.assign({}, t, {\n            match: t.match - from,\n            linkBack: t.linkBack - from,\n            linkNext: t.linkNext - from\n        }));\n    }));\n}\nfunction lex(text) {\n    const tokens = [];\n    const throwError = (message)=>{\n        const token = offset < text.length ? JSON.stringify(text[offset]) : \"$EOI\";\n        throw new Error(\"invalid token \".concat(token, \" at \").concat(offset, \": \").concat(message));\n    };\n    let brackets = [];\n    let commas = [];\n    let offset = 0;\n    while(offset < text.length){\n        // Strip off any leading whitespace\n        let cur = text.substring(offset);\n        let match = cur.match(regexWhitespacePrefix);\n        if (match) {\n            offset += match[1].length;\n            cur = text.substring(offset);\n        }\n        const token = {\n            depth: brackets.length,\n            linkBack: -1,\n            linkNext: -1,\n            match: -1,\n            type: \"\",\n            text: \"\",\n            offset,\n            value: -1\n        };\n        tokens.push(token);\n        let type = SimpleTokens[cur[0]] || \"\";\n        if (type) {\n            token.type = type;\n            token.text = cur[0];\n            offset++;\n            if (type === \"OPEN_PAREN\") {\n                brackets.push(tokens.length - 1);\n                commas.push(tokens.length - 1);\n            } else if (type == \"CLOSE_PAREN\") {\n                if (brackets.length === 0) {\n                    throwError(\"no matching open bracket\");\n                }\n                token.match = brackets.pop();\n                tokens[token.match].match = tokens.length - 1;\n                token.depth--;\n                token.linkBack = commas.pop();\n                tokens[token.linkBack].linkNext = tokens.length - 1;\n            } else if (type === \"COMMA\") {\n                token.linkBack = commas.pop();\n                tokens[token.linkBack].linkNext = tokens.length - 1;\n                commas.push(tokens.length - 1);\n            } else if (type === \"OPEN_BRACKET\") {\n                token.type = \"BRACKET\";\n            } else if (type === \"CLOSE_BRACKET\") {\n                // Remove the CLOSE_BRACKET\n                let suffix = tokens.pop().text;\n                if (tokens.length > 0 && tokens[tokens.length - 1].type === \"NUMBER\") {\n                    const value = tokens.pop().text;\n                    suffix = value + suffix;\n                    tokens[tokens.length - 1].value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.getNumber)(value);\n                }\n                if (tokens.length === 0 || tokens[tokens.length - 1].type !== \"BRACKET\") {\n                    throw new Error(\"missing opening bracket\");\n                }\n                tokens[tokens.length - 1].text += suffix;\n            }\n            continue;\n        }\n        match = cur.match(regexIdPrefix);\n        if (match) {\n            token.text = match[1];\n            offset += token.text.length;\n            if (Keywords.has(token.text)) {\n                token.type = \"KEYWORD\";\n                continue;\n            }\n            if (token.text.match(regexType)) {\n                token.type = \"TYPE\";\n                continue;\n            }\n            token.type = \"ID\";\n            continue;\n        }\n        match = cur.match(regexNumberPrefix);\n        if (match) {\n            token.text = match[1];\n            token.type = \"NUMBER\";\n            offset += token.text.length;\n            continue;\n        }\n        throw new Error(\"unexpected token \".concat(JSON.stringify(cur[0]), \" at position \").concat(offset));\n    }\n    return new TokenString(tokens.map((t)=>Object.freeze(t)));\n}\n// Check only one of `allowed` is in `set`\nfunction allowSingle(set, allowed) {\n    let included = [];\n    for(const key in allowed.keys()){\n        if (set.has(key)) {\n            included.push(key);\n        }\n    }\n    if (included.length > 1) {\n        throw new Error(\"conflicting types: \".concat(included.join(\", \")));\n    }\n}\n// Functions to process a Solidity Signature TokenString from left-to-right for...\n// ...the name with an optional type, returning the name\nfunction consumeName(type, tokens) {\n    if (tokens.peekKeyword(KwTypes)) {\n        const keyword = tokens.pop().text;\n        if (keyword !== type) {\n            throw new Error(\"expected \".concat(type, \", got \").concat(keyword));\n        }\n    }\n    return tokens.popType(\"ID\");\n}\n// ...all keywords matching allowed, returning the keywords\nfunction consumeKeywords(tokens, allowed) {\n    const keywords = new Set();\n    while(true){\n        const keyword = tokens.peekType(\"KEYWORD\");\n        if (keyword == null || allowed && !allowed.has(keyword)) {\n            break;\n        }\n        tokens.pop();\n        if (keywords.has(keyword)) {\n            throw new Error(\"duplicate keywords: \".concat(JSON.stringify(keyword)));\n        }\n        keywords.add(keyword);\n    }\n    return Object.freeze(keywords);\n}\n// ...all visibility keywords, returning the coalesced mutability\nfunction consumeMutability(tokens) {\n    let modifiers = consumeKeywords(tokens, KwVisib);\n    // Detect conflicting modifiers\n    allowSingle(modifiers, setify(\"constant payable nonpayable\".split(\" \")));\n    allowSingle(modifiers, setify(\"pure view payable nonpayable\".split(\" \")));\n    // Process mutability states\n    if (modifiers.has(\"view\")) {\n        return \"view\";\n    }\n    if (modifiers.has(\"pure\")) {\n        return \"pure\";\n    }\n    if (modifiers.has(\"payable\")) {\n        return \"payable\";\n    }\n    if (modifiers.has(\"nonpayable\")) {\n        return \"nonpayable\";\n    }\n    // Process legacy `constant` last\n    if (modifiers.has(\"constant\")) {\n        return \"view\";\n    }\n    return \"nonpayable\";\n}\n// ...a parameter list, returning the ParamType list\nfunction consumeParams(tokens, allowIndexed) {\n    return tokens.popParams().map((t)=>ParamType.from(t, allowIndexed));\n}\n// ...a gas limit, returning a BigNumber or null if none\nfunction consumeGas(tokens) {\n    if (tokens.peekType(\"AT\")) {\n        tokens.pop();\n        if (tokens.peekType(\"NUMBER\")) {\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.getBigInt)(tokens.pop().text);\n        }\n        throw new Error(\"invalid gas\");\n    }\n    return null;\n}\nfunction consumeEoi(tokens) {\n    if (tokens.length) {\n        throw new Error(\"unexpected tokens at offset \".concat(tokens.offset, \": \").concat(tokens.toString()));\n    }\n}\nconst regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nfunction verifyBasicType(type) {\n    const match = type.match(regexType);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(match, \"invalid type\", \"type\", type);\n    if (type === \"uint\") {\n        return \"uint256\";\n    }\n    if (type === \"int\") {\n        return \"int256\";\n    }\n    if (match[2]) {\n        // bytesXX\n        const length = parseInt(match[2]);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(length !== 0 && length <= 32, \"invalid bytes length\", \"type\", type);\n    } else if (match[3]) {\n        // intXX or uintXX\n        const size = parseInt(match[3]);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, \"invalid numeric width\", \"type\", type);\n    }\n    return type;\n}\n// Make the Fragment constructors effectively private\nconst _guard = {};\nconst internal = Symbol.for(\"_ethers_internal\");\nconst ParamTypeInternal = \"_ParamTypeInternal\";\nconst ErrorFragmentInternal = \"_ErrorInternal\";\nconst EventFragmentInternal = \"_EventInternal\";\nconst ConstructorFragmentInternal = \"_ConstructorInternal\";\nconst FallbackFragmentInternal = \"_FallbackInternal\";\nconst FunctionFragmentInternal = \"_FunctionInternal\";\nconst StructFragmentInternal = \"_StructInternal\";\nvar _walkAsync = /*#__PURE__*/ new WeakSet();\n/**\n *  Each input and output of a [[Fragment]] is an Array of **ParamType**.\n */ class ParamType {\n    /**\n     *  Return a string representation of this type.\n     *\n     *  For example,\n     *\n     *  ``sighash\" => \"(uint256,address)\"``\n     *\n     *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\n     *\n     *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\n     */ format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            const name = this.name || \"\";\n            if (this.isArray()) {\n                const result = JSON.parse(this.arrayChildren.format(\"json\"));\n                result.name = name;\n                result.type += \"[\".concat(this.arrayLength < 0 ? \"\" : String(this.arrayLength), \"]\");\n                return JSON.stringify(result);\n            }\n            const result = {\n                type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n                name\n            };\n            if (typeof this.indexed === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.isTuple()) {\n                result.components = this.components.map((c)=>JSON.parse(c.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.isArray()) {\n            result += this.arrayChildren.format(format);\n            result += \"[\".concat(this.arrayLength < 0 ? \"\" : String(this.arrayLength), \"]\");\n        } else {\n            if (this.isTuple()) {\n                result += \"(\" + this.components.map((comp)=>comp.format(format)).join(format === \"full\" ? \", \" : \",\") + \")\";\n            } else {\n                result += this.type;\n            }\n        }\n        if (format !== \"sighash\") {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === \"full\" && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    /**\n     *  Returns true if %%this%% is an Array type.\n     *\n     *  This provides a type gaurd ensuring that [[arrayChildren]]\n     *  and [[arrayLength]] are non-null.\n     */ isArray() {\n        return this.baseType === \"array\";\n    }\n    /**\n     *  Returns true if %%this%% is a Tuple type.\n     *\n     *  This provides a type gaurd ensuring that [[components]]\n     *  is non-null.\n     */ isTuple() {\n        return this.baseType === \"tuple\";\n    }\n    /**\n     *  Returns true if %%this%% is an Indexable type.\n     *\n     *  This provides a type gaurd ensuring that [[indexed]]\n     *  is non-null.\n     */ isIndexable() {\n        return this.indexed != null;\n    }\n    /**\n     *  Walks the **ParamType** with %%value%%, calling %%process%%\n     *  on each type, destructing the %%value%% recursively.\n     */ walk(value, process) {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid array value\");\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v)=>_this.arrayChildren.walk(v, process));\n        }\n        if (this.isTuple()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid tuple value\");\n            }\n            if (value.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v, i)=>_this.components[i].walk(v, process));\n        }\n        return process(this.type, value);\n    }\n    /**\n     *  Walks the **ParamType** with %%value%%, asynchronously calling\n     *  %%process%% on each type, destructing the %%value%% recursively.\n     *\n     *  This can be used to resolve ENS naes by walking and resolving each\n     *  ``\"address\"`` type.\n     */ async walkAsync(value, process) {\n        const promises = [];\n        const result = [\n            value\n        ];\n        (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _walkAsync, walkAsync).call(this, promises, value, process, (value)=>{\n            result[0] = value;\n        });\n        if (promises.length) {\n            await Promise.all(promises);\n        }\n        return result[0];\n    }\n    /**\n     *  Creates a new **ParamType** for %%obj%%.\n     *\n     *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\n     *  otherwise the ``indexed`` keyword will throw an error.\n     */ static from(obj, allowIndexed) {\n        if (ParamType.isParamType(obj)) {\n            return obj;\n        }\n        if (typeof obj === \"string\") {\n            try {\n                return ParamType.from(lex(obj), allowIndexed);\n            } catch (error) {\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(false, \"invalid param type\", \"obj\", obj);\n            }\n        } else if (obj instanceof TokenString) {\n            let type = \"\", baseType = \"\";\n            let comps = null;\n            if (consumeKeywords(obj, setify([\n                \"tuple\"\n            ])).has(\"tuple\") || obj.peekType(\"OPEN_PAREN\")) {\n                // Tuple\n                baseType = \"tuple\";\n                comps = obj.popParams().map((t)=>ParamType.from(t));\n                type = \"tuple(\".concat(comps.map((c)=>c.format()).join(\",\"), \")\");\n            } else {\n                // Normal\n                type = verifyBasicType(obj.popType(\"TYPE\"));\n                baseType = type;\n            }\n            // Check for Array\n            let arrayChildren = null;\n            let arrayLength = null;\n            while(obj.length && obj.peekType(\"BRACKET\")){\n                const bracket = obj.pop(); //arrays[i];\n                arrayChildren = new ParamType(_guard, \"\", type, baseType, null, comps, arrayLength, arrayChildren);\n                arrayLength = bracket.value;\n                type += bracket.text;\n                baseType = \"array\";\n                comps = null;\n            }\n            let indexed = null;\n            const keywords = consumeKeywords(obj, KwModifiers);\n            if (keywords.has(\"indexed\")) {\n                if (!allowIndexed) {\n                    throw new Error(\"\");\n                }\n                indexed = true;\n            }\n            const name = obj.peekType(\"ID\") ? obj.pop().text : \"\";\n            if (obj.length) {\n                throw new Error(\"leftover tokens\");\n            }\n            return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);\n        }\n        const name = obj.name;\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(!name || typeof name === \"string\" && name.match(regexId), \"invalid name\", \"obj.name\", name);\n        let indexed = obj.indexed;\n        if (indexed != null) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(allowIndexed, \"parameter cannot be indexed\", \"obj.indexed\", obj.indexed);\n            indexed = !!indexed;\n        }\n        let type = obj.type;\n        let arrayMatch = type.match(regexArrayType);\n        if (arrayMatch) {\n            const arrayLength = parseInt(arrayMatch[2] || \"-1\");\n            const arrayChildren = ParamType.from({\n                type: arrayMatch[1],\n                components: obj.components\n            });\n            return new ParamType(_guard, name || \"\", type, \"array\", indexed, null, arrayLength, arrayChildren);\n        }\n        if (type === \"tuple\" || type.startsWith(\"tuple(\" /* fix: ) */ ) || type.startsWith(\"(\" /* fix: ) */ )) {\n            const comps = obj.components != null ? obj.components.map((c)=>ParamType.from(c)) : null;\n            const tuple = new ParamType(_guard, name || \"\", type, \"tuple\", indexed, comps, null, null);\n            // @TODO: use lexer to validate and normalize type\n            return tuple;\n        }\n        type = verifyBasicType(obj.type);\n        return new ParamType(_guard, name || \"\", type, type, indexed, null, null, null);\n    }\n    /**\n     *  Returns true if %%value%% is a **ParamType**.\n     */ static isParamType(value) {\n        return value && value[internal] === ParamTypeInternal;\n    }\n    /**\n     *  @private\n     */ constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren){\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _walkAsync);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertPrivate)(guard, _guard, \"ParamType\");\n        Object.defineProperty(this, internal, {\n            value: ParamTypeInternal\n        });\n        if (components) {\n            components = Object.freeze(components.slice());\n        }\n        if (baseType === \"array\") {\n            if (arrayLength == null || arrayChildren == null) {\n                throw new Error(\"\");\n            }\n        } else if (arrayLength != null || arrayChildren != null) {\n            throw new Error(\"\");\n        }\n        if (baseType === \"tuple\") {\n            if (components == null) {\n                throw new Error(\"\");\n            }\n        } else if (components != null) {\n            throw new Error(\"\");\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.defineProperties)(this, {\n            name,\n            type,\n            baseType,\n            indexed,\n            components,\n            arrayLength,\n            arrayChildren\n        });\n    }\n}\nfunction walkAsync(promises, value, process, setValue) {\n    var _components_index;\n    if (this.isArray()) {\n        if (!Array.isArray(value)) {\n            throw new Error(\"invalid array value\");\n        }\n        if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n            throw new Error(\"array is wrong length\");\n        }\n        const childType = this.arrayChildren;\n        const result = value.slice();\n        result.forEach((value, index)=>{\n            (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_2__._)(childType, _walkAsync, walkAsync).call(childType, promises, value, process, (value)=>{\n                result[index] = value;\n            });\n        });\n        setValue(result);\n        return;\n    }\n    if (this.isTuple()) {\n        const components = this.components;\n        // Convert the object into an array\n        let result;\n        if (Array.isArray(value)) {\n            result = value.slice();\n        } else {\n            if (value == null || typeof value !== \"object\") {\n                throw new Error(\"invalid tuple value\");\n            }\n            result = components.map((param)=>{\n                if (!param.name) {\n                    throw new Error(\"cannot use object value with unnamed components\");\n                }\n                if (!(param.name in value)) {\n                    throw new Error(\"missing value for component \".concat(param.name));\n                }\n                return value[param.name];\n            });\n        }\n        if (result.length !== this.components.length) {\n            throw new Error(\"array is wrong length\");\n        }\n        result.forEach((value, index)=>{\n            (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_2__._)(_components_index = components[index], _walkAsync, walkAsync).call(_components_index, promises, value, process, (value)=>{\n                result[index] = value;\n            });\n        });\n        setValue(result);\n        return;\n    }\n    const result = process(this.type, value);\n    if (result.then) {\n        promises.push(async function() {\n            setValue(await result);\n        }());\n    } else {\n        setValue(result);\n    }\n}\n/**\n *  An abstract class to represent An individual fragment from a parse ABI.\n */ class Fragment {\n    /**\n     *  Creates a new **Fragment** for %%obj%%, wich can be any supported\n     *  ABI frgament type.\n     */ static from(obj) {\n        if (typeof obj === \"string\") {\n            // Try parsing JSON...\n            try {\n                Fragment.from(JSON.parse(obj));\n            } catch (e) {}\n            // ...otherwise, use the human-readable lexer\n            return Fragment.from(lex(obj));\n        }\n        if (obj instanceof TokenString) {\n            // Human-readable ABI (already lexed)\n            const type = obj.peekKeyword(KwTypes);\n            switch(type){\n                case \"constructor\":\n                    return ConstructorFragment.from(obj);\n                case \"error\":\n                    return ErrorFragment.from(obj);\n                case \"event\":\n                    return EventFragment.from(obj);\n                case \"fallback\":\n                case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\":\n                    return FunctionFragment.from(obj);\n                case \"struct\":\n                    return StructFragment.from(obj);\n            }\n        } else if (typeof obj === \"object\") {\n            // JSON ABI\n            switch(obj.type){\n                case \"constructor\":\n                    return ConstructorFragment.from(obj);\n                case \"error\":\n                    return ErrorFragment.from(obj);\n                case \"event\":\n                    return EventFragment.from(obj);\n                case \"fallback\":\n                case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\":\n                    return FunctionFragment.from(obj);\n                case \"struct\":\n                    return StructFragment.from(obj);\n            }\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assert)(false, \"unsupported type: \".concat(obj.type), \"UNSUPPORTED_OPERATION\", {\n                operation: \"Fragment.from\"\n            });\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(false, \"unsupported frgament object\", \"obj\", obj);\n    }\n    /**\n     *  Returns true if %%value%% is a [[ConstructorFragment]].\n     */ static isConstructor(value) {\n        return ConstructorFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is an [[ErrorFragment]].\n     */ static isError(value) {\n        return ErrorFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is an [[EventFragment]].\n     */ static isEvent(value) {\n        return EventFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is a [[FunctionFragment]].\n     */ static isFunction(value) {\n        return FunctionFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is a [[StructFragment]].\n     */ static isStruct(value) {\n        return StructFragment.isFragment(value);\n    }\n    /**\n     *  @private\n     */ constructor(guard, type, inputs){\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertPrivate)(guard, _guard, \"Fragment\");\n        inputs = Object.freeze(inputs.slice());\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.defineProperties)(this, {\n            type,\n            inputs\n        });\n    }\n}\n/**\n *  An abstract class to represent An individual fragment\n *  which has a name from a parse ABI.\n */ class NamedFragment extends Fragment {\n    /**\n     *  @private\n     */ constructor(guard, type, name, inputs){\n        super(guard, type, inputs);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(typeof name === \"string\" && name.match(regexId), \"invalid identifier\", \"name\", name);\n        inputs = Object.freeze(inputs.slice());\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.defineProperties)(this, {\n            name\n        });\n    }\n}\nfunction joinParams(format, params) {\n    return \"(\" + params.map((p)=>p.format(format)).join(format === \"full\" ? \", \" : \",\") + \")\";\n}\n/**\n *  A Fragment which represents a //Custom Error//.\n */ class ErrorFragment extends NamedFragment {\n    /**\n     *  The Custom Error selector.\n     */ get selector() {\n        return (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_9__.id)(this.format(\"sighash\")).substring(0, 10);\n    }\n    /**\n     *  Returns a string representation of this fragment as %%format%%.\n     */ format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input)=>JSON.parse(input.format(format)))\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"error\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        return result.join(\" \");\n    }\n    /**\n     *  Returns a new **ErrorFragment** for %%obj%%.\n     */ static from(obj) {\n        if (ErrorFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof obj === \"string\") {\n            return ErrorFragment.from(lex(obj));\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"error\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new ErrorFragment(_guard, name, inputs);\n        }\n        return new ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **ErrorFragment**.\n     */ static isFragment(value) {\n        return value && value[internal] === ErrorFragmentInternal;\n    }\n    /**\n     *  @private\n     */ constructor(guard, name, inputs){\n        super(guard, \"error\", name, inputs);\n        Object.defineProperty(this, internal, {\n            value: ErrorFragmentInternal\n        });\n    }\n}\n/**\n *  A Fragment which represents an Event.\n */ class EventFragment extends NamedFragment {\n    /**\n     *  The Event topic hash.\n     */ get topicHash() {\n        return (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_9__.id)(this.format(\"sighash\"));\n    }\n    /**\n     *  Returns a string representation of this event as %%format%%.\n     */ format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((i)=>JSON.parse(i.format(format)))\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"event\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== \"sighash\" && this.anonymous) {\n            result.push(\"anonymous\");\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Return the topic hash for an event with %%name%% and %%params%%.\n     */ static getTopicHash(name, params) {\n        params = (params || []).map((p)=>ParamType.from(p));\n        const fragment = new EventFragment(_guard, name, params, false);\n        return fragment.topicHash;\n    }\n    /**\n     *  Returns a new **EventFragment** for %%obj%%.\n     */ static from(obj) {\n        if (EventFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof obj === \"string\") {\n            try {\n                return EventFragment.from(lex(obj));\n            } catch (error) {\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(false, \"invalid event fragment\", \"obj\", obj);\n            }\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"event\", obj);\n            const inputs = consumeParams(obj, true);\n            const anonymous = !!consumeKeywords(obj, setify([\n                \"anonymous\"\n            ])).has(\"anonymous\");\n            consumeEoi(obj);\n            return new EventFragment(_guard, name, inputs, anonymous);\n        }\n        return new EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map((p)=>ParamType.from(p, true)) : [], !!obj.anonymous);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **EventFragment**.\n     */ static isFragment(value) {\n        return value && value[internal] === EventFragmentInternal;\n    }\n    /**\n     *  @private\n     */ constructor(guard, name, inputs, anonymous){\n        super(guard, \"event\", name, inputs);\n        Object.defineProperty(this, internal, {\n            value: EventFragmentInternal\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.defineProperties)(this, {\n            anonymous\n        });\n    }\n}\n/**\n *  A Fragment which represents a constructor.\n */ class ConstructorFragment extends Fragment {\n    /**\n     *  Returns a string representation of this constructor as %%format%%.\n     */ format(format) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assert)(format != null && format !== \"sighash\", \"cannot format a constructor for sighash\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"format(sighash)\"\n        });\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: this.payable ? \"payable\" : \"undefined\",\n                payable: this.payable,\n                gas: this.gas != null ? this.gas : undefined,\n                inputs: this.inputs.map((i)=>JSON.parse(i.format(format)))\n            });\n        }\n        const result = [\n            \"constructor\".concat(joinParams(format, this.inputs))\n        ];\n        if (this.payable) {\n            result.push(\"payable\");\n        }\n        if (this.gas != null) {\n            result.push(\"@\".concat(this.gas.toString()));\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Returns a new **ConstructorFragment** for %%obj%%.\n     */ static from(obj) {\n        if (ConstructorFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof obj === \"string\") {\n            try {\n                return ConstructorFragment.from(lex(obj));\n            } catch (error) {\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(false, \"invalid constuctor fragment\", \"obj\", obj);\n            }\n        } else if (obj instanceof TokenString) {\n            consumeKeywords(obj, setify([\n                \"constructor\"\n            ]));\n            const inputs = consumeParams(obj);\n            const payable = !!consumeKeywords(obj, KwVisibDeploy).has(\"payable\");\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n            return new ConstructorFragment(_guard, \"constructor\", inputs, payable, gas);\n        }\n        return new ConstructorFragment(_guard, \"constructor\", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **ConstructorFragment**.\n     */ static isFragment(value) {\n        return value && value[internal] === ConstructorFragmentInternal;\n    }\n    /**\n     *  @private\n     */ constructor(guard, type, inputs, payable, gas){\n        super(guard, type, inputs);\n        Object.defineProperty(this, internal, {\n            value: ConstructorFragmentInternal\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.defineProperties)(this, {\n            payable,\n            gas\n        });\n    }\n}\n/**\n *  A Fragment which represents a method.\n */ class FallbackFragment extends Fragment {\n    /**\n     *  Returns a string representation of this fallback as %%format%%.\n     */ format(format) {\n        const type = this.inputs.length === 0 ? \"receive\" : \"fallback\";\n        if (format === \"json\") {\n            const stateMutability = this.payable ? \"payable\" : \"nonpayable\";\n            return JSON.stringify({\n                type,\n                stateMutability\n            });\n        }\n        return \"\".concat(type, \"()\").concat(this.payable ? \" payable\" : \"\");\n    }\n    /**\n     *  Returns a new **FallbackFragment** for %%obj%%.\n     */ static from(obj) {\n        if (FallbackFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof obj === \"string\") {\n            try {\n                return FallbackFragment.from(lex(obj));\n            } catch (error) {\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(false, \"invalid fallback fragment\", \"obj\", obj);\n            }\n        } else if (obj instanceof TokenString) {\n            const errorObj = obj.toString();\n            const topIsValid = obj.peekKeyword(setify([\n                \"fallback\",\n                \"receive\"\n            ]));\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(topIsValid, \"type must be fallback or receive\", \"obj\", errorObj);\n            const type = obj.popKeyword(setify([\n                \"fallback\",\n                \"receive\"\n            ]));\n            // receive()\n            if (type === \"receive\") {\n                const inputs = consumeParams(obj);\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(inputs.length === 0, \"receive cannot have arguments\", \"obj.inputs\", inputs);\n                consumeKeywords(obj, setify([\n                    \"payable\"\n                ]));\n                consumeEoi(obj);\n                return new FallbackFragment(_guard, [], true);\n            }\n            // fallback() [payable]\n            // fallback(bytes) [payable] returns (bytes)\n            let inputs = consumeParams(obj);\n            if (inputs.length) {\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(inputs.length === 1 && inputs[0].type === \"bytes\", \"invalid fallback inputs\", \"obj.inputs\", inputs.map((i)=>i.format(\"minimal\")).join(\", \"));\n            } else {\n                inputs = [\n                    ParamType.from(\"bytes\")\n                ];\n            }\n            const mutability = consumeMutability(obj);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(mutability === \"nonpayable\" || mutability === \"payable\", \"fallback cannot be constants\", \"obj.stateMutability\", mutability);\n            if (consumeKeywords(obj, setify([\n                \"returns\"\n            ])).has(\"returns\")) {\n                const outputs = consumeParams(obj);\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(outputs.length === 1 && outputs[0].type === \"bytes\", \"invalid fallback outputs\", \"obj.outputs\", outputs.map((i)=>i.format(\"minimal\")).join(\", \"));\n            }\n            consumeEoi(obj);\n            return new FallbackFragment(_guard, inputs, mutability === \"payable\");\n        }\n        if (obj.type === \"receive\") {\n            return new FallbackFragment(_guard, [], true);\n        }\n        if (obj.type === \"fallback\") {\n            const inputs = [\n                ParamType.from(\"bytes\")\n            ];\n            const payable = obj.stateMutability === \"payable\";\n            return new FallbackFragment(_guard, inputs, payable);\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(false, \"invalid fallback description\", \"obj\", obj);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FallbackFragment**.\n     */ static isFragment(value) {\n        return value && value[internal] === FallbackFragmentInternal;\n    }\n    constructor(guard, inputs, payable){\n        super(guard, \"fallback\", inputs);\n        Object.defineProperty(this, internal, {\n            value: FallbackFragmentInternal\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.defineProperties)(this, {\n            payable\n        });\n    }\n}\n/**\n *  A Fragment which represents a method.\n */ class FunctionFragment extends NamedFragment {\n    /**\n     *  The Function selector.\n     */ get selector() {\n        return (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_9__.id)(this.format(\"sighash\")).substring(0, 10);\n    }\n    /**\n     *  Returns a string representation of this function as %%format%%.\n     */ format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n                payable: this.payable,\n                gas: this.gas != null ? this.gas : undefined,\n                inputs: this.inputs.map((i)=>JSON.parse(i.format(format))),\n                outputs: this.outputs.map((o)=>JSON.parse(o.format(format)))\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"function\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== \"sighash\") {\n            if (this.stateMutability !== \"nonpayable\") {\n                result.push(this.stateMutability);\n            }\n            if (this.outputs && this.outputs.length) {\n                result.push(\"returns\");\n                result.push(joinParams(format, this.outputs));\n            }\n            if (this.gas != null) {\n                result.push(\"@\".concat(this.gas.toString()));\n            }\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Return the selector for a function with %%name%% and %%params%%.\n     */ static getSelector(name, params) {\n        params = (params || []).map((p)=>ParamType.from(p));\n        const fragment = new FunctionFragment(_guard, name, \"view\", params, [], null);\n        return fragment.selector;\n    }\n    /**\n     *  Returns a new **FunctionFragment** for %%obj%%.\n     */ static from(obj) {\n        if (FunctionFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof obj === \"string\") {\n            try {\n                return FunctionFragment.from(lex(obj));\n            } catch (error) {\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(false, \"invalid function fragment\", \"obj\", obj);\n            }\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"function\", obj);\n            const inputs = consumeParams(obj);\n            const mutability = consumeMutability(obj);\n            let outputs = [];\n            if (consumeKeywords(obj, setify([\n                \"returns\"\n            ])).has(\"returns\")) {\n                outputs = consumeParams(obj);\n            }\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n            return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);\n        }\n        let stateMutability = obj.stateMutability;\n        // Use legacy Solidity ABI logic if stateMutability is missing\n        if (stateMutability == null) {\n            stateMutability = \"payable\";\n            if (typeof obj.constant === \"boolean\") {\n                stateMutability = \"view\";\n                if (!obj.constant) {\n                    stateMutability = \"payable\";\n                    if (typeof obj.payable === \"boolean\" && !obj.payable) {\n                        stateMutability = \"nonpayable\";\n                    }\n                }\n            } else if (typeof obj.payable === \"boolean\" && !obj.payable) {\n                stateMutability = \"nonpayable\";\n            }\n        }\n        // @TODO: verifyState for stateMutability (e.g. throw if\n        //        payable: false but stateMutability is \"nonpayable\")\n        return new FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FunctionFragment**.\n     */ static isFragment(value) {\n        return value && value[internal] === FunctionFragmentInternal;\n    }\n    /**\n     *  @private\n     */ constructor(guard, name, stateMutability, inputs, outputs, gas){\n        super(guard, \"function\", name, inputs);\n        Object.defineProperty(this, internal, {\n            value: FunctionFragmentInternal\n        });\n        outputs = Object.freeze(outputs.slice());\n        const constant = stateMutability === \"view\" || stateMutability === \"pure\";\n        const payable = stateMutability === \"payable\";\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.defineProperties)(this, {\n            constant,\n            gas,\n            outputs,\n            payable,\n            stateMutability\n        });\n    }\n}\n/**\n *  A Fragment which represents a structure.\n */ class StructFragment extends NamedFragment {\n    /**\n     *  Returns a string representation of this struct as %%format%%.\n     */ format() {\n        throw new Error(\"@TODO\");\n    }\n    /**\n     *  Returns a new **StructFragment** for %%obj%%.\n     */ static from(obj) {\n        if (typeof obj === \"string\") {\n            try {\n                return StructFragment.from(lex(obj));\n            } catch (error) {\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.assertArgument)(false, \"invalid struct fragment\", \"obj\", obj);\n            }\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"struct\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new StructFragment(_guard, name, inputs);\n        }\n        return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n    }\n    // @TODO: fix this return type\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **StructFragment**.\n     */ static isFragment(value) {\n        return value && value[internal] === StructFragmentInternal;\n    }\n    /**\n     *  @private\n     */ constructor(guard, name, inputs){\n        super(guard, \"struct\", name, inputs);\n        Object.defineProperty(this, internal, {\n            value: StructFragmentInternal\n        });\n    }\n} //# sourceMappingURL=fragments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/fragments.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/interface.js":
/*!*******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/interface.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorDescription: function() { return /* binding */ ErrorDescription; },\n/* harmony export */   Indexed: function() { return /* binding */ Indexed; },\n/* harmony export */   Interface: function() { return /* binding */ Interface; },\n/* harmony export */   LogDescription: function() { return /* binding */ LogDescription; },\n/* harmony export */   Result: function() { return /* reexport safe */ _coders_abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Result; },\n/* harmony export */   TransactionDescription: function() { return /* binding */ TransactionDescription; },\n/* harmony export */   checkResultErrors: function() { return /* reexport safe */ _coders_abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.checkResultErrors; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../hash/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/id.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _abi_coder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abi-coder.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/abi-coder.js\");\n/* harmony import */ var _coders_abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./coders/abstract-coder.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fragments.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/fragments.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./typed.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/typed.js\");\n/**\n *  The Interface class is a low-level class that accepts an\n *  ABI and provides all the necessary functionality to encode\n *  and decode paramaters to and results from methods, events\n *  and errors.\n *\n *  It also provides several convenience methods to automatically\n *  search and find matching transactions and events to parse them.\n *\n *  @_subsection api/abi:Interfaces  [interfaces]\n */ \n\n\n\n\n\n\n\n\n\n\n\n\n/**\n *  When using the [[Interface-parseLog]] to automatically match a Log to its event\n *  for parsing, a **LogDescription** is returned.\n */ class LogDescription {\n    /**\n     *  @_ignore:\n     */ constructor(fragment, topic, args){\n        const name = fragment.name, signature = fragment.format();\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n            fragment,\n            name,\n            signature,\n            topic,\n            args\n        });\n    }\n}\n/**\n *  When using the [[Interface-parseTransaction]] to automatically match\n *  a transaction data to its function for parsing,\n *  a **TransactionDescription** is returned.\n */ class TransactionDescription {\n    /**\n     *  @_ignore:\n     */ constructor(fragment, selector, args, value){\n        const name = fragment.name, signature = fragment.format();\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n            fragment,\n            name,\n            args,\n            signature,\n            selector,\n            value\n        });\n    }\n}\n/**\n *  When using the [[Interface-parseError]] to automatically match an\n *  error for a call result for parsing, an **ErrorDescription** is returned.\n */ class ErrorDescription {\n    /**\n     *  @_ignore:\n     */ constructor(fragment, selector, args){\n        const name = fragment.name, signature = fragment.format();\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n            fragment,\n            name,\n            args,\n            signature,\n            selector\n        });\n    }\n}\n/**\n *  An **Indexed** is used as a value when a value that does not\n *  fit within a topic (i.e. not a fixed-length, 32-byte type). It\n *  is the ``keccak256`` of the value, and used for types such as\n *  arrays, tuples, bytes and strings.\n */ class Indexed {\n    /**\n     *  Returns ``true`` if %%value%% is an **Indexed**.\n     *\n     *  This provides a Type Guard for property access.\n     */ static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n    /**\n     *  @_ignore:\n     */ constructor(hash){\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n            hash,\n            _isIndexed: true\n        });\n    }\n}\n// https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require\nconst PanicReasons = {\n    \"0\": \"generic panic\",\n    \"1\": \"assert(false)\",\n    \"17\": \"arithmetic overflow\",\n    \"18\": \"division or modulo by zero\",\n    \"33\": \"enum overflow\",\n    \"34\": \"invalid encoded storage byte array accessed\",\n    \"49\": \"out-of-bounds array access; popping on an empty array\",\n    \"50\": \"out-of-bounds access of an array or bytesN\",\n    \"65\": \"out of memory\",\n    \"81\": \"uninitialized function\"\n};\nconst BuiltinErrors = {\n    \"0x08c379a0\": {\n        signature: \"Error(string)\",\n        name: \"Error\",\n        inputs: [\n            \"string\"\n        ],\n        reason: (message)=>{\n            return \"reverted with reason string \".concat(JSON.stringify(message));\n        }\n    },\n    \"0x4e487b71\": {\n        signature: \"Panic(uint256)\",\n        name: \"Panic\",\n        inputs: [\n            \"uint256\"\n        ],\n        reason: (code)=>{\n            let reason = \"unknown panic code\";\n            if (code >= 0 && code <= 0xff && PanicReasons[code.toString()]) {\n                reason = PanicReasons[code.toString()];\n            }\n            return \"reverted with panic code 0x\".concat(code.toString(16), \" (\").concat(reason, \")\");\n        }\n    }\n};\nvar _errors = /*#__PURE__*/ new WeakMap(), _events = /*#__PURE__*/ new WeakMap(), _functions = /*#__PURE__*/ new WeakMap(), //    #structs: Map<string, StructFragment>;\n_abiCoder = /*#__PURE__*/ new WeakMap(), // Find a function definition by any means necessary (unless it is ambiguous)\n_getFunction = /*#__PURE__*/ new WeakSet(), // Find an event definition by any means necessary (unless it is ambiguous)\n_getEvent = /*#__PURE__*/ new WeakSet();\n/**\n *  An Interface abstracts many of the low-level details for\n *  encoding and decoding the data on the blockchain.\n *\n *  An ABI provides information on how to encode data to send to\n *  a Contract, how to decode the results and events and how to\n *  interpret revert errors.\n *\n *  The ABI can be specified by [any supported format](InterfaceAbi).\n */ class Interface {\n    /**\n     *  Returns the entire Human-Readable ABI, as an array of\n     *  signatures, optionally as %%minimal%% strings, which\n     *  removes parameter names and unneceesary spaces.\n     */ format(minimal) {\n        const format = minimal ? \"minimal\" : \"full\";\n        const abi = this.fragments.map((f)=>f.format(format));\n        return abi;\n    }\n    /**\n     *  Return the JSON-encoded ABI. This is the format Solidiy\n     *  returns.\n     */ formatJson() {\n        const abi = this.fragments.map((f)=>f.format(\"json\"));\n        // We need to re-bundle the JSON fragments a bit\n        return JSON.stringify(abi.map((j)=>JSON.parse(j)));\n    }\n    /**\n     *  The ABI coder that will be used to encode and decode binary\n     *  data.\n     */ getAbiCoder() {\n        return _abi_coder_js__WEBPACK_IMPORTED_MODULE_2__.AbiCoder.defaultAbiCoder();\n    }\n    /**\n     *  Get the function name for %%key%%, which may be a function selector,\n     *  function name or function signature that belongs to the ABI.\n     */ getFunctionName(key) {\n        const fragment = (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _getFunction, getFunction).call(this, key, null, false);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(fragment, \"no matching function\", \"key\", key);\n        return fragment.name;\n    }\n    /**\n     *  Returns true if %%key%% (a function selector, function name or\n     *  function signature) is present in the ABI.\n     *\n     *  In the case of a function name, the name may be ambiguous, so\n     *  accessing the [[FunctionFragment]] may require refinement.\n     */ hasFunction(key) {\n        return !!(0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _getFunction, getFunction).call(this, key, null, false);\n    }\n    /**\n     *  Get the [[FunctionFragment]] for %%key%%, which may be a function\n     *  selector, function name or function signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple functions match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single function in\n     *  the ABI, this will throw.\n     */ getFunction(key, values) {\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _getFunction, getFunction).call(this, key, values || null, true);\n    }\n    /**\n     *  Iterate over all functions, calling %%callback%%, sorted by their name.\n     */ forEachFunction(callback) {\n        const names = Array.from((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _functions).keys());\n        names.sort((a, b)=>a.localeCompare(b));\n        for(let i = 0; i < names.length; i++){\n            const name = names[i];\n            callback((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _functions).get(name), i);\n        }\n    }\n    /**\n     *  Get the event name for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     */ getEventName(key) {\n        const fragment = (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _getEvent, getEvent).call(this, key, null, false);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(fragment, \"no matching event\", \"key\", key);\n        return fragment.name;\n    }\n    /**\n     *  Returns true if %%key%% (an event topic hash, event name or\n     *  event signature) is present in the ABI.\n     *\n     *  In the case of an event name, the name may be ambiguous, so\n     *  accessing the [[EventFragment]] may require refinement.\n     */ hasEvent(key) {\n        return !!(0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _getEvent, getEvent).call(this, key, null, false);\n    }\n    /**\n     *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple events match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single event in\n     *  the ABI, this will throw.\n     */ getEvent(key, values) {\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _getEvent, getEvent).call(this, key, values || null, true);\n    }\n    /**\n     *  Iterate over all events, calling %%callback%%, sorted by their name.\n     */ forEachEvent(callback) {\n        const names = Array.from((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _events).keys());\n        names.sort((a, b)=>a.localeCompare(b));\n        for(let i = 0; i < names.length; i++){\n            const name = names[i];\n            callback((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _events).get(name), i);\n        }\n    }\n    /**\n     *  Get the [[ErrorFragment]] for %%key%%, which may be an error\n     *  selector, error name or error signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple errors match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single error in\n     *  the ABI, this will throw.\n     */ getError(key, values) {\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.isHexString)(key)) {\n            const selector = key.toLowerCase();\n            if (BuiltinErrors[selector]) {\n                return _fragments_js__WEBPACK_IMPORTED_MODULE_7__.ErrorFragment.from(BuiltinErrors[selector].signature);\n            }\n            for (const fragment of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _errors).values()){\n                if (selector === fragment.selector) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _errors)){\n                if (name.split(\"(\" /* fix:) */ )[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n            if (matching.length === 0) {\n                if (key === \"Error\") {\n                    return _fragments_js__WEBPACK_IMPORTED_MODULE_7__.ErrorFragment.from(\"error Error(string)\");\n                }\n                if (key === \"Panic\") {\n                    return _fragments_js__WEBPACK_IMPORTED_MODULE_7__.ErrorFragment.from(\"error Panic(uint256)\");\n                }\n                return null;\n            } else if (matching.length > 1) {\n                const matchStr = matching.map((m)=>JSON.stringify(m.format())).join(\", \");\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(false, \"ambiguous error description (i.e. \".concat(matchStr, \")\"), \"name\", key);\n            }\n            return matching[0];\n        }\n        // Normalize the signature and lookup the function\n        key = _fragments_js__WEBPACK_IMPORTED_MODULE_7__.ErrorFragment.from(key).format();\n        if (key === \"Error(string)\") {\n            return _fragments_js__WEBPACK_IMPORTED_MODULE_7__.ErrorFragment.from(\"error Error(string)\");\n        }\n        if (key === \"Panic(uint256)\") {\n            return _fragments_js__WEBPACK_IMPORTED_MODULE_7__.ErrorFragment.from(\"error Panic(uint256)\");\n        }\n        const result = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _errors).get(key);\n        if (result) {\n            return result;\n        }\n        return null;\n    }\n    /**\n     *  Iterate over all errors, calling %%callback%%, sorted by their name.\n     */ forEachError(callback) {\n        const names = Array.from((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _errors).keys());\n        names.sort((a, b)=>a.localeCompare(b));\n        for(let i = 0; i < names.length; i++){\n            const name = names[i];\n            callback((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _errors).get(name), i);\n        }\n    }\n    // Get the 4-byte selector used by Solidity to identify a function\n    /*\ngetSelector(fragment: ErrorFragment | FunctionFragment): string {\n    if (typeof(fragment) === \"string\") {\n        const matches: Array<Fragment> = [ ];\n\n        try { matches.push(this.getFunction(fragment)); } catch (error) { }\n        try { matches.push(this.getError(<string>fragment)); } catch (_) { }\n\n        if (matches.length === 0) {\n            logger.throwArgumentError(\"unknown fragment\", \"key\", fragment);\n        } else if (matches.length > 1) {\n            logger.throwArgumentError(\"ambiguous fragment matches function and error\", \"key\", fragment);\n        }\n\n        fragment = matches[0];\n    }\n\n    return dataSlice(id(fragment.format()), 0, 4);\n}\n    */ // Get the 32-byte topic hash used by Solidity to identify an event\n    /*\n    getEventTopic(fragment: EventFragment): string {\n        //if (typeof(fragment) === \"string\") { fragment = this.getEvent(eventFragment); }\n        return id(fragment.format());\n    }\n    */ _decodeParams(params, data) {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _abiCoder).decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _abiCoder).encode(params, values);\n    }\n    /**\n     *  Encodes a ``tx.data`` object for deploying the Contract with\n     *  the %%values%% as the constructor arguments.\n     */ encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified error (see [[getError]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */ decodeErrorResult(fragment, data) {\n        if (typeof fragment === \"string\") {\n            const f = this.getError(fragment);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.dataSlice)(data, 0, 4) === fragment.selector, \"data signature does not match error \".concat(fragment.name, \".\"), \"data\", data);\n        return this._decodeParams(fragment.inputs, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.dataSlice)(data, 4));\n    }\n    /**\n     *  Encodes the transaction revert data for a call result that\n     *  reverted from the the Contract with the sepcified %%error%%\n     *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */ encodeErrorResult(fragment, values) {\n        if (typeof fragment === \"string\") {\n            const f = this.getError(fragment);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.concat)([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [])\n        ]);\n    }\n    /**\n     *  Decodes the %%data%% from a transaction ``tx.data`` for\n     *  the function specified (see [[getFunction]] for valid values\n     *  for %%fragment%%).\n     *\n     *  Most developers should prefer the [[parseTransaction]] method\n     *  instead, which will automatically detect the fragment.\n     */ decodeFunctionData(fragment, data) {\n        if (typeof fragment === \"string\") {\n            const f = this.getFunction(fragment);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.dataSlice)(data, 0, 4) === fragment.selector, \"data signature does not match function \".concat(fragment.name, \".\"), \"data\", data);\n        return this._decodeParams(fragment.inputs, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.dataSlice)(data, 4));\n    }\n    /**\n     *  Encodes the ``tx.data`` for a transaction that calls the function\n     *  specified (see [[getFunction]] for valid values for %%fragment%%) with\n     *  the %%values%%.\n     */ encodeFunctionData(fragment, values) {\n        if (typeof fragment === \"string\") {\n            const f = this.getFunction(fragment);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.concat)([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [])\n        ]);\n    }\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */ decodeFunctionResult(fragment, data) {\n        if (typeof fragment === \"string\") {\n            const f = this.getFunction(fragment);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        let message = \"invalid length for result data\";\n        const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.getBytesCopy)(data);\n        if (bytes.length % 32 === 0) {\n            try {\n                return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _abiCoder).decode(fragment.outputs, bytes);\n            } catch (error) {\n                message = \"could not decode result data\";\n            }\n        }\n        // Call returned data with no error, but the data is junk\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(false, message, \"BAD_DATA\", {\n            value: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.hexlify)(bytes),\n            info: {\n                method: fragment.name,\n                signature: fragment.format()\n            }\n        });\n    }\n    makeError(_data, tx) {\n        const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.getBytes)(_data, \"data\");\n        const error = _abi_coder_js__WEBPACK_IMPORTED_MODULE_2__.AbiCoder.getBuiltinCallException(\"call\", tx, data);\n        // Not a built-in error; try finding a custom error\n        const customPrefix = \"execution reverted (unknown custom error)\";\n        if (error.message.startsWith(customPrefix)) {\n            const selector = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.hexlify)(data.slice(0, 4));\n            const ef = this.getError(selector);\n            if (ef) {\n                try {\n                    const args = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _abiCoder).decode(ef.inputs, data.slice(4));\n                    error.revert = {\n                        name: ef.name,\n                        signature: ef.format(),\n                        args\n                    };\n                    error.reason = error.revert.signature;\n                    error.message = \"execution reverted: \".concat(error.reason);\n                } catch (e) {\n                    error.message = \"execution reverted (coult not decode custom error)\";\n                }\n            }\n        }\n        // Add the invocation, if available\n        const parsed = this.parseTransaction(tx);\n        if (parsed) {\n            error.invocation = {\n                method: parsed.name,\n                signature: parsed.signature,\n                args: parsed.args\n            };\n        }\n        return error;\n    }\n    /**\n     *  Encodes the result data (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values\n     *  for %%fragment%%) with %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */ encodeFunctionResult(fragment, values) {\n        if (typeof fragment === \"string\") {\n            const f = this.getFunction(fragment);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _abiCoder).encode(fragment.outputs, values || []));\n    }\n    /*\n        spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {\n            const promises: Array<Promise<>> = [ ];\n            const process = function(type: ParamType, value: any): any {\n                if (type.baseType === \"array\") {\n                    return descend(type.child\n                }\n                if (type. === \"address\") {\n                }\n            };\n    \n            const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {\n                if (inputs.length !== values.length) { throw new Error(\"length mismatch\"); }\n                \n            };\n    \n            const result: Array<any> = [ ];\n            values.forEach((value, index) => {\n                if (value == null) {\n                    topics.push(null);\n                } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                    logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n                } else if (Array.isArray(value)) {\n                    topics.push(value.map((value) => encodeTopic(param, value)));\n                } else {\n                    topics.push(encodeTopic(param, value));\n                }\n            });\n        }\n    */ // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(fragment, values) {\n        if (typeof fragment === \"string\") {\n            const f = this.getEvent(fragment);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(values.length <= fragment.inputs.length, \"too many arguments for \".concat(fragment.format()), \"UNEXPECTED_ARGUMENT\", {\n            count: values.length,\n            expectedCount: fragment.inputs.length\n        });\n        const topics = [];\n        if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n        }\n        // @TODO: Use the coders for this; to properly support tuples, etc.\n        const encodeTopic = (param, value)=>{\n            if (param.type === \"string\") {\n                return (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_8__.id)(value);\n            } else if (param.type === \"bytes\") {\n                return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_9__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value));\n            }\n            if (param.type === \"bool\" && typeof value === \"boolean\") {\n                value = value ? \"0x01\" : \"0x00\";\n            } else if (param.type.match(/^u?int/)) {\n                value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__.toBeHex)(value); // @TODO: Should this toTwos??\n            } else if (param.type.match(/^bytes/)) {\n                value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.zeroPadBytes)(value, 32);\n            } else if (param.type === \"address\") {\n                // Check addresses are valid\n                (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _abiCoder).encode([\n                    \"address\"\n                ], [\n                    value\n                ]);\n            }\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.zeroPadValue)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value), 32);\n        };\n        values.forEach((value, index)=>{\n            const param = fragment.inputs[index];\n            if (!param.indexed) {\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(value == null, \"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(false, \"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value)=>encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while(topics.length && topics[topics.length - 1] === null){\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(fragment, values) {\n        if (typeof fragment === \"string\") {\n            const f = this.getEvent(fragment);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(values.length === fragment.inputs.length, \"event arguments/values mismatch\", \"values\", values);\n        fragment.inputs.forEach((param, index)=>{\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push((0,_hash_index_js__WEBPACK_IMPORTED_MODULE_8__.id)(value));\n                } else if (param.type === \"bytes\") {\n                    topics.push((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_9__.keccak256)(value));\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _abiCoder).encode([\n                        param.type\n                    ], [\n                        value\n                    ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _abiCoder).encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(fragment, data, topics) {\n        if (typeof fragment === \"string\") {\n            const f = this.getEvent(fragment);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        if (topics != null && !fragment.anonymous) {\n            const eventTopic = fragment.topicHash;\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.isHexString)(topics[0], 32) && topics[0].toLowerCase() === eventTopic, \"fragment/topic mismatch\", \"topics[0]\", topics[0]);\n            topics = topics.slice(1);\n        }\n        const indexed = [];\n        const nonIndexed = [];\n        const dynamic = [];\n        fragment.inputs.forEach((param, index)=>{\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(_fragments_js__WEBPACK_IMPORTED_MODULE_7__.ParamType.from({\n                        type: \"bytes32\",\n                        name: param.name\n                    }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        const resultIndexed = topics != null ? (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _abiCoder).decode(indexed, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.concat)(topics)) : null;\n        const resultNonIndexed = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _abiCoder).decode(nonIndexed, data, true);\n        //const result: (Array<any> & { [ key: string ]: any }) = [ ];\n        const values = [];\n        const keys = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        fragment.inputs.forEach((param, index)=>{\n            let value = null;\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    value = new Indexed(null);\n                } else if (dynamic[index]) {\n                    value = new Indexed(resultIndexed[indexedIndex++]);\n                } else {\n                    try {\n                        value = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        value = error;\n                    }\n                }\n            } else {\n                try {\n                    value = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    value = error;\n                }\n            }\n            values.push(value);\n            keys.push(param.name || null);\n        });\n        return _coders_abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Result.fromItems(values, keys);\n    }\n    /**\n     *  Parses a transaction, finding the matching function and extracts\n     *  the parameter values along with other useful function details.\n     *\n     *  If the matching function cannot be found, return null.\n     */ parseTransaction(tx) {\n        const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.getBytes)(tx.data, \"tx.data\");\n        const value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__.getBigInt)(tx.value != null ? tx.value : 0, \"tx.value\");\n        const fragment = this.getFunction((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.hexlify)(data.slice(0, 4)));\n        if (!fragment) {\n            return null;\n        }\n        const args = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _abiCoder).decode(fragment.inputs, data.slice(4));\n        return new TransactionDescription(fragment, fragment.selector, args, value);\n    }\n    parseCallResult(data) {\n        throw new Error(\"@TODO\");\n    }\n    /**\n     *  Parses a receipt log, finding the matching event and extracts\n     *  the parameter values along with other useful event details.\n     *\n     *  If the matching event cannot be found, returns null.\n     */ parseLog(log) {\n        const fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));\n    }\n    /**\n     *  Parses a revert data, finding the matching error and extracts\n     *  the parameter values along with other useful error details.\n     *\n     *  If the matching error cannot be found, returns null.\n     */ parseError(data) {\n        const hexData = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.hexlify)(data);\n        const fragment = this.getError((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.dataSlice)(hexData, 0, 4));\n        if (!fragment) {\n            return null;\n        }\n        const args = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _abiCoder).decode(fragment.inputs, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.dataSlice)(hexData, 4));\n        return new ErrorDescription(fragment, fragment.selector, args);\n    }\n    /**\n     *  Creates a new [[Interface]] from the ABI %%value%%.\n     *\n     *  The %%value%% may be provided as an existing [[Interface]] object,\n     *  a JSON-encoded ABI or any Human-Readable ABI format.\n     */ static from(value) {\n        // Already an Interface, which is immutable\n        if (value instanceof Interface) {\n            return value;\n        }\n        // JSON\n        if (typeof value === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        // Maybe an interface from an older version, or from a symlinked copy\n        if (typeof value.format === \"function\") {\n            return new Interface(value.format(\"json\"));\n        }\n        // Array of fragments\n        return new Interface(value);\n    }\n    /**\n     *  Create a new Interface for the %%fragments%%.\n     */ constructor(fragments){\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_11__._)(this, _getFunction);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_11__._)(this, _getEvent);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_12__._)(this, _errors, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_12__._)(this, _events, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_12__._)(this, _functions, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_12__._)(this, _abiCoder, {\n            writable: true,\n            value: void 0\n        });\n        let abi = [];\n        if (typeof fragments === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_13__._)(this, _functions, new Map());\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_13__._)(this, _errors, new Map());\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_13__._)(this, _events, new Map());\n        //        this.#structs = new Map();\n        const frags = [];\n        for (const a of abi){\n            try {\n                frags.push(_fragments_js__WEBPACK_IMPORTED_MODULE_7__.Fragment.from(a));\n            } catch (error) {\n                console.log(\"[Warning] Invalid Fragment \".concat(JSON.stringify(a), \":\"), error.message);\n            }\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n            fragments: Object.freeze(frags)\n        });\n        let fallback = null;\n        let receive = false;\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_13__._)(this, _abiCoder, this.getAbiCoder());\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment, index)=>{\n            let bucket;\n            switch(fragment.type){\n                case \"constructor\":\n                    if (this.deploy) {\n                        console.log(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n                        deploy: fragment\n                    });\n                    return;\n                case \"fallback\":\n                    if (fragment.inputs.length === 0) {\n                        receive = true;\n                    } else {\n                        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(!fallback || fragment.payable !== fallback.payable, \"conflicting fallback fragments\", \"fragments[\".concat(index, \"]\"), fragment);\n                        fallback = fragment;\n                        receive = fallback.payable;\n                    }\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _functions);\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _events);\n                    break;\n                case \"error\":\n                    bucket = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _errors);\n                    break;\n                default:\n                    return;\n            }\n            // Two identical entries; ignore it\n            const signature = fragment.format();\n            if (bucket.has(signature)) {\n                return;\n            }\n            bucket.set(signature, fragment);\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n                deploy: _fragments_js__WEBPACK_IMPORTED_MODULE_7__.ConstructorFragment.from(\"constructor()\")\n            });\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n            fallback,\n            receive\n        });\n    }\n} //# sourceMappingURL=interface.js.map\nfunction getFunction(key, values, forceUnique) {\n    // Selector\n    if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.isHexString)(key)) {\n        const selector = key.toLowerCase();\n        for (const fragment of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _functions).values()){\n            if (selector === fragment.selector) {\n                return fragment;\n            }\n        }\n        return null;\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (key.indexOf(\"(\") === -1) {\n        const matching = [];\n        for (const [name, fragment] of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _functions)){\n            if (name.split(\"(\" /* fix:) */ )[0] === key) {\n                matching.push(fragment);\n            }\n        }\n        if (values) {\n            const lastValue = values.length > 0 ? values[values.length - 1] : null;\n            let valueLength = values.length;\n            let allowOptions = true;\n            if (_typed_js__WEBPACK_IMPORTED_MODULE_14__.Typed.isTyped(lastValue) && lastValue.type === \"overrides\") {\n                allowOptions = false;\n                valueLength--;\n            }\n            // Remove all matches that don't have a compatible length. The args\n            // may contain an overrides, so the match may have n or n - 1 parameters\n            for(let i = matching.length - 1; i >= 0; i--){\n                const inputs = matching[i].inputs.length;\n                if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {\n                    matching.splice(i, 1);\n                }\n            }\n            // Remove all matches that don't match the Typed signature\n            for(let i = matching.length - 1; i >= 0; i--){\n                const inputs = matching[i].inputs;\n                for(let j = 0; j < values.length; j++){\n                    // Not a typed value\n                    if (!_typed_js__WEBPACK_IMPORTED_MODULE_14__.Typed.isTyped(values[j])) {\n                        continue;\n                    }\n                    // We are past the inputs\n                    if (j >= inputs.length) {\n                        if (values[j].type === \"overrides\") {\n                            continue;\n                        }\n                        matching.splice(i, 1);\n                        break;\n                    }\n                    // Make sure the value type matches the input type\n                    if (values[j].type !== inputs[j].baseType) {\n                        matching.splice(i, 1);\n                        break;\n                    }\n                }\n            }\n        }\n        // We found a single matching signature with an overrides, but the\n        // last value is something that cannot possibly be an options\n        if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {\n            const lastArg = values[values.length - 1];\n            if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== \"object\") {\n                matching.splice(0, 1);\n            }\n        }\n        if (matching.length === 0) {\n            return null;\n        }\n        if (matching.length > 1 && forceUnique) {\n            const matchStr = matching.map((m)=>JSON.stringify(m.format())).join(\", \");\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(false, \"ambiguous function description (i.e. matches \".concat(matchStr, \")\"), \"key\", key);\n        }\n        return matching[0];\n    }\n    // Normalize the signature and lookup the function\n    const result = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _functions).get(_fragments_js__WEBPACK_IMPORTED_MODULE_7__.FunctionFragment.from(key).format());\n    if (result) {\n        return result;\n    }\n    return null;\n}\nfunction getEvent(key, values, forceUnique) {\n    // EventTopic\n    if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.isHexString)(key)) {\n        const eventTopic = key.toLowerCase();\n        for (const fragment of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _events).values()){\n            if (eventTopic === fragment.topicHash) {\n                return fragment;\n            }\n        }\n        return null;\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (key.indexOf(\"(\") === -1) {\n        const matching = [];\n        for (const [name, fragment] of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _events)){\n            if (name.split(\"(\" /* fix:) */ )[0] === key) {\n                matching.push(fragment);\n            }\n        }\n        if (values) {\n            // Remove all matches that don't have a compatible length.\n            for(let i = matching.length - 1; i >= 0; i--){\n                if (matching[i].inputs.length < values.length) {\n                    matching.splice(i, 1);\n                }\n            }\n            // Remove all matches that don't match the Typed signature\n            for(let i = matching.length - 1; i >= 0; i--){\n                const inputs = matching[i].inputs;\n                for(let j = 0; j < values.length; j++){\n                    // Not a typed value\n                    if (!_typed_js__WEBPACK_IMPORTED_MODULE_14__.Typed.isTyped(values[j])) {\n                        continue;\n                    }\n                    // Make sure the value type matches the input type\n                    if (values[j].type !== inputs[j].baseType) {\n                        matching.splice(i, 1);\n                        break;\n                    }\n                }\n            }\n        }\n        if (matching.length === 0) {\n            return null;\n        }\n        if (matching.length > 1 && forceUnique) {\n            const matchStr = matching.map((m)=>JSON.stringify(m.format())).join(\", \");\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(false, \"ambiguous event description (i.e. matches \".concat(matchStr, \")\"), \"key\", key);\n        }\n        return matching[0];\n    }\n    // Normalize the signature and lookup the function\n    const result = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _events).get(_fragments_js__WEBPACK_IMPORTED_MODULE_7__.EventFragment.from(key).format());\n    if (result) {\n        return result;\n    }\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/interface.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/abi/typed.js":
/*!***************************************************!*\
  !*** ../node_modules/ethers/lib.esm/abi/typed.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Typed: function() { return /* binding */ Typed; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/**\n *  A Typed object allows a value to have its type explicitly\n *  specified.\n *\n *  For example, in Solidity, the value ``45`` could represent a\n *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent\n *  a ``bytes2`` or ``bytes``.\n *\n *  Since JavaScript has no meaningful way to explicitly inform any\n *  APIs which what the type is, this allows transparent interoperation\n *  with Soldity.\n *\n *  @_subsection: api/abi:Typed Values\n */ \n\n\n\nconst _gaurd = {};\nfunction n(value, width) {\n    let signed = false;\n    if (width < 0) {\n        signed = true;\n        width *= -1;\n    }\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, \"\".concat(signed ? \"\" : \"u\", \"int\").concat(width), value, {\n        signed,\n        width\n    });\n}\nfunction b(value, size) {\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, \"bytes\".concat(size ? size : \"\"), value, {\n        size\n    });\n}\nconst _typedSymbol = Symbol.for(\"_ethers_typed\");\nvar _options = /*#__PURE__*/ new WeakMap();\n/**\n *  The **Typed** class to wrap values providing explicit type information.\n */ class Typed {\n    /**\n     *  Format the type as a Human-Readable type.\n     */ format() {\n        if (this.type === \"array\") {\n            throw new Error(\"\");\n        } else if (this.type === \"dynamicArray\") {\n            throw new Error(\"\");\n        } else if (this.type === \"tuple\") {\n            return \"tuple(\".concat(this.value.map((v)=>v.format()).join(\",\"), \")\");\n        }\n        return this.type;\n    }\n    /**\n     *  The default value returned by this type.\n     */ defaultValue() {\n        return 0;\n    }\n    /**\n     *  The minimum value for numeric types.\n     */ minValue() {\n        return 0;\n    }\n    /**\n     *  The maximum value for numeric types.\n     */ maxValue() {\n        return 0;\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].\n     */ isBigInt() {\n        return !!this.type.match(/^u?int[0-9]+$/);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedData]].\n     */ isData() {\n        return this.type.startsWith(\"bytes\");\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedString]].\n     */ isString() {\n        return this.type === \"string\";\n    }\n    /**\n     *  Returns the tuple name, if this is a tuple. Throws otherwise.\n     */ get tupleName() {\n        if (this.type !== \"tuple\") {\n            throw TypeError(\"not a tuple\");\n        }\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _options);\n    }\n    // Returns the length of this type as an array\n    // - `null` indicates the length is unforced, it could be dynamic\n    // - `-1` indicates the length is dynamic\n    // - any other value indicates it is a static array and is its length\n    /**\n     *  Returns the length of the array type or ``-1`` if it is dynamic.\n     *\n     *  Throws if the type is not an array.\n     */ get arrayLength() {\n        if (this.type !== \"array\") {\n            throw TypeError(\"not an array\");\n        }\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _options) === true) {\n            return -1;\n        }\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _options) === false) {\n            return this.value.length;\n        }\n        return null;\n    }\n    /**\n     *  Returns a new **Typed** of %%type%% with the %%value%%.\n     */ static from(type, value) {\n        return new Typed(_gaurd, type, value);\n    }\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */ static uint8(v) {\n        return n(v, 8);\n    }\n    /**\n     *  Return a new ``uint16`` type for %%v%%.\n     */ static uint16(v) {\n        return n(v, 16);\n    }\n    /**\n     *  Return a new ``uint24`` type for %%v%%.\n     */ static uint24(v) {\n        return n(v, 24);\n    }\n    /**\n     *  Return a new ``uint32`` type for %%v%%.\n     */ static uint32(v) {\n        return n(v, 32);\n    }\n    /**\n     *  Return a new ``uint40`` type for %%v%%.\n     */ static uint40(v) {\n        return n(v, 40);\n    }\n    /**\n     *  Return a new ``uint48`` type for %%v%%.\n     */ static uint48(v) {\n        return n(v, 48);\n    }\n    /**\n     *  Return a new ``uint56`` type for %%v%%.\n     */ static uint56(v) {\n        return n(v, 56);\n    }\n    /**\n     *  Return a new ``uint64`` type for %%v%%.\n     */ static uint64(v) {\n        return n(v, 64);\n    }\n    /**\n     *  Return a new ``uint72`` type for %%v%%.\n     */ static uint72(v) {\n        return n(v, 72);\n    }\n    /**\n     *  Return a new ``uint80`` type for %%v%%.\n     */ static uint80(v) {\n        return n(v, 80);\n    }\n    /**\n     *  Return a new ``uint88`` type for %%v%%.\n     */ static uint88(v) {\n        return n(v, 88);\n    }\n    /**\n     *  Return a new ``uint96`` type for %%v%%.\n     */ static uint96(v) {\n        return n(v, 96);\n    }\n    /**\n     *  Return a new ``uint104`` type for %%v%%.\n     */ static uint104(v) {\n        return n(v, 104);\n    }\n    /**\n     *  Return a new ``uint112`` type for %%v%%.\n     */ static uint112(v) {\n        return n(v, 112);\n    }\n    /**\n     *  Return a new ``uint120`` type for %%v%%.\n     */ static uint120(v) {\n        return n(v, 120);\n    }\n    /**\n     *  Return a new ``uint128`` type for %%v%%.\n     */ static uint128(v) {\n        return n(v, 128);\n    }\n    /**\n     *  Return a new ``uint136`` type for %%v%%.\n     */ static uint136(v) {\n        return n(v, 136);\n    }\n    /**\n     *  Return a new ``uint144`` type for %%v%%.\n     */ static uint144(v) {\n        return n(v, 144);\n    }\n    /**\n     *  Return a new ``uint152`` type for %%v%%.\n     */ static uint152(v) {\n        return n(v, 152);\n    }\n    /**\n     *  Return a new ``uint160`` type for %%v%%.\n     */ static uint160(v) {\n        return n(v, 160);\n    }\n    /**\n     *  Return a new ``uint168`` type for %%v%%.\n     */ static uint168(v) {\n        return n(v, 168);\n    }\n    /**\n     *  Return a new ``uint176`` type for %%v%%.\n     */ static uint176(v) {\n        return n(v, 176);\n    }\n    /**\n     *  Return a new ``uint184`` type for %%v%%.\n     */ static uint184(v) {\n        return n(v, 184);\n    }\n    /**\n     *  Return a new ``uint192`` type for %%v%%.\n     */ static uint192(v) {\n        return n(v, 192);\n    }\n    /**\n     *  Return a new ``uint200`` type for %%v%%.\n     */ static uint200(v) {\n        return n(v, 200);\n    }\n    /**\n     *  Return a new ``uint208`` type for %%v%%.\n     */ static uint208(v) {\n        return n(v, 208);\n    }\n    /**\n     *  Return a new ``uint216`` type for %%v%%.\n     */ static uint216(v) {\n        return n(v, 216);\n    }\n    /**\n     *  Return a new ``uint224`` type for %%v%%.\n     */ static uint224(v) {\n        return n(v, 224);\n    }\n    /**\n     *  Return a new ``uint232`` type for %%v%%.\n     */ static uint232(v) {\n        return n(v, 232);\n    }\n    /**\n     *  Return a new ``uint240`` type for %%v%%.\n     */ static uint240(v) {\n        return n(v, 240);\n    }\n    /**\n     *  Return a new ``uint248`` type for %%v%%.\n     */ static uint248(v) {\n        return n(v, 248);\n    }\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */ static uint256(v) {\n        return n(v, 256);\n    }\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */ static uint(v) {\n        return n(v, 256);\n    }\n    /**\n     *  Return a new ``int8`` type for %%v%%.\n     */ static int8(v) {\n        return n(v, -8);\n    }\n    /**\n     *  Return a new ``int16`` type for %%v%%.\n     */ static int16(v) {\n        return n(v, -16);\n    }\n    /**\n     *  Return a new ``int24`` type for %%v%%.\n     */ static int24(v) {\n        return n(v, -24);\n    }\n    /**\n     *  Return a new ``int32`` type for %%v%%.\n     */ static int32(v) {\n        return n(v, -32);\n    }\n    /**\n     *  Return a new ``int40`` type for %%v%%.\n     */ static int40(v) {\n        return n(v, -40);\n    }\n    /**\n     *  Return a new ``int48`` type for %%v%%.\n     */ static int48(v) {\n        return n(v, -48);\n    }\n    /**\n     *  Return a new ``int56`` type for %%v%%.\n     */ static int56(v) {\n        return n(v, -56);\n    }\n    /**\n     *  Return a new ``int64`` type for %%v%%.\n     */ static int64(v) {\n        return n(v, -64);\n    }\n    /**\n     *  Return a new ``int72`` type for %%v%%.\n     */ static int72(v) {\n        return n(v, -72);\n    }\n    /**\n     *  Return a new ``int80`` type for %%v%%.\n     */ static int80(v) {\n        return n(v, -80);\n    }\n    /**\n     *  Return a new ``int88`` type for %%v%%.\n     */ static int88(v) {\n        return n(v, -88);\n    }\n    /**\n     *  Return a new ``int96`` type for %%v%%.\n     */ static int96(v) {\n        return n(v, -96);\n    }\n    /**\n     *  Return a new ``int104`` type for %%v%%.\n     */ static int104(v) {\n        return n(v, -104);\n    }\n    /**\n     *  Return a new ``int112`` type for %%v%%.\n     */ static int112(v) {\n        return n(v, -112);\n    }\n    /**\n     *  Return a new ``int120`` type for %%v%%.\n     */ static int120(v) {\n        return n(v, -120);\n    }\n    /**\n     *  Return a new ``int128`` type for %%v%%.\n     */ static int128(v) {\n        return n(v, -128);\n    }\n    /**\n     *  Return a new ``int136`` type for %%v%%.\n     */ static int136(v) {\n        return n(v, -136);\n    }\n    /**\n     *  Return a new ``int144`` type for %%v%%.\n     */ static int144(v) {\n        return n(v, -144);\n    }\n    /**\n     *  Return a new ``int52`` type for %%v%%.\n     */ static int152(v) {\n        return n(v, -152);\n    }\n    /**\n     *  Return a new ``int160`` type for %%v%%.\n     */ static int160(v) {\n        return n(v, -160);\n    }\n    /**\n     *  Return a new ``int168`` type for %%v%%.\n     */ static int168(v) {\n        return n(v, -168);\n    }\n    /**\n     *  Return a new ``int176`` type for %%v%%.\n     */ static int176(v) {\n        return n(v, -176);\n    }\n    /**\n     *  Return a new ``int184`` type for %%v%%.\n     */ static int184(v) {\n        return n(v, -184);\n    }\n    /**\n     *  Return a new ``int92`` type for %%v%%.\n     */ static int192(v) {\n        return n(v, -192);\n    }\n    /**\n     *  Return a new ``int200`` type for %%v%%.\n     */ static int200(v) {\n        return n(v, -200);\n    }\n    /**\n     *  Return a new ``int208`` type for %%v%%.\n     */ static int208(v) {\n        return n(v, -208);\n    }\n    /**\n     *  Return a new ``int216`` type for %%v%%.\n     */ static int216(v) {\n        return n(v, -216);\n    }\n    /**\n     *  Return a new ``int224`` type for %%v%%.\n     */ static int224(v) {\n        return n(v, -224);\n    }\n    /**\n     *  Return a new ``int232`` type for %%v%%.\n     */ static int232(v) {\n        return n(v, -232);\n    }\n    /**\n     *  Return a new ``int240`` type for %%v%%.\n     */ static int240(v) {\n        return n(v, -240);\n    }\n    /**\n     *  Return a new ``int248`` type for %%v%%.\n     */ static int248(v) {\n        return n(v, -248);\n    }\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */ static int256(v) {\n        return n(v, -256);\n    }\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */ static int(v) {\n        return n(v, -256);\n    }\n    /**\n     *  Return a new ``bytes1`` type for %%v%%.\n     */ static bytes1(v) {\n        return b(v, 1);\n    }\n    /**\n     *  Return a new ``bytes2`` type for %%v%%.\n     */ static bytes2(v) {\n        return b(v, 2);\n    }\n    /**\n     *  Return a new ``bytes3`` type for %%v%%.\n     */ static bytes3(v) {\n        return b(v, 3);\n    }\n    /**\n     *  Return a new ``bytes4`` type for %%v%%.\n     */ static bytes4(v) {\n        return b(v, 4);\n    }\n    /**\n     *  Return a new ``bytes5`` type for %%v%%.\n     */ static bytes5(v) {\n        return b(v, 5);\n    }\n    /**\n     *  Return a new ``bytes6`` type for %%v%%.\n     */ static bytes6(v) {\n        return b(v, 6);\n    }\n    /**\n     *  Return a new ``bytes7`` type for %%v%%.\n     */ static bytes7(v) {\n        return b(v, 7);\n    }\n    /**\n     *  Return a new ``bytes8`` type for %%v%%.\n     */ static bytes8(v) {\n        return b(v, 8);\n    }\n    /**\n     *  Return a new ``bytes9`` type for %%v%%.\n     */ static bytes9(v) {\n        return b(v, 9);\n    }\n    /**\n     *  Return a new ``bytes10`` type for %%v%%.\n     */ static bytes10(v) {\n        return b(v, 10);\n    }\n    /**\n     *  Return a new ``bytes11`` type for %%v%%.\n     */ static bytes11(v) {\n        return b(v, 11);\n    }\n    /**\n     *  Return a new ``bytes12`` type for %%v%%.\n     */ static bytes12(v) {\n        return b(v, 12);\n    }\n    /**\n     *  Return a new ``bytes13`` type for %%v%%.\n     */ static bytes13(v) {\n        return b(v, 13);\n    }\n    /**\n     *  Return a new ``bytes14`` type for %%v%%.\n     */ static bytes14(v) {\n        return b(v, 14);\n    }\n    /**\n     *  Return a new ``bytes15`` type for %%v%%.\n     */ static bytes15(v) {\n        return b(v, 15);\n    }\n    /**\n     *  Return a new ``bytes16`` type for %%v%%.\n     */ static bytes16(v) {\n        return b(v, 16);\n    }\n    /**\n     *  Return a new ``bytes17`` type for %%v%%.\n     */ static bytes17(v) {\n        return b(v, 17);\n    }\n    /**\n     *  Return a new ``bytes18`` type for %%v%%.\n     */ static bytes18(v) {\n        return b(v, 18);\n    }\n    /**\n     *  Return a new ``bytes19`` type for %%v%%.\n     */ static bytes19(v) {\n        return b(v, 19);\n    }\n    /**\n     *  Return a new ``bytes20`` type for %%v%%.\n     */ static bytes20(v) {\n        return b(v, 20);\n    }\n    /**\n     *  Return a new ``bytes21`` type for %%v%%.\n     */ static bytes21(v) {\n        return b(v, 21);\n    }\n    /**\n     *  Return a new ``bytes22`` type for %%v%%.\n     */ static bytes22(v) {\n        return b(v, 22);\n    }\n    /**\n     *  Return a new ``bytes23`` type for %%v%%.\n     */ static bytes23(v) {\n        return b(v, 23);\n    }\n    /**\n     *  Return a new ``bytes24`` type for %%v%%.\n     */ static bytes24(v) {\n        return b(v, 24);\n    }\n    /**\n     *  Return a new ``bytes25`` type for %%v%%.\n     */ static bytes25(v) {\n        return b(v, 25);\n    }\n    /**\n     *  Return a new ``bytes26`` type for %%v%%.\n     */ static bytes26(v) {\n        return b(v, 26);\n    }\n    /**\n     *  Return a new ``bytes27`` type for %%v%%.\n     */ static bytes27(v) {\n        return b(v, 27);\n    }\n    /**\n     *  Return a new ``bytes28`` type for %%v%%.\n     */ static bytes28(v) {\n        return b(v, 28);\n    }\n    /**\n     *  Return a new ``bytes29`` type for %%v%%.\n     */ static bytes29(v) {\n        return b(v, 29);\n    }\n    /**\n     *  Return a new ``bytes30`` type for %%v%%.\n     */ static bytes30(v) {\n        return b(v, 30);\n    }\n    /**\n     *  Return a new ``bytes31`` type for %%v%%.\n     */ static bytes31(v) {\n        return b(v, 31);\n    }\n    /**\n     *  Return a new ``bytes32`` type for %%v%%.\n     */ static bytes32(v) {\n        return b(v, 32);\n    }\n    /**\n     *  Return a new ``address`` type for %%v%%.\n     */ static address(v) {\n        return new Typed(_gaurd, \"address\", v);\n    }\n    /**\n     *  Return a new ``bool`` type for %%v%%.\n     */ static bool(v) {\n        return new Typed(_gaurd, \"bool\", !!v);\n    }\n    /**\n     *  Return a new ``bytes`` type for %%v%%.\n     */ static bytes(v) {\n        return new Typed(_gaurd, \"bytes\", v);\n    }\n    /**\n     *  Return a new ``string`` type for %%v%%.\n     */ static string(v) {\n        return new Typed(_gaurd, \"string\", v);\n    }\n    /**\n     *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.\n     */ static array(v, dynamic) {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"array\", v, dynamic);\n    }\n    /**\n     *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.\n     */ static tuple(v, name) {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"tuple\", v, name);\n    }\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */ static overrides(v) {\n        return new Typed(_gaurd, \"overrides\", Object.assign({}, v));\n    }\n    /**\n     *  Returns true only if %%value%% is a [[Typed]] instance.\n     */ static isTyped(value) {\n        return value && typeof value === \"object\" && \"_typedSymbol\" in value && value._typedSymbol === _typedSymbol;\n    }\n    /**\n     *  If the value is a [[Typed]] instance, validates the underlying value\n     *  and returns it, otherwise returns value directly.\n     *\n     *  This is useful for functions that with to accept either a [[Typed]]\n     *  object or values.\n     */ static dereference(value, type) {\n        if (Typed.isTyped(value)) {\n            if (value.type !== type) {\n                throw new Error(\"invalid type: expecetd \".concat(type, \", got \").concat(value.type));\n            }\n            return value.value;\n        }\n        return value;\n    }\n    /**\n     *  @_ignore:\n     */ constructor(gaurd, type, value, options){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_1__._)(this, _options, {\n            writable: true,\n            value: void 0\n        });\n        if (options == null) {\n            options = null;\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertPrivate)(_gaurd, gaurd, \"Typed\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.defineProperties)(this, {\n            _typedSymbol,\n            type,\n            value\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _options, options);\n        // Check the value is valid\n        this.format();\n    }\n} //# sourceMappingURL=typed.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/abi/typed.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js":
/*!*********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/address/address.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAddress: function() { return /* binding */ getAddress; },\n/* harmony export */   getIcapAddress: function() { return /* binding */ getIcapAddress; }\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n\n\nconst BN_0 = BigInt(0);\nconst BN_36 = BigInt(36);\nfunction getChecksumAddress(address) {\n    //    if (!isHexString(address, 20)) {\n    //        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    //    }\n    address = address.toLowerCase();\n    const chars = address.substring(2).split(\"\");\n    const expanded = new Uint8Array(40);\n    for(let i = 0; i < 40; i++){\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n    const hashed = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(expanded));\n    for(let i = 0; i < 40; i += 2){\n        if (hashed[i >> 1] >> 4 >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n    return \"0x\" + chars.join(\"\");\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nconst ibanLookup = {};\nfor(let i = 0; i < 10; i++){\n    ibanLookup[String(i)] = String(i);\n}\nfor(let i = 0; i < 26; i++){\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\n// i.e. Math.floor(Math.log10(Number.MAX_SAFE_INTEGER));\nconst safeDigits = 15;\nfunction ibanChecksum(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n    let expanded = address.split(\"\").map((c)=>{\n        return ibanLookup[c];\n    }).join(\"\");\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while(expanded.length >= safeDigits){\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    let checksum = String(98 - parseInt(expanded, 10) % 97);\n    while(checksum.length < 2){\n        checksum = \"0\" + checksum;\n    }\n    return checksum;\n}\n;\nconst Base36 = function() {\n    ;\n    const result = {};\n    for(let i = 0; i < 36; i++){\n        const key = \"0123456789abcdefghijklmnopqrstuvwxyz\"[i];\n        result[key] = BigInt(i);\n    }\n    return result;\n}();\nfunction fromBase36(value) {\n    value = value.toLowerCase();\n    let result = BN_0;\n    for(let i = 0; i < value.length; i++){\n        result = result * BN_36 + Base36[value[i]];\n    }\n    return result;\n}\n/**\n *  Returns a normalized and checksumed address for %%address%%.\n *  This accepts non-checksum addresses, checksum addresses and\n *  [[getIcapAddress]] formats.\n *\n *  The checksum in Ethereum uses the capitalization (upper-case\n *  vs lower-case) of the characters within an address to encode\n *  its checksum, which offers, on average, a checksum of 15-bits.\n *\n *  If %%address%% contains both upper-case and lower-case, it is\n *  assumed to already be a checksum address and its checksum is\n *  validated, and if the address fails its expected checksum an\n *  error is thrown.\n *\n *  If you wish the checksum of %%address%% to be ignore, it should\n *  be converted to lower-case (i.e. ``.toLowercase()``) before\n *  being passed in. This should be a very rare situation though,\n *  that you wish to bypass the safegaurds in place to protect\n *  against an address that has been incorrectly copied from another\n *  source.\n *\n *  @example:\n *    // Adds the checksum (via upper-casing specific letters)\n *    getAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\")\n *    //_result:\n *\n *    // Converts ICAP address and adds checksum\n *    getAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\n *    //_result:\n *\n *    // Throws an error if an address contains mixed case,\n *    // but the checksum fails\n *    getAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_error:\n */ function getAddress(address) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(typeof address === \"string\", \"invalid address\", \"address\", address);\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n        // Missing the 0x prefix\n        if (!address.startsWith(\"0x\")) {\n            address = \"0x\" + address;\n        }\n        const result = getChecksumAddress(address);\n        // It is a checksummed address with a bad checksum\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, \"bad address checksum\", \"address\", address);\n        return result;\n    }\n    // Maybe ICAP? (we only support direct mode)\n    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(address.substring(2, 4) === ibanChecksum(address), \"bad icap checksum\", \"address\", address);\n        let result = fromBase36(address.substring(4)).toString(16);\n        while(result.length < 40){\n            result = \"0\" + result;\n        }\n        return getChecksumAddress(\"0x\" + result);\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(false, \"invalid address\", \"address\", address);\n}\n/**\n *  The [ICAP Address format](link-icap) format is an early checksum\n *  format which attempts to be compatible with the banking\n *  industry [IBAN format](link-wiki-iban) for bank accounts.\n *\n *  It is no longer common or a recommended format.\n *\n *  @example:\n *    getIcapAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\");\n *    //_result:\n *\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\n *    //_result:\n *\n *    // Throws an error if the ICAP checksum is wrong\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK37\");\n *    //_error:\n */ function getIcapAddress(address) {\n    //let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n    let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();\n    while(base36.length < 30){\n        base36 = \"0\" + base36;\n    }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n} //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/address/checks.js":
/*!********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/address/checks.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAddress: function() { return /* binding */ isAddress; },\n/* harmony export */   isAddressable: function() { return /* binding */ isAddressable; },\n/* harmony export */   resolveAddress: function() { return /* binding */ resolveAddress; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n\n\n/**\n *  Returns true if %%value%% is an object which implements the\n *  [[Addressable]] interface.\n *\n *  @example:\n *    // Wallets and AbstractSigner sub-classes\n *    isAddressable(Wallet.createRandom())\n *    //_result:\n *\n *    // Contracts\n *    contract = new Contract(\"dai.tokens.ethers.eth\", [ ], provider)\n *    isAddressable(contract)\n *    //_result:\n */ function isAddressable(value) {\n    return value && typeof value.getAddress === \"function\";\n}\n/**\n *  Returns true if %%value%% is a valid address.\n *\n *  @example:\n *    // Valid address\n *    isAddress(\"0x8ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_result:\n *\n *    // Valid ICAP address\n *    isAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\")\n *    //_result:\n *\n *    // Invalid checksum\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBa72\")\n *    //_result:\n *\n *    // Invalid ICAP checksum\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_result:\n *\n *    // Not an address (an ENS name requires a provided and an\n *    // asynchronous API to access)\n *    isAddress(\"ricmoo.eth\")\n *    //_result:\n */ function isAddress(value) {\n    try {\n        (0,_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(value);\n        return true;\n    } catch (error) {}\n    return false;\n}\nasync function checkAddress(target, promise) {\n    const result = await promise;\n    if (result == null || result === \"0x0000000000000000000000000000000000000000\") {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(typeof target !== \"string\", \"unconfigured name\", \"UNCONFIGURED_NAME\", {\n            value: target\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(false, \"invalid AddressLike value; did not resolve to a value address\", \"target\", target);\n    }\n    return (0,_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(result);\n}\n/**\n *  Resolves to an address for the %%target%%, which may be any\n *  supported address type, an [[Addressable]] or a Promise which\n *  resolves to an address.\n *\n *  If an ENS name is provided, but that name has not been correctly\n *  configured a [[UnconfiguredNameError]] is thrown.\n *\n *  @example:\n *    addr = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\n *\n *    // Addresses are return synchronously\n *    resolveAddress(addr, provider)\n *    //_result:\n *\n *    // Address promises are resolved asynchronously\n *    resolveAddress(Promise.resolve(addr))\n *    //_result:\n *\n *    // ENS names are resolved asynchronously\n *    resolveAddress(\"dai.tokens.ethers.eth\", provider)\n *    //_result:\n *\n *    // Addressable objects are resolved asynchronously\n *    contract = new Contract(addr, [ ])\n *    resolveAddress(contract, provider)\n *    //_result:\n *\n *    // Unconfigured ENS names reject\n *    resolveAddress(\"nothing-here.ricmoo.eth\", provider)\n *    //_error:\n *\n *    // ENS names require a NameResolver object passed in\n *    // (notice the provider was omitted)\n *    resolveAddress(\"nothing-here.ricmoo.eth\")\n *    //_error:\n */ function resolveAddress(target, resolver) {\n    if (typeof target === \"string\") {\n        if (target.match(/^0x[0-9a-f]{40}$/i)) {\n            return (0,_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(target);\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(resolver != null, \"ENS resolution requires a provider\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"resolveName\"\n        });\n        return checkAddress(target, resolver.resolveName(target));\n    } else if (isAddressable(target)) {\n        return checkAddress(target, target.getAddress());\n    } else if (target && typeof target.then === \"function\") {\n        return checkAddress(target, target);\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(false, \"unsupported addressable value\", \"target\", target);\n} //# sourceMappingURL=checks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWRkcmVzcy9jaGVja3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMkQ7QUFDakI7QUFDMUM7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUNNLFNBQVNHLGNBQWNDLEtBQUs7SUFDL0IsT0FBUUEsU0FBUyxPQUFRQSxNQUFNRixVQUFVLEtBQU07QUFDbkQ7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBd0JDLEdBQ00sU0FBU0csVUFBVUQsS0FBSztJQUMzQixJQUFJO1FBQ0FGLHVEQUFVQSxDQUFDRTtRQUNYLE9BQU87SUFDWCxFQUNBLE9BQU9FLE9BQU8sQ0FBRTtJQUNoQixPQUFPO0FBQ1g7QUFDQSxlQUFlQyxhQUFhQyxNQUFNLEVBQUVDLE9BQU87SUFDdkMsTUFBTUMsU0FBUyxNQUFNRDtJQUNyQixJQUFJQyxVQUFVLFFBQVFBLFdBQVcsOENBQThDO1FBQzNFVix1REFBTUEsQ0FBQyxPQUFRUSxXQUFZLFVBQVUscUJBQXFCLHFCQUFxQjtZQUFFSixPQUFPSTtRQUFPO1FBQy9GUCwrREFBY0EsQ0FBQyxPQUFPLGlFQUFpRSxVQUFVTztJQUNyRztJQUNBLE9BQU9OLHVEQUFVQSxDQUFDUTtBQUN0QjtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FvQ0MsR0FDTSxTQUFTQyxlQUFlSCxNQUFNLEVBQUVJLFFBQVE7SUFDM0MsSUFBSSxPQUFRSixXQUFZLFVBQVU7UUFDOUIsSUFBSUEsT0FBT0ssS0FBSyxDQUFDLHNCQUFzQjtZQUNuQyxPQUFPWCx1REFBVUEsQ0FBQ007UUFDdEI7UUFDQVIsdURBQU1BLENBQUNZLFlBQVksTUFBTSxzQ0FBc0MseUJBQXlCO1lBQUVFLFdBQVc7UUFBYztRQUNuSCxPQUFPUCxhQUFhQyxRQUFRSSxTQUFTRyxXQUFXLENBQUNQO0lBQ3JELE9BQ0ssSUFBSUwsY0FBY0ssU0FBUztRQUM1QixPQUFPRCxhQUFhQyxRQUFRQSxPQUFPTixVQUFVO0lBQ2pELE9BQ0ssSUFBSU0sVUFBVSxPQUFRQSxPQUFPUSxJQUFJLEtBQU0sWUFBWTtRQUNwRCxPQUFPVCxhQUFhQyxRQUFRQTtJQUNoQztJQUNBUCwrREFBY0EsQ0FBQyxPQUFPLGlDQUFpQyxVQUFVTztBQUNyRSxFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2FkZHJlc3MvY2hlY2tzLmpzP2YyMDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0LCBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0QWRkcmVzcyB9IGZyb20gXCIuL2FkZHJlc3MuanNcIjtcbi8qKlxuICogIFJldHVybnMgdHJ1ZSBpZiAlJXZhbHVlJSUgaXMgYW4gb2JqZWN0IHdoaWNoIGltcGxlbWVudHMgdGhlXG4gKiAgW1tBZGRyZXNzYWJsZV1dIGludGVyZmFjZS5cbiAqXG4gKiAgQGV4YW1wbGU6XG4gKiAgICAvLyBXYWxsZXRzIGFuZCBBYnN0cmFjdFNpZ25lciBzdWItY2xhc3Nlc1xuICogICAgaXNBZGRyZXNzYWJsZShXYWxsZXQuY3JlYXRlUmFuZG9tKCkpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgLy8gQ29udHJhY3RzXG4gKiAgICBjb250cmFjdCA9IG5ldyBDb250cmFjdChcImRhaS50b2tlbnMuZXRoZXJzLmV0aFwiLCBbIF0sIHByb3ZpZGVyKVxuICogICAgaXNBZGRyZXNzYWJsZShjb250cmFjdClcbiAqICAgIC8vX3Jlc3VsdDpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQWRkcmVzc2FibGUodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiAodmFsdWUuZ2V0QWRkcmVzcykgPT09IFwiZnVuY3Rpb25cIik7XG59XG4vKipcbiAqICBSZXR1cm5zIHRydWUgaWYgJSV2YWx1ZSUlIGlzIGEgdmFsaWQgYWRkcmVzcy5cbiAqXG4gKiAgQGV4YW1wbGU6XG4gKiAgICAvLyBWYWxpZCBhZGRyZXNzXG4gKiAgICBpc0FkZHJlc3MoXCIweDhiYTFmMTA5NTUxYkQ0MzI4MDMwMTI2NDVBYzEzNmRkZDY0REJBNzJcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBWYWxpZCBJQ0FQIGFkZHJlc3NcbiAqICAgIGlzQWRkcmVzcyhcIlhFNjVHQjZMRE5YWU9GVFgwTlNWM0ZVV0tPV0lYQU1KSzM2XCIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgLy8gSW52YWxpZCBjaGVja3N1bVxuICogICAgaXNBZGRyZXNzKFwiMHg4QmExZjEwOTU1MWJENDMyODAzMDEyNjQ1QWMxMzZkZGQ2NERCYTcyXCIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgLy8gSW52YWxpZCBJQ0FQIGNoZWNrc3VtXG4gKiAgICBpc0FkZHJlc3MoXCIweDhCYTFmMTA5NTUxYkQ0MzI4MDMwMTI2NDVBYzEzNmRkZDY0REJBNzJcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBOb3QgYW4gYWRkcmVzcyAoYW4gRU5TIG5hbWUgcmVxdWlyZXMgYSBwcm92aWRlZCBhbmQgYW5cbiAqICAgIC8vIGFzeW5jaHJvbm91cyBBUEkgdG8gYWNjZXNzKVxuICogICAgaXNBZGRyZXNzKFwicmljbW9vLmV0aFwiKVxuICogICAgLy9fcmVzdWx0OlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBZGRyZXNzKHZhbHVlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgZ2V0QWRkcmVzcyh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrQWRkcmVzcyh0YXJnZXQsIHByb21pc2UpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9taXNlO1xuICAgIGlmIChyZXN1bHQgPT0gbnVsbCB8fCByZXN1bHQgPT09IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIpIHtcbiAgICAgICAgYXNzZXJ0KHR5cGVvZiAodGFyZ2V0KSAhPT0gXCJzdHJpbmdcIiwgXCJ1bmNvbmZpZ3VyZWQgbmFtZVwiLCBcIlVOQ09ORklHVVJFRF9OQU1FXCIsIHsgdmFsdWU6IHRhcmdldCB9KTtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwiaW52YWxpZCBBZGRyZXNzTGlrZSB2YWx1ZTsgZGlkIG5vdCByZXNvbHZlIHRvIGEgdmFsdWUgYWRkcmVzc1wiLCBcInRhcmdldFwiLCB0YXJnZXQpO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0QWRkcmVzcyhyZXN1bHQpO1xufVxuLyoqXG4gKiAgUmVzb2x2ZXMgdG8gYW4gYWRkcmVzcyBmb3IgdGhlICUldGFyZ2V0JSUsIHdoaWNoIG1heSBiZSBhbnlcbiAqICBzdXBwb3J0ZWQgYWRkcmVzcyB0eXBlLCBhbiBbW0FkZHJlc3NhYmxlXV0gb3IgYSBQcm9taXNlIHdoaWNoXG4gKiAgcmVzb2x2ZXMgdG8gYW4gYWRkcmVzcy5cbiAqXG4gKiAgSWYgYW4gRU5TIG5hbWUgaXMgcHJvdmlkZWQsIGJ1dCB0aGF0IG5hbWUgaGFzIG5vdCBiZWVuIGNvcnJlY3RseVxuICogIGNvbmZpZ3VyZWQgYSBbW1VuY29uZmlndXJlZE5hbWVFcnJvcl1dIGlzIHRocm93bi5cbiAqXG4gKiAgQGV4YW1wbGU6XG4gKiAgICBhZGRyID0gXCIweDZCMTc1NDc0RTg5MDk0QzQ0RGE5OGI5NTRFZWRlQUM0OTUyNzFkMEZcIlxuICpcbiAqICAgIC8vIEFkZHJlc3NlcyBhcmUgcmV0dXJuIHN5bmNocm9ub3VzbHlcbiAqICAgIHJlc29sdmVBZGRyZXNzKGFkZHIsIHByb3ZpZGVyKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIC8vIEFkZHJlc3MgcHJvbWlzZXMgYXJlIHJlc29sdmVkIGFzeW5jaHJvbm91c2x5XG4gKiAgICByZXNvbHZlQWRkcmVzcyhQcm9taXNlLnJlc29sdmUoYWRkcikpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgLy8gRU5TIG5hbWVzIGFyZSByZXNvbHZlZCBhc3luY2hyb25vdXNseVxuICogICAgcmVzb2x2ZUFkZHJlc3MoXCJkYWkudG9rZW5zLmV0aGVycy5ldGhcIiwgcHJvdmlkZXIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgLy8gQWRkcmVzc2FibGUgb2JqZWN0cyBhcmUgcmVzb2x2ZWQgYXN5bmNocm9ub3VzbHlcbiAqICAgIGNvbnRyYWN0ID0gbmV3IENvbnRyYWN0KGFkZHIsIFsgXSlcbiAqICAgIHJlc29sdmVBZGRyZXNzKGNvbnRyYWN0LCBwcm92aWRlcilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBVbmNvbmZpZ3VyZWQgRU5TIG5hbWVzIHJlamVjdFxuICogICAgcmVzb2x2ZUFkZHJlc3MoXCJub3RoaW5nLWhlcmUucmljbW9vLmV0aFwiLCBwcm92aWRlcilcbiAqICAgIC8vX2Vycm9yOlxuICpcbiAqICAgIC8vIEVOUyBuYW1lcyByZXF1aXJlIGEgTmFtZVJlc29sdmVyIG9iamVjdCBwYXNzZWQgaW5cbiAqICAgIC8vIChub3RpY2UgdGhlIHByb3ZpZGVyIHdhcyBvbWl0dGVkKVxuICogICAgcmVzb2x2ZUFkZHJlc3MoXCJub3RoaW5nLWhlcmUucmljbW9vLmV0aFwiKVxuICogICAgLy9fZXJyb3I6XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQWRkcmVzcyh0YXJnZXQsIHJlc29sdmVyKSB7XG4gICAgaWYgKHR5cGVvZiAodGFyZ2V0KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAodGFyZ2V0Lm1hdGNoKC9eMHhbMC05YS1mXXs0MH0kL2kpKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QWRkcmVzcyh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydChyZXNvbHZlciAhPSBudWxsLCBcIkVOUyByZXNvbHV0aW9uIHJlcXVpcmVzIGEgcHJvdmlkZXJcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IFwicmVzb2x2ZU5hbWVcIiB9KTtcbiAgICAgICAgcmV0dXJuIGNoZWNrQWRkcmVzcyh0YXJnZXQsIHJlc29sdmVyLnJlc29sdmVOYW1lKHRhcmdldCkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0FkZHJlc3NhYmxlKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrQWRkcmVzcyh0YXJnZXQsIHRhcmdldC5nZXRBZGRyZXNzKCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0YXJnZXQgJiYgdHlwZW9mICh0YXJnZXQudGhlbikgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gY2hlY2tBZGRyZXNzKHRhcmdldCwgdGFyZ2V0KTtcbiAgICB9XG4gICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgYWRkcmVzc2FibGUgdmFsdWVcIiwgXCJ0YXJnZXRcIiwgdGFyZ2V0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoZWNrcy5qcy5tYXAiXSwibmFtZXMiOlsiYXNzZXJ0IiwiYXNzZXJ0QXJndW1lbnQiLCJnZXRBZGRyZXNzIiwiaXNBZGRyZXNzYWJsZSIsInZhbHVlIiwiaXNBZGRyZXNzIiwiZXJyb3IiLCJjaGVja0FkZHJlc3MiLCJ0YXJnZXQiLCJwcm9taXNlIiwicmVzdWx0IiwicmVzb2x2ZUFkZHJlc3MiLCJyZXNvbHZlciIsIm1hdGNoIiwib3BlcmF0aW9uIiwicmVzb2x2ZU5hbWUiLCJ0aGVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/address/checks.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/address/contract-address.js":
/*!******************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/address/contract-address.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCreate2Address: function() { return /* binding */ getCreate2Address; },\n/* harmony export */   getCreateAddress: function() { return /* binding */ getCreateAddress; }\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/rlp-encode.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n\n\n\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n/**\n *  Returns the address that would result from a ``CREATE`` for %%tx%%.\n *\n *  This can be used to compute the address a contract will be\n *  deployed to by an EOA when sending a deployment transaction (i.e.\n *  when the ``to`` address is ``null``).\n *\n *  This can also be used to compute the address a contract will be\n *  deployed to by a contract, by using the contract's address as the\n *  ``to`` and the contract's nonce.\n *\n *  @example\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\";\n *    nonce = 5;\n *\n *    getCreateAddress({ from, nonce });\n *    //_result:\n */ function getCreateAddress(tx) {\n    const from = (0,_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(tx.from);\n    const nonce = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(tx.nonce, \"tx.nonce\");\n    let nonceHex = nonce.toString(16);\n    if (nonceHex === \"0\") {\n        nonceHex = \"0x\";\n    } else if (nonceHex.length % 2) {\n        nonceHex = \"0x0\" + nonceHex;\n    } else {\n        nonceHex = \"0x\" + nonceHex;\n    }\n    return (0,_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.dataSlice)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.encodeRlp)([\n        from,\n        nonceHex\n    ])), 12));\n}\n/**\n *  Returns the address that would result from a ``CREATE2`` operation\n *  with the given %%from%%, %%salt%% and %%initCodeHash%%.\n *\n *  To compute the %%initCodeHash%% from a contract's init code, use\n *  the [[keccak256]] function.\n *\n *  For a quick overview and example of ``CREATE2``, see [[link-ricmoo-wisps]].\n *\n *  @example\n *    // The address of the contract\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\"\n *\n *    // The salt\n *    salt = id(\"HelloWorld\")\n *\n *    // The hash of the initCode\n *    initCode = \"0x6394198df16000526103ff60206004601c335afa6040516060f3\";\n *    initCodeHash = keccak256(initCode)\n *\n *    getCreate2Address(from, salt, initCodeHash)\n *    //_result:\n */ function getCreate2Address(_from, _salt, _initCodeHash) {\n    const from = (0,_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(_from);\n    const salt = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(_salt, \"salt\");\n    const initCodeHash = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(_initCodeHash, \"initCodeHash\");\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assertArgument)(salt.length === 32, \"salt must be 32 bytes\", \"salt\", _salt);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assertArgument)(initCodeHash.length === 32, \"initCodeHash must be 32 bytes\", \"initCodeHash\", _initCodeHash);\n    return (0,_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.dataSlice)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.concat)([\n        \"0xff\",\n        from,\n        salt,\n        initCodeHash\n    ])), 12));\n} //# sourceMappingURL=contract-address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWRkcmVzcy9jb250cmFjdC1hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStDO0FBQ3VEO0FBQzVEO0FBQzFDLHNHQUFzRztBQUN0Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQkMsR0FDTSxTQUFTUSxpQkFBaUJDLEVBQUU7SUFDL0IsTUFBTUMsT0FBT0gsdURBQVVBLENBQUNFLEdBQUdDLElBQUk7SUFDL0IsTUFBTUMsUUFBUVIsMERBQVNBLENBQUNNLEdBQUdFLEtBQUssRUFBRTtJQUNsQyxJQUFJQyxXQUFXRCxNQUFNRSxRQUFRLENBQUM7SUFDOUIsSUFBSUQsYUFBYSxLQUFLO1FBQ2xCQSxXQUFXO0lBQ2YsT0FDSyxJQUFJQSxTQUFTRSxNQUFNLEdBQUcsR0FBRztRQUMxQkYsV0FBVyxRQUFRQTtJQUN2QixPQUNLO1FBQ0RBLFdBQVcsT0FBT0E7SUFDdEI7SUFDQSxPQUFPTCx1REFBVUEsQ0FBQ0wsMERBQVNBLENBQUNGLDJEQUFTQSxDQUFDSywwREFBU0EsQ0FBQztRQUFDSztRQUFNRTtLQUFTLElBQUk7QUFDeEU7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXNCQyxHQUNNLFNBQVNHLGtCQUFrQkMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLGFBQWE7SUFDekQsTUFBTVIsT0FBT0gsdURBQVVBLENBQUNTO0lBQ3hCLE1BQU1HLE9BQU9mLHlEQUFRQSxDQUFDYSxPQUFPO0lBQzdCLE1BQU1HLGVBQWVoQix5REFBUUEsQ0FBQ2MsZUFBZTtJQUM3Q1osK0RBQWNBLENBQUNhLEtBQUtMLE1BQU0sS0FBSyxJQUFJLHlCQUF5QixRQUFRRztJQUNwRVgsK0RBQWNBLENBQUNjLGFBQWFOLE1BQU0sS0FBSyxJQUFJLGlDQUFpQyxnQkFBZ0JJO0lBQzVGLE9BQU9YLHVEQUFVQSxDQUFDTCwwREFBU0EsQ0FBQ0YsMkRBQVNBLENBQUNDLHVEQUFNQSxDQUFDO1FBQUM7UUFBUVM7UUFBTVM7UUFBTUM7S0FBYSxJQUFJO0FBQ3ZGLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWRkcmVzcy9jb250cmFjdC1hZGRyZXNzLmpzPzUxNDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSBcIi4uL2NyeXB0by9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY29uY2F0LCBkYXRhU2xpY2UsIGdldEJpZ0ludCwgZ2V0Qnl0ZXMsIGVuY29kZVJscCwgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiLi9hZGRyZXNzLmpzXCI7XG4vLyBodHRwOi8vZXRoZXJldW0uc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzc2MC9ob3ctaXMtdGhlLWFkZHJlc3Mtb2YtYW4tZXRoZXJldW0tY29udHJhY3QtY29tcHV0ZWRcbi8qKlxuICogIFJldHVybnMgdGhlIGFkZHJlc3MgdGhhdCB3b3VsZCByZXN1bHQgZnJvbSBhIGBgQ1JFQVRFYGAgZm9yICUldHglJS5cbiAqXG4gKiAgVGhpcyBjYW4gYmUgdXNlZCB0byBjb21wdXRlIHRoZSBhZGRyZXNzIGEgY29udHJhY3Qgd2lsbCBiZVxuICogIGRlcGxveWVkIHRvIGJ5IGFuIEVPQSB3aGVuIHNlbmRpbmcgYSBkZXBsb3ltZW50IHRyYW5zYWN0aW9uIChpLmUuXG4gKiAgd2hlbiB0aGUgYGB0b2BgIGFkZHJlc3MgaXMgYGBudWxsYGApLlxuICpcbiAqICBUaGlzIGNhbiBhbHNvIGJlIHVzZWQgdG8gY29tcHV0ZSB0aGUgYWRkcmVzcyBhIGNvbnRyYWN0IHdpbGwgYmVcbiAqICBkZXBsb3llZCB0byBieSBhIGNvbnRyYWN0LCBieSB1c2luZyB0aGUgY29udHJhY3QncyBhZGRyZXNzIGFzIHRoZVxuICogIGBgdG9gYCBhbmQgdGhlIGNvbnRyYWN0J3Mgbm9uY2UuXG4gKlxuICogIEBleGFtcGxlXG4gKiAgICBmcm9tID0gXCIweDhiYTFmMTA5NTUxYkQ0MzI4MDMwMTI2NDVBYzEzNmRkZDY0REJBNzJcIjtcbiAqICAgIG5vbmNlID0gNTtcbiAqXG4gKiAgICBnZXRDcmVhdGVBZGRyZXNzKHsgZnJvbSwgbm9uY2UgfSk7XG4gKiAgICAvL19yZXN1bHQ6XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDcmVhdGVBZGRyZXNzKHR4KSB7XG4gICAgY29uc3QgZnJvbSA9IGdldEFkZHJlc3ModHguZnJvbSk7XG4gICAgY29uc3Qgbm9uY2UgPSBnZXRCaWdJbnQodHgubm9uY2UsIFwidHgubm9uY2VcIik7XG4gICAgbGV0IG5vbmNlSGV4ID0gbm9uY2UudG9TdHJpbmcoMTYpO1xuICAgIGlmIChub25jZUhleCA9PT0gXCIwXCIpIHtcbiAgICAgICAgbm9uY2VIZXggPSBcIjB4XCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vbmNlSGV4Lmxlbmd0aCAlIDIpIHtcbiAgICAgICAgbm9uY2VIZXggPSBcIjB4MFwiICsgbm9uY2VIZXg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBub25jZUhleCA9IFwiMHhcIiArIG5vbmNlSGV4O1xuICAgIH1cbiAgICByZXR1cm4gZ2V0QWRkcmVzcyhkYXRhU2xpY2Uoa2VjY2FrMjU2KGVuY29kZVJscChbZnJvbSwgbm9uY2VIZXhdKSksIDEyKSk7XG59XG4vKipcbiAqICBSZXR1cm5zIHRoZSBhZGRyZXNzIHRoYXQgd291bGQgcmVzdWx0IGZyb20gYSBgYENSRUFURTJgYCBvcGVyYXRpb25cbiAqICB3aXRoIHRoZSBnaXZlbiAlJWZyb20lJSwgJSVzYWx0JSUgYW5kICUlaW5pdENvZGVIYXNoJSUuXG4gKlxuICogIFRvIGNvbXB1dGUgdGhlICUlaW5pdENvZGVIYXNoJSUgZnJvbSBhIGNvbnRyYWN0J3MgaW5pdCBjb2RlLCB1c2VcbiAqICB0aGUgW1trZWNjYWsyNTZdXSBmdW5jdGlvbi5cbiAqXG4gKiAgRm9yIGEgcXVpY2sgb3ZlcnZpZXcgYW5kIGV4YW1wbGUgb2YgYGBDUkVBVEUyYGAsIHNlZSBbW2xpbmstcmljbW9vLXdpc3BzXV0uXG4gKlxuICogIEBleGFtcGxlXG4gKiAgICAvLyBUaGUgYWRkcmVzcyBvZiB0aGUgY29udHJhY3RcbiAqICAgIGZyb20gPSBcIjB4OGJhMWYxMDk1NTFiRDQzMjgwMzAxMjY0NUFjMTM2ZGRkNjREQkE3MlwiXG4gKlxuICogICAgLy8gVGhlIHNhbHRcbiAqICAgIHNhbHQgPSBpZChcIkhlbGxvV29ybGRcIilcbiAqXG4gKiAgICAvLyBUaGUgaGFzaCBvZiB0aGUgaW5pdENvZGVcbiAqICAgIGluaXRDb2RlID0gXCIweDYzOTQxOThkZjE2MDAwNTI2MTAzZmY2MDIwNjAwNDYwMWMzMzVhZmE2MDQwNTE2MDYwZjNcIjtcbiAqICAgIGluaXRDb2RlSGFzaCA9IGtlY2NhazI1Nihpbml0Q29kZSlcbiAqXG4gKiAgICBnZXRDcmVhdGUyQWRkcmVzcyhmcm9tLCBzYWx0LCBpbml0Q29kZUhhc2gpXG4gKiAgICAvL19yZXN1bHQ6XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDcmVhdGUyQWRkcmVzcyhfZnJvbSwgX3NhbHQsIF9pbml0Q29kZUhhc2gpIHtcbiAgICBjb25zdCBmcm9tID0gZ2V0QWRkcmVzcyhfZnJvbSk7XG4gICAgY29uc3Qgc2FsdCA9IGdldEJ5dGVzKF9zYWx0LCBcInNhbHRcIik7XG4gICAgY29uc3QgaW5pdENvZGVIYXNoID0gZ2V0Qnl0ZXMoX2luaXRDb2RlSGFzaCwgXCJpbml0Q29kZUhhc2hcIik7XG4gICAgYXNzZXJ0QXJndW1lbnQoc2FsdC5sZW5ndGggPT09IDMyLCBcInNhbHQgbXVzdCBiZSAzMiBieXRlc1wiLCBcInNhbHRcIiwgX3NhbHQpO1xuICAgIGFzc2VydEFyZ3VtZW50KGluaXRDb2RlSGFzaC5sZW5ndGggPT09IDMyLCBcImluaXRDb2RlSGFzaCBtdXN0IGJlIDMyIGJ5dGVzXCIsIFwiaW5pdENvZGVIYXNoXCIsIF9pbml0Q29kZUhhc2gpO1xuICAgIHJldHVybiBnZXRBZGRyZXNzKGRhdGFTbGljZShrZWNjYWsyNTYoY29uY2F0KFtcIjB4ZmZcIiwgZnJvbSwgc2FsdCwgaW5pdENvZGVIYXNoXSkpLCAxMikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udHJhY3QtYWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOlsia2VjY2FrMjU2IiwiY29uY2F0IiwiZGF0YVNsaWNlIiwiZ2V0QmlnSW50IiwiZ2V0Qnl0ZXMiLCJlbmNvZGVSbHAiLCJhc3NlcnRBcmd1bWVudCIsImdldEFkZHJlc3MiLCJnZXRDcmVhdGVBZGRyZXNzIiwidHgiLCJmcm9tIiwibm9uY2UiLCJub25jZUhleCIsInRvU3RyaW5nIiwibGVuZ3RoIiwiZ2V0Q3JlYXRlMkFkZHJlc3MiLCJfZnJvbSIsIl9zYWx0IiwiX2luaXRDb2RlSGFzaCIsInNhbHQiLCJpbml0Q29kZUhhc2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/address/contract-address.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/constants/addresses.js":
/*!*************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/constants/addresses.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZeroAddress: function() { return /* binding */ ZeroAddress; }\n/* harmony export */ });\n/**\n *  A constant for the zero address.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000\"``)\n */ const ZeroAddress = \"0x0000000000000000000000000000000000000000\"; //# sourceMappingURL=addresses.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY29uc3RhbnRzL2FkZHJlc3Nlcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNNLE1BQU1BLGNBQWMsNkNBQTZDLENBQ3hFLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2NvbnN0YW50cy9hZGRyZXNzZXMuanM/ZmM0MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBBIGNvbnN0YW50IGZvciB0aGUgemVybyBhZGRyZXNzLlxuICpcbiAqICAoKippLmUuKiogYGBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiYGApXG4gKi9cbmV4cG9ydCBjb25zdCBaZXJvQWRkcmVzcyA9IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRyZXNzZXMuanMubWFwIl0sIm5hbWVzIjpbIlplcm9BZGRyZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/constants/addresses.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/constants/hashes.js":
/*!**********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/constants/hashes.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZeroHash: function() { return /* binding */ ZeroHash; }\n/* harmony export */ });\n/**\n *  A constant for the zero hash.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000000000000000000000000000\"``)\n */ const ZeroHash = \"0x0000000000000000000000000000000000000000000000000000000000000000\"; //# sourceMappingURL=hashes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY29uc3RhbnRzL2hhc2hlcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNNLE1BQU1BLFdBQVcscUVBQXFFLENBQzdGLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2NvbnN0YW50cy9oYXNoZXMuanM/ZjFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBBIGNvbnN0YW50IGZvciB0aGUgemVybyBoYXNoLlxuICpcbiAqICAoKippLmUuKiogYGBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiYGApXG4gKi9cbmV4cG9ydCBjb25zdCBaZXJvSGFzaCA9IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXNoZXMuanMubWFwIl0sIm5hbWVzIjpbIlplcm9IYXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/constants/hashes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/constants/numbers.js":
/*!***********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/constants/numbers.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MaxInt256: function() { return /* binding */ MaxInt256; },\n/* harmony export */   MaxUint256: function() { return /* binding */ MaxUint256; },\n/* harmony export */   MinInt256: function() { return /* binding */ MinInt256; },\n/* harmony export */   N: function() { return /* binding */ N; },\n/* harmony export */   WeiPerEther: function() { return /* binding */ WeiPerEther; }\n/* harmony export */ });\n/**\n *  A constant for the order N for the secp256k1 curve.\n *\n *  (**i.e.** ``0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141n``)\n */ const N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n/**\n *  A constant for the number of wei in a single ether.\n *\n *  (**i.e.** ``1000000000000000000n``)\n */ const WeiPerEther = BigInt(\"1000000000000000000\");\n/**\n *  A constant for the maximum value for a ``uint256``.\n *\n *  (**i.e.** ``0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn``)\n */ const MaxUint256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n *  A constant for the minimum value for an ``int256``.\n *\n *  (**i.e.** ``-8000000000000000000000000000000000000000000000000000000000000000n``)\n */ const MinInt256 = BigInt(\"0x8000000000000000000000000000000000000000000000000000000000000000\") * BigInt(-1);\n/**\n *  A constant for the maximum value for an ``int256``.\n *\n *  (**i.e.** ``0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn``)\n */ const MaxInt256 = BigInt(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"); //# sourceMappingURL=numbers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY29uc3RhbnRzL251bWJlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztDQUlDLEdBQ00sTUFBTUEsSUFBSUMsT0FBTyxzRUFBc0U7QUFDOUY7Ozs7Q0FJQyxHQUNNLE1BQU1DLGNBQWNELE9BQU8sdUJBQXVCO0FBQ3pEOzs7O0NBSUMsR0FDTSxNQUFNRSxhQUFhRixPQUFPLHNFQUFzRTtBQUN2Rzs7OztDQUlDLEdBQ00sTUFBTUcsWUFBWUgsT0FBTyx3RUFBd0VBLE9BQU8sQ0FBQyxHQUFHO0FBQ25IOzs7O0NBSUMsR0FDTSxNQUFNSSxZQUFZSixPQUFPLHNFQUFzRSxDQUN0RyxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jb25zdGFudHMvbnVtYmVycy5qcz8wZmM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIEEgY29uc3RhbnQgZm9yIHRoZSBvcmRlciBOIGZvciB0aGUgc2VjcDI1NmsxIGN1cnZlLlxuICpcbiAqICAoKippLmUuKiogYGAweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDFuYGApXG4gKi9cbmV4cG9ydCBjb25zdCBOID0gQmlnSW50KFwiMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWJhYWVkY2U2YWY0OGEwM2JiZmQyNWU4Y2QwMzY0MTQxXCIpO1xuLyoqXG4gKiAgQSBjb25zdGFudCBmb3IgdGhlIG51bWJlciBvZiB3ZWkgaW4gYSBzaW5nbGUgZXRoZXIuXG4gKlxuICogICgqKmkuZS4qKiBgYDEwMDAwMDAwMDAwMDAwMDAwMDBuYGApXG4gKi9cbmV4cG9ydCBjb25zdCBXZWlQZXJFdGhlciA9IEJpZ0ludChcIjEwMDAwMDAwMDAwMDAwMDAwMDBcIik7XG4vKipcbiAqICBBIGNvbnN0YW50IGZvciB0aGUgbWF4aW11bSB2YWx1ZSBmb3IgYSBgYHVpbnQyNTZgYC5cbiAqXG4gKiAgKCoqaS5lLioqIGBgMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmbmBgKVxuICovXG5leHBvcnQgY29uc3QgTWF4VWludDI1NiA9IEJpZ0ludChcIjB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlwiKTtcbi8qKlxuICogIEEgY29uc3RhbnQgZm9yIHRoZSBtaW5pbXVtIHZhbHVlIGZvciBhbiBgYGludDI1NmBgLlxuICpcbiAqICAoKippLmUuKiogYGAtODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMG5gYClcbiAqL1xuZXhwb3J0IGNvbnN0IE1pbkludDI1NiA9IEJpZ0ludChcIjB4ODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiKSAqIEJpZ0ludCgtMSk7XG4vKipcbiAqICBBIGNvbnN0YW50IGZvciB0aGUgbWF4aW11bSB2YWx1ZSBmb3IgYW4gYGBpbnQyNTZgYC5cbiAqXG4gKiAgKCoqaS5lLioqIGBgMHg3ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmbmBgKVxuICovXG5leHBvcnQgY29uc3QgTWF4SW50MjU2ID0gQmlnSW50KFwiMHg3ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bnVtYmVycy5qcy5tYXAiXSwibmFtZXMiOlsiTiIsIkJpZ0ludCIsIldlaVBlckV0aGVyIiwiTWF4VWludDI1NiIsIk1pbkludDI1NiIsIk1heEludDI1NiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/constants/numbers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/constants/strings.js":
/*!***********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/constants/strings.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EtherSymbol: function() { return /* binding */ EtherSymbol; },\n/* harmony export */   MessagePrefix: function() { return /* binding */ MessagePrefix; }\n/* harmony export */ });\n// NFKC (composed)             // (decomposed)\n/**\n *  A constant for the ether symbol (normalized using NFKC).\n *\n *  (**i.e.** ``\"\\\\u039e\"``)\n */ const EtherSymbol = \"Ξ\"; // \"\\uD835\\uDF63\";\n/**\n *  A constant for the [[link-eip-191]] personal message prefix.\n *\n *  (**i.e.** ``\"\\\\x19Ethereum Signed Message:\\\\n\"``)\n */ const MessagePrefix = \"\\x19Ethereum Signed Message:\\n\"; //# sourceMappingURL=strings.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY29uc3RhbnRzL3N0cmluZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4Q0FBOEM7QUFDOUM7Ozs7Q0FJQyxHQUNNLE1BQU1BLGNBQWMsSUFBUyxDQUFDLGtCQUFrQjtBQUN2RDs7OztDQUlDLEdBQ00sTUFBTUMsZ0JBQWdCLGlDQUFpQyxDQUM5RCxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jb25zdGFudHMvc3RyaW5ncy5qcz80ZjE3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIE5GS0MgKGNvbXBvc2VkKSAgICAgICAgICAgICAvLyAoZGVjb21wb3NlZClcbi8qKlxuICogIEEgY29uc3RhbnQgZm9yIHRoZSBldGhlciBzeW1ib2wgKG5vcm1hbGl6ZWQgdXNpbmcgTkZLQykuXG4gKlxuICogICgqKmkuZS4qKiBgYFwiXFxcXHUwMzllXCJgYClcbiAqL1xuZXhwb3J0IGNvbnN0IEV0aGVyU3ltYm9sID0gXCJcXHUwMzllXCI7IC8vIFwiXFx1RDgzNVxcdURGNjNcIjtcbi8qKlxuICogIEEgY29uc3RhbnQgZm9yIHRoZSBbW2xpbmstZWlwLTE5MV1dIHBlcnNvbmFsIG1lc3NhZ2UgcHJlZml4LlxuICpcbiAqICAoKippLmUuKiogYGBcIlxcXFx4MTlFdGhlcmV1bSBTaWduZWQgTWVzc2FnZTpcXFxcblwiYGApXG4gKi9cbmV4cG9ydCBjb25zdCBNZXNzYWdlUHJlZml4ID0gXCJcXHgxOUV0aGVyZXVtIFNpZ25lZCBNZXNzYWdlOlxcblwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5ncy5qcy5tYXAiXSwibmFtZXMiOlsiRXRoZXJTeW1ib2wiLCJNZXNzYWdlUHJlZml4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/constants/strings.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/contract/contract.js":
/*!***********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/contract/contract.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseContract: function() { return /* binding */ BaseContract; },\n/* harmony export */   Contract: function() { return /* binding */ Contract; },\n/* harmony export */   copyOverrides: function() { return /* binding */ copyOverrides; },\n/* harmony export */   resolveArgs: function() { return /* binding */ resolveArgs; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../abi/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../abi/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/interface.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/checks.js\");\n/* harmony import */ var _providers_provider_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../providers/provider.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _wrappers_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./wrappers.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/contract/wrappers.js\");\n\n\n\n\n\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\n\n\n\nconst BN_0 = BigInt(0);\nfunction canCall(value) {\n    return value && typeof value.call === \"function\";\n}\nfunction canEstimate(value) {\n    return value && typeof value.estimateGas === \"function\";\n}\nfunction canResolve(value) {\n    return value && typeof value.resolveName === \"function\";\n}\nfunction canSend(value) {\n    return value && typeof value.sendTransaction === \"function\";\n}\nfunction getResolver(value) {\n    if (value != null) {\n        if (canResolve(value)) {\n            return value;\n        }\n        if (value.provider) {\n            return value.provider;\n        }\n    }\n    return undefined;\n}\nvar _filter = /*#__PURE__*/ new WeakMap();\nclass PreparedTopicFilter {\n    getTopicFilter() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _filter);\n    }\n    constructor(contract, fragment, args){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_1__._)(this, _filter, {\n            writable: true,\n            value: void 0\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.defineProperties)(this, {\n            fragment\n        });\n        if (fragment.inputs.length < args.length) {\n            throw new Error(\"too many arguments\");\n        }\n        // Recursively descend into args and resolve any addresses\n        const runner = getRunner(contract.runner, \"resolveName\");\n        const resolver = canResolve(runner) ? runner : null;\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _filter, async function() {\n            const resolvedArgs = await Promise.all(fragment.inputs.map((param, index)=>{\n                const arg = args[index];\n                if (arg == null) {\n                    return null;\n                }\n                return param.walkAsync(args[index], (type, value)=>{\n                    if (type === \"address\") {\n                        if (Array.isArray(value)) {\n                            return Promise.all(value.map((v)=>(0,_address_index_js__WEBPACK_IMPORTED_MODULE_4__.resolveAddress)(v, resolver)));\n                        }\n                        return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_4__.resolveAddress)(value, resolver);\n                    }\n                    return value;\n                });\n            }));\n            return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\n        }());\n    }\n}\n// A = Arguments passed in as a tuple\n// R = The result type of the call (i.e. if only one return type,\n//     the qualified type, otherwise Result)\n// D = The type the default call will return (i.e. R for view/pure,\n//     TransactionResponse otherwise)\n//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {\nfunction getRunner(value, feature) {\n    if (value == null) {\n        return null;\n    }\n    if (typeof value[feature] === \"function\") {\n        return value;\n    }\n    if (value.provider && typeof value.provider[feature] === \"function\") {\n        return value.provider;\n    }\n    return null;\n}\nfunction getProvider(value) {\n    if (value == null) {\n        return null;\n    }\n    return value.provider || null;\n}\n/**\n *  @_ignore:\n */ async function copyOverrides(arg, allowed) {\n    // Make sure the overrides passed in are a valid overrides object\n    const _overrides = _abi_index_js__WEBPACK_IMPORTED_MODULE_5__.Typed.dereference(arg, \"overrides\");\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assertArgument)(typeof _overrides === \"object\", \"invalid overrides parameter\", \"overrides\", arg);\n    // Create a shallow copy (we'll deep-ify anything needed during normalizing)\n    const overrides = (0,_providers_provider_js__WEBPACK_IMPORTED_MODULE_7__.copyRequest)(_overrides);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assertArgument)(overrides.to == null || (allowed || []).indexOf(\"to\") >= 0, \"cannot override to\", \"overrides.to\", overrides.to);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assertArgument)(overrides.data == null || (allowed || []).indexOf(\"data\") >= 0, \"cannot override data\", \"overrides.data\", overrides.data);\n    // Resolve any from\n    if (overrides.from) {\n        overrides.from = overrides.from;\n    }\n    return overrides;\n}\n/**\n *  @_ignore:\n */ async function resolveArgs(_runner, inputs, args) {\n    // Recursively descend into args and resolve any addresses\n    const runner = getRunner(_runner, \"resolveName\");\n    const resolver = canResolve(runner) ? runner : null;\n    return await Promise.all(inputs.map((param, index)=>{\n        return param.walkAsync(args[index], (type, value)=>{\n            value = _abi_index_js__WEBPACK_IMPORTED_MODULE_5__.Typed.dereference(value, type);\n            if (type === \"address\") {\n                return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_4__.resolveAddress)(value, resolver);\n            }\n            return value;\n        });\n    }));\n}\nfunction buildWrappedFallback(contract) {\n    const populateTransaction = async function(overrides) {\n        // If an overrides was passed in, copy it and normalize the values\n        const tx = await copyOverrides(overrides, [\n            \"data\"\n        ]);\n        tx.to = await contract.getAddress();\n        if (tx.from) {\n            tx.from = await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_4__.resolveAddress)(tx.from, getResolver(contract.runner));\n        }\n        const iface = contract.interface;\n        const noValue = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.getBigInt)(tx.value || BN_0, \"overrides.value\") === BN_0;\n        const noData = (tx.data || \"0x\") === \"0x\";\n        if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assertArgument)(false, \"cannot send data to receive or send value to non-payable fallback\", \"overrides\", overrides);\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assertArgument)(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n        // Only allow payable contracts to set non-zero value\n        const payable = iface.receive || iface.fallback && iface.fallback.payable;\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assertArgument)(payable || noValue, \"cannot send value to non-payable fallback\", \"overrides.value\", tx.value);\n        // Only allow fallback contracts to set non-empty data\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assertArgument)(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n        return tx;\n    };\n    const staticCall = async function(overrides) {\n        const runner = getRunner(contract.runner, \"call\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assert)(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"call\"\n        });\n        const tx = await populateTransaction(overrides);\n        try {\n            return await runner.call(tx);\n        } catch (error) {\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.isCallException)(error) && error.data) {\n                throw contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n    };\n    const send = async function(overrides) {\n        const runner = contract.runner;\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assert)(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"sendTransaction\"\n        });\n        const tx = await runner.sendTransaction(await populateTransaction(overrides));\n        const provider = getProvider(contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new _wrappers_js__WEBPACK_IMPORTED_MODULE_9__.ContractTransactionResponse(contract.interface, provider, tx);\n    };\n    const estimateGas = async function(overrides) {\n        const runner = getRunner(contract.runner, \"estimateGas\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assert)(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"estimateGas\"\n        });\n        return await runner.estimateGas(await populateTransaction(overrides));\n    };\n    const method = async (overrides)=>{\n        return await send(overrides);\n    };\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.defineProperties)(method, {\n        _contract: contract,\n        estimateGas,\n        populateTransaction,\n        send,\n        staticCall\n    });\n    return method;\n}\nfunction buildWrappedMethod(contract, key) {\n    const getFragment = function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const fragment = contract.interface.getFunction(key, args);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\",\n            info: {\n                key,\n                args\n            }\n        });\n        return fragment;\n    };\n    const populateTransaction = async function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const fragment = getFragment(...args);\n        // If an overrides was passed in, copy it and normalize the values\n        let overrides = {};\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n            if (overrides.from) {\n                overrides.from = await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_4__.resolveAddress)(overrides.from, getResolver(contract.runner));\n            }\n        }\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\n        }\n        const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);\n        return Object.assign({}, overrides, await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveProperties)({\n            to: contract.getAddress(),\n            data: contract.interface.encodeFunctionData(fragment, resolvedArgs)\n        }));\n    };\n    const staticCall = async function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const result = await staticCallResult(...args);\n        if (result.length === 1) {\n            return result[0];\n        }\n        return result;\n    };\n    const send = async function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const runner = contract.runner;\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assert)(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"sendTransaction\"\n        });\n        const tx = await runner.sendTransaction(await populateTransaction(...args));\n        const provider = getProvider(contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new _wrappers_js__WEBPACK_IMPORTED_MODULE_9__.ContractTransactionResponse(contract.interface, provider, tx);\n    };\n    const estimateGas = async function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const runner = getRunner(contract.runner, \"estimateGas\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assert)(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"estimateGas\"\n        });\n        return await runner.estimateGas(await populateTransaction(...args));\n    };\n    const staticCallResult = async function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const runner = getRunner(contract.runner, \"call\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assert)(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"call\"\n        });\n        const tx = await populateTransaction(...args);\n        let result = \"0x\";\n        try {\n            result = await runner.call(tx);\n        } catch (error) {\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.isCallException)(error) && error.data) {\n                throw contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n        const fragment = getFragment(...args);\n        return contract.interface.decodeFunctionResult(fragment, result);\n    };\n    const method = async function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const fragment = getFragment(...args);\n        if (fragment.constant) {\n            return await staticCall(...args);\n        }\n        return await send(...args);\n    };\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.defineProperties)(method, {\n        name: contract.interface.getFunctionName(key),\n        _contract: contract,\n        _key: key,\n        getFragment,\n        estimateGas,\n        populateTransaction,\n        send,\n        staticCall,\n        staticCallResult\n    });\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    Object.defineProperty(method, \"fragment\", {\n        configurable: false,\n        enumerable: true,\n        get: ()=>{\n            const fragment = contract.interface.getFunction(key);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"fragment\",\n                info: {\n                    key\n                }\n            });\n            return fragment;\n        }\n    });\n    return method;\n}\nfunction buildWrappedEvent(contract, key) {\n    const getFragment = function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const fragment = contract.interface.getEvent(key, args);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\",\n            info: {\n                key,\n                args\n            }\n        });\n        return fragment;\n    };\n    const method = function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return new PreparedTopicFilter(contract, getFragment(...args), args);\n    };\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.defineProperties)(method, {\n        name: contract.interface.getEventName(key),\n        _contract: contract,\n        _key: key,\n        getFragment\n    });\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    Object.defineProperty(method, \"fragment\", {\n        configurable: false,\n        enumerable: true,\n        get: ()=>{\n            const fragment = contract.interface.getEvent(key);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"fragment\",\n                info: {\n                    key\n                }\n            });\n            return fragment;\n        }\n    });\n    return method;\n}\n// The combination of TypeScrype, Private Fields and Proxies makes\n// the world go boom; so we hide variables with some trickery keeping\n// a symbol attached to each BaseContract which its sub-class (even\n// via a Proxy) can reach and use to look up its internal values.\nconst internal = Symbol.for(\"_ethersInternal_contract\");\nconst internalValues = new WeakMap();\nfunction setInternal(contract, values) {\n    internalValues.set(contract[internal], values);\n}\nfunction getInternal(contract) {\n    return internalValues.get(contract[internal]);\n}\nfunction isDeferred(value) {\n    return value && typeof value === \"object\" && \"getTopicFilter\" in value && typeof value.getTopicFilter === \"function\" && value.fragment;\n}\nasync function getSubInfo(contract, event) {\n    let topics;\n    let fragment = null;\n    // Convert named events to topicHash and get the fragment for\n    // events which need deconstructing.\n    if (Array.isArray(event)) {\n        const topicHashify = function(name) {\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__.isHexString)(name, 32)) {\n                return name;\n            }\n            const fragment = contract.interface.getEvent(name);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assertArgument)(fragment, \"unknown fragment\", \"name\", name);\n            return fragment.topicHash;\n        };\n        // Array of Topics and Names; e.g. `[ \"0x1234...89ab\", \"Transfer(address)\" ]`\n        topics = event.map((e)=>{\n            if (e == null) {\n                return null;\n            }\n            if (Array.isArray(e)) {\n                return e.map(topicHashify);\n            }\n            return topicHashify(e);\n        });\n    } else if (event === \"*\") {\n        topics = [\n            null\n        ];\n    } else if (typeof event === \"string\") {\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__.isHexString)(event, 32)) {\n            // Topic Hash\n            topics = [\n                event\n            ];\n        } else {\n            // Name or Signature; e.g. `\"Transfer\", `\"Transfer(address)\"`\n            fragment = contract.interface.getEvent(event);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assertArgument)(fragment, \"unknown fragment\", \"event\", event);\n            topics = [\n                fragment.topicHash\n            ];\n        }\n    } else if (isDeferred(event)) {\n        // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`\n        topics = await event.getTopicFilter();\n    } else if (\"fragment\" in event) {\n        // ContractEvent; e.g. `contract.filter.Transfer`\n        fragment = event.fragment;\n        topics = [\n            fragment.topicHash\n        ];\n    } else {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assertArgument)(false, \"unknown event name\", \"event\", event);\n    }\n    // Normalize topics and sort TopicSets\n    topics = topics.map((t)=>{\n        if (t == null) {\n            return null;\n        }\n        if (Array.isArray(t)) {\n            const items = Array.from(new Set(t.map((t)=>t.toLowerCase())).values());\n            if (items.length === 1) {\n                return items[0];\n            }\n            items.sort();\n            return items;\n        }\n        return t.toLowerCase();\n    });\n    const tag = topics.map((t)=>{\n        if (t == null) {\n            return \"null\";\n        }\n        if (Array.isArray(t)) {\n            return t.join(\"|\");\n        }\n        return t;\n    }).join(\"&\");\n    return {\n        fragment,\n        tag,\n        topics\n    };\n}\nasync function hasSub(contract, event) {\n    const { subs } = getInternal(contract);\n    return subs.get((await getSubInfo(contract, event)).tag) || null;\n}\nasync function getSub(contract, operation, event) {\n    // Make sure our runner can actually subscribe to events\n    const provider = getProvider(contract.runner);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assert)(provider, \"contract runner does not support subscribing\", \"UNSUPPORTED_OPERATION\", {\n        operation\n    });\n    const { fragment, tag, topics } = await getSubInfo(contract, event);\n    const { addr, subs } = getInternal(contract);\n    let sub = subs.get(tag);\n    if (!sub) {\n        const address = addr ? addr : contract;\n        const filter = {\n            address,\n            topics\n        };\n        const listener = (log)=>{\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = contract.interface.getEvent(log.topics[0]);\n                } catch (error) {}\n            }\n            // If fragment is null, we do not deconstruct the args to emit\n            if (foundFragment) {\n                const _foundFragment = foundFragment;\n                const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];\n                emit(contract, event, args, (listener)=>{\n                    return new _wrappers_js__WEBPACK_IMPORTED_MODULE_9__.ContractEventPayload(contract, listener, event, _foundFragment, log);\n                });\n            } else {\n                emit(contract, event, [], (listener)=>{\n                    return new _wrappers_js__WEBPACK_IMPORTED_MODULE_9__.ContractUnknownEventPayload(contract, listener, event, log);\n                });\n            }\n        };\n        let starting = [];\n        const start = ()=>{\n            if (starting.length) {\n                return;\n            }\n            starting.push(provider.on(filter, listener));\n        };\n        const stop = async ()=>{\n            if (starting.length == 0) {\n                return;\n            }\n            let started = starting;\n            starting = [];\n            await Promise.all(started);\n            provider.off(filter, listener);\n        };\n        sub = {\n            tag,\n            listeners: [],\n            start,\n            stop\n        };\n        subs.set(tag, sub);\n    }\n    return sub;\n}\n// We use this to ensure one emit resolves before firing the next to\n// ensure correct ordering (note this cannot throw and just adds the\n// notice to the event queu using setTimeout).\nlet lastEmit = Promise.resolve();\nasync function _emit(contract, event, args, payloadFunc) {\n    await lastEmit;\n    const sub = await hasSub(contract, event);\n    if (!sub) {\n        return false;\n    }\n    const count = sub.listeners.length;\n    sub.listeners = sub.listeners.filter((param)=>{\n        let { listener, once } = param;\n        const passArgs = Array.from(args);\n        if (payloadFunc) {\n            passArgs.push(payloadFunc(once ? null : listener));\n        }\n        try {\n            listener.call(contract, ...passArgs);\n        } catch (error) {}\n        return !once;\n    });\n    if (sub.listeners.length === 0) {\n        sub.stop();\n        getInternal(contract).subs.delete(sub.tag);\n    }\n    return count > 0;\n}\nasync function emit(contract, event, args, payloadFunc) {\n    try {\n        await lastEmit;\n    } catch (error) {}\n    const resultPromise = _emit(contract, event, args, payloadFunc);\n    lastEmit = resultPromise;\n    return await resultPromise;\n}\nconst passProperties = [\n    \"then\"\n];\nclass BaseContract {\n    /**\n     *  Return a new Contract instance with the same target and ABI, but\n     *  a different %%runner%%.\n     */ connect(runner) {\n        return new BaseContract(this.target, this.interface, runner);\n    }\n    /**\n     *  Return a new Contract instance with the same ABI and runner, but\n     *  a different %%target%%.\n     */ attach(target) {\n        return new BaseContract(target, this.interface, this.runner);\n    }\n    /**\n     *  Return the resolved address of this Contract.\n     */ async getAddress() {\n        return await getInternal(this).addrPromise;\n    }\n    /**\n     *  Return the deployed bytecode or null if no bytecode is found.\n     */ async getDeployedCode() {\n        const provider = getProvider(this.runner);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assert)(provider, \"runner does not support .provider\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"getDeployedCode\"\n        });\n        const code = await provider.getCode(await this.getAddress());\n        if (code === \"0x\") {\n            return null;\n        }\n        return code;\n    }\n    /**\n     *  Resolve to this Contract once the bytecode has been deployed, or\n     *  resolve immediately if already deployed.\n     */ async waitForDeployment() {\n        // We have the deployement transaction; just use that (throws if deployement fails)\n        const deployTx = this.deploymentTransaction();\n        if (deployTx) {\n            await deployTx.wait();\n            return this;\n        }\n        // Check for code\n        const code = await this.getDeployedCode();\n        if (code != null) {\n            return this;\n        }\n        // Make sure we can subscribe to a provider event\n        const provider = getProvider(this.runner);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assert)(provider != null, \"contract runner does not support .provider\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"waitForDeployment\"\n        });\n        return new Promise((resolve, reject)=>{\n            const checkCode = async ()=>{\n                try {\n                    const code = await this.getDeployedCode();\n                    if (code != null) {\n                        return resolve(this);\n                    }\n                    provider.once(\"block\", checkCode);\n                } catch (error) {\n                    reject(error);\n                }\n            };\n            checkCode();\n        });\n    }\n    /**\n     *  Return the transaction used to deploy this contract.\n     *\n     *  This is only available if this instance was returned from a\n     *  [[ContractFactory]].\n     */ deploymentTransaction() {\n        return getInternal(this).deployTx;\n    }\n    /**\n     *  Return the function for a given name. This is useful when a contract\n     *  method name conflicts with a JavaScript name such as ``prototype`` or\n     *  when using a Contract programatically.\n     */ getFunction(key) {\n        if (typeof key !== \"string\") {\n            key = key.format();\n        }\n        const func = buildWrappedMethod(this, key);\n        return func;\n    }\n    /**\n     *  Return the event for a given name. This is useful when a contract\n     *  event name conflicts with a JavaScript name such as ``prototype`` or\n     *  when using a Contract programatically.\n     */ getEvent(key) {\n        if (typeof key !== \"string\") {\n            key = key.format();\n        }\n        return buildWrappedEvent(this, key);\n    }\n    /**\n     *  @_ignore:\n     */ async queryTransaction(hash) {\n        throw new Error(\"@TODO\");\n    }\n    /*\n    // @TODO: this is a non-backwards compatible change, but will be added\n    //        in v7 and in a potential SmartContract class in an upcoming\n    //        v6 release\n    async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {\n        const provider = getProvider(this.runner);\n        assert(provider, \"contract runner does not have a provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"queryTransaction\" });\n\n        const receipt = await provider.getTransactionReceipt(hash);\n        if (receipt == null) { return null; }\n\n        return new ContractTransactionReceipt(this.interface, provider, receipt);\n    }\n    */ /**\n     *  Provide historic access to event data for %%event%% in the range\n     *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``\"latest\"``)\n     *  inclusive.\n     */ async queryFilter(event, fromBlock, toBlock) {\n        if (fromBlock == null) {\n            fromBlock = 0;\n        }\n        if (toBlock == null) {\n            toBlock = \"latest\";\n        }\n        const { addr, addrPromise } = getInternal(this);\n        const address = addr ? addr : await addrPromise;\n        const { fragment, topics } = await getSubInfo(this, event);\n        const filter = {\n            address,\n            topics,\n            fromBlock,\n            toBlock\n        };\n        const provider = getProvider(this.runner);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assert)(provider, \"contract runner does not have a provider\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"queryFilter\"\n        });\n        return (await provider.getLogs(filter)).map((log)=>{\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = this.interface.getEvent(log.topics[0]);\n                } catch (error) {}\n            }\n            if (foundFragment) {\n                try {\n                    return new _wrappers_js__WEBPACK_IMPORTED_MODULE_9__.EventLog(log, this.interface, foundFragment);\n                } catch (error) {\n                    return new _wrappers_js__WEBPACK_IMPORTED_MODULE_9__.UndecodedEventLog(log, error);\n                }\n            }\n            return new _providers_provider_js__WEBPACK_IMPORTED_MODULE_7__.Log(log, provider);\n        });\n    }\n    /**\n     *  Add an event %%listener%% for the %%event%%.\n     */ async on(event, listener) {\n        const sub = await getSub(this, \"on\", event);\n        sub.listeners.push({\n            listener,\n            once: false\n        });\n        sub.start();\n        return this;\n    }\n    /**\n     *  Add an event %%listener%% for the %%event%%, but remove the listener\n     *  after it is fired once.\n     */ async once(event, listener) {\n        const sub = await getSub(this, \"once\", event);\n        sub.listeners.push({\n            listener,\n            once: true\n        });\n        sub.start();\n        return this;\n    }\n    /**\n     *  Emit an %%event%% calling all listeners with %%args%%.\n     *\n     *  Resolves to ``true`` if any listeners were called.\n     */ async emit(event) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        return await emit(this, event, args, null);\n    }\n    /**\n     *  Resolves to the number of listeners of %%event%% or the total number\n     *  of listeners if unspecified.\n     */ async listenerCount(event) {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n                return 0;\n            }\n            return sub.listeners.length;\n        }\n        const { subs } = getInternal(this);\n        let total = 0;\n        for (const { listeners } of subs.values()){\n            total += listeners.length;\n        }\n        return total;\n    }\n    /**\n     *  Resolves to the listeners subscribed to %%event%% or all listeners\n     *  if unspecified.\n     */ async listeners(event) {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n                return [];\n            }\n            return sub.listeners.map((param)=>{\n                let { listener } = param;\n                return listener;\n            });\n        }\n        const { subs } = getInternal(this);\n        let result = [];\n        for (const { listeners } of subs.values()){\n            result = result.concat(listeners.map((param)=>{\n                let { listener } = param;\n                return listener;\n            }));\n        }\n        return result;\n    }\n    /**\n     *  Remove the %%listener%% from the listeners for %%event%% or remove\n     *  all listeners if unspecified.\n     */ async off(event, listener) {\n        const sub = await hasSub(this, event);\n        if (!sub) {\n            return this;\n        }\n        if (listener) {\n            const index = sub.listeners.map((param)=>{\n                let { listener } = param;\n                return listener;\n            }).indexOf(listener);\n            if (index >= 0) {\n                sub.listeners.splice(index, 1);\n            }\n        }\n        if (listener == null || sub.listeners.length === 0) {\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        }\n        return this;\n    }\n    /**\n     *  Remove all the listeners for %%event%% or remove all listeners if\n     *  unspecified.\n     */ async removeAllListeners(event) {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n                return this;\n            }\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        } else {\n            const { subs } = getInternal(this);\n            for (const { tag, stop } of subs.values()){\n                stop();\n                subs.delete(tag);\n            }\n        }\n        return this;\n    }\n    /**\n     *  Alias for [on].\n     */ async addListener(event, listener) {\n        return await this.on(event, listener);\n    }\n    /**\n     *  Alias for [off].\n     */ async removeListener(event, listener) {\n        return await this.off(event, listener);\n    }\n    /**\n     *  Create a new Class for the %%abi%%.\n     */ static buildClass(abi) {\n        class CustomContract extends BaseContract {\n            constructor(address, runner = null){\n                super(address, abi, runner);\n            }\n        }\n        return CustomContract;\n    }\n    /**\n     *  Create a new BaseContract with a specified Interface.\n     */ static from(target, abi, runner) {\n        if (runner == null) {\n            runner = null;\n        }\n        const contract = new this(target, abi, runner);\n        return contract;\n    }\n    /**\n     *  Creates a new contract connected to %%target%% with the %%abi%% and\n     *  optionally connected to a %%runner%% to perform operations on behalf\n     *  of.\n     */ constructor(target, abi, runner, _deployTx){\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.assertArgument)(typeof target === \"string\" || (0,_address_index_js__WEBPACK_IMPORTED_MODULE_4__.isAddressable)(target), \"invalid value for Contract target\", \"target\", target);\n        if (runner == null) {\n            runner = null;\n        }\n        const iface = _abi_index_js__WEBPACK_IMPORTED_MODULE_11__.Interface.from(abi);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.defineProperties)(this, {\n            target,\n            runner,\n            interface: iface\n        });\n        Object.defineProperty(this, internal, {\n            value: {}\n        });\n        let addrPromise;\n        let addr = null;\n        let deployTx = null;\n        if (_deployTx) {\n            const provider = getProvider(runner);\n            // @TODO: the provider can be null; make a custom dummy provider that will throw a\n            // meaningful error\n            deployTx = new _wrappers_js__WEBPACK_IMPORTED_MODULE_9__.ContractTransactionResponse(this.interface, provider, _deployTx);\n        }\n        let subs = new Map();\n        // Resolve the target as the address\n        if (typeof target === \"string\") {\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__.isHexString)(target)) {\n                addr = target;\n                addrPromise = Promise.resolve(target);\n            } else {\n                const resolver = getRunner(runner, \"resolveName\");\n                if (!canResolve(resolver)) {\n                    throw (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.makeError)(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"resolveName\"\n                    });\n                }\n                addrPromise = resolver.resolveName(target).then((addr)=>{\n                    if (addr == null) {\n                        throw (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.makeError)(\"an ENS name used for a contract target must be correctly configured\", \"UNCONFIGURED_NAME\", {\n                            value: target\n                        });\n                    }\n                    getInternal(this).addr = addr;\n                    return addr;\n                });\n            }\n        } else {\n            addrPromise = target.getAddress().then((addr)=>{\n                if (addr == null) {\n                    throw new Error(\"TODO\");\n                }\n                getInternal(this).addr = addr;\n                return addr;\n            });\n        }\n        // Set our private values\n        setInternal(this, {\n            addrPromise,\n            addr,\n            deployTx,\n            subs\n        });\n        // Add the event filters\n        const filters = new Proxy({}, {\n            get: (target, prop, receiver)=>{\n                // Pass important checks (like `then` for Promise) through\n                if (typeof prop === \"symbol\" || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.get(target, prop, receiver);\n                }\n                try {\n                    return this.getEvent(prop);\n                } catch (error) {\n                    if (!(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.isError)(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n                        throw error;\n                    }\n                }\n                return undefined;\n            },\n            has: (target, prop)=>{\n                // Pass important checks (like `then` for Promise) through\n                if (passProperties.indexOf(prop) >= 0) {\n                    return Reflect.has(target, prop);\n                }\n                return Reflect.has(target, prop) || this.interface.hasEvent(String(prop));\n            }\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.defineProperties)(this, {\n            filters\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.defineProperties)(this, {\n            fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null\n        });\n        // Return a Proxy that will respond to functions\n        return new Proxy(this, {\n            get: (target, prop, receiver)=>{\n                if (typeof prop === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.get(target, prop, receiver);\n                }\n                // Undefined properties should return undefined\n                try {\n                    return target.getFunction(prop);\n                } catch (error) {\n                    if (!(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.isError)(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n                        throw error;\n                    }\n                }\n                return undefined;\n            },\n            has: (target, prop)=>{\n                if (typeof prop === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.has(target, prop);\n                }\n                return target.interface.hasFunction(prop);\n            }\n        });\n    }\n}\nfunction _ContractBase() {\n    return BaseContract;\n}\n/**\n *  A [[BaseContract]] with no type guards on its methods or events.\n */ class Contract extends _ContractBase() {\n} //# sourceMappingURL=contract.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY29udHJhY3QvY29udHJhY3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFtRDtBQUNpQjtBQUNwRSxzRUFBc0U7QUFDdEUseUJBQXlCO0FBQ21DO0FBQ2lHO0FBQ2pCO0FBQzVJLE1BQU1vQixPQUFPQyxPQUFPO0FBQ3BCLFNBQVNDLFFBQVFDLEtBQUs7SUFDbEIsT0FBUUEsU0FBUyxPQUFRQSxNQUFNQyxJQUFJLEtBQU07QUFDN0M7QUFDQSxTQUFTQyxZQUFZRixLQUFLO0lBQ3RCLE9BQVFBLFNBQVMsT0FBUUEsTUFBTUcsV0FBVyxLQUFNO0FBQ3BEO0FBQ0EsU0FBU0MsV0FBV0osS0FBSztJQUNyQixPQUFRQSxTQUFTLE9BQVFBLE1BQU1LLFdBQVcsS0FBTTtBQUNwRDtBQUNBLFNBQVNDLFFBQVFOLEtBQUs7SUFDbEIsT0FBUUEsU0FBUyxPQUFRQSxNQUFNTyxlQUFlLEtBQU07QUFDeEQ7QUFDQSxTQUFTQyxZQUFZUixLQUFLO0lBQ3RCLElBQUlBLFNBQVMsTUFBTTtRQUNmLElBQUlJLFdBQVdKLFFBQVE7WUFDbkIsT0FBT0E7UUFDWDtRQUNBLElBQUlBLE1BQU1TLFFBQVEsRUFBRTtZQUNoQixPQUFPVCxNQUFNUyxRQUFRO1FBQ3pCO0lBQ0o7SUFDQSxPQUFPQztBQUNYO0lBRUk7QUFESixNQUFNQztJQThCRkMsaUJBQWlCO1FBQ2IsT0FBTyw0RUFBSSxFQUFFQztJQUNqQjtJQTdCQUMsWUFBWUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLElBQUksQ0FBRTtRQUZ0Qzs7bUJBQUE7O1FBR0lsQyxpRUFBZ0JBLENBQUMsSUFBSSxFQUFFO1lBQUVpQztRQUFTO1FBQ2xDLElBQUlBLFNBQVNFLE1BQU0sQ0FBQ0MsTUFBTSxHQUFHRixLQUFLRSxNQUFNLEVBQUU7WUFDdEMsTUFBTSxJQUFJQyxNQUFNO1FBQ3BCO1FBQ0EsMERBQTBEO1FBQzFELE1B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QVVILGVBQWVoRyxPQUFPLENBQUNzSSxTQUFTLEdBQUc7b0JBQ25GLE9BQU9FLFFBQVFoRyxHQUFHLENBQUMyRCxRQUFRbUMsTUFBTUM7Z0JBQ3JDO2dCQUNBLCtDQUErQztnQkFDL0MsSUFBSTtvQkFDQSxPQUFPcEMsT0FBTzNFLFdBQVcsQ0FBQzhHO2dCQUM5QixFQUNBLE9BQU9ySCxPQUFPO29CQUNWLElBQUksQ0FBQzNFLHdEQUFPQSxDQUFDMkUsT0FBTyx1QkFBdUJBLE1BQU13SCxRQUFRLEtBQUssT0FBTzt3QkFDakUsTUFBTXhIO29CQUNWO2dCQUNKO2dCQUNBLE9BQU9yRDtZQUNYO1lBQ0E4SyxLQUFLLENBQUN2QyxRQUFRbUM7Z0JBQ1YsSUFBSSxPQUFRQSxTQUFVLFlBQVlBLFFBQVFuQyxVQUFVSCxlQUFlaEcsT0FBTyxDQUFDc0ksU0FBUyxHQUFHO29CQUNuRixPQUFPRSxRQUFRRSxHQUFHLENBQUN2QyxRQUFRbUM7Z0JBQy9CO2dCQUNBLE9BQU9uQyxPQUFPN0csU0FBUyxDQUFDdUosV0FBVyxDQUFDUDtZQUN4QztRQUNKO0lBQ0o7QUEwU0o7QUFDQSxTQUFTUTtJQUNMLE9BQU83QztBQUNYO0FBQ0E7O0NBRUMsR0FDTSxNQUFNOEMsaUJBQWlCRDtBQUM5QixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2NvbnRyYWN0L2NvbnRyYWN0LmpzP2U2NmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW50ZXJmYWNlLCBUeXBlZCB9IGZyb20gXCIuLi9hYmkvaW5kZXguanNcIjtcbmltcG9ydCB7IGlzQWRkcmVzc2FibGUsIHJlc29sdmVBZGRyZXNzIH0gZnJvbSBcIi4uL2FkZHJlc3MvaW5kZXguanNcIjtcbi8vIGltcG9ydCBmcm9tIHByb3ZpZGVyLnRzIGluc3RlYWQgb2YgaW5kZXgudHMgdG8gcHJldmVudCBjaXJjdWxhciBkZXBcbi8vIGZyb20gRXRoZXJzY2FuUHJvdmlkZXJcbmltcG9ydCB7IGNvcHlSZXF1ZXN0LCBMb2cgfSBmcm9tIFwiLi4vcHJvdmlkZXJzL3Byb3ZpZGVyLmpzXCI7XG5pbXBvcnQgeyBkZWZpbmVQcm9wZXJ0aWVzLCBnZXRCaWdJbnQsIGlzQ2FsbEV4Y2VwdGlvbiwgaXNIZXhTdHJpbmcsIHJlc29sdmVQcm9wZXJ0aWVzLCBpc0Vycm9yLCBtYWtlRXJyb3IsIGFzc2VydCwgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IENvbnRyYWN0RXZlbnRQYXlsb2FkLCBDb250cmFjdFVua25vd25FdmVudFBheWxvYWQsIENvbnRyYWN0VHJhbnNhY3Rpb25SZXNwb25zZSwgRXZlbnRMb2csIFVuZGVjb2RlZEV2ZW50TG9nIH0gZnJvbSBcIi4vd3JhcHBlcnMuanNcIjtcbmNvbnN0IEJOXzAgPSBCaWdJbnQoMCk7XG5mdW5jdGlvbiBjYW5DYWxsKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB0eXBlb2YgKHZhbHVlLmNhbGwpID09PSBcImZ1bmN0aW9uXCIpO1xufVxuZnVuY3Rpb24gY2FuRXN0aW1hdGUodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiAodmFsdWUuZXN0aW1hdGVHYXMpID09PSBcImZ1bmN0aW9uXCIpO1xufVxuZnVuY3Rpb24gY2FuUmVzb2x2ZSh2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdHlwZW9mICh2YWx1ZS5yZXNvbHZlTmFtZSkgPT09IFwiZnVuY3Rpb25cIik7XG59XG5mdW5jdGlvbiBjYW5TZW5kKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB0eXBlb2YgKHZhbHVlLnNlbmRUcmFuc2FjdGlvbikgPT09IFwiZnVuY3Rpb25cIik7XG59XG5mdW5jdGlvbiBnZXRSZXNvbHZlcih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChjYW5SZXNvbHZlKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZS5wcm92aWRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnByb3ZpZGVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5jbGFzcyBQcmVwYXJlZFRvcGljRmlsdGVyIHtcbiAgICAjZmlsdGVyO1xuICAgIGZyYWdtZW50O1xuICAgIGNvbnN0cnVjdG9yKGNvbnRyYWN0LCBmcmFnbWVudCwgYXJncykge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgZnJhZ21lbnQgfSk7XG4gICAgICAgIGlmIChmcmFnbWVudC5pbnB1dHMubGVuZ3RoIDwgYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRvbyBtYW55IGFyZ3VtZW50c1wiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBkZXNjZW5kIGludG8gYXJncyBhbmQgcmVzb2x2ZSBhbnkgYWRkcmVzc2VzXG4gICAgICAgIGNvbnN0IHJ1bm5lciA9IGdldFJ1bm5lcihjb250cmFjdC5ydW5uZXIsIFwicmVzb2x2ZU5hbWVcIik7XG4gICAgICAgIGNvbnN0IHJlc29sdmVyID0gY2FuUmVzb2x2ZShydW5uZXIpID8gcnVubmVyIDogbnVsbDtcbiAgICAgICAgdGhpcy4jZmlsdGVyID0gKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkQXJncyA9IGF3YWl0IFByb21pc2UuYWxsKGZyYWdtZW50LmlucHV0cy5tYXAoKHBhcmFtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChhcmcgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtLndhbGtBc3luYyhhcmdzW2luZGV4XSwgKHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcImFkZHJlc3NcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHZhbHVlLm1hcCgodikgPT4gcmVzb2x2ZUFkZHJlc3ModiwgcmVzb2x2ZXIpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUFkZHJlc3ModmFsdWUsIHJlc29sdmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4gY29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUZpbHRlclRvcGljcyhmcmFnbWVudCwgcmVzb2x2ZWRBcmdzKTtcbiAgICAgICAgfSkoKTtcbiAgICB9XG4gICAgZ2V0VG9waWNGaWx0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNmaWx0ZXI7XG4gICAgfVxufVxuLy8gQSA9IEFyZ3VtZW50cyBwYXNzZWQgaW4gYXMgYSB0dXBsZVxuLy8gUiA9IFRoZSByZXN1bHQgdHlwZSBvZiB0aGUgY2FsbCAoaS5lLiBpZiBvbmx5IG9uZSByZXR1cm4gdHlwZSxcbi8vICAgICB0aGUgcXVhbGlmaWVkIHR5cGUsIG90aGVyd2lzZSBSZXN1bHQpXG4vLyBEID0gVGhlIHR5cGUgdGhlIGRlZmF1bHQgY2FsbCB3aWxsIHJldHVybiAoaS5lLiBSIGZvciB2aWV3L3B1cmUsXG4vLyAgICAgVHJhbnNhY3Rpb25SZXNwb25zZSBvdGhlcndpc2UpXG4vL2V4cG9ydCBpbnRlcmZhY2UgQ29udHJhY3RNZXRob2Q8QSBleHRlbmRzIEFycmF5PGFueT4gPSBBcnJheTxhbnk+LCBSID0gYW55LCBEIGV4dGVuZHMgUiB8IENvbnRyYWN0VHJhbnNhY3Rpb25SZXNwb25zZSA9IENvbnRyYWN0VHJhbnNhY3Rpb25SZXNwb25zZT4ge1xuZnVuY3Rpb24gZ2V0UnVubmVyKHZhbHVlLCBmZWF0dXJlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHZhbHVlW2ZlYXR1cmVdKSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlLnByb3ZpZGVyICYmIHR5cGVvZiAodmFsdWUucHJvdmlkZXJbZmVhdHVyZV0pID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnByb3ZpZGVyO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldFByb3ZpZGVyKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS5wcm92aWRlciB8fCBudWxsO1xufVxuLyoqXG4gKiAgQF9pZ25vcmU6XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb3B5T3ZlcnJpZGVzKGFyZywgYWxsb3dlZCkge1xuICAgIC8vIE1ha2Ugc3VyZSB0aGUgb3ZlcnJpZGVzIHBhc3NlZCBpbiBhcmUgYSB2YWxpZCBvdmVycmlkZXMgb2JqZWN0XG4gICAgY29uc3QgX292ZXJyaWRlcyA9IFR5cGVkLmRlcmVmZXJlbmNlKGFyZywgXCJvdmVycmlkZXNcIik7XG4gICAgYXNzZXJ0QXJndW1lbnQodHlwZW9mIChfb3ZlcnJpZGVzKSA9PT0gXCJvYmplY3RcIiwgXCJpbnZhbGlkIG92ZXJyaWRlcyBwYXJhbWV0ZXJcIiwgXCJvdmVycmlkZXNcIiwgYXJnKTtcbiAgICAvLyBDcmVhdGUgYSBzaGFsbG93IGNvcHkgKHdlJ2xsIGRlZXAtaWZ5IGFueXRoaW5nIG5lZWRlZCBkdXJpbmcgbm9ybWFsaXppbmcpXG4gICAgY29uc3Qgb3ZlcnJpZGVzID0gY29weVJlcXVlc3QoX292ZXJyaWRlcyk7XG4gICAgYXNzZXJ0QXJndW1lbnQob3ZlcnJpZGVzLnRvID09IG51bGwgfHwgKGFsbG93ZWQgfHwgW10pLmluZGV4T2YoXCJ0b1wiKSA+PSAwLCBcImNhbm5vdCBvdmVycmlkZSB0b1wiLCBcIm92ZXJyaWRlcy50b1wiLCBvdmVycmlkZXMudG8pO1xuICAgIGFzc2VydEFyZ3VtZW50KG92ZXJyaWRlcy5kYXRhID09IG51bGwgfHwgKGFsbG93ZWQgfHwgW10pLmluZGV4T2YoXCJkYXRhXCIpID49IDAsIFwiY2Fubm90IG92ZXJyaWRlIGRhdGFcIiwgXCJvdmVycmlkZXMuZGF0YVwiLCBvdmVycmlkZXMuZGF0YSk7XG4gICAgLy8gUmVzb2x2ZSBhbnkgZnJvbVxuICAgIGlmIChvdmVycmlkZXMuZnJvbSkge1xuICAgICAgICBvdmVycmlkZXMuZnJvbSA9IG92ZXJyaWRlcy5mcm9tO1xuICAgIH1cbiAgICByZXR1cm4gb3ZlcnJpZGVzO1xufVxuLyoqXG4gKiAgQF9pZ25vcmU6XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXNvbHZlQXJncyhfcnVubmVyLCBpbnB1dHMsIGFyZ3MpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBkZXNjZW5kIGludG8gYXJncyBhbmQgcmVzb2x2ZSBhbnkgYWRkcmVzc2VzXG4gICAgY29uc3QgcnVubmVyID0gZ2V0UnVubmVyKF9ydW5uZXIsIFwicmVzb2x2ZU5hbWVcIik7XG4gICAgY29uc3QgcmVzb2x2ZXIgPSBjYW5SZXNvbHZlKHJ1bm5lcikgPyBydW5uZXIgOiBudWxsO1xuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChpbnB1dHMubWFwKChwYXJhbSwgaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhcmFtLndhbGtBc3luYyhhcmdzW2luZGV4XSwgKHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB2YWx1ZSA9IFR5cGVkLmRlcmVmZXJlbmNlKHZhbHVlLCB0eXBlKTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcImFkZHJlc3NcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlQWRkcmVzcyh2YWx1ZSwgcmVzb2x2ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9KSk7XG59XG5mdW5jdGlvbiBidWlsZFdyYXBwZWRGYWxsYmFjayhjb250cmFjdCkge1xuICAgIGNvbnN0IHBvcHVsYXRlVHJhbnNhY3Rpb24gPSBhc3luYyBmdW5jdGlvbiAob3ZlcnJpZGVzKSB7XG4gICAgICAgIC8vIElmIGFuIG92ZXJyaWRlcyB3YXMgcGFzc2VkIGluLCBjb3B5IGl0IGFuZCBub3JtYWxpemUgdGhlIHZhbHVlc1xuICAgICAgICBjb25zdCB0eCA9IChhd2FpdCBjb3B5T3ZlcnJpZGVzKG92ZXJyaWRlcywgW1wiZGF0YVwiXSkpO1xuICAgICAgICB0eC50byA9IGF3YWl0IGNvbnRyYWN0LmdldEFkZHJlc3MoKTtcbiAgICAgICAgaWYgKHR4LmZyb20pIHtcbiAgICAgICAgICAgIHR4LmZyb20gPSBhd2FpdCByZXNvbHZlQWRkcmVzcyh0eC5mcm9tLCBnZXRSZXNvbHZlcihjb250cmFjdC5ydW5uZXIpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpZmFjZSA9IGNvbnRyYWN0LmludGVyZmFjZTtcbiAgICAgICAgY29uc3Qgbm9WYWx1ZSA9IChnZXRCaWdJbnQoKHR4LnZhbHVlIHx8IEJOXzApLCBcIm92ZXJyaWRlcy52YWx1ZVwiKSA9PT0gQk5fMCk7XG4gICAgICAgIGNvbnN0IG5vRGF0YSA9ICgodHguZGF0YSB8fCBcIjB4XCIpID09PSBcIjB4XCIpO1xuICAgICAgICBpZiAoaWZhY2UuZmFsbGJhY2sgJiYgIWlmYWNlLmZhbGxiYWNrLnBheWFibGUgJiYgaWZhY2UucmVjZWl2ZSAmJiAhbm9EYXRhICYmICFub1ZhbHVlKSB7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgXCJjYW5ub3Qgc2VuZCBkYXRhIHRvIHJlY2VpdmUgb3Igc2VuZCB2YWx1ZSB0byBub24tcGF5YWJsZSBmYWxsYmFja1wiLCBcIm92ZXJyaWRlc1wiLCBvdmVycmlkZXMpO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGlmYWNlLmZhbGxiYWNrIHx8IG5vRGF0YSwgXCJjYW5ub3Qgc2VuZCBkYXRhIHRvIHJlY2VpdmUtb25seSBjb250cmFjdFwiLCBcIm92ZXJyaWRlcy5kYXRhXCIsIHR4LmRhdGEpO1xuICAgICAgICAvLyBPbmx5IGFsbG93IHBheWFibGUgY29udHJhY3RzIHRvIHNldCBub24temVybyB2YWx1ZVxuICAgICAgICBjb25zdCBwYXlhYmxlID0gaWZhY2UucmVjZWl2ZSB8fCAoaWZhY2UuZmFsbGJhY2sgJiYgaWZhY2UuZmFsbGJhY2sucGF5YWJsZSk7XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KHBheWFibGUgfHwgbm9WYWx1ZSwgXCJjYW5ub3Qgc2VuZCB2YWx1ZSB0byBub24tcGF5YWJsZSBmYWxsYmFja1wiLCBcIm92ZXJyaWRlcy52YWx1ZVwiLCB0eC52YWx1ZSk7XG4gICAgICAgIC8vIE9ubHkgYWxsb3cgZmFsbGJhY2sgY29udHJhY3RzIHRvIHNldCBub24tZW1wdHkgZGF0YVxuICAgICAgICBhc3NlcnRBcmd1bWVudChpZmFjZS5mYWxsYmFjayB8fCBub0RhdGEsIFwiY2Fubm90IHNlbmQgZGF0YSB0byByZWNlaXZlLW9ubHkgY29udHJhY3RcIiwgXCJvdmVycmlkZXMuZGF0YVwiLCB0eC5kYXRhKTtcbiAgICAgICAgcmV0dXJuIHR4O1xuICAgIH07XG4gICAgY29uc3Qgc3RhdGljQ2FsbCA9IGFzeW5jIGZ1bmN0aW9uIChvdmVycmlkZXMpIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gZ2V0UnVubmVyKGNvbnRyYWN0LnJ1bm5lciwgXCJjYWxsXCIpO1xuICAgICAgICBhc3NlcnQoY2FuQ2FsbChydW5uZXIpLCBcImNvbnRyYWN0IHJ1bm5lciBkb2VzIG5vdCBzdXBwb3J0IGNhbGxpbmdcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IFwiY2FsbFwiIH0pO1xuICAgICAgICBjb25zdCB0eCA9IGF3YWl0IHBvcHVsYXRlVHJhbnNhY3Rpb24ob3ZlcnJpZGVzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBydW5uZXIuY2FsbCh0eCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNDYWxsRXhjZXB0aW9uKGVycm9yKSAmJiBlcnJvci5kYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgY29udHJhY3QuaW50ZXJmYWNlLm1ha2VFcnJvcihlcnJvci5kYXRhLCB0eCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2VuZCA9IGFzeW5jIGZ1bmN0aW9uIChvdmVycmlkZXMpIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gY29udHJhY3QucnVubmVyO1xuICAgICAgICBhc3NlcnQoY2FuU2VuZChydW5uZXIpLCBcImNvbnRyYWN0IHJ1bm5lciBkb2VzIG5vdCBzdXBwb3J0IHNlbmRpbmcgdHJhbnNhY3Rpb25zXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcInNlbmRUcmFuc2FjdGlvblwiIH0pO1xuICAgICAgICBjb25zdCB0eCA9IGF3YWl0IHJ1bm5lci5zZW5kVHJhbnNhY3Rpb24oYXdhaXQgcG9wdWxhdGVUcmFuc2FjdGlvbihvdmVycmlkZXMpKTtcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBnZXRQcm92aWRlcihjb250cmFjdC5ydW5uZXIpO1xuICAgICAgICAvLyBAVE9ETzogdGhlIHByb3ZpZGVyIGNhbiBiZSBudWxsOyBtYWtlIGEgY3VzdG9tIGR1bW15IHByb3ZpZGVyIHRoYXQgd2lsbCB0aHJvdyBhXG4gICAgICAgIC8vIG1lYW5pbmdmdWwgZXJyb3JcbiAgICAgICAgcmV0dXJuIG5ldyBDb250cmFjdFRyYW5zYWN0aW9uUmVzcG9uc2UoY29udHJhY3QuaW50ZXJmYWNlLCBwcm92aWRlciwgdHgpO1xuICAgIH07XG4gICAgY29uc3QgZXN0aW1hdGVHYXMgPSBhc3luYyBmdW5jdGlvbiAob3ZlcnJpZGVzKSB7XG4gICAgICAgIGNvbnN0IHJ1bm5lciA9IGdldFJ1bm5lcihjb250cmFjdC5ydW5uZXIsIFwiZXN0aW1hdGVHYXNcIik7XG4gICAgICAgIGFzc2VydChjYW5Fc3RpbWF0ZShydW5uZXIpLCBcImNvbnRyYWN0IHJ1bm5lciBkb2VzIG5vdCBzdXBwb3J0IGdhcyBlc3RpbWF0aW9uXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcImVzdGltYXRlR2FzXCIgfSk7XG4gICAgICAgIHJldHVybiBhd2FpdCBydW5uZXIuZXN0aW1hdGVHYXMoYXdhaXQgcG9wdWxhdGVUcmFuc2FjdGlvbihvdmVycmlkZXMpKTtcbiAgICB9O1xuICAgIGNvbnN0IG1ldGhvZCA9IGFzeW5jIChvdmVycmlkZXMpID0+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHNlbmQob3ZlcnJpZGVzKTtcbiAgICB9O1xuICAgIGRlZmluZVByb3BlcnRpZXMobWV0aG9kLCB7XG4gICAgICAgIF9jb250cmFjdDogY29udHJhY3QsXG4gICAgICAgIGVzdGltYXRlR2FzLFxuICAgICAgICBwb3B1bGF0ZVRyYW5zYWN0aW9uLFxuICAgICAgICBzZW5kLCBzdGF0aWNDYWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIG1ldGhvZDtcbn1cbmZ1bmN0aW9uIGJ1aWxkV3JhcHBlZE1ldGhvZChjb250cmFjdCwga2V5KSB7XG4gICAgY29uc3QgZ2V0RnJhZ21lbnQgPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBjb25zdCBmcmFnbWVudCA9IGNvbnRyYWN0LmludGVyZmFjZS5nZXRGdW5jdGlvbihrZXksIGFyZ3MpO1xuICAgICAgICBhc3NlcnQoZnJhZ21lbnQsIFwibm8gbWF0Y2hpbmcgZnJhZ21lbnRcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcImZyYWdtZW50XCIsXG4gICAgICAgICAgICBpbmZvOiB7IGtleSwgYXJncyB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnJhZ21lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBwb3B1bGF0ZVRyYW5zYWN0aW9uID0gYXN5bmMgZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBnZXRGcmFnbWVudCguLi5hcmdzKTtcbiAgICAgICAgLy8gSWYgYW4gb3ZlcnJpZGVzIHdhcyBwYXNzZWQgaW4sIGNvcHkgaXQgYW5kIG5vcm1hbGl6ZSB0aGUgdmFsdWVzXG4gICAgICAgIGxldCBvdmVycmlkZXMgPSB7fTtcbiAgICAgICAgaWYgKGZyYWdtZW50LmlucHV0cy5sZW5ndGggKyAxID09PSBhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgb3ZlcnJpZGVzID0gYXdhaXQgY29weU92ZXJyaWRlcyhhcmdzLnBvcCgpKTtcbiAgICAgICAgICAgIGlmIChvdmVycmlkZXMuZnJvbSkge1xuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5mcm9tID0gYXdhaXQgcmVzb2x2ZUFkZHJlc3Mob3ZlcnJpZGVzLmZyb20sIGdldFJlc29sdmVyKGNvbnRyYWN0LnJ1bm5lcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmcmFnbWVudC5pbnB1dHMubGVuZ3RoICE9PSBhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW50ZXJuYWwgZXJyb3I6IGZyYWdtZW50IGlucHV0cyBkb2Vzbid0IG1hdGNoIGFyZ3VtZW50czsgc2hvdWxkIG5vdCBoYXBwZW5cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzb2x2ZWRBcmdzID0gYXdhaXQgcmVzb2x2ZUFyZ3MoY29udHJhY3QucnVubmVyLCBmcmFnbWVudC5pbnB1dHMsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgb3ZlcnJpZGVzLCBhd2FpdCByZXNvbHZlUHJvcGVydGllcyh7XG4gICAgICAgICAgICB0bzogY29udHJhY3QuZ2V0QWRkcmVzcygpLFxuICAgICAgICAgICAgZGF0YTogY29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUZ1bmN0aW9uRGF0YShmcmFnbWVudCwgcmVzb2x2ZWRBcmdzKVxuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBjb25zdCBzdGF0aWNDYWxsID0gYXN5bmMgZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3RhdGljQ2FsbFJlc3VsdCguLi5hcmdzKTtcbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRbMF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIGNvbnN0IHNlbmQgPSBhc3luYyBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBjb25zdCBydW5uZXIgPSBjb250cmFjdC5ydW5uZXI7XG4gICAgICAgIGFzc2VydChjYW5TZW5kKHJ1bm5lciksIFwiY29udHJhY3QgcnVubmVyIGRvZXMgbm90IHN1cHBvcnQgc2VuZGluZyB0cmFuc2FjdGlvbnNcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IFwic2VuZFRyYW5zYWN0aW9uXCIgfSk7XG4gICAgICAgIGNvbnN0IHR4ID0gYXdhaXQgcnVubmVyLnNlbmRUcmFuc2FjdGlvbihhd2FpdCBwb3B1bGF0ZVRyYW5zYWN0aW9uKC4uLmFyZ3MpKTtcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBnZXRQcm92aWRlcihjb250cmFjdC5ydW5uZXIpO1xuICAgICAgICAvLyBAVE9ETzogdGhlIHByb3ZpZGVyIGNhbiBiZSBudWxsOyBtYWtlIGEgY3VzdG9tIGR1bW15IHByb3ZpZGVyIHRoYXQgd2lsbCB0aHJvdyBhXG4gICAgICAgIC8vIG1lYW5pbmdmdWwgZXJyb3JcbiAgICAgICAgcmV0dXJuIG5ldyBDb250cmFjdFRyYW5zYWN0aW9uUmVzcG9uc2UoY29udHJhY3QuaW50ZXJmYWNlLCBwcm92aWRlciwgdHgpO1xuICAgIH07XG4gICAgY29uc3QgZXN0aW1hdGVHYXMgPSBhc3luYyBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBjb25zdCBydW5uZXIgPSBnZXRSdW5uZXIoY29udHJhY3QucnVubmVyLCBcImVzdGltYXRlR2FzXCIpO1xuICAgICAgICBhc3NlcnQoY2FuRXN0aW1hdGUocnVubmVyKSwgXCJjb250cmFjdCBydW5uZXIgZG9lcyBub3Qgc3VwcG9ydCBnYXMgZXN0aW1hdGlvblwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCJlc3RpbWF0ZUdhc1wiIH0pO1xuICAgICAgICByZXR1cm4gYXdhaXQgcnVubmVyLmVzdGltYXRlR2FzKGF3YWl0IHBvcHVsYXRlVHJhbnNhY3Rpb24oLi4uYXJncykpO1xuICAgIH07XG4gICAgY29uc3Qgc3RhdGljQ2FsbFJlc3VsdCA9IGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IHJ1bm5lciA9IGdldFJ1bm5lcihjb250cmFjdC5ydW5uZXIsIFwiY2FsbFwiKTtcbiAgICAgICAgYXNzZXJ0KGNhbkNhbGwocnVubmVyKSwgXCJjb250cmFjdCBydW5uZXIgZG9lcyBub3Qgc3VwcG9ydCBjYWxsaW5nXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcImNhbGxcIiB9KTtcbiAgICAgICAgY29uc3QgdHggPSBhd2FpdCBwb3B1bGF0ZVRyYW5zYWN0aW9uKC4uLmFyZ3MpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gXCIweFwiO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgcnVubmVyLmNhbGwodHgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQ2FsbEV4Y2VwdGlvbihlcnJvcikgJiYgZXJyb3IuZGF0YSkge1xuICAgICAgICAgICAgICAgIHRocm93IGNvbnRyYWN0LmludGVyZmFjZS5tYWtlRXJyb3IoZXJyb3IuZGF0YSwgdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBnZXRGcmFnbWVudCguLi5hcmdzKTtcbiAgICAgICAgcmV0dXJuIGNvbnRyYWN0LmludGVyZmFjZS5kZWNvZGVGdW5jdGlvblJlc3VsdChmcmFnbWVudCwgcmVzdWx0KTtcbiAgICB9O1xuICAgIGNvbnN0IG1ldGhvZCA9IGFzeW5jICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gZ2V0RnJhZ21lbnQoLi4uYXJncyk7XG4gICAgICAgIGlmIChmcmFnbWVudC5jb25zdGFudCkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHN0YXRpY0NhbGwoLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IHNlbmQoLi4uYXJncyk7XG4gICAgfTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKG1ldGhvZCwge1xuICAgICAgICBuYW1lOiBjb250cmFjdC5pbnRlcmZhY2UuZ2V0RnVuY3Rpb25OYW1lKGtleSksXG4gICAgICAgIF9jb250cmFjdDogY29udHJhY3QsIF9rZXk6IGtleSxcbiAgICAgICAgZ2V0RnJhZ21lbnQsXG4gICAgICAgIGVzdGltYXRlR2FzLFxuICAgICAgICBwb3B1bGF0ZVRyYW5zYWN0aW9uLFxuICAgICAgICBzZW5kLCBzdGF0aWNDYWxsLCBzdGF0aWNDYWxsUmVzdWx0LFxuICAgIH0pO1xuICAgIC8vIE9ubHkgd29ya3Mgb24gbm9uLWFtYmlndW91cyBrZXlzIChyZWZpbmVkIGZyYWdtZW50IGlzIGFsd2F5cyBub24tYW1iaWd1b3VzKVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtZXRob2QsIFwiZnJhZ21lbnRcIiwge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID0gY29udHJhY3QuaW50ZXJmYWNlLmdldEZ1bmN0aW9uKGtleSk7XG4gICAgICAgICAgICBhc3NlcnQoZnJhZ21lbnQsIFwibm8gbWF0Y2hpbmcgZnJhZ21lbnRcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJmcmFnbWVudFwiLFxuICAgICAgICAgICAgICAgIGluZm86IHsga2V5IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1ldGhvZDtcbn1cbmZ1bmN0aW9uIGJ1aWxkV3JhcHBlZEV2ZW50KGNvbnRyYWN0LCBrZXkpIHtcbiAgICBjb25zdCBnZXRGcmFnbWVudCA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gY29udHJhY3QuaW50ZXJmYWNlLmdldEV2ZW50KGtleSwgYXJncyk7XG4gICAgICAgIGFzc2VydChmcmFnbWVudCwgXCJubyBtYXRjaGluZyBmcmFnbWVudFwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XG4gICAgICAgICAgICBvcGVyYXRpb246IFwiZnJhZ21lbnRcIixcbiAgICAgICAgICAgIGluZm86IHsga2V5LCBhcmdzIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IG1ldGhvZCA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJlcGFyZWRUb3BpY0ZpbHRlcihjb250cmFjdCwgZ2V0RnJhZ21lbnQoLi4uYXJncyksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmaW5lUHJvcGVydGllcyhtZXRob2QsIHtcbiAgICAgICAgbmFtZTogY29udHJhY3QuaW50ZXJmYWNlLmdldEV2ZW50TmFtZShrZXkpLFxuICAgICAgICBfY29udHJhY3Q6IGNvbnRyYWN0LCBfa2V5OiBrZXksXG4gICAgICAgIGdldEZyYWdtZW50XG4gICAgfSk7XG4gICAgLy8gT25seSB3b3JrcyBvbiBub24tYW1iaWd1b3VzIGtleXMgKHJlZmluZWQgZnJhZ21lbnQgaXMgYWx3YXlzIG5vbi1hbWJpZ3VvdXMpXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1ldGhvZCwgXCJmcmFnbWVudFwiLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBjb250cmFjdC5pbnRlcmZhY2UuZ2V0RXZlbnQoa2V5KTtcbiAgICAgICAgICAgIGFzc2VydChmcmFnbWVudCwgXCJubyBtYXRjaGluZyBmcmFnbWVudFwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcImZyYWdtZW50XCIsXG4gICAgICAgICAgICAgICAgaW5mbzogeyBrZXkgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZnJhZ21lbnQ7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbWV0aG9kO1xufVxuLy8gVGhlIGNvbWJpbmF0aW9uIG9mIFR5cGVTY3J5cGUsIFByaXZhdGUgRmllbGRzIGFuZCBQcm94aWVzIG1ha2VzXG4vLyB0aGUgd29ybGQgZ28gYm9vbTsgc28gd2UgaGlkZSB2YXJpYWJsZXMgd2l0aCBzb21lIHRyaWNrZXJ5IGtlZXBpbmdcbi8vIGEgc3ltYm9sIGF0dGFjaGVkIHRvIGVhY2ggQmFzZUNvbnRyYWN0IHdoaWNoIGl0cyBzdWItY2xhc3MgKGV2ZW5cbi8vIHZpYSBhIFByb3h5KSBjYW4gcmVhY2ggYW5kIHVzZSB0byBsb29rIHVwIGl0cyBpbnRlcm5hbCB2YWx1ZXMuXG5jb25zdCBpbnRlcm5hbCA9IFN5bWJvbC5mb3IoXCJfZXRoZXJzSW50ZXJuYWxfY29udHJhY3RcIik7XG5jb25zdCBpbnRlcm5hbFZhbHVlcyA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBzZXRJbnRlcm5hbChjb250cmFjdCwgdmFsdWVzKSB7XG4gICAgaW50ZXJuYWxWYWx1ZXMuc2V0KGNvbnRyYWN0W2ludGVybmFsXSwgdmFsdWVzKTtcbn1cbmZ1bmN0aW9uIGdldEludGVybmFsKGNvbnRyYWN0KSB7XG4gICAgcmV0dXJuIGludGVybmFsVmFsdWVzLmdldChjb250cmFjdFtpbnRlcm5hbF0pO1xufVxuZnVuY3Rpb24gaXNEZWZlcnJlZCh2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdHlwZW9mICh2YWx1ZSkgPT09IFwib2JqZWN0XCIgJiYgKFwiZ2V0VG9waWNGaWx0ZXJcIiBpbiB2YWx1ZSkgJiZcbiAgICAgICAgKHR5cGVvZiAodmFsdWUuZ2V0VG9waWNGaWx0ZXIpID09PSBcImZ1bmN0aW9uXCIpICYmIHZhbHVlLmZyYWdtZW50KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFN1YkluZm8oY29udHJhY3QsIGV2ZW50KSB7XG4gICAgbGV0IHRvcGljcztcbiAgICBsZXQgZnJhZ21lbnQgPSBudWxsO1xuICAgIC8vIENvbnZlcnQgbmFtZWQgZXZlbnRzIHRvIHRvcGljSGFzaCBhbmQgZ2V0IHRoZSBmcmFnbWVudCBmb3JcbiAgICAvLyBldmVudHMgd2hpY2ggbmVlZCBkZWNvbnN0cnVjdGluZy5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgICAgY29uc3QgdG9waWNIYXNoaWZ5ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIGlmIChpc0hleFN0cmluZyhuYW1lLCAzMikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID0gY29udHJhY3QuaW50ZXJmYWNlLmdldEV2ZW50KG5hbWUpO1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZnJhZ21lbnQsIFwidW5rbm93biBmcmFnbWVudFwiLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gZnJhZ21lbnQudG9waWNIYXNoO1xuICAgICAgICB9O1xuICAgICAgICAvLyBBcnJheSBvZiBUb3BpY3MgYW5kIE5hbWVzOyBlLmcuIGBbIFwiMHgxMjM0Li4uODlhYlwiLCBcIlRyYW5zZmVyKGFkZHJlc3MpXCIgXWBcbiAgICAgICAgdG9waWNzID0gZXZlbnQubWFwKChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLm1hcCh0b3BpY0hhc2hpZnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRvcGljSGFzaGlmeShlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV2ZW50ID09PSBcIipcIikge1xuICAgICAgICB0b3BpY3MgPSBbbnVsbF07XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiAoZXZlbnQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChpc0hleFN0cmluZyhldmVudCwgMzIpKSB7XG4gICAgICAgICAgICAvLyBUb3BpYyBIYXNoXG4gICAgICAgICAgICB0b3BpY3MgPSBbZXZlbnRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTmFtZSBvciBTaWduYXR1cmU7IGUuZy4gYFwiVHJhbnNmZXJcIiwgYFwiVHJhbnNmZXIoYWRkcmVzcylcImBcbiAgICAgICAgICAgIGZyYWdtZW50ID0gY29udHJhY3QuaW50ZXJmYWNlLmdldEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGZyYWdtZW50LCBcInVua25vd24gZnJhZ21lbnRcIiwgXCJldmVudFwiLCBldmVudCk7XG4gICAgICAgICAgICB0b3BpY3MgPSBbZnJhZ21lbnQudG9waWNIYXNoXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc0RlZmVycmVkKGV2ZW50KSkge1xuICAgICAgICAvLyBEZWZlcnJlZCBUb3BpYyBGaWx0ZXI7IGUuZy4gYGNvbnRyYWN0LmZpbHRlci5UcmFuc2Zlcihmcm9tKWBcbiAgICAgICAgdG9waWNzID0gYXdhaXQgZXZlbnQuZ2V0VG9waWNGaWx0ZXIoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoXCJmcmFnbWVudFwiIGluIGV2ZW50KSB7XG4gICAgICAgIC8vIENvbnRyYWN0RXZlbnQ7IGUuZy4gYGNvbnRyYWN0LmZpbHRlci5UcmFuc2ZlcmBcbiAgICAgICAgZnJhZ21lbnQgPSBldmVudC5mcmFnbWVudDtcbiAgICAgICAgdG9waWNzID0gW2ZyYWdtZW50LnRvcGljSGFzaF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgXCJ1bmtub3duIGV2ZW50IG5hbWVcIiwgXCJldmVudFwiLCBldmVudCk7XG4gICAgfVxuICAgIC8vIE5vcm1hbGl6ZSB0b3BpY3MgYW5kIHNvcnQgVG9waWNTZXRzXG4gICAgdG9waWNzID0gdG9waWNzLm1hcCgodCkgPT4ge1xuICAgICAgICBpZiAodCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0KSkge1xuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBBcnJheS5mcm9tKG5ldyBTZXQodC5tYXAoKHQpID0+IHQudG9Mb3dlckNhc2UoKSkpLnZhbHVlcygpKTtcbiAgICAgICAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbXNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtcy5zb3J0KCk7XG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcbiAgICBjb25zdCB0YWcgPSB0b3BpY3MubWFwKCh0KSA9PiB7XG4gICAgICAgIGlmICh0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBcIm51bGxcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHQuam9pbihcInxcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfSkuam9pbihcIiZcIik7XG4gICAgcmV0dXJuIHsgZnJhZ21lbnQsIHRhZywgdG9waWNzIH07XG59XG5hc3luYyBmdW5jdGlvbiBoYXNTdWIoY29udHJhY3QsIGV2ZW50KSB7XG4gICAgY29uc3QgeyBzdWJzIH0gPSBnZXRJbnRlcm5hbChjb250cmFjdCk7XG4gICAgcmV0dXJuIHN1YnMuZ2V0KChhd2FpdCBnZXRTdWJJbmZvKGNvbnRyYWN0LCBldmVudCkpLnRhZykgfHwgbnVsbDtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFN1Yihjb250cmFjdCwgb3BlcmF0aW9uLCBldmVudCkge1xuICAgIC8vIE1ha2Ugc3VyZSBvdXIgcnVubmVyIGNhbiBhY3R1YWxseSBzdWJzY3JpYmUgdG8gZXZlbnRzXG4gICAgY29uc3QgcHJvdmlkZXIgPSBnZXRQcm92aWRlcihjb250cmFjdC5ydW5uZXIpO1xuICAgIGFzc2VydChwcm92aWRlciwgXCJjb250cmFjdCBydW5uZXIgZG9lcyBub3Qgc3VwcG9ydCBzdWJzY3JpYmluZ1wiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbiB9KTtcbiAgICBjb25zdCB7IGZyYWdtZW50LCB0YWcsIHRvcGljcyB9ID0gYXdhaXQgZ2V0U3ViSW5mbyhjb250cmFjdCwgZXZlbnQpO1xuICAgIGNvbnN0IHsgYWRkciwgc3VicyB9ID0gZ2V0SW50ZXJuYWwoY29udHJhY3QpO1xuICAgIGxldCBzdWIgPSBzdWJzLmdldCh0YWcpO1xuICAgIGlmICghc3ViKSB7XG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSAoYWRkciA/IGFkZHIgOiBjb250cmFjdCk7XG4gICAgICAgIGNvbnN0IGZpbHRlciA9IHsgYWRkcmVzcywgdG9waWNzIH07XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKGxvZykgPT4ge1xuICAgICAgICAgICAgbGV0IGZvdW5kRnJhZ21lbnQgPSBmcmFnbWVudDtcbiAgICAgICAgICAgIGlmIChmb3VuZEZyYWdtZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZEZyYWdtZW50ID0gY29udHJhY3QuaW50ZXJmYWNlLmdldEV2ZW50KGxvZy50b3BpY3NbMF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgZnJhZ21lbnQgaXMgbnVsbCwgd2UgZG8gbm90IGRlY29uc3RydWN0IHRoZSBhcmdzIHRvIGVtaXRcbiAgICAgICAgICAgIGlmIChmb3VuZEZyYWdtZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgX2ZvdW5kRnJhZ21lbnQgPSBmb3VuZEZyYWdtZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBmcmFnbWVudCA/IGNvbnRyYWN0LmludGVyZmFjZS5kZWNvZGVFdmVudExvZyhmcmFnbWVudCwgbG9nLmRhdGEsIGxvZy50b3BpY3MpIDogW107XG4gICAgICAgICAgICAgICAgZW1pdChjb250cmFjdCwgZXZlbnQsIGFyZ3MsIChsaXN0ZW5lcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbnRyYWN0RXZlbnRQYXlsb2FkKGNvbnRyYWN0LCBsaXN0ZW5lciwgZXZlbnQsIF9mb3VuZEZyYWdtZW50LCBsb2cpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW1pdChjb250cmFjdCwgZXZlbnQsIFtdLCAobGlzdGVuZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb250cmFjdFVua25vd25FdmVudFBheWxvYWQoY29udHJhY3QsIGxpc3RlbmVyLCBldmVudCwgbG9nKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHN0YXJ0aW5nID0gW107XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHN0YXJ0aW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXJ0aW5nLnB1c2gocHJvdmlkZXIub24oZmlsdGVyLCBsaXN0ZW5lcikpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdG9wID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHN0YXJ0aW5nLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHN0YXJ0ZWQgPSBzdGFydGluZztcbiAgICAgICAgICAgIHN0YXJ0aW5nID0gW107XG4gICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChzdGFydGVkKTtcbiAgICAgICAgICAgIHByb3ZpZGVyLm9mZihmaWx0ZXIsIGxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICAgICAgc3ViID0geyB0YWcsIGxpc3RlbmVyczogW10sIHN0YXJ0LCBzdG9wIH07XG4gICAgICAgIHN1YnMuc2V0KHRhZywgc3ViKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1Yjtcbn1cbi8vIFdlIHVzZSB0aGlzIHRvIGVuc3VyZSBvbmUgZW1pdCByZXNvbHZlcyBiZWZvcmUgZmlyaW5nIHRoZSBuZXh0IHRvXG4vLyBlbnN1cmUgY29ycmVjdCBvcmRlcmluZyAobm90ZSB0aGlzIGNhbm5vdCB0aHJvdyBhbmQganVzdCBhZGRzIHRoZVxuLy8gbm90aWNlIHRvIHRoZSBldmVudCBxdWV1IHVzaW5nIHNldFRpbWVvdXQpLlxubGV0IGxhc3RFbWl0ID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5hc3luYyBmdW5jdGlvbiBfZW1pdChjb250cmFjdCwgZXZlbnQsIGFyZ3MsIHBheWxvYWRGdW5jKSB7XG4gICAgYXdhaXQgbGFzdEVtaXQ7XG4gICAgY29uc3Qgc3ViID0gYXdhaXQgaGFzU3ViKGNvbnRyYWN0LCBldmVudCk7XG4gICAgaWYgKCFzdWIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBjb3VudCA9IHN1Yi5saXN0ZW5lcnMubGVuZ3RoO1xuICAgIHN1Yi5saXN0ZW5lcnMgPSBzdWIubGlzdGVuZXJzLmZpbHRlcigoeyBsaXN0ZW5lciwgb25jZSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHBhc3NBcmdzID0gQXJyYXkuZnJvbShhcmdzKTtcbiAgICAgICAgaWYgKHBheWxvYWRGdW5jKSB7XG4gICAgICAgICAgICBwYXNzQXJncy5wdXNoKHBheWxvYWRGdW5jKG9uY2UgPyBudWxsIDogbGlzdGVuZXIpKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGlzdGVuZXIuY2FsbChjb250cmFjdCwgLi4ucGFzc0FyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgIHJldHVybiAhb25jZTtcbiAgICB9KTtcbiAgICBpZiAoc3ViLmxpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgc3ViLnN0b3AoKTtcbiAgICAgICAgZ2V0SW50ZXJuYWwoY29udHJhY3QpLnN1YnMuZGVsZXRlKHN1Yi50YWcpO1xuICAgIH1cbiAgICByZXR1cm4gKGNvdW50ID4gMCk7XG59XG5hc3luYyBmdW5jdGlvbiBlbWl0KGNvbnRyYWN0LCBldmVudCwgYXJncywgcGF5bG9hZEZ1bmMpIHtcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBsYXN0RW1pdDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICBjb25zdCByZXN1bHRQcm9taXNlID0gX2VtaXQoY29udHJhY3QsIGV2ZW50LCBhcmdzLCBwYXlsb2FkRnVuYyk7XG4gICAgbGFzdEVtaXQgPSByZXN1bHRQcm9taXNlO1xuICAgIHJldHVybiBhd2FpdCByZXN1bHRQcm9taXNlO1xufVxuY29uc3QgcGFzc1Byb3BlcnRpZXMgPSBbXCJ0aGVuXCJdO1xuZXhwb3J0IGNsYXNzIEJhc2VDb250cmFjdCB7XG4gICAgLyoqXG4gICAgICogIFRoZSB0YXJnZXQgdG8gY29ubmVjdCB0by5cbiAgICAgKlxuICAgICAqICBUaGlzIGNhbiBiZSBhbiBhZGRyZXNzLCBFTlMgbmFtZSBvciBhbnkgW1tBZGRyZXNzYWJsZV1dLCBzdWNoIGFzXG4gICAgICogIGFub3RoZXIgY29udHJhY3QuIFRvIGdldCB0aGUgcmVzb3ZsZWQgYWRkcmVzcywgdXNlIHRoZSBgYGdldEFkZHJlc3NgYFxuICAgICAqICBtZXRob2QuXG4gICAgICovXG4gICAgdGFyZ2V0O1xuICAgIC8qKlxuICAgICAqICBUaGUgY29udHJhY3QgSW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGludGVyZmFjZTtcbiAgICAvKipcbiAgICAgKiAgVGhlIGNvbm5lY3RlZCBydW5uZXIuIFRoaXMgaXMgZ2VuZXJhbGx5IGEgW1tQcm92aWRlcl1dIG9yIGFcbiAgICAgKiAgW1tTaWduZXJdXSwgd2hpY2ggZGljdGF0ZXMgd2hhdCBvcGVyYXRpb25zIGFyZSBzdXBwb3J0ZWQuXG4gICAgICpcbiAgICAgKiAgRm9yIGV4YW1wbGUsIGEgKipDb250cmFjdCoqIGNvbm5lY3RlZCB0byBhIFtbUHJvdmlkZXJdXSBtYXlcbiAgICAgKiAgb25seSBleGVjdXRlIHJlYWQtb25seSBvcGVyYXRpb25zLlxuICAgICAqL1xuICAgIHJ1bm5lcjtcbiAgICAvKipcbiAgICAgKiAgQWxsIHRoZSBFdmVudHMgYXZhaWxhYmxlIG9uIHRoaXMgY29udHJhY3QuXG4gICAgICovXG4gICAgZmlsdGVycztcbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgW2ludGVybmFsXTtcbiAgICAvKipcbiAgICAgKiAgVGhlIGZhbGxiYWNrIG9yIHJlY2VpdmUgZnVuY3Rpb24gaWYgYW55LlxuICAgICAqL1xuICAgIGZhbGxiYWNrO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3IGNvbnRyYWN0IGNvbm5lY3RlZCB0byAlJXRhcmdldCUlIHdpdGggdGhlICUlYWJpJSUgYW5kXG4gICAgICogIG9wdGlvbmFsbHkgY29ubmVjdGVkIHRvIGEgJSVydW5uZXIlJSB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gYmVoYWxmXG4gICAgICogIG9mLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgYWJpLCBydW5uZXIsIF9kZXBsb3lUeCkge1xuICAgICAgICBhc3NlcnRBcmd1bWVudCh0eXBlb2YgKHRhcmdldCkgPT09IFwic3RyaW5nXCIgfHwgaXNBZGRyZXNzYWJsZSh0YXJnZXQpLCBcImludmFsaWQgdmFsdWUgZm9yIENvbnRyYWN0IHRhcmdldFwiLCBcInRhcmdldFwiLCB0YXJnZXQpO1xuICAgICAgICBpZiAocnVubmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJ1bm5lciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaWZhY2UgPSBJbnRlcmZhY2UuZnJvbShhYmkpO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgdGFyZ2V0LCBydW5uZXIsIGludGVyZmFjZTogaWZhY2UgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBpbnRlcm5hbCwgeyB2YWx1ZToge30gfSk7XG4gICAgICAgIGxldCBhZGRyUHJvbWlzZTtcbiAgICAgICAgbGV0IGFkZHIgPSBudWxsO1xuICAgICAgICBsZXQgZGVwbG95VHggPSBudWxsO1xuICAgICAgICBpZiAoX2RlcGxveVR4KSB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGdldFByb3ZpZGVyKHJ1bm5lcik7XG4gICAgICAgICAgICAvLyBAVE9ETzogdGhlIHByb3ZpZGVyIGNhbiBiZSBudWxsOyBtYWtlIGEgY3VzdG9tIGR1bW15IHByb3ZpZGVyIHRoYXQgd2lsbCB0aHJvdyBhXG4gICAgICAgICAgICAvLyBtZWFuaW5nZnVsIGVycm9yXG4gICAgICAgICAgICBkZXBsb3lUeCA9IG5ldyBDb250cmFjdFRyYW5zYWN0aW9uUmVzcG9uc2UodGhpcy5pbnRlcmZhY2UsIHByb3ZpZGVyLCBfZGVwbG95VHgpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzdWJzID0gbmV3IE1hcCgpO1xuICAgICAgICAvLyBSZXNvbHZlIHRoZSB0YXJnZXQgYXMgdGhlIGFkZHJlc3NcbiAgICAgICAgaWYgKHR5cGVvZiAodGFyZ2V0KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKGlzSGV4U3RyaW5nKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICBhZGRyID0gdGFyZ2V0O1xuICAgICAgICAgICAgICAgIGFkZHJQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlciA9IGdldFJ1bm5lcihydW5uZXIsIFwicmVzb2x2ZU5hbWVcIik7XG4gICAgICAgICAgICAgICAgaWYgKCFjYW5SZXNvbHZlKHJlc29sdmVyKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBtYWtlRXJyb3IoXCJjb250cmFjdCBydW5uZXIgZG9lcyBub3Qgc3VwcG9ydCBuYW1lIHJlc29sdXRpb25cIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcInJlc29sdmVOYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFkZHJQcm9taXNlID0gcmVzb2x2ZXIucmVzb2x2ZU5hbWUodGFyZ2V0KS50aGVuKChhZGRyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGRyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG1ha2VFcnJvcihcImFuIEVOUyBuYW1lIHVzZWQgZm9yIGEgY29udHJhY3QgdGFyZ2V0IG11c3QgYmUgY29ycmVjdGx5IGNvbmZpZ3VyZWRcIiwgXCJVTkNPTkZJR1VSRURfTkFNRVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRhcmdldFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZ2V0SW50ZXJuYWwodGhpcykuYWRkciA9IGFkZHI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhZGRyO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYWRkclByb21pc2UgPSB0YXJnZXQuZ2V0QWRkcmVzcygpLnRoZW4oKGFkZHIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYWRkciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRPRE9cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGdldEludGVybmFsKHRoaXMpLmFkZHIgPSBhZGRyO1xuICAgICAgICAgICAgICAgIHJldHVybiBhZGRyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IG91ciBwcml2YXRlIHZhbHVlc1xuICAgICAgICBzZXRJbnRlcm5hbCh0aGlzLCB7IGFkZHJQcm9taXNlLCBhZGRyLCBkZXBsb3lUeCwgc3VicyB9KTtcbiAgICAgICAgLy8gQWRkIHRoZSBldmVudCBmaWx0ZXJzXG4gICAgICAgIGNvbnN0IGZpbHRlcnMgPSBuZXcgUHJveHkoe30sIHtcbiAgICAgICAgICAgIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBQYXNzIGltcG9ydGFudCBjaGVja3MgKGxpa2UgYHRoZW5gIGZvciBQcm9taXNlKSB0aHJvdWdoXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAocHJvcCkgPT09IFwic3ltYm9sXCIgfHwgcGFzc1Byb3BlcnRpZXMuaW5kZXhPZihwcm9wKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RXZlbnQocHJvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRXJyb3IoZXJyb3IsIFwiSU5WQUxJRF9BUkdVTUVOVFwiKSB8fCBlcnJvci5hcmd1bWVudCAhPT0gXCJrZXlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXM6ICh0YXJnZXQsIHByb3ApID0+IHtcbiAgICAgICAgICAgICAgICAvLyBQYXNzIGltcG9ydGFudCBjaGVja3MgKGxpa2UgYHRoZW5gIGZvciBQcm9taXNlKSB0aHJvdWdoXG4gICAgICAgICAgICAgICAgaWYgKHBhc3NQcm9wZXJ0aWVzLmluZGV4T2YocHJvcCkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcCkgfHwgdGhpcy5pbnRlcmZhY2UuaGFzRXZlbnQoU3RyaW5nKHByb3ApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBmaWx0ZXJzIH0pO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgICAgIGZhbGxiYWNrOiAoKGlmYWNlLnJlY2VpdmUgfHwgaWZhY2UuZmFsbGJhY2spID8gKGJ1aWxkV3JhcHBlZEZhbGxiYWNrKHRoaXMpKSA6IG51bGwpXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBSZXR1cm4gYSBQcm94eSB0aGF0IHdpbGwgcmVzcG9uZCB0byBmdW5jdGlvbnNcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7XG4gICAgICAgICAgICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAocHJvcCkgPT09IFwic3ltYm9sXCIgfHwgcHJvcCBpbiB0YXJnZXQgfHwgcGFzc1Byb3BlcnRpZXMuaW5kZXhPZihwcm9wKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVW5kZWZpbmVkIHByb3BlcnRpZXMgc2hvdWxkIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmdldEZ1bmN0aW9uKHByb3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0Vycm9yKGVycm9yLCBcIklOVkFMSURfQVJHVU1FTlRcIikgfHwgZXJyb3IuYXJndW1lbnQgIT09IFwia2V5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFzOiAodGFyZ2V0LCBwcm9wKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAocHJvcCkgPT09IFwic3ltYm9sXCIgfHwgcHJvcCBpbiB0YXJnZXQgfHwgcGFzc1Byb3BlcnRpZXMuaW5kZXhPZihwcm9wKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmludGVyZmFjZS5oYXNGdW5jdGlvbihwcm9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgQ29udHJhY3QgaW5zdGFuY2Ugd2l0aCB0aGUgc2FtZSB0YXJnZXQgYW5kIEFCSSwgYnV0XG4gICAgICogIGEgZGlmZmVyZW50ICUlcnVubmVyJSUuXG4gICAgICovXG4gICAgY29ubmVjdChydW5uZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCYXNlQ29udHJhY3QodGhpcy50YXJnZXQsIHRoaXMuaW50ZXJmYWNlLCBydW5uZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IENvbnRyYWN0IGluc3RhbmNlIHdpdGggdGhlIHNhbWUgQUJJIGFuZCBydW5uZXIsIGJ1dFxuICAgICAqICBhIGRpZmZlcmVudCAlJXRhcmdldCUlLlxuICAgICAqL1xuICAgIGF0dGFjaCh0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCYXNlQ29udHJhY3QodGFyZ2V0LCB0aGlzLmludGVyZmFjZSwgdGhpcy5ydW5uZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIHRoZSByZXNvbHZlZCBhZGRyZXNzIG9mIHRoaXMgQ29udHJhY3QuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QWRkcmVzcygpIHsgcmV0dXJuIGF3YWl0IGdldEludGVybmFsKHRoaXMpLmFkZHJQcm9taXNlOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiB0aGUgZGVwbG95ZWQgYnl0ZWNvZGUgb3IgbnVsbCBpZiBubyBieXRlY29kZSBpcyBmb3VuZC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXREZXBsb3llZENvZGUoKSB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gZ2V0UHJvdmlkZXIodGhpcy5ydW5uZXIpO1xuICAgICAgICBhc3NlcnQocHJvdmlkZXIsIFwicnVubmVyIGRvZXMgbm90IHN1cHBvcnQgLnByb3ZpZGVyXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcImdldERlcGxveWVkQ29kZVwiIH0pO1xuICAgICAgICBjb25zdCBjb2RlID0gYXdhaXQgcHJvdmlkZXIuZ2V0Q29kZShhd2FpdCB0aGlzLmdldEFkZHJlc3MoKSk7XG4gICAgICAgIGlmIChjb2RlID09PSBcIjB4XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2RlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVzb2x2ZSB0byB0aGlzIENvbnRyYWN0IG9uY2UgdGhlIGJ5dGVjb2RlIGhhcyBiZWVuIGRlcGxveWVkLCBvclxuICAgICAqICByZXNvbHZlIGltbWVkaWF0ZWx5IGlmIGFscmVhZHkgZGVwbG95ZWQuXG4gICAgICovXG4gICAgYXN5bmMgd2FpdEZvckRlcGxveW1lbnQoKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgdGhlIGRlcGxveWVtZW50IHRyYW5zYWN0aW9uOyBqdXN0IHVzZSB0aGF0ICh0aHJvd3MgaWYgZGVwbG95ZW1lbnQgZmFpbHMpXG4gICAgICAgIGNvbnN0IGRlcGxveVR4ID0gdGhpcy5kZXBsb3ltZW50VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgaWYgKGRlcGxveVR4KSB7XG4gICAgICAgICAgICBhd2FpdCBkZXBsb3lUeC53YWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBmb3IgY29kZVxuICAgICAgICBjb25zdCBjb2RlID0gYXdhaXQgdGhpcy5nZXREZXBsb3llZENvZGUoKTtcbiAgICAgICAgaWYgKGNvZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGNhbiBzdWJzY3JpYmUgdG8gYSBwcm92aWRlciBldmVudFxuICAgICAgICBjb25zdCBwcm92aWRlciA9IGdldFByb3ZpZGVyKHRoaXMucnVubmVyKTtcbiAgICAgICAgYXNzZXJ0KHByb3ZpZGVyICE9IG51bGwsIFwiY29udHJhY3QgcnVubmVyIGRvZXMgbm90IHN1cHBvcnQgLnByb3ZpZGVyXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcIndhaXRGb3JEZXBsb3ltZW50XCIgfSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGVja0NvZGUgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29kZSA9IGF3YWl0IHRoaXMuZ2V0RGVwbG95ZWRDb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyLm9uY2UoXCJibG9ja1wiLCBjaGVja0NvZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2hlY2tDb2RlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIHRoZSB0cmFuc2FjdGlvbiB1c2VkIHRvIGRlcGxveSB0aGlzIGNvbnRyYWN0LlxuICAgICAqXG4gICAgICogIFRoaXMgaXMgb25seSBhdmFpbGFibGUgaWYgdGhpcyBpbnN0YW5jZSB3YXMgcmV0dXJuZWQgZnJvbSBhXG4gICAgICogIFtbQ29udHJhY3RGYWN0b3J5XV0uXG4gICAgICovXG4gICAgZGVwbG95bWVudFRyYW5zYWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWwodGhpcykuZGVwbG95VHg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gdGhlIGZ1bmN0aW9uIGZvciBhIGdpdmVuIG5hbWUuIFRoaXMgaXMgdXNlZnVsIHdoZW4gYSBjb250cmFjdFxuICAgICAqICBtZXRob2QgbmFtZSBjb25mbGljdHMgd2l0aCBhIEphdmFTY3JpcHQgbmFtZSBzdWNoIGFzIGBgcHJvdG90eXBlYGAgb3JcbiAgICAgKiAgd2hlbiB1c2luZyBhIENvbnRyYWN0IHByb2dyYW1hdGljYWxseS5cbiAgICAgKi9cbiAgICBnZXRGdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAoa2V5KSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAga2V5ID0ga2V5LmZvcm1hdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZ1bmMgPSBidWlsZFdyYXBwZWRNZXRob2QodGhpcywga2V5KTtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gdGhlIGV2ZW50IGZvciBhIGdpdmVuIG5hbWUuIFRoaXMgaXMgdXNlZnVsIHdoZW4gYSBjb250cmFjdFxuICAgICAqICBldmVudCBuYW1lIGNvbmZsaWN0cyB3aXRoIGEgSmF2YVNjcmlwdCBuYW1lIHN1Y2ggYXMgYGBwcm90b3R5cGVgYCBvclxuICAgICAqICB3aGVuIHVzaW5nIGEgQ29udHJhY3QgcHJvZ3JhbWF0aWNhbGx5LlxuICAgICAqL1xuICAgIGdldEV2ZW50KGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIChrZXkpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBrZXkgPSBrZXkuZm9ybWF0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1aWxkV3JhcHBlZEV2ZW50KHRoaXMsIGtleSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBAX2lnbm9yZTpcbiAgICAgKi9cbiAgICBhc3luYyBxdWVyeVRyYW5zYWN0aW9uKGhhc2gpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQFRPRE9cIik7XG4gICAgfVxuICAgIC8qXG4gICAgLy8gQFRPRE86IHRoaXMgaXMgYSBub24tYmFja3dhcmRzIGNvbXBhdGlibGUgY2hhbmdlLCBidXQgd2lsbCBiZSBhZGRlZFxuICAgIC8vICAgICAgICBpbiB2NyBhbmQgaW4gYSBwb3RlbnRpYWwgU21hcnRDb250cmFjdCBjbGFzcyBpbiBhbiB1cGNvbWluZ1xuICAgIC8vICAgICAgICB2NiByZWxlYXNlXG4gICAgYXN5bmMgZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KGhhc2g6IHN0cmluZyk6IFByb21pc2U8bnVsbCB8IENvbnRyYWN0VHJhbnNhY3Rpb25SZWNlaXB0PiB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gZ2V0UHJvdmlkZXIodGhpcy5ydW5uZXIpO1xuICAgICAgICBhc3NlcnQocHJvdmlkZXIsIFwiY29udHJhY3QgcnVubmVyIGRvZXMgbm90IGhhdmUgYSBwcm92aWRlclwiLFxuICAgICAgICAgICAgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IFwicXVlcnlUcmFuc2FjdGlvblwiIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCBwcm92aWRlci5nZXRUcmFuc2FjdGlvblJlY2VpcHQoaGFzaCk7XG4gICAgICAgIGlmIChyZWNlaXB0ID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICByZXR1cm4gbmV3IENvbnRyYWN0VHJhbnNhY3Rpb25SZWNlaXB0KHRoaXMuaW50ZXJmYWNlLCBwcm92aWRlciwgcmVjZWlwdCk7XG4gICAgfVxuICAgICovXG4gICAgLyoqXG4gICAgICogIFByb3ZpZGUgaGlzdG9yaWMgYWNjZXNzIHRvIGV2ZW50IGRhdGEgZm9yICUlZXZlbnQlJSBpbiB0aGUgcmFuZ2VcbiAgICAgKiAgJSVmcm9tQmxvY2slJSAoZGVmYXVsdDogYGAwYGApIHRvICUldG9CbG9jayUlIChkZWZhdWx0OiBgYFwibGF0ZXN0XCJgYClcbiAgICAgKiAgaW5jbHVzaXZlLlxuICAgICAqL1xuICAgIGFzeW5jIHF1ZXJ5RmlsdGVyKGV2ZW50LCBmcm9tQmxvY2ssIHRvQmxvY2spIHtcbiAgICAgICAgaWYgKGZyb21CbG9jayA9PSBudWxsKSB7XG4gICAgICAgICAgICBmcm9tQmxvY2sgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b0Jsb2NrID09IG51bGwpIHtcbiAgICAgICAgICAgIHRvQmxvY2sgPSBcImxhdGVzdFwiO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgYWRkciwgYWRkclByb21pc2UgfSA9IGdldEludGVybmFsKHRoaXMpO1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gKGFkZHIgPyBhZGRyIDogKGF3YWl0IGFkZHJQcm9taXNlKSk7XG4gICAgICAgIGNvbnN0IHsgZnJhZ21lbnQsIHRvcGljcyB9ID0gYXdhaXQgZ2V0U3ViSW5mbyh0aGlzLCBldmVudCk7XG4gICAgICAgIGNvbnN0IGZpbHRlciA9IHsgYWRkcmVzcywgdG9waWNzLCBmcm9tQmxvY2ssIHRvQmxvY2sgfTtcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBnZXRQcm92aWRlcih0aGlzLnJ1bm5lcik7XG4gICAgICAgIGFzc2VydChwcm92aWRlciwgXCJjb250cmFjdCBydW5uZXIgZG9lcyBub3QgaGF2ZSBhIHByb3ZpZGVyXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcInF1ZXJ5RmlsdGVyXCIgfSk7XG4gICAgICAgIHJldHVybiAoYXdhaXQgcHJvdmlkZXIuZ2V0TG9ncyhmaWx0ZXIpKS5tYXAoKGxvZykgPT4ge1xuICAgICAgICAgICAgbGV0IGZvdW5kRnJhZ21lbnQgPSBmcmFnbWVudDtcbiAgICAgICAgICAgIGlmIChmb3VuZEZyYWdtZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZEZyYWdtZW50ID0gdGhpcy5pbnRlcmZhY2UuZ2V0RXZlbnQobG9nLnRvcGljc1swXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm91bmRGcmFnbWVudCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXZlbnRMb2cobG9nLCB0aGlzLmludGVyZmFjZSwgZm91bmRGcmFnbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVuZGVjb2RlZEV2ZW50TG9nKGxvZywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgTG9nKGxvZywgcHJvdmlkZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEFkZCBhbiBldmVudCAlJWxpc3RlbmVyJSUgZm9yIHRoZSAlJWV2ZW50JSUuXG4gICAgICovXG4gICAgYXN5bmMgb24oZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IHN1YiA9IGF3YWl0IGdldFN1Yih0aGlzLCBcIm9uXCIsIGV2ZW50KTtcbiAgICAgICAgc3ViLmxpc3RlbmVycy5wdXNoKHsgbGlzdGVuZXIsIG9uY2U6IGZhbHNlIH0pO1xuICAgICAgICBzdWIuc3RhcnQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBBZGQgYW4gZXZlbnQgJSVsaXN0ZW5lciUlIGZvciB0aGUgJSVldmVudCUlLCBidXQgcmVtb3ZlIHRoZSBsaXN0ZW5lclxuICAgICAqICBhZnRlciBpdCBpcyBmaXJlZCBvbmNlLlxuICAgICAqL1xuICAgIGFzeW5jIG9uY2UoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IHN1YiA9IGF3YWl0IGdldFN1Yih0aGlzLCBcIm9uY2VcIiwgZXZlbnQpO1xuICAgICAgICBzdWIubGlzdGVuZXJzLnB1c2goeyBsaXN0ZW5lciwgb25jZTogdHJ1ZSB9KTtcbiAgICAgICAgc3ViLnN0YXJ0KCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgRW1pdCBhbiAlJWV2ZW50JSUgY2FsbGluZyBhbGwgbGlzdGVuZXJzIHdpdGggJSVhcmdzJSUuXG4gICAgICpcbiAgICAgKiAgUmVzb2x2ZXMgdG8gYGB0cnVlYGAgaWYgYW55IGxpc3RlbmVycyB3ZXJlIGNhbGxlZC5cbiAgICAgKi9cbiAgICBhc3luYyBlbWl0KGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBlbWl0KHRoaXMsIGV2ZW50LCBhcmdzLCBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc29sdmVzIHRvIHRoZSBudW1iZXIgb2YgbGlzdGVuZXJzIG9mICUlZXZlbnQlJSBvciB0aGUgdG90YWwgbnVtYmVyXG4gICAgICogIG9mIGxpc3RlbmVycyBpZiB1bnNwZWNpZmllZC5cbiAgICAgKi9cbiAgICBhc3luYyBsaXN0ZW5lckNvdW50KGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgY29uc3Qgc3ViID0gYXdhaXQgaGFzU3ViKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgICAgIGlmICghc3ViKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3ViLmxpc3RlbmVycy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBzdWJzIH0gPSBnZXRJbnRlcm5hbCh0aGlzKTtcbiAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgZm9yIChjb25zdCB7IGxpc3RlbmVycyB9IG9mIHN1YnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHRvdGFsICs9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVzb2x2ZXMgdG8gdGhlIGxpc3RlbmVycyBzdWJzY3JpYmVkIHRvICUlZXZlbnQlJSBvciBhbGwgbGlzdGVuZXJzXG4gICAgICogIGlmIHVuc3BlY2lmaWVkLlxuICAgICAqL1xuICAgIGFzeW5jIGxpc3RlbmVycyhldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YiA9IGF3YWl0IGhhc1N1Yih0aGlzLCBldmVudCk7XG4gICAgICAgICAgICBpZiAoIXN1Yikge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdWIubGlzdGVuZXJzLm1hcCgoeyBsaXN0ZW5lciB9KSA9PiBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBzdWJzIH0gPSBnZXRJbnRlcm5hbCh0aGlzKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHsgbGlzdGVuZXJzIH0gb2Ygc3Vicy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChsaXN0ZW5lcnMubWFwKCh7IGxpc3RlbmVyIH0pID0+IGxpc3RlbmVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlbW92ZSB0aGUgJSVsaXN0ZW5lciUlIGZyb20gdGhlIGxpc3RlbmVycyBmb3IgJSVldmVudCUlIG9yIHJlbW92ZVxuICAgICAqICBhbGwgbGlzdGVuZXJzIGlmIHVuc3BlY2lmaWVkLlxuICAgICAqL1xuICAgIGFzeW5jIG9mZihldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgY29uc3Qgc3ViID0gYXdhaXQgaGFzU3ViKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgaWYgKCFzdWIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBzdWIubGlzdGVuZXJzLm1hcCgoeyBsaXN0ZW5lciB9KSA9PiBsaXN0ZW5lcikuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIHN1Yi5saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobGlzdGVuZXIgPT0gbnVsbCB8fCBzdWIubGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgc3ViLnN0b3AoKTtcbiAgICAgICAgICAgIGdldEludGVybmFsKHRoaXMpLnN1YnMuZGVsZXRlKHN1Yi50YWcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVtb3ZlIGFsbCB0aGUgbGlzdGVuZXJzIGZvciAlJWV2ZW50JSUgb3IgcmVtb3ZlIGFsbCBsaXN0ZW5lcnMgaWZcbiAgICAgKiAgdW5zcGVjaWZpZWQuXG4gICAgICovXG4gICAgYXN5bmMgcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgY29uc3Qgc3ViID0gYXdhaXQgaGFzU3ViKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgICAgIGlmICghc3ViKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWIuc3RvcCgpO1xuICAgICAgICAgICAgZ2V0SW50ZXJuYWwodGhpcykuc3Vicy5kZWxldGUoc3ViLnRhZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB7IHN1YnMgfSA9IGdldEludGVybmFsKHRoaXMpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB7IHRhZywgc3RvcCB9IG9mIHN1YnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICBzdG9wKCk7XG4gICAgICAgICAgICAgICAgc3Vicy5kZWxldGUodGFnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEFsaWFzIGZvciBbb25dLlxuICAgICAqL1xuICAgIGFzeW5jIGFkZExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5vbihldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQWxpYXMgZm9yIFtvZmZdLlxuICAgICAqL1xuICAgIGFzeW5jIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5vZmYoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIENyZWF0ZSBhIG5ldyBDbGFzcyBmb3IgdGhlICUlYWJpJSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ1aWxkQ2xhc3MoYWJpKSB7XG4gICAgICAgIGNsYXNzIEN1c3RvbUNvbnRyYWN0IGV4dGVuZHMgQmFzZUNvbnRyYWN0IHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKGFkZHJlc3MsIHJ1bm5lciA9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzdXBlcihhZGRyZXNzLCBhYmksIHJ1bm5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEN1c3RvbUNvbnRyYWN0O1xuICAgIH1cbiAgICA7XG4gICAgLyoqXG4gICAgICogIENyZWF0ZSBhIG5ldyBCYXNlQ29udHJhY3Qgd2l0aCBhIHNwZWNpZmllZCBJbnRlcmZhY2UuXG4gICAgICovXG4gICAgc3RhdGljIGZyb20odGFyZ2V0LCBhYmksIHJ1bm5lcikge1xuICAgICAgICBpZiAocnVubmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJ1bm5lciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udHJhY3QgPSBuZXcgdGhpcyh0YXJnZXQsIGFiaSwgcnVubmVyKTtcbiAgICAgICAgcmV0dXJuIGNvbnRyYWN0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIF9Db250cmFjdEJhc2UoKSB7XG4gICAgcmV0dXJuIEJhc2VDb250cmFjdDtcbn1cbi8qKlxuICogIEEgW1tCYXNlQ29udHJhY3RdXSB3aXRoIG5vIHR5cGUgZ3VhcmRzIG9uIGl0cyBtZXRob2RzIG9yIGV2ZW50cy5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRyYWN0IGV4dGVuZHMgX0NvbnRyYWN0QmFzZSgpIHtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRyYWN0LmpzLm1hcCJdLCJuYW1lcyI6WyJJbnRlcmZhY2UiLCJUeXBlZCIsImlzQWRkcmVzc2FibGUiLCJyZXNvbHZlQWRkcmVzcyIsImNvcHlSZXF1ZXN0IiwiTG9nIiwiZGVmaW5lUHJvcGVydGllcyIsImdldEJpZ0ludCIsImlzQ2FsbEV4Y2VwdGlvbiIsImlzSGV4U3RyaW5nIiwicmVzb2x2ZVByb3BlcnRpZXMiLCJpc0Vycm9yIiwibWFrZUVycm9yIiwiYXNzZXJ0IiwiYXNzZXJ0QXJndW1lbnQiLCJDb250cmFjdEV2ZW50UGF5bG9hZCIsIkNvbnRyYWN0VW5rbm93bkV2ZW50UGF5bG9hZCIsIkNvbnRyYWN0VHJhbnNhY3Rpb25SZXNwb25zZSIsIkV2ZW50TG9nIiwiVW5kZWNvZGVkRXZlbnRMb2ciLCJCTl8wIiwiQmlnSW50IiwiY2FuQ2FsbCIsInZhbHVlIiwiY2FsbCIsImNhbkVzdGltYXRlIiwiZXN0aW1hdGVHYXMiLCJjYW5SZXNvbHZlIiwicmVzb2x2ZU5hbWUiLCJjYW5TZW5kIiwic2VuZFRyYW5zYWN0aW9uIiwiZ2V0UmVzb2x2ZXIiLCJwcm92aWRlciIsInVuZGVmaW5lZCIsIlByZXBhcmVkVG9waWNGaWx0ZXIiLCJnZXRUb3BpY0ZpbHRlciIsImZpbHRlciIsImNvbnN0cnVjdG9yIiwiY29udHJhY3QiLCJmcmFnbWVudCIsImFyZ3MiLCJpbnB1dHMiLCJsZW5ndGgiLCJFcnJvciIsInJ1bm5lciIsImdldFJ1bm5lciIsInJlc29sdmVyIiwicmVzb2x2ZWRBcmdzIiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsInBhcmFtIiwiaW5kZXgiLCJhcmciLCJ3YWxrQXN5bmMiLCJ0eXBlIiwiQXJyYXkiLCJpc0FycmF5IiwidiIsImludGVyZmFjZSIsImVuY29kZUZpbHRlclRvcGljcyIsImZlYXR1cmUiLCJnZXRQcm92aWRlciIsImNvcHlPdmVycmlkZXMiLCJhbGxvd2VkIiwiX292ZXJyaWRlcyIsImRlcmVmZXJlbmNlIiwib3ZlcnJpZGVzIiwidG8iLCJpbmRleE9mIiwiZGF0YSIsImZyb20iLCJyZXNvbHZlQXJncyIsIl9ydW5uZXIiLCJidWlsZFdyYXBwZWRGYWxsYmFjayIsInBvcHVsYXRlVHJhbnNhY3Rpb24iLCJ0eCIsImdldEFkZHJlc3MiLCJpZmFjZSIsIm5vVmFsdWUiLCJub0RhdGEiLCJmYWxsYmFjayIsInBheWFibGUiLCJyZWNlaXZlIiwic3RhdGljQ2FsbCIsIm9wZXJhdGlvbiIsImVycm9yIiwic2VuZCIsIm1ldGhvZCIsIl9jb250cmFjdCIsImJ1aWxkV3JhcHBlZE1ldGhvZCIsImtleSIsImdldEZyYWdtZW50IiwiZ2V0RnVuY3Rpb24iLCJpbmZvIiwicG9wIiwiT2JqZWN0IiwiYXNzaWduIiwiZW5jb2RlRnVuY3Rpb25EYXRhIiwicmVzdWx0Iiwic3RhdGljQ2FsbFJlc3VsdCIsImRlY29kZUZ1bmN0aW9uUmVzdWx0IiwiY29uc3RhbnQiLCJuYW1lIiwiZ2V0RnVuY3Rpb25OYW1lIiwiX2tleSIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImJ1aWxkV3JhcHBlZEV2ZW50IiwiZ2V0RXZlbnQiLCJnZXRFdmVudE5hbWUiLCJpbnRlcm5hbCIsIlN5bWJvbCIsImZvciIsImludGVybmFsVmFsdWVzIiwiV2Vha01hcCIsInNldEludGVybmFsIiwidmFsdWVzIiwic2V0IiwiZ2V0SW50ZXJuYWwiLCJpc0RlZmVycmVkIiwiZ2V0U3ViSW5mbyIsImV2ZW50IiwidG9waWNzIiwidG9waWNIYXNoaWZ5IiwidG9waWNIYXNoIiwiZSIsInQiLCJpdGVtcyIsIlNldCIsInRvTG93ZXJDYXNlIiwic29ydCIsInRhZyIsImpvaW4iLCJoYXNTdWIiLCJzdWJzIiwiZ2V0U3ViIiwiYWRkciIsInN1YiIsImFkZHJlc3MiLCJsaXN0ZW5lciIsImxvZyIsImZvdW5kRnJhZ21lbnQiLCJfZm91bmRGcmFnbWVudCIsImRlY29kZUV2ZW50TG9nIiwiZW1pdCIsInN0YXJ0aW5nIiwic3RhcnQiLCJwdXNoIiwib24iLCJzdG9wIiwic3RhcnRlZCIsIm9mZiIsImxpc3RlbmVycyIsImxhc3RFbWl0IiwicmVzb2x2ZSIsIl9lbWl0IiwicGF5bG9hZEZ1bmMiLCJjb3VudCIsIm9uY2UiLCJwYXNzQXJncyIsImRlbGV0ZSIsInJlc3VsdFByb21pc2UiLCJwYXNzUHJvcGVydGllcyIsIkJhc2VDb250cmFjdCIsImNvbm5lY3QiLCJ0YXJnZXQiLCJhdHRhY2giLCJhZGRyUHJvbWlzZSIsImdldERlcGxveWVkQ29kZSIsImNvZGUiLCJnZXRDb2RlIiwid2FpdEZvckRlcGxveW1lbnQiLCJkZXBsb3lUeCIsImRlcGxveW1lbnRUcmFuc2FjdGlvbiIsIndhaXQiLCJyZWplY3QiLCJjaGVja0NvZGUiLCJmb3JtYXQiLCJmdW5jIiwicXVlcnlUcmFuc2FjdGlvbiIsImhhc2giLCJxdWVyeUZpbHRlciIsImZyb21CbG9jayIsInRvQmxvY2siLCJnZXRMb2dzIiwibGlzdGVuZXJDb3VudCIsInRvdGFsIiwiY29uY2F0Iiwic3BsaWNlIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImJ1aWxkQ2xhc3MiLCJhYmkiLCJDdXN0b21Db250cmFjdCIsIl9kZXBsb3lUeCIsIk1hcCIsInRoZW4iLCJmaWx0ZXJzIiwiUHJveHkiLCJwcm9wIiwicmVjZWl2ZXIiLCJSZWZsZWN0IiwiYXJndW1lbnQiLCJoYXMiLCJoYXNFdmVudCIsIlN0cmluZyIsImhhc0Z1bmN0aW9uIiwiX0NvbnRyYWN0QmFzZSIsIkNvbnRyYWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/contract/contract.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/contract/factory.js":
/*!**********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/contract/factory.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContractFactory: function() { return /* binding */ ContractFactory; }\n/* harmony export */ });\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../abi/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/interface.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/contract-address.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _contract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contract.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/contract/contract.js\");\n\n\n\n\n// A = Arguments to the constructor\n// I = Interface of deployed contracts\n/**\n *  A **ContractFactory** is used to deploy a Contract to the blockchain.\n */ class ContractFactory {\n    attach(target) {\n        return new _contract_js__WEBPACK_IMPORTED_MODULE_0__.BaseContract(target, this.interface, this.runner);\n    }\n    /**\n     *  Resolves to the transaction to deploy the contract, passing %%args%%\n     *  into the constructor.\n     */ async getDeployTransaction() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        let overrides = {};\n        const fragment = this.interface.deploy;\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await (0,_contract_js__WEBPACK_IMPORTED_MODULE_0__.copyOverrides)(args.pop());\n        }\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"incorrect number of arguments to constructor\");\n        }\n        const resolvedArgs = await (0,_contract_js__WEBPACK_IMPORTED_MODULE_0__.resolveArgs)(this.runner, fragment.inputs, args);\n        const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.concat)([\n            this.bytecode,\n            this.interface.encodeDeploy(resolvedArgs)\n        ]);\n        return Object.assign({}, overrides, {\n            data\n        });\n    }\n    /**\n     *  Resolves to the Contract deployed by passing %%args%% into the\n     *  constructor.\n     *\n     *  This will resolve to the Contract before it has been deployed to the\n     *  network, so the [[BaseContract-waitForDeployment]] should be used before\n     *  sending any transactions to it.\n     */ async deploy() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const tx = await this.getDeployTransaction(...args);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.runner && typeof this.runner.sendTransaction === \"function\", \"factory runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"sendTransaction\"\n        });\n        const sentTx = await this.runner.sendTransaction(tx);\n        const address = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_3__.getCreateAddress)(sentTx);\n        return new _contract_js__WEBPACK_IMPORTED_MODULE_0__.BaseContract(address, this.interface, this.runner, sentTx);\n    }\n    /**\n     *  Return a new **ContractFactory** with the same ABI and bytecode,\n     *  but connected to %%runner%%.\n     */ connect(runner) {\n        return new ContractFactory(this.interface, this.bytecode, runner);\n    }\n    /**\n     *  Create a new **ContractFactory** from the standard Solidity JSON output.\n     */ static fromSolidity(output, runner) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(output != null, \"bad compiler output\", \"output\", output);\n        if (typeof output === \"string\") {\n            output = JSON.parse(output);\n        }\n        const abi = output.abi;\n        let bytecode = \"\";\n        if (output.bytecode) {\n            bytecode = output.bytecode;\n        } else if (output.evm && output.evm.bytecode) {\n            bytecode = output.evm.bytecode;\n        }\n        return new this(abi, bytecode, runner);\n    }\n    /**\n     *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,\n     *  optionally connected to %%runner%%.\n     *\n     *  The %%bytecode%% may be the ``bytecode`` property within the\n     *  standard Solidity JSON output.\n     */ constructor(abi, bytecode, runner){\n        const iface = _abi_index_js__WEBPACK_IMPORTED_MODULE_4__.Interface.from(abi);\n        // Dereference Solidity bytecode objects and allow a missing `0x`-prefix\n        if (bytecode instanceof Uint8Array) {\n            bytecode = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(bytecode));\n        } else {\n            if (typeof bytecode === \"object\") {\n                bytecode = bytecode.object;\n            }\n            if (!bytecode.startsWith(\"0x\")) {\n                bytecode = \"0x\" + bytecode;\n            }\n            bytecode = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(bytecode));\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.defineProperties)(this, {\n            bytecode,\n            interface: iface,\n            runner: runner || null\n        });\n    }\n} //# sourceMappingURL=factory.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/contract/factory.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/contract/wrappers.js":
/*!***********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/contract/wrappers.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContractEventPayload: function() { return /* binding */ ContractEventPayload; },\n/* harmony export */   ContractTransactionReceipt: function() { return /* binding */ ContractTransactionReceipt; },\n/* harmony export */   ContractTransactionResponse: function() { return /* binding */ ContractTransactionResponse; },\n/* harmony export */   ContractUnknownEventPayload: function() { return /* binding */ ContractUnknownEventPayload; },\n/* harmony export */   EventLog: function() { return /* binding */ EventLog; },\n/* harmony export */   UndecodedEventLog: function() { return /* binding */ UndecodedEventLog; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _providers_provider_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../providers/provider.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/events.js\");\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\n\n\n\n\n\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */ class EventLog extends _providers_provider_js__WEBPACK_IMPORTED_MODULE_0__.Log {\n    /**\n     *  The name of the event.\n     */ get eventName() {\n        return this.fragment.name;\n    }\n    /**\n     *  The signature of the event.\n     */ get eventSignature() {\n        return this.fragment.format();\n    }\n    /**\n     * @_ignore:\n     */ constructor(log, iface, fragment){\n        super(log, log.provider);\n        const args = iface.decodeEventLog(fragment, log.data, log.topics);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n            args,\n            fragment,\n            interface: iface\n        });\n    }\n}\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */ class UndecodedEventLog extends _providers_provider_js__WEBPACK_IMPORTED_MODULE_0__.Log {\n    /**\n     * @_ignore:\n     */ constructor(log, error){\n        super(log, log.provider);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n            error\n        });\n    }\n}\nvar _iface = /*#__PURE__*/ new WeakMap();\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */ class ContractTransactionReceipt extends _providers_provider_js__WEBPACK_IMPORTED_MODULE_0__.TransactionReceipt {\n    /**\n     *  The parsed logs for any [[Log]] which has a matching event in the\n     *  Contract ABI.\n     */ get logs() {\n        return super.logs.map((log)=>{\n            const fragment = log.topics.length ? (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _iface).getEvent(log.topics[0]) : null;\n            if (fragment) {\n                try {\n                    return new EventLog(log, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _iface), fragment);\n                } catch (error) {\n                    return new UndecodedEventLog(log, error);\n                }\n            }\n            return log;\n        });\n    }\n    /**\n     *  @_ignore:\n     */ constructor(iface, provider, tx){\n        super(tx, provider);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _iface, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _iface, iface);\n    }\n}\nvar _iface1 = /*#__PURE__*/ new WeakMap();\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */ class ContractTransactionResponse extends _providers_provider_js__WEBPACK_IMPORTED_MODULE_0__.TransactionResponse {\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */ async wait(confirms, timeout) {\n        const receipt = await super.wait(confirms, timeout);\n        if (receipt == null) {\n            return null;\n        }\n        return new ContractTransactionReceipt((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _iface1), this.provider, receipt);\n    }\n    /**\n     *  @_ignore:\n     */ constructor(iface, provider, tx){\n        super(tx, provider);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _iface1, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _iface1, iface);\n    }\n}\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */ class ContractUnknownEventPayload extends _utils_index_js__WEBPACK_IMPORTED_MODULE_5__.EventPayload {\n    /**\n     *  Resolves to the block the event occured in.\n     */ async getBlock() {\n        return await this.log.getBlock();\n    }\n    /**\n     *  Resolves to the transaction the event occured in.\n     */ async getTransaction() {\n        return await this.log.getTransaction();\n    }\n    /**\n     *  Resolves to the transaction receipt the event occured in.\n     */ async getTransactionReceipt() {\n        return await this.log.getTransactionReceipt();\n    }\n    /**\n     *  @_event:\n     */ constructor(contract, listener, filter, log){\n        super(contract, listener, filter);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n            log\n        });\n    }\n}\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */ class ContractEventPayload extends ContractUnknownEventPayload {\n    /**\n     *  The event name.\n     */ get eventName() {\n        return this.fragment.name;\n    }\n    /**\n     *  The event signature.\n     */ get eventSignature() {\n        return this.fragment.format();\n    }\n    /**\n     *  @_ignore:\n     */ constructor(contract, listener, filter, fragment, _log){\n        super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n            args,\n            fragment\n        });\n    }\n} //# sourceMappingURL=wrappers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/contract/wrappers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/crypto-browser.js":
/*!***************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/crypto/crypto-browser.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHash: function() { return /* binding */ createHash; },\n/* harmony export */   createHmac: function() { return /* binding */ createHmac; },\n/* harmony export */   pbkdf2Sync: function() { return /* binding */ pbkdf2Sync; },\n/* harmony export */   randomBytes: function() { return /* binding */ randomBytes; }\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/pbkdf2 */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/pbkdf2.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha512 */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/sha512.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* Browser Crypto Shims */ \n\n\n\n\nfunction getGlobal() {\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (true) {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw new Error(\"unable to locate global object\");\n}\n;\nconst anyGlobal = getGlobal();\nconst crypto = anyGlobal.crypto || anyGlobal.msCrypto;\nfunction createHash(algo) {\n    switch(algo){\n        case \"sha256\":\n            return _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__.sha256.create();\n        case \"sha512\":\n            return _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512.create();\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(false, \"invalid hashing algorithm name\", \"algorithm\", algo);\n}\nfunction createHmac(_algo, key) {\n    const algo = {\n        sha256: _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__.sha256,\n        sha512: _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512\n    }[_algo];\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(algo != null, \"invalid hmac algorithm\", \"algorithm\", _algo);\n    return _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_3__.hmac.create(algo, key);\n}\nfunction pbkdf2Sync(password, salt, iterations, keylen, _algo) {\n    const algo = {\n        sha256: _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__.sha256,\n        sha512: _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512\n    }[_algo];\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(algo != null, \"invalid pbkdf2 algorithm\", \"algorithm\", _algo);\n    return (0,_noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_4__.pbkdf2)(algo, password, salt, {\n        c: iterations,\n        dkLen: keylen\n    });\n}\nfunction randomBytes(length) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(crypto != null, \"platform does not support secure random numbers\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"randomBytes\"\n    });\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(Number.isInteger(length) && length > 0 && length <= 1024, \"invalid length\", \"length\", length);\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return result;\n} //# sourceMappingURL=crypto-browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL2NyeXB0by1icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdCQUF3QixHQUNrQjtBQUNJO0FBQ0E7QUFDQTtBQUNhO0FBQzNELFNBQVNNO0lBQ0wsSUFBSSxPQUFPQyxTQUFTLGFBQWE7UUFDN0IsT0FBT0E7SUFDWDtJQUNBLElBQUksSUFBa0IsRUFBYTtRQUMvQixPQUFPQztJQUNYO0lBQ0EsSUFBSSxPQUFPQyxXQUFXLGFBQWE7UUFDL0IsT0FBT0E7SUFDWDtJQUNBLE1BQU0sSUFBSUMsTUFBTTtBQUNwQjs7QUFFQSxNQUFNQyxZQUFZTDtBQUNsQixNQUFNTSxTQUFTRCxVQUFVQyxNQUFNLElBQUlELFVBQVVFLFFBQVE7QUFDOUMsU0FBU0MsV0FBV0MsSUFBSTtJQUMzQixPQUFRQTtRQUNKLEtBQUs7WUFBVSxPQUFPYix3REFBTUEsQ0FBQ2MsTUFBTTtRQUNuQyxLQUFLO1lBQVUsT0FBT2Isd0RBQU1BLENBQUNhLE1BQU07SUFDdkM7SUFDQVgsK0RBQWNBLENBQUMsT0FBTyxrQ0FBa0MsYUFBYVU7QUFDekU7QUFDTyxTQUFTRSxXQUFXQyxLQUFLLEVBQUVDLEdBQUc7SUFDakMsTUFBTUosT0FBUTtRQUFFYixNQUFNQSwwREFBQUE7UUFBRUMsTUFBTUEsMERBQUFBO0lBQUMsQ0FBQyxDQUFDZSxNQUFNO0lBQ3ZDYiwrREFBY0EsQ0FBQ1UsUUFBUSxNQUFNLDBCQUEwQixhQUFhRztJQUNwRSxPQUFPbEIsb0RBQUlBLENBQUNnQixNQUFNLENBQUNELE1BQU1JO0FBQzdCO0FBQ08sU0FBU0MsV0FBV0MsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLFVBQVUsRUFBRUMsTUFBTSxFQUFFTixLQUFLO0lBQ2hFLE1BQU1ILE9BQVE7UUFBRWIsTUFBTUEsMERBQUFBO1FBQUVDLE1BQU1BLDBEQUFBQTtJQUFDLENBQUMsQ0FBQ2UsTUFBTTtJQUN2Q2IsK0RBQWNBLENBQUNVLFFBQVEsTUFBTSw0QkFBNEIsYUFBYUc7SUFDdEUsT0FBT2pCLDREQUFNQSxDQUFDYyxNQUFNTSxVQUFVQyxNQUFNO1FBQUVHLEdBQUdGO1FBQVlHLE9BQU9GO0lBQU87QUFDdkU7QUFDTyxTQUFTRyxZQUFZQyxNQUFNO0lBQzlCeEIsdURBQU1BLENBQUNRLFVBQVUsTUFBTSxtREFBbUQseUJBQXlCO1FBQy9GaUIsV0FBVztJQUNmO0lBQ0F4QiwrREFBY0EsQ0FBQ3lCLE9BQU9DLFNBQVMsQ0FBQ0gsV0FBV0EsU0FBUyxLQUFLQSxVQUFVLE1BQU0sa0JBQWtCLFVBQVVBO0lBQ3JHLE1BQU1JLFNBQVMsSUFBSUMsV0FBV0w7SUFDOUJoQixPQUFPc0IsZUFBZSxDQUFDRjtJQUN2QixPQUFPQTtBQUNYLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL2NyeXB0by1icm93c2VyLmpzPzkxNTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQnJvd3NlciBDcnlwdG8gU2hpbXMgKi9cbmltcG9ydCB7IGhtYWMgfSBmcm9tIFwiQG5vYmxlL2hhc2hlcy9obWFjXCI7XG5pbXBvcnQgeyBwYmtkZjIgfSBmcm9tIFwiQG5vYmxlL2hhc2hlcy9wYmtkZjJcIjtcbmltcG9ydCB7IHNoYTI1NiB9IGZyb20gXCJAbm9ibGUvaGFzaGVzL3NoYTI1NlwiO1xuaW1wb3J0IHsgc2hhNTEyIH0gZnJvbSBcIkBub2JsZS9oYXNoZXMvc2hhNTEyXCI7XG5pbXBvcnQgeyBhc3NlcnQsIGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5mdW5jdGlvbiBnZXRHbG9iYWwoKSB7XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdCcpO1xufVxuO1xuY29uc3QgYW55R2xvYmFsID0gZ2V0R2xvYmFsKCk7XG5jb25zdCBjcnlwdG8gPSBhbnlHbG9iYWwuY3J5cHRvIHx8IGFueUdsb2JhbC5tc0NyeXB0bztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIYXNoKGFsZ28pIHtcbiAgICBzd2l0Y2ggKGFsZ28pIHtcbiAgICAgICAgY2FzZSBcInNoYTI1NlwiOiByZXR1cm4gc2hhMjU2LmNyZWF0ZSgpO1xuICAgICAgICBjYXNlIFwic2hhNTEyXCI6IHJldHVybiBzaGE1MTIuY3JlYXRlKCk7XG4gICAgfVxuICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcImludmFsaWQgaGFzaGluZyBhbGdvcml0aG0gbmFtZVwiLCBcImFsZ29yaXRobVwiLCBhbGdvKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIbWFjKF9hbGdvLCBrZXkpIHtcbiAgICBjb25zdCBhbGdvID0gKHsgc2hhMjU2LCBzaGE1MTIgfVtfYWxnb10pO1xuICAgIGFzc2VydEFyZ3VtZW50KGFsZ28gIT0gbnVsbCwgXCJpbnZhbGlkIGhtYWMgYWxnb3JpdGhtXCIsIFwiYWxnb3JpdGhtXCIsIF9hbGdvKTtcbiAgICByZXR1cm4gaG1hYy5jcmVhdGUoYWxnbywga2V5KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYmtkZjJTeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIF9hbGdvKSB7XG4gICAgY29uc3QgYWxnbyA9ICh7IHNoYTI1Niwgc2hhNTEyIH1bX2FsZ29dKTtcbiAgICBhc3NlcnRBcmd1bWVudChhbGdvICE9IG51bGwsIFwiaW52YWxpZCBwYmtkZjIgYWxnb3JpdGhtXCIsIFwiYWxnb3JpdGhtXCIsIF9hbGdvKTtcbiAgICByZXR1cm4gcGJrZGYyKGFsZ28sIHBhc3N3b3JkLCBzYWx0LCB7IGM6IGl0ZXJhdGlvbnMsIGRrTGVuOiBrZXlsZW4gfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tQnl0ZXMobGVuZ3RoKSB7XG4gICAgYXNzZXJ0KGNyeXB0byAhPSBudWxsLCBcInBsYXRmb3JtIGRvZXMgbm90IHN1cHBvcnQgc2VjdXJlIHJhbmRvbSBudW1iZXJzXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgb3BlcmF0aW9uOiBcInJhbmRvbUJ5dGVzXCJcbiAgICB9KTtcbiAgICBhc3NlcnRBcmd1bWVudChOdW1iZXIuaXNJbnRlZ2VyKGxlbmd0aCkgJiYgbGVuZ3RoID4gMCAmJiBsZW5ndGggPD0gMTAyNCwgXCJpbnZhbGlkIGxlbmd0aFwiLCBcImxlbmd0aFwiLCBsZW5ndGgpO1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG8tYnJvd3Nlci5qcy5tYXAiXSwibmFtZXMiOlsiaG1hYyIsInBia2RmMiIsInNoYTI1NiIsInNoYTUxMiIsImFzc2VydCIsImFzc2VydEFyZ3VtZW50IiwiZ2V0R2xvYmFsIiwic2VsZiIsIndpbmRvdyIsImdsb2JhbCIsIkVycm9yIiwiYW55R2xvYmFsIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJjcmVhdGVIYXNoIiwiYWxnbyIsImNyZWF0ZSIsImNyZWF0ZUhtYWMiLCJfYWxnbyIsImtleSIsInBia2RmMlN5bmMiLCJwYXNzd29yZCIsInNhbHQiLCJpdGVyYXRpb25zIiwia2V5bGVuIiwiYyIsImRrTGVuIiwicmFuZG9tQnl0ZXMiLCJsZW5ndGgiLCJvcGVyYXRpb24iLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJyZXN1bHQiLCJVaW50OEFycmF5IiwiZ2V0UmFuZG9tVmFsdWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/crypto-browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/hmac.js":
/*!*****************************************************!*\
  !*** ../node_modules/ethers/lib.esm/crypto/hmac.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeHmac: function() { return /* binding */ computeHmac; }\n/* harmony export */ });\n/* harmony import */ var _crypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crypto.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/crypto-browser.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/**\n *  An **HMAC** enables verification that a given key was used\n *  to authenticate a payload.\n *\n *  See: [[link-wiki-hmac]]\n *\n *  @_subsection: api/crypto:HMAC  [about-hmac]\n */ \n\nlet locked = false;\nconst _computeHmac = function(algorithm, key, data) {\n    return (0,_crypto_js__WEBPACK_IMPORTED_MODULE_0__.createHmac)(algorithm, key).update(data).digest();\n};\nlet __computeHmac = _computeHmac;\n/**\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\n *  %%algo%% used for compression.\n *\n *  @example:\n *    key = id(\"some-secret\")\n *\n *    // Compute the HMAC\n *    computeHmac(\"sha256\", key, \"0x1337\")\n *    //_result:\n *\n *    // To compute the HMAC of UTF-8 data, the data must be\n *    // converted to UTF-8 bytes\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\n *    //_result:\n *\n */ function computeHmac(algorithm, _key, _data) {\n    const key = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_key, \"key\");\n    const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_data, \"data\");\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(__computeHmac(algorithm, key, data));\n}\ncomputeHmac._ = _computeHmac;\ncomputeHmac.lock = function() {\n    locked = true;\n};\ncomputeHmac.register = function(func) {\n    if (locked) {\n        throw new Error(\"computeHmac is locked\");\n    }\n    __computeHmac = func;\n};\nObject.freeze(computeHmac); //# sourceMappingURL=hmac.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL2htYWMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7Q0FPQyxHQUN3QztBQUNhO0FBQ3RELElBQUlHLFNBQVM7QUFDYixNQUFNQyxlQUFlLFNBQVVDLFNBQVMsRUFBRUMsR0FBRyxFQUFFQyxJQUFJO0lBQy9DLE9BQU9QLHNEQUFVQSxDQUFDSyxXQUFXQyxLQUFLRSxNQUFNLENBQUNELE1BQU1FLE1BQU07QUFDekQ7QUFDQSxJQUFJQyxnQkFBZ0JOO0FBQ3BCOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDLEdBQ00sU0FBU08sWUFBWU4sU0FBUyxFQUFFTyxJQUFJLEVBQUVDLEtBQUs7SUFDOUMsTUFBTVAsTUFBTUwseURBQVFBLENBQUNXLE1BQU07SUFDM0IsTUFBTUwsT0FBT04seURBQVFBLENBQUNZLE9BQU87SUFDN0IsT0FBT1gsd0RBQU9BLENBQUNRLGNBQWNMLFdBQVdDLEtBQUtDO0FBQ2pEO0FBQ0FJLFlBQVlHLENBQUMsR0FBR1Y7QUFDaEJPLFlBQVlJLElBQUksR0FBRztJQUFjWixTQUFTO0FBQU07QUFDaERRLFlBQVlLLFFBQVEsR0FBRyxTQUFVQyxJQUFJO0lBQ2pDLElBQUlkLFFBQVE7UUFDUixNQUFNLElBQUllLE1BQU07SUFDcEI7SUFDQVIsZ0JBQWdCTztBQUNwQjtBQUNBRSxPQUFPQyxNQUFNLENBQUNULGNBQ2QsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL2htYWMuanM/ZWU5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBBbiAqKkhNQUMqKiBlbmFibGVzIHZlcmlmaWNhdGlvbiB0aGF0IGEgZ2l2ZW4ga2V5IHdhcyB1c2VkXG4gKiAgdG8gYXV0aGVudGljYXRlIGEgcGF5bG9hZC5cbiAqXG4gKiAgU2VlOiBbW2xpbmstd2lraS1obWFjXV1cbiAqXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvY3J5cHRvOkhNQUMgIFthYm91dC1obWFjXVxuICovXG5pbXBvcnQgeyBjcmVhdGVIbWFjIH0gZnJvbSBcIi4vY3J5cHRvLmpzXCI7XG5pbXBvcnQgeyBnZXRCeXRlcywgaGV4bGlmeSB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xubGV0IGxvY2tlZCA9IGZhbHNlO1xuY29uc3QgX2NvbXB1dGVIbWFjID0gZnVuY3Rpb24gKGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhtYWMoYWxnb3JpdGhtLCBrZXkpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKTtcbn07XG5sZXQgX19jb21wdXRlSG1hYyA9IF9jb21wdXRlSG1hYztcbi8qKlxuICogIFJldHVybiB0aGUgSE1BQyBmb3IgJSVkYXRhJSUgdXNpbmcgdGhlICUla2V5JSUga2V5IHdpdGggdGhlIHVuZGVybHlpbmdcbiAqICAlJWFsZ28lJSB1c2VkIGZvciBjb21wcmVzc2lvbi5cbiAqXG4gKiAgQGV4YW1wbGU6XG4gKiAgICBrZXkgPSBpZChcInNvbWUtc2VjcmV0XCIpXG4gKlxuICogICAgLy8gQ29tcHV0ZSB0aGUgSE1BQ1xuICogICAgY29tcHV0ZUhtYWMoXCJzaGEyNTZcIiwga2V5LCBcIjB4MTMzN1wiKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIC8vIFRvIGNvbXB1dGUgdGhlIEhNQUMgb2YgVVRGLTggZGF0YSwgdGhlIGRhdGEgbXVzdCBiZVxuICogICAgLy8gY29udmVydGVkIHRvIFVURi04IGJ5dGVzXG4gKiAgICBjb21wdXRlSG1hYyhcInNoYTI1NlwiLCBrZXksIHRvVXRmOEJ5dGVzKFwiSGVsbG8gV29ybGRcIikpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUhtYWMoYWxnb3JpdGhtLCBfa2V5LCBfZGF0YSkge1xuICAgIGNvbnN0IGtleSA9IGdldEJ5dGVzKF9rZXksIFwia2V5XCIpO1xuICAgIGNvbnN0IGRhdGEgPSBnZXRCeXRlcyhfZGF0YSwgXCJkYXRhXCIpO1xuICAgIHJldHVybiBoZXhsaWZ5KF9fY29tcHV0ZUhtYWMoYWxnb3JpdGhtLCBrZXksIGRhdGEpKTtcbn1cbmNvbXB1dGVIbWFjLl8gPSBfY29tcHV0ZUhtYWM7XG5jb21wdXRlSG1hYy5sb2NrID0gZnVuY3Rpb24gKCkgeyBsb2NrZWQgPSB0cnVlOyB9O1xuY29tcHV0ZUhtYWMucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZnVuYykge1xuICAgIGlmIChsb2NrZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29tcHV0ZUhtYWMgaXMgbG9ja2VkXCIpO1xuICAgIH1cbiAgICBfX2NvbXB1dGVIbWFjID0gZnVuYztcbn07XG5PYmplY3QuZnJlZXplKGNvbXB1dGVIbWFjKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhtYWMuanMubWFwIl0sIm5hbWVzIjpbImNyZWF0ZUhtYWMiLCJnZXRCeXRlcyIsImhleGxpZnkiLCJsb2NrZWQiLCJfY29tcHV0ZUhtYWMiLCJhbGdvcml0aG0iLCJrZXkiLCJkYXRhIiwidXBkYXRlIiwiZGlnZXN0IiwiX19jb21wdXRlSG1hYyIsImNvbXB1dGVIbWFjIiwiX2tleSIsIl9kYXRhIiwiXyIsImxvY2siLCJyZWdpc3RlciIsImZ1bmMiLCJFcnJvciIsIk9iamVjdCIsImZyZWV6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/hmac.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/index.js":
/*!******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/crypto/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Signature: function() { return /* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_8__.Signature; },\n/* harmony export */   SigningKey: function() { return /* reexport safe */ _signing_key_js__WEBPACK_IMPORTED_MODULE_7__.SigningKey; },\n/* harmony export */   computeHmac: function() { return /* reexport safe */ _hmac_js__WEBPACK_IMPORTED_MODULE_0__.computeHmac; },\n/* harmony export */   keccak256: function() { return /* reexport safe */ _keccak_js__WEBPACK_IMPORTED_MODULE_2__.keccak256; },\n/* harmony export */   lock: function() { return /* binding */ lock; },\n/* harmony export */   pbkdf2: function() { return /* reexport safe */ _pbkdf2_js__WEBPACK_IMPORTED_MODULE_5__.pbkdf2; },\n/* harmony export */   randomBytes: function() { return /* reexport safe */ _random_js__WEBPACK_IMPORTED_MODULE_1__.randomBytes; },\n/* harmony export */   ripemd160: function() { return /* reexport safe */ _ripemd160_js__WEBPACK_IMPORTED_MODULE_3__.ripemd160; },\n/* harmony export */   scrypt: function() { return /* reexport safe */ _scrypt_js__WEBPACK_IMPORTED_MODULE_6__.scrypt; },\n/* harmony export */   scryptSync: function() { return /* reexport safe */ _scrypt_js__WEBPACK_IMPORTED_MODULE_6__.scryptSync; },\n/* harmony export */   sha256: function() { return /* reexport safe */ _sha2_js__WEBPACK_IMPORTED_MODULE_4__.sha256; },\n/* harmony export */   sha512: function() { return /* reexport safe */ _sha2_js__WEBPACK_IMPORTED_MODULE_4__.sha512; }\n/* harmony export */ });\n/* harmony import */ var _hmac_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hmac.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/hmac.js\");\n/* harmony import */ var _keccak_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keccak.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var _ripemd160_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ripemd160.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/ripemd160.js\");\n/* harmony import */ var _pbkdf2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pbkdf2.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/pbkdf2.js\");\n/* harmony import */ var _random_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./random.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/random.js\");\n/* harmony import */ var _scrypt_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scrypt.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/scrypt.js\");\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sha2.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/sha2.js\");\n/* harmony import */ var _signing_key_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./signing-key.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signing-key.js\");\n/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./signature.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signature.js\");\n/**\n *  A fundamental building block of Ethereum is the underlying\n *  cryptographic primitives.\n *\n *  @_section: api/crypto:Cryptographic Functions   [about-crypto]\n */ null;\n// We import all these so we can export lock()\n\n\n\n\n\n\n\n\n\n\n/**\n *  Once called, prevents any future change to the underlying cryptographic\n *  primitives using the ``.register`` feature for hooks.\n */ function lock() {\n    _hmac_js__WEBPACK_IMPORTED_MODULE_0__.computeHmac.lock();\n    _keccak_js__WEBPACK_IMPORTED_MODULE_2__.keccak256.lock();\n    _pbkdf2_js__WEBPACK_IMPORTED_MODULE_5__.pbkdf2.lock();\n    _random_js__WEBPACK_IMPORTED_MODULE_1__.randomBytes.lock();\n    _ripemd160_js__WEBPACK_IMPORTED_MODULE_3__.ripemd160.lock();\n    _scrypt_js__WEBPACK_IMPORTED_MODULE_6__.scrypt.lock();\n    _scrypt_js__WEBPACK_IMPORTED_MODULE_6__.scryptSync.lock();\n    _sha2_js__WEBPACK_IMPORTED_MODULE_4__.sha256.lock();\n    _sha2_js__WEBPACK_IMPORTED_MODULE_4__.sha512.lock();\n    _random_js__WEBPACK_IMPORTED_MODULE_1__.randomBytes.lock();\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7OztDQUtDLEdBQ0Q7QUFDQSw4Q0FBOEM7QUFDTjtBQUNBO0FBQ0c7QUFDTjtBQUNLO0FBQ087QUFDTjtBQUMyRDtBQUN4RDtBQUNIO0FBQzNDOzs7Q0FHQyxHQUNELFNBQVNXO0lBQ0xYLGlEQUFXQSxDQUFDVyxJQUFJO0lBQ2hCVixpREFBU0EsQ0FBQ1UsSUFBSTtJQUNkUiw4Q0FBTUEsQ0FBQ1EsSUFBSTtJQUNYUCxtREFBV0EsQ0FBQ08sSUFBSTtJQUNoQlQsb0RBQVNBLENBQUNTLElBQUk7SUFDZE4sOENBQU1BLENBQUNNLElBQUk7SUFDWEwsa0RBQVVBLENBQUNLLElBQUk7SUFDZkosNENBQU1BLENBQUNJLElBQUk7SUFDWEgsNENBQU1BLENBQUNHLElBQUk7SUFDWFAsbURBQVdBLENBQUNPLElBQUk7QUFDcEI7QUFDZ0IsQ0FDaEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL2luZGV4LmpzP2UyODAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQSBmdW5kYW1lbnRhbCBidWlsZGluZyBibG9jayBvZiBFdGhlcmV1bSBpcyB0aGUgdW5kZXJseWluZ1xuICogIGNyeXB0b2dyYXBoaWMgcHJpbWl0aXZlcy5cbiAqXG4gKiAgQF9zZWN0aW9uOiBhcGkvY3J5cHRvOkNyeXB0b2dyYXBoaWMgRnVuY3Rpb25zICAgW2Fib3V0LWNyeXB0b11cbiAqL1xubnVsbDtcbi8vIFdlIGltcG9ydCBhbGwgdGhlc2Ugc28gd2UgY2FuIGV4cG9ydCBsb2NrKClcbmltcG9ydCB7IGNvbXB1dGVIbWFjIH0gZnJvbSBcIi4vaG1hYy5qc1wiO1xuaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSBcIi4va2VjY2FrLmpzXCI7XG5pbXBvcnQgeyByaXBlbWQxNjAgfSBmcm9tIFwiLi9yaXBlbWQxNjAuanNcIjtcbmltcG9ydCB7IHBia2RmMiB9IGZyb20gXCIuL3Bia2RmMi5qc1wiO1xuaW1wb3J0IHsgcmFuZG9tQnl0ZXMgfSBmcm9tIFwiLi9yYW5kb20uanNcIjtcbmltcG9ydCB7IHNjcnlwdCwgc2NyeXB0U3luYyB9IGZyb20gXCIuL3NjcnlwdC5qc1wiO1xuaW1wb3J0IHsgc2hhMjU2LCBzaGE1MTIgfSBmcm9tIFwiLi9zaGEyLmpzXCI7XG5leHBvcnQgeyBjb21wdXRlSG1hYywgcmFuZG9tQnl0ZXMsIGtlY2NhazI1NiwgcmlwZW1kMTYwLCBzaGEyNTYsIHNoYTUxMiwgcGJrZGYyLCBzY3J5cHQsIHNjcnlwdFN5bmMgfTtcbmV4cG9ydCB7IFNpZ25pbmdLZXkgfSBmcm9tIFwiLi9zaWduaW5nLWtleS5qc1wiO1xuZXhwb3J0IHsgU2lnbmF0dXJlIH0gZnJvbSBcIi4vc2lnbmF0dXJlLmpzXCI7XG4vKipcbiAqICBPbmNlIGNhbGxlZCwgcHJldmVudHMgYW55IGZ1dHVyZSBjaGFuZ2UgdG8gdGhlIHVuZGVybHlpbmcgY3J5cHRvZ3JhcGhpY1xuICogIHByaW1pdGl2ZXMgdXNpbmcgdGhlIGBgLnJlZ2lzdGVyYGAgZmVhdHVyZSBmb3IgaG9va3MuXG4gKi9cbmZ1bmN0aW9uIGxvY2soKSB7XG4gICAgY29tcHV0ZUhtYWMubG9jaygpO1xuICAgIGtlY2NhazI1Ni5sb2NrKCk7XG4gICAgcGJrZGYyLmxvY2soKTtcbiAgICByYW5kb21CeXRlcy5sb2NrKCk7XG4gICAgcmlwZW1kMTYwLmxvY2soKTtcbiAgICBzY3J5cHQubG9jaygpO1xuICAgIHNjcnlwdFN5bmMubG9jaygpO1xuICAgIHNoYTI1Ni5sb2NrKCk7XG4gICAgc2hhNTEyLmxvY2soKTtcbiAgICByYW5kb21CeXRlcy5sb2NrKCk7XG59XG5leHBvcnQgeyBsb2NrIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiY29tcHV0ZUhtYWMiLCJrZWNjYWsyNTYiLCJyaXBlbWQxNjAiLCJwYmtkZjIiLCJyYW5kb21CeXRlcyIsInNjcnlwdCIsInNjcnlwdFN5bmMiLCJzaGEyNTYiLCJzaGE1MTIiLCJTaWduaW5nS2V5IiwiU2lnbmF0dXJlIiwibG9jayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js":
/*!*******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/crypto/keccak.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keccak256: function() { return /* binding */ keccak256; }\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/**\n *  Cryptographic hashing functions\n *\n *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]\n */ \n\nlet locked = false;\nconst _keccak256 = function(data) {\n    return (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_0__.keccak_256)(data);\n};\nlet __keccak256 = _keccak256;\n/**\n *  Compute the cryptographic KECCAK256 hash of %%data%%.\n *\n *  The %%data%% **must** be a data representation, to compute the\n *  hash of UTF-8 data use the [[id]] function.\n *\n *  @returns DataHexstring\n *  @example:\n *    keccak256(\"0x\")\n *    //_result:\n *\n *    keccak256(\"0x1337\")\n *    //_result:\n *\n *    keccak256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n *    // Strings are assumed to be DataHexString, otherwise it will\n *    // throw. To hash UTF-8 data, see the note above.\n *    keccak256(\"Hello World\")\n *    //_error:\n */ function keccak256(_data) {\n    const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_data, \"data\");\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(__keccak256(data));\n}\nkeccak256._ = _keccak256;\nkeccak256.lock = function() {\n    locked = true;\n};\nkeccak256.register = function(func) {\n    if (locked) {\n        throw new TypeError(\"keccak256 is locked\");\n    }\n    __keccak256 = func;\n};\nObject.freeze(keccak256); //# sourceMappingURL=keccak.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL2tlY2Nhay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztDQUlDLEdBQytDO0FBQ007QUFDdEQsSUFBSUcsU0FBUztBQUNiLE1BQU1DLGFBQWEsU0FBVUMsSUFBSTtJQUM3QixPQUFPTCw4REFBVUEsQ0FBQ0s7QUFDdEI7QUFDQSxJQUFJQyxjQUFjRjtBQUNsQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBcUJDLEdBQ00sU0FBU0csVUFBVUMsS0FBSztJQUMzQixNQUFNSCxPQUFPSix5REFBUUEsQ0FBQ08sT0FBTztJQUM3QixPQUFPTix3REFBT0EsQ0FBQ0ksWUFBWUQ7QUFDL0I7QUFDQUUsVUFBVUUsQ0FBQyxHQUFHTDtBQUNkRyxVQUFVRyxJQUFJLEdBQUc7SUFBY1AsU0FBUztBQUFNO0FBQzlDSSxVQUFVSSxRQUFRLEdBQUcsU0FBVUMsSUFBSTtJQUMvQixJQUFJVCxRQUFRO1FBQ1IsTUFBTSxJQUFJVSxVQUFVO0lBQ3hCO0lBQ0FQLGNBQWNNO0FBQ2xCO0FBQ0FFLE9BQU9DLE1BQU0sQ0FBQ1IsWUFDZCxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jcnlwdG8va2VjY2FrLmpzPzM2NWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ3J5cHRvZ3JhcGhpYyBoYXNoaW5nIGZ1bmN0aW9uc1xuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS9jcnlwdG86SGFzaCBGdW5jdGlvbnMgW2Fib3V0LWNyeXB0by1oYXNoaW5nXVxuICovXG5pbXBvcnQgeyBrZWNjYWtfMjU2IH0gZnJvbSBcIkBub2JsZS9oYXNoZXMvc2hhM1wiO1xuaW1wb3J0IHsgZ2V0Qnl0ZXMsIGhleGxpZnkgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmxldCBsb2NrZWQgPSBmYWxzZTtcbmNvbnN0IF9rZWNjYWsyNTYgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBrZWNjYWtfMjU2KGRhdGEpO1xufTtcbmxldCBfX2tlY2NhazI1NiA9IF9rZWNjYWsyNTY7XG4vKipcbiAqICBDb21wdXRlIHRoZSBjcnlwdG9ncmFwaGljIEtFQ0NBSzI1NiBoYXNoIG9mICUlZGF0YSUlLlxuICpcbiAqICBUaGUgJSVkYXRhJSUgKiptdXN0KiogYmUgYSBkYXRhIHJlcHJlc2VudGF0aW9uLCB0byBjb21wdXRlIHRoZVxuICogIGhhc2ggb2YgVVRGLTggZGF0YSB1c2UgdGhlIFtbaWRdXSBmdW5jdGlvbi5cbiAqXG4gKiAgQHJldHVybnMgRGF0YUhleHN0cmluZ1xuICogIEBleGFtcGxlOlxuICogICAga2VjY2FrMjU2KFwiMHhcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICBrZWNjYWsyNTYoXCIweDEzMzdcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICBrZWNjYWsyNTYobmV3IFVpbnQ4QXJyYXkoWyAweDEzLCAweDM3IF0pKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIC8vIFN0cmluZ3MgYXJlIGFzc3VtZWQgdG8gYmUgRGF0YUhleFN0cmluZywgb3RoZXJ3aXNlIGl0IHdpbGxcbiAqICAgIC8vIHRocm93LiBUbyBoYXNoIFVURi04IGRhdGEsIHNlZSB0aGUgbm90ZSBhYm92ZS5cbiAqICAgIGtlY2NhazI1NihcIkhlbGxvIFdvcmxkXCIpXG4gKiAgICAvL19lcnJvcjpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGtlY2NhazI1NihfZGF0YSkge1xuICAgIGNvbnN0IGRhdGEgPSBnZXRCeXRlcyhfZGF0YSwgXCJkYXRhXCIpO1xuICAgIHJldHVybiBoZXhsaWZ5KF9fa2VjY2FrMjU2KGRhdGEpKTtcbn1cbmtlY2NhazI1Ni5fID0gX2tlY2NhazI1NjtcbmtlY2NhazI1Ni5sb2NrID0gZnVuY3Rpb24gKCkgeyBsb2NrZWQgPSB0cnVlOyB9O1xua2VjY2FrMjU2LnJlZ2lzdGVyID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICBpZiAobG9ja2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJrZWNjYWsyNTYgaXMgbG9ja2VkXCIpO1xuICAgIH1cbiAgICBfX2tlY2NhazI1NiA9IGZ1bmM7XG59O1xuT2JqZWN0LmZyZWV6ZShrZWNjYWsyNTYpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VjY2FrLmpzLm1hcCJdLCJuYW1lcyI6WyJrZWNjYWtfMjU2IiwiZ2V0Qnl0ZXMiLCJoZXhsaWZ5IiwibG9ja2VkIiwiX2tlY2NhazI1NiIsImRhdGEiLCJfX2tlY2NhazI1NiIsImtlY2NhazI1NiIsIl9kYXRhIiwiXyIsImxvY2siLCJyZWdpc3RlciIsImZ1bmMiLCJUeXBlRXJyb3IiLCJPYmplY3QiLCJmcmVlemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/pbkdf2.js":
/*!*******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/crypto/pbkdf2.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pbkdf2: function() { return /* binding */ pbkdf2; }\n/* harmony export */ });\n/* harmony import */ var _crypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crypto.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/crypto-browser.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/**\n *  A **Password-Based Key-Derivation Function** is designed to create\n *  a sequence of bytes suitible as a **key** from a human-rememberable\n *  password.\n *\n *  @_subsection: api/crypto:Passwords  [about-pbkdf]\n */ \n\nlet locked = false;\nconst _pbkdf2 = function(password, salt, iterations, keylen, algo) {\n    return (0,_crypto_js__WEBPACK_IMPORTED_MODULE_0__.pbkdf2Sync)(password, salt, iterations, keylen, algo);\n};\nlet __pbkdf2 = _pbkdf2;\n/**\n *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using\n *  the %%salt%% and using %%iterations%% of %%algo%%.\n *\n *  This PBKDF is outdated and should not be used in new projects, but is\n *  required to decrypt older files.\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the PBKDF2\n *    pbkdf2(passwordBytes, salt, 1024, 16, \"sha256\")\n *    //_result:\n */ function pbkdf2(_password, _salt, iterations, keylen, algo) {\n    const password = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_password, \"password\");\n    const salt = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_salt, \"salt\");\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(__pbkdf2(password, salt, iterations, keylen, algo));\n}\npbkdf2._ = _pbkdf2;\npbkdf2.lock = function() {\n    locked = true;\n};\npbkdf2.register = function(func) {\n    if (locked) {\n        throw new Error(\"pbkdf2 is locked\");\n    }\n    __pbkdf2 = func;\n};\nObject.freeze(pbkdf2); //# sourceMappingURL=pbkdf2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL3Bia2RmMi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7O0NBTUMsR0FDd0M7QUFDYTtBQUN0RCxJQUFJRyxTQUFTO0FBQ2IsTUFBTUMsVUFBVSxTQUFVQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsVUFBVSxFQUFFQyxNQUFNLEVBQUVDLElBQUk7SUFDOUQsT0FBT1Qsc0RBQVVBLENBQUNLLFVBQVVDLE1BQU1DLFlBQVlDLFFBQVFDO0FBQzFEO0FBQ0EsSUFBSUMsV0FBV047QUFDZjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW1CQyxHQUNNLFNBQVNPLE9BQU9DLFNBQVMsRUFBRUMsS0FBSyxFQUFFTixVQUFVLEVBQUVDLE1BQU0sRUFBRUMsSUFBSTtJQUM3RCxNQUFNSixXQUFXSix5REFBUUEsQ0FBQ1csV0FBVztJQUNyQyxNQUFNTixPQUFPTCx5REFBUUEsQ0FBQ1ksT0FBTztJQUM3QixPQUFPWCx3REFBT0EsQ0FBQ1EsU0FBU0wsVUFBVUMsTUFBTUMsWUFBWUMsUUFBUUM7QUFDaEU7QUFDQUUsT0FBT0csQ0FBQyxHQUFHVjtBQUNYTyxPQUFPSSxJQUFJLEdBQUc7SUFBY1osU0FBUztBQUFNO0FBQzNDUSxPQUFPSyxRQUFRLEdBQUcsU0FBVUMsSUFBSTtJQUM1QixJQUFJZCxRQUFRO1FBQ1IsTUFBTSxJQUFJZSxNQUFNO0lBQ3BCO0lBQ0FSLFdBQVdPO0FBQ2Y7QUFDQUUsT0FBT0MsTUFBTSxDQUFDVCxTQUNkLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2NyeXB0by9wYmtkZjIuanM/NDBlMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBBICoqUGFzc3dvcmQtQmFzZWQgS2V5LURlcml2YXRpb24gRnVuY3Rpb24qKiBpcyBkZXNpZ25lZCB0byBjcmVhdGVcbiAqICBhIHNlcXVlbmNlIG9mIGJ5dGVzIHN1aXRpYmxlIGFzIGEgKiprZXkqKiBmcm9tIGEgaHVtYW4tcmVtZW1iZXJhYmxlXG4gKiAgcGFzc3dvcmQuXG4gKlxuICogIEBfc3Vic2VjdGlvbjogYXBpL2NyeXB0bzpQYXNzd29yZHMgIFthYm91dC1wYmtkZl1cbiAqL1xuaW1wb3J0IHsgcGJrZGYyU3luYyB9IGZyb20gXCIuL2NyeXB0by5qc1wiO1xuaW1wb3J0IHsgZ2V0Qnl0ZXMsIGhleGxpZnkgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmxldCBsb2NrZWQgPSBmYWxzZTtcbmNvbnN0IF9wYmtkZjIgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgYWxnbykge1xuICAgIHJldHVybiBwYmtkZjJTeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGFsZ28pO1xufTtcbmxldCBfX3Bia2RmMiA9IF9wYmtkZjI7XG4vKipcbiAqICBSZXR1cm4gdGhlIFtbbGluay1wYmtkZjJdXSBmb3IgJSVrZXlsZW4lJSBieXRlcyBmb3IgJSVwYXNzd29yZCUlIHVzaW5nXG4gKiAgdGhlICUlc2FsdCUlIGFuZCB1c2luZyAlJWl0ZXJhdGlvbnMlJSBvZiAlJWFsZ28lJS5cbiAqXG4gKiAgVGhpcyBQQktERiBpcyBvdXRkYXRlZCBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkIGluIG5ldyBwcm9qZWN0cywgYnV0IGlzXG4gKiAgcmVxdWlyZWQgdG8gZGVjcnlwdCBvbGRlciBmaWxlcy5cbiAqXG4gKiAgQGV4YW1wbGU6XG4gKiAgICAvLyBUaGUgcGFzc3dvcmQgbXVzdCBiZSBjb252ZXJ0ZWQgdG8gYnl0ZXMsIGFuZCBpdCBpcyBnZW5lcmFsbHlcbiAqICAgIC8vIGJlc3QgcHJhY3RpY2VzIHRvIGVuc3VyZSB0aGUgc3RyaW5nIGhhcyBiZWVuIG5vcm1hbGl6ZWQuIE1hbnlcbiAqICAgIC8vIGZvcm1hdHMgZXhwbGljaXRseSBpbmRpY2F0ZSB0aGUgbm9ybWFsaXphdGlvbiBmb3JtIHRvIHVzZS5cbiAqICAgIHBhc3N3b3JkID0gXCJoZWxsb1wiXG4gKiAgICBwYXNzd29yZEJ5dGVzID0gdG9VdGY4Qnl0ZXMocGFzc3dvcmQsIFwiTkZLQ1wiKVxuICpcbiAqICAgIHNhbHQgPSBpZChcInNvbWUtc2FsdFwiKVxuICpcbiAqICAgIC8vIENvbXB1dGUgdGhlIFBCS0RGMlxuICogICAgcGJrZGYyKHBhc3N3b3JkQnl0ZXMsIHNhbHQsIDEwMjQsIDE2LCBcInNoYTI1NlwiKVxuICogICAgLy9fcmVzdWx0OlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGJrZGYyKF9wYXNzd29yZCwgX3NhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgYWxnbykge1xuICAgIGNvbnN0IHBhc3N3b3JkID0gZ2V0Qnl0ZXMoX3Bhc3N3b3JkLCBcInBhc3N3b3JkXCIpO1xuICAgIGNvbnN0IHNhbHQgPSBnZXRCeXRlcyhfc2FsdCwgXCJzYWx0XCIpO1xuICAgIHJldHVybiBoZXhsaWZ5KF9fcGJrZGYyKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGFsZ28pKTtcbn1cbnBia2RmMi5fID0gX3Bia2RmMjtcbnBia2RmMi5sb2NrID0gZnVuY3Rpb24gKCkgeyBsb2NrZWQgPSB0cnVlOyB9O1xucGJrZGYyLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICBpZiAobG9ja2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInBia2RmMiBpcyBsb2NrZWRcIik7XG4gICAgfVxuICAgIF9fcGJrZGYyID0gZnVuYztcbn07XG5PYmplY3QuZnJlZXplKHBia2RmMik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYmtkZjIuanMubWFwIl0sIm5hbWVzIjpbInBia2RmMlN5bmMiLCJnZXRCeXRlcyIsImhleGxpZnkiLCJsb2NrZWQiLCJfcGJrZGYyIiwicGFzc3dvcmQiLCJzYWx0IiwiaXRlcmF0aW9ucyIsImtleWxlbiIsImFsZ28iLCJfX3Bia2RmMiIsInBia2RmMiIsIl9wYXNzd29yZCIsIl9zYWx0IiwiXyIsImxvY2siLCJyZWdpc3RlciIsImZ1bmMiLCJFcnJvciIsIk9iamVjdCIsImZyZWV6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/pbkdf2.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/random.js":
/*!*******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/crypto/random.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   randomBytes: function() { return /* binding */ randomBytes; }\n/* harmony export */ });\n/* harmony import */ var _crypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crypto.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/crypto-browser.js\");\n/**\n *  A **Cryptographically Secure Random Value** is one that has been\n *  generated with additional care take to prevent side-channels\n *  from allowing others to detect it and prevent others from through\n *  coincidence generate the same values.\n *\n *  @_subsection: api/crypto:Random Values  [about-crypto-random]\n */ \nlet locked = false;\nconst _randomBytes = function(length) {\n    return new Uint8Array((0,_crypto_js__WEBPACK_IMPORTED_MODULE_0__.randomBytes)(length));\n};\nlet __randomBytes = _randomBytes;\n/**\n *  Return %%length%% bytes of cryptographically secure random data.\n *\n *  @example:\n *    randomBytes(8)\n *    //_result:\n */ function randomBytes(length) {\n    return __randomBytes(length);\n}\nrandomBytes._ = _randomBytes;\nrandomBytes.lock = function() {\n    locked = true;\n};\nrandomBytes.register = function(func) {\n    if (locked) {\n        throw new Error(\"randomBytes is locked\");\n    }\n    __randomBytes = func;\n};\nObject.freeze(randomBytes); //# sourceMappingURL=random.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL3JhbmRvbS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7O0NBT0MsR0FDMEQ7QUFDM0QsSUFBSUUsU0FBUztBQUNiLE1BQU1DLGVBQWUsU0FBVUMsTUFBTTtJQUNqQyxPQUFPLElBQUlDLFdBQVdKLHVEQUFhQSxDQUFDRztBQUN4QztBQUNBLElBQUlFLGdCQUFnQkg7QUFDcEI7Ozs7OztDQU1DLEdBQ00sU0FBU0gsWUFBWUksTUFBTTtJQUM5QixPQUFPRSxjQUFjRjtBQUN6QjtBQUNBSixZQUFZTyxDQUFDLEdBQUdKO0FBQ2hCSCxZQUFZUSxJQUFJLEdBQUc7SUFBY04sU0FBUztBQUFNO0FBQ2hERixZQUFZUyxRQUFRLEdBQUcsU0FBVUMsSUFBSTtJQUNqQyxJQUFJUixRQUFRO1FBQ1IsTUFBTSxJQUFJUyxNQUFNO0lBQ3BCO0lBQ0FMLGdCQUFnQkk7QUFDcEI7QUFDQUUsT0FBT0MsTUFBTSxDQUFDYixjQUNkLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2NyeXB0by9yYW5kb20uanM/NWEyMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBBICoqQ3J5cHRvZ3JhcGhpY2FsbHkgU2VjdXJlIFJhbmRvbSBWYWx1ZSoqIGlzIG9uZSB0aGF0IGhhcyBiZWVuXG4gKiAgZ2VuZXJhdGVkIHdpdGggYWRkaXRpb25hbCBjYXJlIHRha2UgdG8gcHJldmVudCBzaWRlLWNoYW5uZWxzXG4gKiAgZnJvbSBhbGxvd2luZyBvdGhlcnMgdG8gZGV0ZWN0IGl0IGFuZCBwcmV2ZW50IG90aGVycyBmcm9tIHRocm91Z2hcbiAqICBjb2luY2lkZW5jZSBnZW5lcmF0ZSB0aGUgc2FtZSB2YWx1ZXMuXG4gKlxuICogIEBfc3Vic2VjdGlvbjogYXBpL2NyeXB0bzpSYW5kb20gVmFsdWVzICBbYWJvdXQtY3J5cHRvLXJhbmRvbV1cbiAqL1xuaW1wb3J0IHsgcmFuZG9tQnl0ZXMgYXMgY3J5cHRvX3JhbmRvbSB9IGZyb20gXCIuL2NyeXB0by5qc1wiO1xubGV0IGxvY2tlZCA9IGZhbHNlO1xuY29uc3QgX3JhbmRvbUJ5dGVzID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShjcnlwdG9fcmFuZG9tKGxlbmd0aCkpO1xufTtcbmxldCBfX3JhbmRvbUJ5dGVzID0gX3JhbmRvbUJ5dGVzO1xuLyoqXG4gKiAgUmV0dXJuICUlbGVuZ3RoJSUgYnl0ZXMgb2YgY3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlIHJhbmRvbSBkYXRhLlxuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIHJhbmRvbUJ5dGVzKDgpXG4gKiAgICAvL19yZXN1bHQ6XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21CeXRlcyhsZW5ndGgpIHtcbiAgICByZXR1cm4gX19yYW5kb21CeXRlcyhsZW5ndGgpO1xufVxucmFuZG9tQnl0ZXMuXyA9IF9yYW5kb21CeXRlcztcbnJhbmRvbUJ5dGVzLmxvY2sgPSBmdW5jdGlvbiAoKSB7IGxvY2tlZCA9IHRydWU7IH07XG5yYW5kb21CeXRlcy5yZWdpc3RlciA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgaWYgKGxvY2tlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyYW5kb21CeXRlcyBpcyBsb2NrZWRcIik7XG4gICAgfVxuICAgIF9fcmFuZG9tQnl0ZXMgPSBmdW5jO1xufTtcbk9iamVjdC5mcmVlemUocmFuZG9tQnl0ZXMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmFuZG9tLmpzLm1hcCJdLCJuYW1lcyI6WyJyYW5kb21CeXRlcyIsImNyeXB0b19yYW5kb20iLCJsb2NrZWQiLCJfcmFuZG9tQnl0ZXMiLCJsZW5ndGgiLCJVaW50OEFycmF5IiwiX19yYW5kb21CeXRlcyIsIl8iLCJsb2NrIiwicmVnaXN0ZXIiLCJmdW5jIiwiRXJyb3IiLCJPYmplY3QiLCJmcmVlemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/random.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/ripemd160.js":
/*!**********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/crypto/ripemd160.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ripemd160: function() { return /* binding */ ripemd160; }\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_ripemd160__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/ripemd160 */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/ripemd160.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n\n\nlet locked = false;\nconst _ripemd160 = function(data) {\n    return (0,_noble_hashes_ripemd160__WEBPACK_IMPORTED_MODULE_0__.ripemd160)(data);\n};\nlet __ripemd160 = _ripemd160;\n/**\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    ripemd160(\"0x\")\n *    //_result:\n *\n *    ripemd160(\"0x1337\")\n *    //_result:\n *\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */ function ripemd160(_data) {\n    const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_data, \"data\");\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(__ripemd160(data));\n}\nripemd160._ = _ripemd160;\nripemd160.lock = function() {\n    locked = true;\n};\nripemd160.register = function(func) {\n    if (locked) {\n        throw new TypeError(\"ripemd160 is locked\");\n    }\n    __ripemd160 = func;\n};\nObject.freeze(ripemd160); //# sourceMappingURL=ripemd160.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL3JpcGVtZDE2MC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUU7QUFDakI7QUFDdEQsSUFBSUksU0FBUztBQUNiLE1BQU1DLGFBQWEsU0FBVUMsSUFBSTtJQUM3QixPQUFPTCxrRUFBZUEsQ0FBQ0s7QUFDM0I7QUFDQSxJQUFJQyxjQUFjRjtBQUNsQjs7Ozs7Ozs7Ozs7Ozs7OztDQWdCQyxHQUNNLFNBQVNMLFVBQVVRLEtBQUs7SUFDM0IsTUFBTUYsT0FBT0oseURBQVFBLENBQUNNLE9BQU87SUFDN0IsT0FBT0wsd0RBQU9BLENBQUNJLFlBQVlEO0FBQy9CO0FBQ0FOLFVBQVVTLENBQUMsR0FBR0o7QUFDZEwsVUFBVVUsSUFBSSxHQUFHO0lBQWNOLFNBQVM7QUFBTTtBQUM5Q0osVUFBVVcsUUFBUSxHQUFHLFNBQVVDLElBQUk7SUFDL0IsSUFBSVIsUUFBUTtRQUNSLE1BQU0sSUFBSVMsVUFBVTtJQUN4QjtJQUNBTixjQUFjSztBQUNsQjtBQUNBRSxPQUFPQyxNQUFNLENBQUNmLFlBQ2QscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL3JpcGVtZDE2MC5qcz8yNWVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJpcGVtZDE2MCBhcyBub2JsZV9yaXBlbWQxNjAgfSBmcm9tIFwiQG5vYmxlL2hhc2hlcy9yaXBlbWQxNjBcIjtcbmltcG9ydCB7IGdldEJ5dGVzLCBoZXhsaWZ5IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5sZXQgbG9ja2VkID0gZmFsc2U7XG5jb25zdCBfcmlwZW1kMTYwID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbm9ibGVfcmlwZW1kMTYwKGRhdGEpO1xufTtcbmxldCBfX3JpcGVtZDE2MCA9IF9yaXBlbWQxNjA7XG4vKipcbiAqICBDb21wdXRlIHRoZSBjcnlwdG9ncmFwaGljIFJJUEVNRC0xNjAgaGFzaCBvZiAlJWRhdGElJS5cbiAqXG4gKiAgQF9kb2Nsb2M6IGFwaS9jcnlwdG86SGFzaCBGdW5jdGlvbnNcbiAqICBAcmV0dXJucyBEYXRhSGV4c3RyaW5nXG4gKlxuICogIEBleGFtcGxlOlxuICogICAgcmlwZW1kMTYwKFwiMHhcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICByaXBlbWQxNjAoXCIweDEzMzdcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICByaXBlbWQxNjAobmV3IFVpbnQ4QXJyYXkoWyAweDEzLCAweDM3IF0pKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJpcGVtZDE2MChfZGF0YSkge1xuICAgIGNvbnN0IGRhdGEgPSBnZXRCeXRlcyhfZGF0YSwgXCJkYXRhXCIpO1xuICAgIHJldHVybiBoZXhsaWZ5KF9fcmlwZW1kMTYwKGRhdGEpKTtcbn1cbnJpcGVtZDE2MC5fID0gX3JpcGVtZDE2MDtcbnJpcGVtZDE2MC5sb2NrID0gZnVuY3Rpb24gKCkgeyBsb2NrZWQgPSB0cnVlOyB9O1xucmlwZW1kMTYwLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICBpZiAobG9ja2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJyaXBlbWQxNjAgaXMgbG9ja2VkXCIpO1xuICAgIH1cbiAgICBfX3JpcGVtZDE2MCA9IGZ1bmM7XG59O1xuT2JqZWN0LmZyZWV6ZShyaXBlbWQxNjApO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmlwZW1kMTYwLmpzLm1hcCJdLCJuYW1lcyI6WyJyaXBlbWQxNjAiLCJub2JsZV9yaXBlbWQxNjAiLCJnZXRCeXRlcyIsImhleGxpZnkiLCJsb2NrZWQiLCJfcmlwZW1kMTYwIiwiZGF0YSIsIl9fcmlwZW1kMTYwIiwiX2RhdGEiLCJfIiwibG9jayIsInJlZ2lzdGVyIiwiZnVuYyIsIlR5cGVFcnJvciIsIk9iamVjdCIsImZyZWV6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/ripemd160.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/scrypt.js":
/*!*******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/crypto/scrypt.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scrypt: function() { return /* binding */ scrypt; },\n/* harmony export */   scryptSync: function() { return /* binding */ scryptSync; }\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/scrypt */ \"(app-pages-browser)/../node_modules/@noble/hashes/esm/scrypt.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n\n\nlet lockedSync = false, lockedAsync = false;\nconst _scryptAsync = async function(passwd, salt, N, r, p, dkLen, onProgress) {\n    return await (0,_noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_0__.scryptAsync)(passwd, salt, {\n        N,\n        r,\n        p,\n        dkLen,\n        onProgress\n    });\n};\nconst _scryptSync = function(passwd, salt, N, r, p, dkLen) {\n    return (0,_noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_0__.scrypt)(passwd, salt, {\n        N,\n        r,\n        p,\n        dkLen\n    });\n};\nlet __scryptAsync = _scryptAsync;\nlet __scryptSync = _scryptSync;\n/**\n *  The [[link-wiki-scrypt]] uses a memory and cpu hard method of\n *  derivation to increase the resource cost to brute-force a password\n *  for a given key.\n *\n *  This means this algorithm is intentionally slow, and can be tuned to\n *  become slower. As computation and memory speed improve over time,\n *  increasing the difficulty maintains the cost of an attacker.\n *\n *  For example, if a target time of 5 seconds is used, a legitimate user\n *  which knows their password requires only 5 seconds to unlock their\n *  account. A 6 character password has 68 billion possibilities, which\n *  would require an attacker to invest over 10,000 years of CPU time. This\n *  is of course a crude example (as password generally aren't random),\n *  but demonstrates to value of imposing large costs to decryption.\n *\n *  For this reason, if building a UI which involved decrypting or\n *  encrypting datsa using scrypt, it is recommended to use a\n *  [[ProgressCallback]] (as event short periods can seem lik an eternity\n *  if the UI freezes). Including the phrase //\"decrypting\"// in the UI\n *  can also help, assuring the user their waiting is for a good reason.\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scrypt(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */ async function scrypt(_passwd, _salt, N, r, p, dkLen, progress) {\n    const passwd = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_passwd, \"passwd\");\n    const salt = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_salt, \"salt\");\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));\n}\nscrypt._ = _scryptAsync;\nscrypt.lock = function() {\n    lockedAsync = true;\n};\nscrypt.register = function(func) {\n    if (lockedAsync) {\n        throw new Error(\"scrypt is locked\");\n    }\n    __scryptAsync = func;\n};\nObject.freeze(scrypt);\n/**\n *  Provides a synchronous variant of [[scrypt]].\n *\n *  This will completely lock up and freeze the UI in a browser and will\n *  prevent any event loop from progressing. For this reason, it is\n *  preferred to use the [async variant](scrypt).\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scryptSync(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */ function scryptSync(_passwd, _salt, N, r, p, dkLen) {\n    const passwd = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_passwd, \"passwd\");\n    const salt = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_salt, \"salt\");\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(__scryptSync(passwd, salt, N, r, p, dkLen));\n}\nscryptSync._ = _scryptSync;\nscryptSync.lock = function() {\n    lockedSync = true;\n};\nscryptSync.register = function(func) {\n    if (lockedSync) {\n        throw new Error(\"scryptSync is locked\");\n    }\n    __scryptSync = func;\n};\nObject.freeze(scryptSync); //# sourceMappingURL=scrypt.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL3NjcnlwdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdGO0FBQzdCO0FBQzNELElBQUlPLGFBQWEsT0FBT0MsY0FBYztBQUN0QyxNQUFNQyxlQUFlLGVBQWdCQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsS0FBSyxFQUFFQyxVQUFVO0lBQ3pFLE9BQU8sTUFBTWIsaUVBQVdBLENBQUNPLFFBQVFDLE1BQU07UUFBRUM7UUFBR0M7UUFBR0M7UUFBR0M7UUFBT0M7SUFBVztBQUN4RTtBQUNBLE1BQU1DLGNBQWMsU0FBVVAsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEtBQUs7SUFDdEQsT0FBT2QsNERBQVVBLENBQUNTLFFBQVFDLE1BQU07UUFBRUM7UUFBR0M7UUFBR0M7UUFBR0M7SUFBTTtBQUNyRDtBQUNBLElBQUlHLGdCQUFnQlQ7QUFDcEIsSUFBSVUsZUFBZUY7QUFDbkI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW9DQyxHQUNNLGVBQWVqQixPQUFPb0IsT0FBTyxFQUFFQyxLQUFLLEVBQUVULENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEtBQUssRUFBRU8sUUFBUTtJQUNqRSxNQUFNWixTQUFTTix5REFBUUEsQ0FBQ2dCLFNBQVM7SUFDakMsTUFBTVQsT0FBT1AseURBQVFBLENBQUNpQixPQUFPO0lBQzdCLE9BQU9mLHdEQUFDQSxDQUFDLE1BQU1ZLGNBQWNSLFFBQVFDLE1BQU1DLEdBQUdDLEdBQUdDLEdBQUdDLE9BQU9PO0FBQy9EO0FBQ0F0QixPQUFPdUIsQ0FBQyxHQUFHZDtBQUNYVCxPQUFPd0IsSUFBSSxHQUFHO0lBQWNoQixjQUFjO0FBQU07QUFDaERSLE9BQU95QixRQUFRLEdBQUcsU0FBVUMsSUFBSTtJQUM1QixJQUFJbEIsYUFBYTtRQUNiLE1BQU0sSUFBSW1CLE1BQU07SUFDcEI7SUFDQVQsZ0JBQWdCUTtBQUNwQjtBQUNBRSxPQUFPQyxNQUFNLENBQUM3QjtBQUNkOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FxQkMsR0FDTSxTQUFTOEIsV0FBV1YsT0FBTyxFQUFFQyxLQUFLLEVBQUVULENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEtBQUs7SUFDckQsTUFBTUwsU0FBU04seURBQVFBLENBQUNnQixTQUFTO0lBQ2pDLE1BQU1ULE9BQU9QLHlEQUFRQSxDQUFDaUIsT0FBTztJQUM3QixPQUFPZix3REFBQ0EsQ0FBQ2EsYUFBYVQsUUFBUUMsTUFBTUMsR0FBR0MsR0FBR0MsR0FBR0M7QUFDakQ7QUFDQWUsV0FBV1AsQ0FBQyxHQUFHTjtBQUNmYSxXQUFXTixJQUFJLEdBQUc7SUFBY2pCLGFBQWE7QUFBTTtBQUNuRHVCLFdBQVdMLFFBQVEsR0FBRyxTQUFVQyxJQUFJO0lBQ2hDLElBQUluQixZQUFZO1FBQ1osTUFBTSxJQUFJb0IsTUFBTTtJQUNwQjtJQUNBUixlQUFlTztBQUNuQjtBQUNBRSxPQUFPQyxNQUFNLENBQUNDLGFBQ2Qsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL3NjcnlwdC5qcz8xZGZhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNjcnlwdCBhcyBfbm9ibGVTeW5jLCBzY3J5cHRBc3luYyBhcyBfbm9ibGVBc3luYyB9IGZyb20gXCJAbm9ibGUvaGFzaGVzL3NjcnlwdFwiO1xuaW1wb3J0IHsgZ2V0Qnl0ZXMsIGhleGxpZnkgYXMgSCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xubGV0IGxvY2tlZFN5bmMgPSBmYWxzZSwgbG9ja2VkQXN5bmMgPSBmYWxzZTtcbmNvbnN0IF9zY3J5cHRBc3luYyA9IGFzeW5jIGZ1bmN0aW9uIChwYXNzd2QsIHNhbHQsIE4sIHIsIHAsIGRrTGVuLCBvblByb2dyZXNzKSB7XG4gICAgcmV0dXJuIGF3YWl0IF9ub2JsZUFzeW5jKHBhc3N3ZCwgc2FsdCwgeyBOLCByLCBwLCBka0xlbiwgb25Qcm9ncmVzcyB9KTtcbn07XG5jb25zdCBfc2NyeXB0U3luYyA9IGZ1bmN0aW9uIChwYXNzd2QsIHNhbHQsIE4sIHIsIHAsIGRrTGVuKSB7XG4gICAgcmV0dXJuIF9ub2JsZVN5bmMocGFzc3dkLCBzYWx0LCB7IE4sIHIsIHAsIGRrTGVuIH0pO1xufTtcbmxldCBfX3NjcnlwdEFzeW5jID0gX3NjcnlwdEFzeW5jO1xubGV0IF9fc2NyeXB0U3luYyA9IF9zY3J5cHRTeW5jO1xuLyoqXG4gKiAgVGhlIFtbbGluay13aWtpLXNjcnlwdF1dIHVzZXMgYSBtZW1vcnkgYW5kIGNwdSBoYXJkIG1ldGhvZCBvZlxuICogIGRlcml2YXRpb24gdG8gaW5jcmVhc2UgdGhlIHJlc291cmNlIGNvc3QgdG8gYnJ1dGUtZm9yY2UgYSBwYXNzd29yZFxuICogIGZvciBhIGdpdmVuIGtleS5cbiAqXG4gKiAgVGhpcyBtZWFucyB0aGlzIGFsZ29yaXRobSBpcyBpbnRlbnRpb25hbGx5IHNsb3csIGFuZCBjYW4gYmUgdHVuZWQgdG9cbiAqICBiZWNvbWUgc2xvd2VyLiBBcyBjb21wdXRhdGlvbiBhbmQgbWVtb3J5IHNwZWVkIGltcHJvdmUgb3ZlciB0aW1lLFxuICogIGluY3JlYXNpbmcgdGhlIGRpZmZpY3VsdHkgbWFpbnRhaW5zIHRoZSBjb3N0IG9mIGFuIGF0dGFja2VyLlxuICpcbiAqICBGb3IgZXhhbXBsZSwgaWYgYSB0YXJnZXQgdGltZSBvZiA1IHNlY29uZHMgaXMgdXNlZCwgYSBsZWdpdGltYXRlIHVzZXJcbiAqICB3aGljaCBrbm93cyB0aGVpciBwYXNzd29yZCByZXF1aXJlcyBvbmx5IDUgc2Vjb25kcyB0byB1bmxvY2sgdGhlaXJcbiAqICBhY2NvdW50LiBBIDYgY2hhcmFjdGVyIHBhc3N3b3JkIGhhcyA2OCBiaWxsaW9uIHBvc3NpYmlsaXRpZXMsIHdoaWNoXG4gKiAgd291bGQgcmVxdWlyZSBhbiBhdHRhY2tlciB0byBpbnZlc3Qgb3ZlciAxMCwwMDAgeWVhcnMgb2YgQ1BVIHRpbWUuIFRoaXNcbiAqICBpcyBvZiBjb3Vyc2UgYSBjcnVkZSBleGFtcGxlIChhcyBwYXNzd29yZCBnZW5lcmFsbHkgYXJlbid0IHJhbmRvbSksXG4gKiAgYnV0IGRlbW9uc3RyYXRlcyB0byB2YWx1ZSBvZiBpbXBvc2luZyBsYXJnZSBjb3N0cyB0byBkZWNyeXB0aW9uLlxuICpcbiAqICBGb3IgdGhpcyByZWFzb24sIGlmIGJ1aWxkaW5nIGEgVUkgd2hpY2ggaW52b2x2ZWQgZGVjcnlwdGluZyBvclxuICogIGVuY3J5cHRpbmcgZGF0c2EgdXNpbmcgc2NyeXB0LCBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgYVxuICogIFtbUHJvZ3Jlc3NDYWxsYmFja11dIChhcyBldmVudCBzaG9ydCBwZXJpb2RzIGNhbiBzZWVtIGxpayBhbiBldGVybml0eVxuICogIGlmIHRoZSBVSSBmcmVlemVzKS4gSW5jbHVkaW5nIHRoZSBwaHJhc2UgLy9cImRlY3J5cHRpbmdcIi8vIGluIHRoZSBVSVxuICogIGNhbiBhbHNvIGhlbHAsIGFzc3VyaW5nIHRoZSB1c2VyIHRoZWlyIHdhaXRpbmcgaXMgZm9yIGEgZ29vZCByZWFzb24uXG4gKlxuICogIEBfZG9jbG9jOiBhcGkvY3J5cHRvOlBhc3N3b3Jkc1xuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIC8vIFRoZSBwYXNzd29yZCBtdXN0IGJlIGNvbnZlcnRlZCB0byBieXRlcywgYW5kIGl0IGlzIGdlbmVyYWxseVxuICogICAgLy8gYmVzdCBwcmFjdGljZXMgdG8gZW5zdXJlIHRoZSBzdHJpbmcgaGFzIGJlZW4gbm9ybWFsaXplZC4gTWFueVxuICogICAgLy8gZm9ybWF0cyBleHBsaWNpdGx5IGluZGljYXRlIHRoZSBub3JtYWxpemF0aW9uIGZvcm0gdG8gdXNlLlxuICogICAgcGFzc3dvcmQgPSBcImhlbGxvXCJcbiAqICAgIHBhc3N3b3JkQnl0ZXMgPSB0b1V0ZjhCeXRlcyhwYXNzd29yZCwgXCJORktDXCIpXG4gKlxuICogICAgc2FsdCA9IGlkKFwic29tZS1zYWx0XCIpXG4gKlxuICogICAgLy8gQ29tcHV0ZSB0aGUgc2NyeXB0XG4gKiAgICBzY3J5cHQocGFzc3dvcmRCeXRlcywgc2FsdCwgMTAyNCwgOCwgMSwgMTYpXG4gKiAgICAvL19yZXN1bHQ6XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzY3J5cHQoX3Bhc3N3ZCwgX3NhbHQsIE4sIHIsIHAsIGRrTGVuLCBwcm9ncmVzcykge1xuICAgIGNvbnN0IHBhc3N3ZCA9IGdldEJ5dGVzKF9wYXNzd2QsIFwicGFzc3dkXCIpO1xuICAgIGNvbnN0IHNhbHQgPSBnZXRCeXRlcyhfc2FsdCwgXCJzYWx0XCIpO1xuICAgIHJldHVybiBIKGF3YWl0IF9fc2NyeXB0QXN5bmMocGFzc3dkLCBzYWx0LCBOLCByLCBwLCBka0xlbiwgcHJvZ3Jlc3MpKTtcbn1cbnNjcnlwdC5fID0gX3NjcnlwdEFzeW5jO1xuc2NyeXB0LmxvY2sgPSBmdW5jdGlvbiAoKSB7IGxvY2tlZEFzeW5jID0gdHJ1ZTsgfTtcbnNjcnlwdC5yZWdpc3RlciA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgaWYgKGxvY2tlZEFzeW5jKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInNjcnlwdCBpcyBsb2NrZWRcIik7XG4gICAgfVxuICAgIF9fc2NyeXB0QXN5bmMgPSBmdW5jO1xufTtcbk9iamVjdC5mcmVlemUoc2NyeXB0KTtcbi8qKlxuICogIFByb3ZpZGVzIGEgc3luY2hyb25vdXMgdmFyaWFudCBvZiBbW3NjcnlwdF1dLlxuICpcbiAqICBUaGlzIHdpbGwgY29tcGxldGVseSBsb2NrIHVwIGFuZCBmcmVlemUgdGhlIFVJIGluIGEgYnJvd3NlciBhbmQgd2lsbFxuICogIHByZXZlbnQgYW55IGV2ZW50IGxvb3AgZnJvbSBwcm9ncmVzc2luZy4gRm9yIHRoaXMgcmVhc29uLCBpdCBpc1xuICogIHByZWZlcnJlZCB0byB1c2UgdGhlIFthc3luYyB2YXJpYW50XShzY3J5cHQpLlxuICpcbiAqICBAX2RvY2xvYzogYXBpL2NyeXB0bzpQYXNzd29yZHNcbiAqXG4gKiAgQGV4YW1wbGU6XG4gKiAgICAvLyBUaGUgcGFzc3dvcmQgbXVzdCBiZSBjb252ZXJ0ZWQgdG8gYnl0ZXMsIGFuZCBpdCBpcyBnZW5lcmFsbHlcbiAqICAgIC8vIGJlc3QgcHJhY3RpY2VzIHRvIGVuc3VyZSB0aGUgc3RyaW5nIGhhcyBiZWVuIG5vcm1hbGl6ZWQuIE1hbnlcbiAqICAgIC8vIGZvcm1hdHMgZXhwbGljaXRseSBpbmRpY2F0ZSB0aGUgbm9ybWFsaXphdGlvbiBmb3JtIHRvIHVzZS5cbiAqICAgIHBhc3N3b3JkID0gXCJoZWxsb1wiXG4gKiAgICBwYXNzd29yZEJ5dGVzID0gdG9VdGY4Qnl0ZXMocGFzc3dvcmQsIFwiTkZLQ1wiKVxuICpcbiAqICAgIHNhbHQgPSBpZChcInNvbWUtc2FsdFwiKVxuICpcbiAqICAgIC8vIENvbXB1dGUgdGhlIHNjcnlwdFxuICogICAgc2NyeXB0U3luYyhwYXNzd29yZEJ5dGVzLCBzYWx0LCAxMDI0LCA4LCAxLCAxNilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjcnlwdFN5bmMoX3Bhc3N3ZCwgX3NhbHQsIE4sIHIsIHAsIGRrTGVuKSB7XG4gICAgY29uc3QgcGFzc3dkID0gZ2V0Qnl0ZXMoX3Bhc3N3ZCwgXCJwYXNzd2RcIik7XG4gICAgY29uc3Qgc2FsdCA9IGdldEJ5dGVzKF9zYWx0LCBcInNhbHRcIik7XG4gICAgcmV0dXJuIEgoX19zY3J5cHRTeW5jKHBhc3N3ZCwgc2FsdCwgTiwgciwgcCwgZGtMZW4pKTtcbn1cbnNjcnlwdFN5bmMuXyA9IF9zY3J5cHRTeW5jO1xuc2NyeXB0U3luYy5sb2NrID0gZnVuY3Rpb24gKCkgeyBsb2NrZWRTeW5jID0gdHJ1ZTsgfTtcbnNjcnlwdFN5bmMucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZnVuYykge1xuICAgIGlmIChsb2NrZWRTeW5jKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInNjcnlwdFN5bmMgaXMgbG9ja2VkXCIpO1xuICAgIH1cbiAgICBfX3NjcnlwdFN5bmMgPSBmdW5jO1xufTtcbk9iamVjdC5mcmVlemUoc2NyeXB0U3luYyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY3J5cHQuanMubWFwIl0sIm5hbWVzIjpbInNjcnlwdCIsIl9ub2JsZVN5bmMiLCJzY3J5cHRBc3luYyIsIl9ub2JsZUFzeW5jIiwiZ2V0Qnl0ZXMiLCJoZXhsaWZ5IiwiSCIsImxvY2tlZFN5bmMiLCJsb2NrZWRBc3luYyIsIl9zY3J5cHRBc3luYyIsInBhc3N3ZCIsInNhbHQiLCJOIiwiciIsInAiLCJka0xlbiIsIm9uUHJvZ3Jlc3MiLCJfc2NyeXB0U3luYyIsIl9fc2NyeXB0QXN5bmMiLCJfX3NjcnlwdFN5bmMiLCJfcGFzc3dkIiwiX3NhbHQiLCJwcm9ncmVzcyIsIl8iLCJsb2NrIiwicmVnaXN0ZXIiLCJmdW5jIiwiRXJyb3IiLCJPYmplY3QiLCJmcmVlemUiLCJzY3J5cHRTeW5jIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/scrypt.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/sha2.js":
/*!*****************************************************!*\
  !*** ../node_modules/ethers/lib.esm/crypto/sha2.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha256: function() { return /* binding */ sha256; },\n/* harmony export */   sha512: function() { return /* binding */ sha512; }\n/* harmony export */ });\n/* harmony import */ var _crypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crypto.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/crypto-browser.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n\n\nconst _sha256 = function(data) {\n    return (0,_crypto_js__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"sha256\").update(data).digest();\n};\nconst _sha512 = function(data) {\n    return (0,_crypto_js__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"sha512\").update(data).digest();\n};\nlet __sha256 = _sha256;\nlet __sha512 = _sha512;\nlet locked256 = false, locked512 = false;\n/**\n *  Compute the cryptographic SHA2-256 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha256(\"0x\")\n *    //_result:\n *\n *    sha256(\"0x1337\")\n *    //_result:\n *\n *    sha256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */ function sha256(_data) {\n    const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_data, \"data\");\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(__sha256(data));\n}\nsha256._ = _sha256;\nsha256.lock = function() {\n    locked256 = true;\n};\nsha256.register = function(func) {\n    if (locked256) {\n        throw new Error(\"sha256 is locked\");\n    }\n    __sha256 = func;\n};\nObject.freeze(sha256);\n/**\n *  Compute the cryptographic SHA2-512 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha512(\"0x\")\n *    //_result:\n *\n *    sha512(\"0x1337\")\n *    //_result:\n *\n *    sha512(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n */ function sha512(_data) {\n    const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_data, \"data\");\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(__sha512(data));\n}\nsha512._ = _sha512;\nsha512.lock = function() {\n    locked512 = true;\n};\nsha512.register = function(func) {\n    if (locked512) {\n        throw new Error(\"sha512 is locked\");\n    }\n    __sha512 = func;\n};\nObject.freeze(sha256); //# sourceMappingURL=sha2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL3NoYTIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF5QztBQUNhO0FBQ3RELE1BQU1HLFVBQVUsU0FBVUMsSUFBSTtJQUMxQixPQUFPSixzREFBVUEsQ0FBQyxVQUFVSyxNQUFNLENBQUNELE1BQU1FLE1BQU07QUFDbkQ7QUFDQSxNQUFNQyxVQUFVLFNBQVVILElBQUk7SUFDMUIsT0FBT0osc0RBQVVBLENBQUMsVUFBVUssTUFBTSxDQUFDRCxNQUFNRSxNQUFNO0FBQ25EO0FBQ0EsSUFBSUUsV0FBV0w7QUFDZixJQUFJTSxXQUFXRjtBQUNmLElBQUlHLFlBQVksT0FBT0MsWUFBWTtBQUNuQzs7Ozs7Ozs7Ozs7Ozs7OztDQWdCQyxHQUNNLFNBQVNDLE9BQU9DLEtBQUs7SUFDeEIsTUFBTVQsT0FBT0gseURBQVFBLENBQUNZLE9BQU87SUFDN0IsT0FBT1gsd0RBQU9BLENBQUNNLFNBQVNKO0FBQzVCO0FBQ0FRLE9BQU9FLENBQUMsR0FBR1g7QUFDWFMsT0FBT0csSUFBSSxHQUFHO0lBQWNMLFlBQVk7QUFBTTtBQUM5Q0UsT0FBT0ksUUFBUSxHQUFHLFNBQVVDLElBQUk7SUFDNUIsSUFBSVAsV0FBVztRQUNYLE1BQU0sSUFBSVEsTUFBTTtJQUNwQjtJQUNBVixXQUFXUztBQUNmO0FBQ0FFLE9BQU9DLE1BQU0sQ0FBQ1I7QUFDZDs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDTSxTQUFTUyxPQUFPUixLQUFLO0lBQ3hCLE1BQU1ULE9BQU9ILHlEQUFRQSxDQUFDWSxPQUFPO0lBQzdCLE9BQU9YLHdEQUFPQSxDQUFDTyxTQUFTTDtBQUM1QjtBQUNBaUIsT0FBT1AsQ0FBQyxHQUFHUDtBQUNYYyxPQUFPTixJQUFJLEdBQUc7SUFBY0osWUFBWTtBQUFNO0FBQzlDVSxPQUFPTCxRQUFRLEdBQUcsU0FBVUMsSUFBSTtJQUM1QixJQUFJTixXQUFXO1FBQ1gsTUFBTSxJQUFJTyxNQUFNO0lBQ3BCO0lBQ0FULFdBQVdRO0FBQ2Y7QUFDQUUsT0FBT0MsTUFBTSxDQUFDUixTQUNkLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2NyeXB0by9zaGEyLmpzPzgxMmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSGFzaCB9IGZyb20gXCIuL2NyeXB0by5qc1wiO1xuaW1wb3J0IHsgZ2V0Qnl0ZXMsIGhleGxpZnkgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmNvbnN0IF9zaGEyNTYgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBjcmVhdGVIYXNoKFwic2hhMjU2XCIpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKTtcbn07XG5jb25zdCBfc2hhNTEyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gY3JlYXRlSGFzaChcInNoYTUxMlwiKS51cGRhdGUoZGF0YSkuZGlnZXN0KCk7XG59O1xubGV0IF9fc2hhMjU2ID0gX3NoYTI1NjtcbmxldCBfX3NoYTUxMiA9IF9zaGE1MTI7XG5sZXQgbG9ja2VkMjU2ID0gZmFsc2UsIGxvY2tlZDUxMiA9IGZhbHNlO1xuLyoqXG4gKiAgQ29tcHV0ZSB0aGUgY3J5cHRvZ3JhcGhpYyBTSEEyLTI1NiBoYXNoIG9mICUlZGF0YSUlLlxuICpcbiAqICBAX2RvY2xvYzogYXBpL2NyeXB0bzpIYXNoIEZ1bmN0aW9uc1xuICogIEByZXR1cm5zIERhdGFIZXhzdHJpbmdcbiAqXG4gKiAgQGV4YW1wbGU6XG4gKiAgICBzaGEyNTYoXCIweFwiKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIHNoYTI1NihcIjB4MTMzN1wiKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIHNoYTI1NihuZXcgVWludDhBcnJheShbIDB4MTMsIDB4MzcgXSkpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hhMjU2KF9kYXRhKSB7XG4gICAgY29uc3QgZGF0YSA9IGdldEJ5dGVzKF9kYXRhLCBcImRhdGFcIik7XG4gICAgcmV0dXJuIGhleGxpZnkoX19zaGEyNTYoZGF0YSkpO1xufVxuc2hhMjU2Ll8gPSBfc2hhMjU2O1xuc2hhMjU2LmxvY2sgPSBmdW5jdGlvbiAoKSB7IGxvY2tlZDI1NiA9IHRydWU7IH07XG5zaGEyNTYucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZnVuYykge1xuICAgIGlmIChsb2NrZWQyNTYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2hhMjU2IGlzIGxvY2tlZFwiKTtcbiAgICB9XG4gICAgX19zaGEyNTYgPSBmdW5jO1xufTtcbk9iamVjdC5mcmVlemUoc2hhMjU2KTtcbi8qKlxuICogIENvbXB1dGUgdGhlIGNyeXB0b2dyYXBoaWMgU0hBMi01MTIgaGFzaCBvZiAlJWRhdGElJS5cbiAqXG4gKiAgQF9kb2Nsb2M6IGFwaS9jcnlwdG86SGFzaCBGdW5jdGlvbnNcbiAqICBAcmV0dXJucyBEYXRhSGV4c3RyaW5nXG4gKlxuICogIEBleGFtcGxlOlxuICogICAgc2hhNTEyKFwiMHhcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICBzaGE1MTIoXCIweDEzMzdcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICBzaGE1MTIobmV3IFVpbnQ4QXJyYXkoWyAweDEzLCAweDM3IF0pKVxuICogICAgLy9fcmVzdWx0OlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hhNTEyKF9kYXRhKSB7XG4gICAgY29uc3QgZGF0YSA9IGdldEJ5dGVzKF9kYXRhLCBcImRhdGFcIik7XG4gICAgcmV0dXJuIGhleGxpZnkoX19zaGE1MTIoZGF0YSkpO1xufVxuc2hhNTEyLl8gPSBfc2hhNTEyO1xuc2hhNTEyLmxvY2sgPSBmdW5jdGlvbiAoKSB7IGxvY2tlZDUxMiA9IHRydWU7IH07XG5zaGE1MTIucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZnVuYykge1xuICAgIGlmIChsb2NrZWQ1MTIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2hhNTEyIGlzIGxvY2tlZFwiKTtcbiAgICB9XG4gICAgX19zaGE1MTIgPSBmdW5jO1xufTtcbk9iamVjdC5mcmVlemUoc2hhMjU2KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYTIuanMubWFwIl0sIm5hbWVzIjpbImNyZWF0ZUhhc2giLCJnZXRCeXRlcyIsImhleGxpZnkiLCJfc2hhMjU2IiwiZGF0YSIsInVwZGF0ZSIsImRpZ2VzdCIsIl9zaGE1MTIiLCJfX3NoYTI1NiIsIl9fc2hhNTEyIiwibG9ja2VkMjU2IiwibG9ja2VkNTEyIiwic2hhMjU2IiwiX2RhdGEiLCJfIiwibG9jayIsInJlZ2lzdGVyIiwiZnVuYyIsIkVycm9yIiwiT2JqZWN0IiwiZnJlZXplIiwic2hhNTEyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/sha2.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signature.js":
/*!**********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/crypto/signature.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Signature: function() { return /* binding */ Signature; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constants/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/constants/hashes.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n\n\n\n\n\n// Constants\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst _guard = {};\nfunction toUint256(value) {\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toBeArray)(value), 32);\n}\nvar _r = /*#__PURE__*/ new WeakMap(), _s = /*#__PURE__*/ new WeakMap(), _v = /*#__PURE__*/ new WeakMap(), _networkV = /*#__PURE__*/ new WeakMap();\nlet _Symbol_for = Symbol.for(\"nodejs.util.inspect.custom\");\n/**\n *  A Signature  @TODO\n *\n *\n *  @_docloc: api/crypto:Signing\n */ class Signature {\n    /**\n     *  The ``r`` value for a signautre.\n     *\n     *  This represents the ``x`` coordinate of a \"reference\" or\n     *  challenge point, from which the ``y`` can be computed.\n     */ get r() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _r);\n    }\n    set r(value) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataLength)(value) === 32, \"invalid r\", \"value\", value);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _r, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(value));\n    }\n    /**\n     *  The ``s`` value for a signature.\n     */ get s() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _s);\n    }\n    set s(_value) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataLength)(_value) === 32, \"invalid s\", \"value\", _value);\n        const value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(_value);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _s, value);\n    }\n    /**\n     *  The ``v`` value for a signature.\n     *\n     *  Since a given ``x`` value for ``r`` has two possible values for\n     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n     *  values to use.\n     *\n     *  It is normalized to the values ``27`` or ``28`` for legacy\n     *  purposes.\n     */ get v() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _v);\n    }\n    set v(value) {\n        const v = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getNumber)(value, \"value\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(v === 27 || v === 28, \"invalid v\", \"v\", value);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _v, v);\n    }\n    /**\n     *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */ get networkV() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _networkV);\n    }\n    /**\n     *  The chain ID for EIP-155 legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */ get legacyChainId() {\n        const v = this.networkV;\n        if (v == null) {\n            return null;\n        }\n        return Signature.getChainId(v);\n    }\n    /**\n     *  The ``yParity`` for the signature.\n     *\n     *  See ``v`` for more details on how this value is used.\n     */ get yParity() {\n        return this.v === 27 ? 0 : 1;\n    }\n    /**\n     *  The [[link-eip-2098]] compact representation of the ``yParity``\n     *  and ``s`` compacted into a single ``bytes32``.\n     */ get yParityAndS() {\n        // The EIP-2098 compact representation\n        const yParityAndS = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(this.s);\n        if (this.yParity) {\n            yParityAndS[0] |= 0x80;\n        }\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(yParityAndS);\n    }\n    /**\n     *  The [[link-eip-2098]] compact representation.\n     */ get compactSerialized() {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\n            this.r,\n            this.yParityAndS\n        ]);\n    }\n    /**\n     *  The serialized representation.\n     */ get serialized() {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\n            this.r,\n            this.s,\n            this.yParity ? \"0x1c\" : \"0x1b\"\n        ]);\n    }\n    [_Symbol_for]() {\n        return 'Signature { r: \"'.concat(this.r, '\", s: \"').concat(this.s, '\", yParity: ').concat(this.yParity, \", networkV: \").concat(this.networkV, \" }\");\n    }\n    /**\n     *  Returns a new identical [[Signature]].\n     */ clone() {\n        const clone = new Signature(_guard, this.r, this.s, this.v);\n        if (this.networkV) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(clone, _networkV, this.networkV);\n        }\n        return clone;\n    }\n    /**\n     *  Returns a representation that is compatible with ``JSON.stringify``.\n     */ toJSON() {\n        const networkV = this.networkV;\n        return {\n            _type: \"signature\",\n            networkV: networkV != null ? networkV.toString() : null,\n            r: this.r,\n            s: this.s,\n            v: this.v\n        };\n    }\n    /**\n     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n     *\n     *  @example:\n     *    Signature.getChainId(45)\n     *    //_result:\n     *\n     *    Signature.getChainId(46)\n     *    //_result:\n     */ static getChainId(v) {\n        const bv = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(v, \"v\");\n        // The v is not an EIP-155 v, so it is the unspecified chain ID\n        if (bv == BN_27 || bv == BN_28) {\n            return BN_0;\n        }\n        // Bad value for an EIP-155 v\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n        return (bv - BN_35) / BN_2;\n    }\n    /**\n     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n     *\n     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n     *  property to include the chain ID.\n     *\n     *  @example:\n     *    Signature.getChainIdV(5, 27)\n     *    //_result:\n     *\n     *    Signature.getChainIdV(5, 28)\n     *    //_result:\n     *\n     */ static getChainIdV(chainId, v) {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(chainId) * BN_2 + BigInt(35 + v - 27);\n    }\n    /**\n     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n     *\n     *  @example:\n     *    // The values 0 and 1 imply v is actually yParity\n     *    Signature.getNormalizedV(0)\n     *    //_result:\n     *\n     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n     *    Signature.getNormalizedV(27)\n     *    //_result:\n     *\n     *    // Legacy EIP-155 transaction (i.e. >= 35)\n     *    Signature.getNormalizedV(46)\n     *    //_result:\n     *\n     *    // Invalid values throw\n     *    Signature.getNormalizedV(5)\n     *    //_error:\n     */ static getNormalizedV(v) {\n        const bv = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(v);\n        if (bv === BN_0 || bv === BN_27) {\n            return 27;\n        }\n        if (bv === BN_1 || bv === BN_28) {\n            return 28;\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(bv >= BN_35, \"invalid v\", \"v\", v);\n        // Otherwise, EIP-155 v means odd is 27 and even is 28\n        return bv & BN_1 ? 27 : 28;\n    }\n    /**\n     *  Creates a new [[Signature]].\n     *\n     *  If no %%sig%% is provided, a new [[Signature]] is created\n     *  with default values.\n     *\n     *  If %%sig%% is a string, it is parsed.\n     */ static from(sig) {\n        function assertError(check, message) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(check, message, \"signature\", sig);\n        }\n        ;\n        if (sig == null) {\n            return new Signature(_guard, _constants_index_js__WEBPACK_IMPORTED_MODULE_5__.ZeroHash, _constants_index_js__WEBPACK_IMPORTED_MODULE_5__.ZeroHash, 27);\n        }\n        if (typeof sig === \"string\") {\n            const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(sig, \"signature\");\n            if (bytes.length === 64) {\n                const r = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                const v = s[0] & 0x80 ? 28 : 27;\n                s[0] &= 0x7f;\n                return new Signature(_guard, r, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(s), v);\n            }\n            if (bytes.length === 65) {\n                const r = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                assertError((s[0] & 0x80) === 0, \"non-canonical s\");\n                const v = Signature.getNormalizedV(bytes[64]);\n                return new Signature(_guard, r, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(s), v);\n            }\n            assertError(false, \"invalid raw signature length\");\n        }\n        if (sig instanceof Signature) {\n            return sig.clone();\n        }\n        // Get r\n        const _r = sig.r;\n        assertError(_r != null, \"missing r\");\n        const r = toUint256(_r);\n        // Get s; by any means necessary (we check consistency below)\n        const s = function(s, yParityAndS) {\n            if (s != null) {\n                return toUint256(s);\n            }\n            if (yParityAndS != null) {\n                assertError((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(yParityAndS, 32), \"invalid yParityAndS\");\n                const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(yParityAndS);\n                bytes[0] &= 0x7f;\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes);\n            }\n            assertError(false, \"missing s\");\n        }(sig.s, sig.yParityAndS);\n        assertError(((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(s)[0] & 0x80) == 0, \"non-canonical s\");\n        // Get v; by any means necessary (we check consistency below)\n        const { networkV, v } = function(_v, yParityAndS, yParity) {\n            if (_v != null) {\n                const v = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(_v);\n                return {\n                    networkV: v >= BN_35 ? v : undefined,\n                    v: Signature.getNormalizedV(v)\n                };\n            }\n            if (yParityAndS != null) {\n                assertError((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(yParityAndS, 32), \"invalid yParityAndS\");\n                return {\n                    v: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(yParityAndS)[0] & 0x80 ? 28 : 27\n                };\n            }\n            if (yParity != null) {\n                switch((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getNumber)(yParity, \"sig.yParity\")){\n                    case 0:\n                        return {\n                            v: 27\n                        };\n                    case 1:\n                        return {\n                            v: 28\n                        };\n                }\n                assertError(false, \"invalid yParity\");\n            }\n            assertError(false, \"missing v\");\n        }(sig.v, sig.yParityAndS, sig.yParity);\n        const result = new Signature(_guard, r, s, v);\n        if (networkV) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(result, _networkV, networkV);\n        }\n        // If multiple of v, yParity, yParityAndS we given, check they match\n        assertError(sig.yParity == null || (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getNumber)(sig.yParity, \"sig.yParity\") === result.yParity, \"yParity mismatch\");\n        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, \"yParityAndS mismatch\");\n        return result;\n    }\n    /**\n     *  @private\n     */ constructor(guard, r, s, v){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _r, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _s, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _v, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _networkV, {\n            writable: true,\n            value: void 0\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertPrivate)(guard, _guard, \"Signature\");\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _r, r);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _s, s);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _v, v);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _networkV, null);\n    }\n} //# sourceMappingURL=signature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signature.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signing-key.js":
/*!************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/crypto/signing-key.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SigningKey: function() { return /* binding */ SigningKey; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(app-pages-browser)/../node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./signature.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signature.js\");\n/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */ \n\n\n\n\n\nvar _privateKey = /*#__PURE__*/ new WeakMap();\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */ class SigningKey {\n    /**\n     *  The private key.\n     */ get privateKey() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _privateKey);\n    }\n    /**\n     *  The uncompressed public key.\n     *\n     * This will always begin with the prefix ``0x04`` and be 132\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n     */ get publicKey() {\n        return SigningKey.computePublicKey((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _privateKey));\n    }\n    /**\n     *  The compressed public key.\n     *\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n     *  nibbles)\n     */ get compressedPublicKey() {\n        return SigningKey.computePublicKey((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _privateKey), true);\n    }\n    /**\n     *  Return the signature of the signed %%digest%%.\n     */ sign(digest) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.dataLength)(digest) === 32, \"invalid digest length\", \"digest\", digest);\n        const sig = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_3__.secp256k1.sign((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytesCopy)(digest), (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytesCopy)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _privateKey)), {\n            lowS: true\n        });\n        return _signature_js__WEBPACK_IMPORTED_MODULE_4__.Signature.from({\n            r: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.toBeHex)(sig.r, 32),\n            s: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.toBeHex)(sig.s, 32),\n            v: sig.recovery ? 0x1c : 0x1b\n        });\n    }\n    /**\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\n     *  private key and the %%other%% key.\n     *\n     *  The %%other%% key may be any type of key, a raw public key,\n     *  a compressed/uncompressed pubic key or aprivate key.\n     *\n     *  Best practice is usually to use a cryptographic hash on the\n     *  returned value before using it as a symetric secret.\n     *\n     *  @example:\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\n     *\n     *    // Notice that privA.computeSharedSecret(pubB)...\n     *    sign1.computeSharedSecret(sign2.publicKey)\n     *    //_result:\n     *\n     *    // ...is equal to privB.computeSharedSecret(pubA).\n     *    sign2.computeSharedSecret(sign1.publicKey)\n     *    //_result:\n     */ computeSharedSecret(other) {\n        const pubKey = SigningKey.computePublicKey(other);\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_3__.secp256k1.getSharedSecret((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytesCopy)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _privateKey)), (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(pubKey), false));\n    }\n    /**\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\n     *\n     *  The %%key%% may be any type of key, a raw public key, a\n     *  compressed/uncompressed public key or private key.\n     *\n     *  @example:\n     *    sign = new SigningKey(id(\"some-secret\"));\n     *\n     *    // Compute the uncompressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey)\n     *    //_result:\n     *\n     *    // Compute the compressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey, true)\n     *    //_result:\n     *\n     *    // Compute the uncompressed public key\n     *    SigningKey.computePublicKey(sign.publicKey, false);\n     *    //_result:\n     *\n     *    // Compute the Compressed a public key\n     *    SigningKey.computePublicKey(sign.publicKey, true);\n     *    //_result:\n     */ static computePublicKey(key, compressed) {\n        let bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(key, \"key\");\n        // private key\n        if (bytes.length === 32) {\n            const pubKey = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_3__.secp256k1.getPublicKey(bytes, !!compressed);\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(pubKey);\n        }\n        // raw public key; use uncompressed key with 0x04 prefix\n        if (bytes.length === 64) {\n            const pub = new Uint8Array(65);\n            pub[0] = 0x04;\n            pub.set(bytes, 1);\n            bytes = pub;\n        }\n        const point = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_3__.secp256k1.ProjectivePoint.fromHex(bytes);\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(point.toRawBytes(compressed));\n    }\n    /**\n     *  Returns the public key for the private key which produced the\n     *  %%signature%% for the given %%digest%%.\n     *\n     *  @example:\n     *    key = new SigningKey(id(\"some-secret\"))\n     *    digest = id(\"hello world\")\n     *    sig = key.sign(digest)\n     *\n     *    // Notice the signer public key...\n     *    key.publicKey\n     *    //_result:\n     *\n     *    // ...is equal to the recovered public key\n     *    SigningKey.recoverPublicKey(digest, sig)\n     *    //_result:\n     *\n     */ static recoverPublicKey(digest, signature) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.dataLength)(digest) === 32, \"invalid digest length\", \"digest\", digest);\n        const sig = _signature_js__WEBPACK_IMPORTED_MODULE_4__.Signature.from(signature);\n        let secpSig = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_3__.secp256k1.Signature.fromCompact((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytesCopy)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.concat)([\n            sig.r,\n            sig.s\n        ])));\n        secpSig = secpSig.addRecoveryBit(sig.yParity);\n        const pubKey = secpSig.recoverPublicKey((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytesCopy)(digest));\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\n        return \"0x\" + pubKey.toHex(false);\n    }\n    /**\n     *  Returns the point resulting from adding the ellipic curve points\n     *  %%p0%% and %%p1%%.\n     *\n     *  This is not a common function most developers should require, but\n     *  can be useful for certain privacy-specific techniques.\n     *\n     *  For example, it is used by [[HDNodeWallet]] to compute child\n     *  addresses from parent public keys and chain codes.\n     */ static addPoints(p0, p1, compressed) {\n        const pub0 = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_3__.secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p0).substring(2));\n        const pub1 = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_3__.secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p1).substring(2));\n        return \"0x\" + pub0.add(pub1).toHex(!!compressed);\n    }\n    /**\n     *  Creates a new **SigningKey** for %%privateKey%%.\n     */ constructor(privateKey){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _privateKey, {\n            writable: true,\n            value: void 0\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.dataLength)(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__._)(this, _privateKey, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(privateKey));\n    }\n} //# sourceMappingURL=signing-key.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signing-key.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/ethers.js":
/*!************************************************!*\
  !*** ../node_modules/ethers/lib.esm/ethers.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbiCoder: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_2__.AbiCoder; },\n/* harmony export */   AbstractProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_36__.AbstractProvider; },\n/* harmony export */   AbstractSigner: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_34__.AbstractSigner; },\n/* harmony export */   AlchemyProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_40__.AlchemyProvider; },\n/* harmony export */   AnkrProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_41__.AnkrProvider; },\n/* harmony export */   BaseContract: function() { return /* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_14__.BaseContract; },\n/* harmony export */   BaseWallet: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_72__.BaseWallet; },\n/* harmony export */   Block: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_33__.Block; },\n/* harmony export */   BrowserProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_39__.BrowserProvider; },\n/* harmony export */   CloudflareProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_42__.CloudflareProvider; },\n/* harmony export */   ConstructorFragment: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_3__.ConstructorFragment; },\n/* harmony export */   Contract: function() { return /* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_14__.Contract; },\n/* harmony export */   ContractEventPayload: function() { return /* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_16__.ContractEventPayload; },\n/* harmony export */   ContractFactory: function() { return /* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_15__.ContractFactory; },\n/* harmony export */   ContractTransactionReceipt: function() { return /* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_16__.ContractTransactionReceipt; },\n/* harmony export */   ContractTransactionResponse: function() { return /* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_16__.ContractTransactionResponse; },\n/* harmony export */   ContractUnknownEventPayload: function() { return /* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_16__.ContractUnknownEventPayload; },\n/* harmony export */   EnsPlugin: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_52__.EnsPlugin; },\n/* harmony export */   EnsResolver: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_50__.EnsResolver; },\n/* harmony export */   ErrorDescription: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_5__.ErrorDescription; },\n/* harmony export */   ErrorFragment: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_3__.ErrorFragment; },\n/* harmony export */   EtherSymbol: function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_13__.EtherSymbol; },\n/* harmony export */   EtherscanPlugin: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_43__.EtherscanPlugin; },\n/* harmony export */   EtherscanProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_43__.EtherscanProvider; },\n/* harmony export */   EventFragment: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_3__.EventFragment; },\n/* harmony export */   EventLog: function() { return /* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_16__.EventLog; },\n/* harmony export */   EventPayload: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_62__.EventPayload; },\n/* harmony export */   FallbackFragment: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_3__.FallbackFragment; },\n/* harmony export */   FallbackProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_37__.FallbackProvider; },\n/* harmony export */   FeeData: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_33__.FeeData; },\n/* harmony export */   FeeDataNetworkPlugin: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_52__.FeeDataNetworkPlugin; },\n/* harmony export */   FetchCancelSignal: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_63__.FetchCancelSignal; },\n/* harmony export */   FetchRequest: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_63__.FetchRequest; },\n/* harmony export */   FetchResponse: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_63__.FetchResponse; },\n/* harmony export */   FetchUrlFeeDataNetworkPlugin: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_52__.FetchUrlFeeDataNetworkPlugin; },\n/* harmony export */   FixedNumber: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_64__.FixedNumber; },\n/* harmony export */   Fragment: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_3__.Fragment; },\n/* harmony export */   FunctionFragment: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_3__.FunctionFragment; },\n/* harmony export */   GasCostPlugin: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_52__.GasCostPlugin; },\n/* harmony export */   HDNodeVoidWallet: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_73__.HDNodeVoidWallet; },\n/* harmony export */   HDNodeWallet: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_73__.HDNodeWallet; },\n/* harmony export */   Indexed: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_5__.Indexed; },\n/* harmony export */   InfuraProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_44__.InfuraProvider; },\n/* harmony export */   InfuraWebSocketProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_44__.InfuraWebSocketProvider; },\n/* harmony export */   Interface: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_5__.Interface; },\n/* harmony export */   IpcSocketProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_47__.IpcSocketProvider; },\n/* harmony export */   JsonRpcApiProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_38__.JsonRpcApiProvider; },\n/* harmony export */   JsonRpcProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_38__.JsonRpcProvider; },\n/* harmony export */   JsonRpcSigner: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_38__.JsonRpcSigner; },\n/* harmony export */   LangEn: function() { return /* reexport safe */ _wordlists_index_js__WEBPACK_IMPORTED_MODULE_78__.LangEn; },\n/* harmony export */   Log: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_33__.Log; },\n/* harmony export */   LogDescription: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_5__.LogDescription; },\n/* harmony export */   MaxInt256: function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_11__.MaxInt256; },\n/* harmony export */   MaxUint256: function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_11__.MaxUint256; },\n/* harmony export */   MessagePrefix: function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_13__.MessagePrefix; },\n/* harmony export */   MinInt256: function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_11__.MinInt256; },\n/* harmony export */   Mnemonic: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_71__.Mnemonic; },\n/* harmony export */   MulticoinProviderPlugin: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_50__.MulticoinProviderPlugin; },\n/* harmony export */   N: function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_11__.N; },\n/* harmony export */   NamedFragment: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_3__.NamedFragment; },\n/* harmony export */   Network: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_51__.Network; },\n/* harmony export */   NetworkPlugin: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_52__.NetworkPlugin; },\n/* harmony export */   NonceManager: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_35__.NonceManager; },\n/* harmony export */   ParamType: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_3__.ParamType; },\n/* harmony export */   PocketProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_45__.PocketProvider; },\n/* harmony export */   QuickNodeProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_46__.QuickNodeProvider; },\n/* harmony export */   Result: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_4__.Result; },\n/* harmony export */   Signature: function() { return /* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_25__.Signature; },\n/* harmony export */   SigningKey: function() { return /* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_26__.SigningKey; },\n/* harmony export */   SocketBlockSubscriber: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_48__.SocketBlockSubscriber; },\n/* harmony export */   SocketEventSubscriber: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_48__.SocketEventSubscriber; },\n/* harmony export */   SocketPendingSubscriber: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_48__.SocketPendingSubscriber; },\n/* harmony export */   SocketProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_48__.SocketProvider; },\n/* harmony export */   SocketSubscriber: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_48__.SocketSubscriber; },\n/* harmony export */   StructFragment: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_3__.StructFragment; },\n/* harmony export */   Transaction: function() { return /* reexport safe */ _transaction_index_js__WEBPACK_IMPORTED_MODULE_56__.Transaction; },\n/* harmony export */   TransactionDescription: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_5__.TransactionDescription; },\n/* harmony export */   TransactionReceipt: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_33__.TransactionReceipt; },\n/* harmony export */   TransactionResponse: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_33__.TransactionResponse; },\n/* harmony export */   Typed: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_6__.Typed; },\n/* harmony export */   TypedDataEncoder: function() { return /* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_31__.TypedDataEncoder; },\n/* harmony export */   UndecodedEventLog: function() { return /* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_16__.UndecodedEventLog; },\n/* harmony export */   UnmanagedSubscriber: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_36__.UnmanagedSubscriber; },\n/* harmony export */   Utf8ErrorFuncs: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_67__.Utf8ErrorFuncs; },\n/* harmony export */   VoidSigner: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_34__.VoidSigner; },\n/* harmony export */   Wallet: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_74__.Wallet; },\n/* harmony export */   WebSocketProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_49__.WebSocketProvider; },\n/* harmony export */   WeiPerEther: function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_11__.WeiPerEther; },\n/* harmony export */   Wordlist: function() { return /* reexport safe */ _wordlists_index_js__WEBPACK_IMPORTED_MODULE_77__.Wordlist; },\n/* harmony export */   WordlistOwl: function() { return /* reexport safe */ _wordlists_index_js__WEBPACK_IMPORTED_MODULE_79__.WordlistOwl; },\n/* harmony export */   WordlistOwlA: function() { return /* reexport safe */ _wordlists_index_js__WEBPACK_IMPORTED_MODULE_80__.WordlistOwlA; },\n/* harmony export */   ZeroAddress: function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_10__.ZeroAddress; },\n/* harmony export */   ZeroHash: function() { return /* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_12__.ZeroHash; },\n/* harmony export */   accessListify: function() { return /* reexport safe */ _transaction_index_js__WEBPACK_IMPORTED_MODULE_54__.accessListify; },\n/* harmony export */   assert: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_61__.assert; },\n/* harmony export */   assertArgument: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_61__.assertArgument; },\n/* harmony export */   assertArgumentCount: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_61__.assertArgumentCount; },\n/* harmony export */   assertNormalize: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_61__.assertNormalize; },\n/* harmony export */   assertPrivate: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_61__.assertPrivate; },\n/* harmony export */   checkResultErrors: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_4__.checkResultErrors; },\n/* harmony export */   computeAddress: function() { return /* reexport safe */ _transaction_index_js__WEBPACK_IMPORTED_MODULE_55__.computeAddress; },\n/* harmony export */   computeHmac: function() { return /* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_17__.computeHmac; },\n/* harmony export */   concat: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_59__.concat; },\n/* harmony export */   copyRequest: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_33__.copyRequest; },\n/* harmony export */   dataLength: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_59__.dataLength; },\n/* harmony export */   dataSlice: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_59__.dataSlice; },\n/* harmony export */   decodeBase58: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_57__.decodeBase58; },\n/* harmony export */   decodeBase64: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_58__.decodeBase64; },\n/* harmony export */   decodeBytes32String: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.decodeBytes32String; },\n/* harmony export */   decodeRlp: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_68__.decodeRlp; },\n/* harmony export */   decryptCrowdsaleJson: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_75__.decryptCrowdsaleJson; },\n/* harmony export */   decryptKeystoreJson: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_76__.decryptKeystoreJson; },\n/* harmony export */   decryptKeystoreJsonSync: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_76__.decryptKeystoreJsonSync; },\n/* harmony export */   defaultPath: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_73__.defaultPath; },\n/* harmony export */   defineProperties: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_60__.defineProperties; },\n/* harmony export */   dnsEncode: function() { return /* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_28__.dnsEncode; },\n/* harmony export */   encodeBase58: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_57__.encodeBase58; },\n/* harmony export */   encodeBase64: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_58__.encodeBase64; },\n/* harmony export */   encodeBytes32String: function() { return /* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.encodeBytes32String; },\n/* harmony export */   encodeRlp: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_69__.encodeRlp; },\n/* harmony export */   encryptKeystoreJson: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_76__.encryptKeystoreJson; },\n/* harmony export */   encryptKeystoreJsonSync: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_76__.encryptKeystoreJsonSync; },\n/* harmony export */   ensNormalize: function() { return /* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_28__.ensNormalize; },\n/* harmony export */   formatEther: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_66__.formatEther; },\n/* harmony export */   formatUnits: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_66__.formatUnits; },\n/* harmony export */   fromTwos: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_65__.fromTwos; },\n/* harmony export */   getAccountPath: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_73__.getAccountPath; },\n/* harmony export */   getAddress: function() { return /* reexport safe */ _address_index_js__WEBPACK_IMPORTED_MODULE_7__.getAddress; },\n/* harmony export */   getBigInt: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_65__.getBigInt; },\n/* harmony export */   getBytes: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_59__.getBytes; },\n/* harmony export */   getBytesCopy: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_59__.getBytesCopy; },\n/* harmony export */   getCreate2Address: function() { return /* reexport safe */ _address_index_js__WEBPACK_IMPORTED_MODULE_8__.getCreate2Address; },\n/* harmony export */   getCreateAddress: function() { return /* reexport safe */ _address_index_js__WEBPACK_IMPORTED_MODULE_8__.getCreateAddress; },\n/* harmony export */   getDefaultProvider: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_32__.getDefaultProvider; },\n/* harmony export */   getIcapAddress: function() { return /* reexport safe */ _address_index_js__WEBPACK_IMPORTED_MODULE_7__.getIcapAddress; },\n/* harmony export */   getIndexedAccountPath: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_73__.getIndexedAccountPath; },\n/* harmony export */   getNumber: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_65__.getNumber; },\n/* harmony export */   getUint: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_65__.getUint; },\n/* harmony export */   hashMessage: function() { return /* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_29__.hashMessage; },\n/* harmony export */   hexlify: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_59__.hexlify; },\n/* harmony export */   id: function() { return /* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_27__.id; },\n/* harmony export */   isAddress: function() { return /* reexport safe */ _address_index_js__WEBPACK_IMPORTED_MODULE_9__.isAddress; },\n/* harmony export */   isAddressable: function() { return /* reexport safe */ _address_index_js__WEBPACK_IMPORTED_MODULE_9__.isAddressable; },\n/* harmony export */   isBytesLike: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_59__.isBytesLike; },\n/* harmony export */   isCallException: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_61__.isCallException; },\n/* harmony export */   isCrowdsaleJson: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_75__.isCrowdsaleJson; },\n/* harmony export */   isError: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_61__.isError; },\n/* harmony export */   isHexString: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_59__.isHexString; },\n/* harmony export */   isKeystoreJson: function() { return /* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_76__.isKeystoreJson; },\n/* harmony export */   isValidName: function() { return /* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_28__.isValidName; },\n/* harmony export */   keccak256: function() { return /* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_19__.keccak256; },\n/* harmony export */   lock: function() { return /* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_24__.lock; },\n/* harmony export */   makeError: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_61__.makeError; },\n/* harmony export */   mask: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_65__.mask; },\n/* harmony export */   namehash: function() { return /* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_28__.namehash; },\n/* harmony export */   parseEther: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_66__.parseEther; },\n/* harmony export */   parseUnits: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_66__.parseUnits; },\n/* harmony export */   pbkdf2: function() { return /* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_22__.pbkdf2; },\n/* harmony export */   randomBytes: function() { return /* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_18__.randomBytes; },\n/* harmony export */   recoverAddress: function() { return /* reexport safe */ _transaction_index_js__WEBPACK_IMPORTED_MODULE_55__.recoverAddress; },\n/* harmony export */   resolveAddress: function() { return /* reexport safe */ _address_index_js__WEBPACK_IMPORTED_MODULE_9__.resolveAddress; },\n/* harmony export */   resolveProperties: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_60__.resolveProperties; },\n/* harmony export */   ripemd160: function() { return /* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_20__.ripemd160; },\n/* harmony export */   scrypt: function() { return /* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_23__.scrypt; },\n/* harmony export */   scryptSync: function() { return /* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_23__.scryptSync; },\n/* harmony export */   sha256: function() { return /* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_21__.sha256; },\n/* harmony export */   sha512: function() { return /* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_21__.sha512; },\n/* harmony export */   showThrottleMessage: function() { return /* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_53__.showThrottleMessage; },\n/* harmony export */   solidityPacked: function() { return /* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_30__.solidityPacked; },\n/* harmony export */   solidityPackedKeccak256: function() { return /* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_30__.solidityPackedKeccak256; },\n/* harmony export */   solidityPackedSha256: function() { return /* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_30__.solidityPackedSha256; },\n/* harmony export */   stripZerosLeft: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_59__.stripZerosLeft; },\n/* harmony export */   toBeArray: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_65__.toBeArray; },\n/* harmony export */   toBeHex: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_65__.toBeHex; },\n/* harmony export */   toBigInt: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_65__.toBigInt; },\n/* harmony export */   toNumber: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_65__.toNumber; },\n/* harmony export */   toQuantity: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_65__.toQuantity; },\n/* harmony export */   toTwos: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_65__.toTwos; },\n/* harmony export */   toUtf8Bytes: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_67__.toUtf8Bytes; },\n/* harmony export */   toUtf8CodePoints: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_67__.toUtf8CodePoints; },\n/* harmony export */   toUtf8String: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_67__.toUtf8String; },\n/* harmony export */   uuidV4: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_70__.uuidV4; },\n/* harmony export */   verifyMessage: function() { return /* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_29__.verifyMessage; },\n/* harmony export */   verifyTypedData: function() { return /* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_31__.verifyTypedData; },\n/* harmony export */   version: function() { return /* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_0__.version; },\n/* harmony export */   wordlists: function() { return /* reexport safe */ _wordlists_index_js__WEBPACK_IMPORTED_MODULE_81__.wordlists; },\n/* harmony export */   zeroPadBytes: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_59__.zeroPadBytes; },\n/* harmony export */   zeroPadValue: function() { return /* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_59__.zeroPadValue; }\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_version.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/_version.js\");\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abi/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/bytes32.js\");\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abi/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/abi-coder.js\");\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abi/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/fragments.js\");\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abi/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abi/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/interface.js\");\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./abi/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/contract-address.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/checks.js\");\n/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./constants/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/constants/addresses.js\");\n/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./constants/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/constants/numbers.js\");\n/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./constants/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/constants/hashes.js\");\n/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./constants/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/constants/strings.js\");\n/* harmony import */ var _contract_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./contract/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var _contract_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./contract/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/contract/factory.js\");\n/* harmony import */ var _contract_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./contract/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/contract/wrappers.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/hmac.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/random.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/ripemd160.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/sha2.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/pbkdf2.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/scrypt.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signature.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signing-key.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./hash/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/id.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./hash/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/namehash.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./hash/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/message.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./hash/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/solidity.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./hash/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/typed-data.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/default-provider.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/abstract-signer.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/signer-noncemanager.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/abstract-provider.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-fallback.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-alchemy.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-ankr.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-cloudflare.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-etherscan.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-infura.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-pocket.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-quicknode.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-ipcsocket-browser.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-socket.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-websocket.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/ens-resolver.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/plugins-network.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/community.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/accesslist.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/address.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/transaction.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/base58.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/base64-browser.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/events.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fetch.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fixednumber.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/units.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/rlp-decode.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/rlp-encode.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/uuid.js\");\n/* harmony import */ var _wallet_index_js__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./wallet/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/mnemonic.js\");\n/* harmony import */ var _wallet_index_js__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./wallet/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/base-wallet.js\");\n/* harmony import */ var _wallet_index_js__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./wallet/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/hdwallet.js\");\n/* harmony import */ var _wallet_index_js__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./wallet/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/wallet.js\");\n/* harmony import */ var _wallet_index_js__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./wallet/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/json-crowdsale.js\");\n/* harmony import */ var _wallet_index_js__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./wallet/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/json-keystore.js\");\n/* harmony import */ var _wordlists_index_js__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./wordlists/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlist.js\");\n/* harmony import */ var _wordlists_index_js__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./wordlists/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/lang-en.js\");\n/* harmony import */ var _wordlists_index_js__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./wordlists/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlist-owl.js\");\n/* harmony import */ var _wordlists_index_js__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./wordlists/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlist-owla.js\");\n/* harmony import */ var _wordlists_index_js__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./wordlists/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlists-browser.js\");\n/////////////////////////////\n//\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=ethers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vZXRoZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZCQUE2QjtBQUM3QixFQUFFO0FBQ3NDO0FBQ3dTO0FBQ2pNO0FBQ0o7QUFDNEU7QUFDM0Q7QUFDdUQ7QUFDNmlCO0FBQzVwQjtBQUN1bEI7QUFDbFo7QUFDM00sQ0FDOUYsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vZXRoZXJzLmpzPzcwNWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXG5leHBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb24uanNcIjtcbmV4cG9ydCB7IGRlY29kZUJ5dGVzMzJTdHJpbmcsIGVuY29kZUJ5dGVzMzJTdHJpbmcsIEFiaUNvZGVyLCBDb25zdHJ1Y3RvckZyYWdtZW50LCBFcnJvckZyYWdtZW50LCBFdmVudEZyYWdtZW50LCBGcmFnbWVudCwgRmFsbGJhY2tGcmFnbWVudCwgRnVuY3Rpb25GcmFnbWVudCwgTmFtZWRGcmFnbWVudCwgUGFyYW1UeXBlLCBTdHJ1Y3RGcmFnbWVudCwgY2hlY2tSZXN1bHRFcnJvcnMsIEVycm9yRGVzY3JpcHRpb24sIEluZGV4ZWQsIEludGVyZmFjZSwgTG9nRGVzY3JpcHRpb24sIFJlc3VsdCwgVHJhbnNhY3Rpb25EZXNjcmlwdGlvbiwgVHlwZWQsIH0gZnJvbSBcIi4vYWJpL2luZGV4LmpzXCI7XG5leHBvcnQgeyBnZXRBZGRyZXNzLCBnZXRJY2FwQWRkcmVzcywgZ2V0Q3JlYXRlQWRkcmVzcywgZ2V0Q3JlYXRlMkFkZHJlc3MsIGlzQWRkcmVzc2FibGUsIGlzQWRkcmVzcywgcmVzb2x2ZUFkZHJlc3MgfSBmcm9tIFwiLi9hZGRyZXNzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBaZXJvQWRkcmVzcywgV2VpUGVyRXRoZXIsIE1heFVpbnQyNTYsIE1pbkludDI1NiwgTWF4SW50MjU2LCBOLCBaZXJvSGFzaCwgRXRoZXJTeW1ib2wsIE1lc3NhZ2VQcmVmaXggfSBmcm9tIFwiLi9jb25zdGFudHMvaW5kZXguanNcIjtcbmV4cG9ydCB7IEJhc2VDb250cmFjdCwgQ29udHJhY3QsIENvbnRyYWN0RmFjdG9yeSwgQ29udHJhY3RFdmVudFBheWxvYWQsIENvbnRyYWN0VHJhbnNhY3Rpb25SZWNlaXB0LCBDb250cmFjdFRyYW5zYWN0aW9uUmVzcG9uc2UsIENvbnRyYWN0VW5rbm93bkV2ZW50UGF5bG9hZCwgRXZlbnRMb2csIFVuZGVjb2RlZEV2ZW50TG9nIH0gZnJvbSBcIi4vY29udHJhY3QvaW5kZXguanNcIjtcbmV4cG9ydCB7IGNvbXB1dGVIbWFjLCByYW5kb21CeXRlcywga2VjY2FrMjU2LCByaXBlbWQxNjAsIHNoYTI1Niwgc2hhNTEyLCBwYmtkZjIsIHNjcnlwdCwgc2NyeXB0U3luYywgbG9jaywgU2lnbmF0dXJlLCBTaWduaW5nS2V5IH0gZnJvbSBcIi4vY3J5cHRvL2luZGV4LmpzXCI7XG5leHBvcnQgeyBpZCwgZW5zTm9ybWFsaXplLCBpc1ZhbGlkTmFtZSwgbmFtZWhhc2gsIGRuc0VuY29kZSwgaGFzaE1lc3NhZ2UsIHZlcmlmeU1lc3NhZ2UsIHNvbGlkaXR5UGFja2VkLCBzb2xpZGl0eVBhY2tlZEtlY2NhazI1Niwgc29saWRpdHlQYWNrZWRTaGEyNTYsIFR5cGVkRGF0YUVuY29kZXIsIHZlcmlmeVR5cGVkRGF0YSB9IGZyb20gXCIuL2hhc2gvaW5kZXguanNcIjtcbmV4cG9ydCB7IGdldERlZmF1bHRQcm92aWRlciwgQmxvY2ssIEZlZURhdGEsIExvZywgVHJhbnNhY3Rpb25SZWNlaXB0LCBUcmFuc2FjdGlvblJlc3BvbnNlLCBBYnN0cmFjdFNpZ25lciwgTm9uY2VNYW5hZ2VyLCBWb2lkU2lnbmVyLCBBYnN0cmFjdFByb3ZpZGVyLCBGYWxsYmFja1Byb3ZpZGVyLCBKc29uUnBjQXBpUHJvdmlkZXIsIEpzb25ScGNQcm92aWRlciwgSnNvblJwY1NpZ25lciwgQnJvd3NlclByb3ZpZGVyLCBBbGNoZW15UHJvdmlkZXIsIEFua3JQcm92aWRlciwgQ2xvdWRmbGFyZVByb3ZpZGVyLCBFdGhlcnNjYW5Qcm92aWRlciwgSW5mdXJhUHJvdmlkZXIsIEluZnVyYVdlYlNvY2tldFByb3ZpZGVyLCBQb2NrZXRQcm92aWRlciwgUXVpY2tOb2RlUHJvdmlkZXIsIElwY1NvY2tldFByb3ZpZGVyLCBTb2NrZXRQcm92aWRlciwgV2ViU29ja2V0UHJvdmlkZXIsIEVuc1Jlc29sdmVyLCBOZXR3b3JrLCBFbnNQbHVnaW4sIEV0aGVyc2NhblBsdWdpbiwgRmVlRGF0YU5ldHdvcmtQbHVnaW4sIEZldGNoVXJsRmVlRGF0YU5ldHdvcmtQbHVnaW4sIEdhc0Nvc3RQbHVnaW4sIE5ldHdvcmtQbHVnaW4sIE11bHRpY29pblByb3ZpZGVyUGx1Z2luLCBTb2NrZXRCbG9ja1N1YnNjcmliZXIsIFNvY2tldEV2ZW50U3Vic2NyaWJlciwgU29ja2V0UGVuZGluZ1N1YnNjcmliZXIsIFNvY2tldFN1YnNjcmliZXIsIFVubWFuYWdlZFN1YnNjcmliZXIsIGNvcHlSZXF1ZXN0LCBzaG93VGhyb3R0bGVNZXNzYWdlIH0gZnJvbSBcIi4vcHJvdmlkZXJzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBhY2Nlc3NMaXN0aWZ5LCBjb21wdXRlQWRkcmVzcywgcmVjb3ZlckFkZHJlc3MsIFRyYW5zYWN0aW9uIH0gZnJvbSBcIi4vdHJhbnNhY3Rpb24vaW5kZXguanNcIjtcbmV4cG9ydCB7IGRlY29kZUJhc2U1OCwgZW5jb2RlQmFzZTU4LCBkZWNvZGVCYXNlNjQsIGVuY29kZUJhc2U2NCwgY29uY2F0LCBkYXRhTGVuZ3RoLCBkYXRhU2xpY2UsIGdldEJ5dGVzLCBnZXRCeXRlc0NvcHksIGhleGxpZnksIGlzSGV4U3RyaW5nLCBpc0J5dGVzTGlrZSwgc3RyaXBaZXJvc0xlZnQsIHplcm9QYWRCeXRlcywgemVyb1BhZFZhbHVlLCBkZWZpbmVQcm9wZXJ0aWVzLCByZXNvbHZlUHJvcGVydGllcywgYXNzZXJ0LCBhc3NlcnRBcmd1bWVudCwgYXNzZXJ0QXJndW1lbnRDb3VudCwgYXNzZXJ0Tm9ybWFsaXplLCBhc3NlcnRQcml2YXRlLCBtYWtlRXJyb3IsIGlzQ2FsbEV4Y2VwdGlvbiwgaXNFcnJvciwgRXZlbnRQYXlsb2FkLCBGZXRjaFJlcXVlc3QsIEZldGNoUmVzcG9uc2UsIEZldGNoQ2FuY2VsU2lnbmFsLCBGaXhlZE51bWJlciwgZ2V0QmlnSW50LCBnZXROdW1iZXIsIGdldFVpbnQsIHRvQmVBcnJheSwgdG9CaWdJbnQsIHRvQmVIZXgsIHRvTnVtYmVyLCB0b1F1YW50aXR5LCBmcm9tVHdvcywgdG9Ud29zLCBtYXNrLCBmb3JtYXRFdGhlciwgcGFyc2VFdGhlciwgZm9ybWF0VW5pdHMsIHBhcnNlVW5pdHMsIHRvVXRmOEJ5dGVzLCB0b1V0ZjhDb2RlUG9pbnRzLCB0b1V0ZjhTdHJpbmcsIFV0ZjhFcnJvckZ1bmNzLCBkZWNvZGVSbHAsIGVuY29kZVJscCwgdXVpZFY0LCB9IGZyb20gXCIuL3V0aWxzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBNbmVtb25pYywgQmFzZVdhbGxldCwgSEROb2RlV2FsbGV0LCBIRE5vZGVWb2lkV2FsbGV0LCBXYWxsZXQsIGRlZmF1bHRQYXRoLCBnZXRBY2NvdW50UGF0aCwgZ2V0SW5kZXhlZEFjY291bnRQYXRoLCBpc0Nyb3dkc2FsZUpzb24sIGlzS2V5c3RvcmVKc29uLCBkZWNyeXB0Q3Jvd2RzYWxlSnNvbiwgZGVjcnlwdEtleXN0b3JlSnNvblN5bmMsIGRlY3J5cHRLZXlzdG9yZUpzb24sIGVuY3J5cHRLZXlzdG9yZUpzb24sIGVuY3J5cHRLZXlzdG9yZUpzb25TeW5jLCB9IGZyb20gXCIuL3dhbGxldC9pbmRleC5qc1wiO1xuZXhwb3J0IHsgV29yZGxpc3QsIExhbmdFbiwgV29yZGxpc3RPd2wsIFdvcmRsaXN0T3dsQSwgd29yZGxpc3RzIH0gZnJvbSBcIi4vd29yZGxpc3RzL2luZGV4LmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldGhlcnMuanMubWFwIl0sIm5hbWVzIjpbInZlcnNpb24iLCJkZWNvZGVCeXRlczMyU3RyaW5nIiwiZW5jb2RlQnl0ZXMzMlN0cmluZyIsIkFiaUNvZGVyIiwiQ29uc3RydWN0b3JGcmFnbWVudCIsIkVycm9yRnJhZ21lbnQiLCJFdmVudEZyYWdtZW50IiwiRnJhZ21lbnQiLCJGYWxsYmFja0ZyYWdtZW50IiwiRnVuY3Rpb25GcmFnbWVudCIsIk5hbWVkRnJhZ21lbnQiLCJQYXJhbVR5cGUiLCJTdHJ1Y3RGcmFnbWVudCIsImNoZWNrUmVzdWx0RXJyb3JzIiwiRXJyb3JEZXNjcmlwdGlvbiIsIkluZGV4ZWQiLCJJbnRlcmZhY2UiLCJMb2dEZXNjcmlwdGlvbiIsIlJlc3VsdCIsIlRyYW5zYWN0aW9uRGVzY3JpcHRpb24iLCJUeXBlZCIsImdldEFkZHJlc3MiLCJnZXRJY2FwQWRkcmVzcyIsImdldENyZWF0ZUFkZHJlc3MiLCJnZXRDcmVhdGUyQWRkcmVzcyIsImlzQWRkcmVzc2FibGUiLCJpc0FkZHJlc3MiLCJyZXNvbHZlQWRkcmVzcyIsIlplcm9BZGRyZXNzIiwiV2VpUGVyRXRoZXIiLCJNYXhVaW50MjU2IiwiTWluSW50MjU2IiwiTWF4SW50MjU2IiwiTiIsIlplcm9IYXNoIiwiRXRoZXJTeW1ib2wiLCJNZXNzYWdlUHJlZml4IiwiQmFzZUNvbnRyYWN0IiwiQ29udHJhY3QiLCJDb250cmFjdEZhY3RvcnkiLCJDb250cmFjdEV2ZW50UGF5bG9hZCIsIkNvbnRyYWN0VHJhbnNhY3Rpb25SZWNlaXB0IiwiQ29udHJhY3RUcmFuc2FjdGlvblJlc3BvbnNlIiwiQ29udHJhY3RVbmtub3duRXZlbnRQYXlsb2FkIiwiRXZlbnRMb2ciLCJVbmRlY29kZWRFdmVudExvZyIsImNvbXB1dGVIbWFjIiwicmFuZG9tQnl0ZXMiLCJrZWNjYWsyNTYiLCJyaXBlbWQxNjAiLCJzaGEyNTYiLCJzaGE1MTIiLCJwYmtkZjIiLCJzY3J5cHQiLCJzY3J5cHRTeW5jIiwibG9jayIsIlNpZ25hdHVyZSIsIlNpZ25pbmdLZXkiLCJpZCIsImVuc05vcm1hbGl6ZSIsImlzVmFsaWROYW1lIiwibmFtZWhhc2giLCJkbnNFbmNvZGUiLCJoYXNoTWVzc2FnZSIsInZlcmlmeU1lc3NhZ2UiLCJzb2xpZGl0eVBhY2tlZCIsInNvbGlkaXR5UGFja2VkS2VjY2FrMjU2Iiwic29saWRpdHlQYWNrZWRTaGEyNTYiLCJUeXBlZERhdGFFbmNvZGVyIiwidmVyaWZ5VHlwZWREYXRhIiwiZ2V0RGVmYXVsdFByb3ZpZGVyIiwiQmxvY2siLCJGZWVEYXRhIiwiTG9nIiwiVHJhbnNhY3Rpb25SZWNlaXB0IiwiVHJhbnNhY3Rpb25SZXNwb25zZSIsIkFic3RyYWN0U2lnbmVyIiwiTm9uY2VNYW5hZ2VyIiwiVm9pZFNpZ25lciIsIkFic3RyYWN0UHJvdmlkZXIiLCJGYWxsYmFja1Byb3ZpZGVyIiwiSnNvblJwY0FwaVByb3ZpZGVyIiwiSnNvblJwY1Byb3ZpZGVyIiwiSnNvblJwY1NpZ25lciIsIkJyb3dzZXJQcm92aWRlciIsIkFsY2hlbXlQcm92aWRlciIsIkFua3JQcm92aWRlciIsIkNsb3VkZmxhcmVQcm92aWRlciIsIkV0aGVyc2NhblByb3ZpZGVyIiwiSW5mdXJhUHJvdmlkZXIiLCJJbmZ1cmFXZWJTb2NrZXRQcm92aWRlciIsIlBvY2tldFByb3ZpZGVyIiwiUXVpY2tOb2RlUHJvdmlkZXIiLCJJcGNTb2NrZXRQcm92aWRlciIsIlNvY2tldFByb3ZpZGVyIiwiV2ViU29ja2V0UHJvdmlkZXIiLCJFbnNSZXNvbHZlciIsIk5ldHdvcmsiLCJFbnNQbHVnaW4iLCJFdGhlcnNjYW5QbHVnaW4iLCJGZWVEYXRhTmV0d29ya1BsdWdpbiIsIkZldGNoVXJsRmVlRGF0YU5ldHdvcmtQbHVnaW4iLCJHYXNDb3N0UGx1Z2luIiwiTmV0d29ya1BsdWdpbiIsIk11bHRpY29pblByb3ZpZGVyUGx1Z2luIiwiU29ja2V0QmxvY2tTdWJzY3JpYmVyIiwiU29ja2V0RXZlbnRTdWJzY3JpYmVyIiwiU29ja2V0UGVuZGluZ1N1YnNjcmliZXIiLCJTb2NrZXRTdWJzY3JpYmVyIiwiVW5tYW5hZ2VkU3Vic2NyaWJlciIsImNvcHlSZXF1ZXN0Iiwic2hvd1Rocm90dGxlTWVzc2FnZSIsImFjY2Vzc0xpc3RpZnkiLCJjb21wdXRlQWRkcmVzcyIsInJlY292ZXJBZGRyZXNzIiwiVHJhbnNhY3Rpb24iLCJkZWNvZGVCYXNlNTgiLCJlbmNvZGVCYXNlNTgiLCJkZWNvZGVCYXNlNjQiLCJlbmNvZGVCYXNlNjQiLCJjb25jYXQiLCJkYXRhTGVuZ3RoIiwiZGF0YVNsaWNlIiwiZ2V0Qnl0ZXMiLCJnZXRCeXRlc0NvcHkiLCJoZXhsaWZ5IiwiaXNIZXhTdHJpbmciLCJpc0J5dGVzTGlrZSIsInN0cmlwWmVyb3NMZWZ0IiwiemVyb1BhZEJ5dGVzIiwiemVyb1BhZFZhbHVlIiwiZGVmaW5lUHJvcGVydGllcyIsInJlc29sdmVQcm9wZXJ0aWVzIiwiYXNzZXJ0IiwiYXNzZXJ0QXJndW1lbnQiLCJhc3NlcnRBcmd1bWVudENvdW50IiwiYXNzZXJ0Tm9ybWFsaXplIiwiYXNzZXJ0UHJpdmF0ZSIsIm1ha2VFcnJvciIsImlzQ2FsbEV4Y2VwdGlvbiIsImlzRXJyb3IiLCJFdmVudFBheWxvYWQiLCJGZXRjaFJlcXVlc3QiLCJGZXRjaFJlc3BvbnNlIiwiRmV0Y2hDYW5jZWxTaWduYWwiLCJGaXhlZE51bWJlciIsImdldEJpZ0ludCIsImdldE51bWJlciIsImdldFVpbnQiLCJ0b0JlQXJyYXkiLCJ0b0JpZ0ludCIsInRvQmVIZXgiLCJ0b051bWJlciIsInRvUXVhbnRpdHkiLCJmcm9tVHdvcyIsInRvVHdvcyIsIm1hc2siLCJmb3JtYXRFdGhlciIsInBhcnNlRXRoZXIiLCJmb3JtYXRVbml0cyIsInBhcnNlVW5pdHMiLCJ0b1V0ZjhCeXRlcyIsInRvVXRmOENvZGVQb2ludHMiLCJ0b1V0ZjhTdHJpbmciLCJVdGY4RXJyb3JGdW5jcyIsImRlY29kZVJscCIsImVuY29kZVJscCIsInV1aWRWNCIsIk1uZW1vbmljIiwiQmFzZVdhbGxldCIsIkhETm9kZVdhbGxldCIsIkhETm9kZVZvaWRXYWxsZXQiLCJXYWxsZXQiLCJkZWZhdWx0UGF0aCIsImdldEFjY291bnRQYXRoIiwiZ2V0SW5kZXhlZEFjY291bnRQYXRoIiwiaXNDcm93ZHNhbGVKc29uIiwiaXNLZXlzdG9yZUpzb24iLCJkZWNyeXB0Q3Jvd2RzYWxlSnNvbiIsImRlY3J5cHRLZXlzdG9yZUpzb25TeW5jIiwiZGVjcnlwdEtleXN0b3JlSnNvbiIsImVuY3J5cHRLZXlzdG9yZUpzb24iLCJlbmNyeXB0S2V5c3RvcmVKc29uU3luYyIsIldvcmRsaXN0IiwiTGFuZ0VuIiwiV29yZGxpc3RPd2wiLCJXb3JkbGlzdE93bEEiLCJ3b3JkbGlzdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/ethers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/hash/id.js":
/*!*************************************************!*\
  !*** ../node_modules/ethers/lib.esm/hash/id.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   id: function() { return /* binding */ id; }\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n\n\n/**\n *  A simple hashing function which operates on UTF-8 strings to\n *  compute an 32-byte identifier.\n *\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\n *  the [[keccak256]].\n *\n *  @example:\n *    id(\"hello world\")\n *    //_result:\n */ function id(value) {\n    return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(value));\n} //# sourceMappingURL=id.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vaGFzaC9pZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0M7QUFDQztBQUNoRDs7Ozs7Ozs7OztDQVVDLEdBQ00sU0FBU0UsR0FBR0MsS0FBSztJQUNwQixPQUFPSCwyREFBU0EsQ0FBQ0MsNERBQVdBLENBQUNFO0FBQ2pDLEVBQ0EsOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vaGFzaC9pZC5qcz8yNDUwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gXCIuLi9jcnlwdG8vaW5kZXguanNcIjtcbmltcG9ydCB7IHRvVXRmOEJ5dGVzIH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG4vKipcbiAqICBBIHNpbXBsZSBoYXNoaW5nIGZ1bmN0aW9uIHdoaWNoIG9wZXJhdGVzIG9uIFVURi04IHN0cmluZ3MgdG9cbiAqICBjb21wdXRlIGFuIDMyLWJ5dGUgaWRlbnRpZmllci5cbiAqXG4gKiAgVGhpcyBzaW1wbHkgY29tcHV0ZXMgdGhlIFtVVEYtOCBieXRlc10odG9VdGY4Qnl0ZXMpIGFuZCBjb21wdXRlc1xuICogIHRoZSBbW2tlY2NhazI1Nl1dLlxuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIGlkKFwiaGVsbG8gd29ybGRcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkKHZhbHVlKSB7XG4gICAgcmV0dXJuIGtlY2NhazI1Nih0b1V0ZjhCeXRlcyh2YWx1ZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWQuanMubWFwIl0sIm5hbWVzIjpbImtlY2NhazI1NiIsInRvVXRmOEJ5dGVzIiwiaWQiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/hash/id.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/hash/message.js":
/*!******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/hash/message.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hashMessage: function() { return /* binding */ hashMessage; },\n/* harmony export */   verifyMessage: function() { return /* binding */ verifyMessage; }\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/constants/strings.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/address.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n\n\n\n\n/**\n *  Computes the [[link-eip-191]] personal-sign message digest to sign.\n *\n *  This prefixes the message with [[MessagePrefix]] and the decimal length\n *  of %%message%% and computes the [[keccak256]] digest.\n *\n *  If %%message%% is a string, it is converted to its UTF-8 bytes\n *  first. To compute the digest of a [[DataHexString]], it must be converted\n *  to [bytes](getBytes).\n *\n *  @example:\n *    hashMessage(\"Hello World\")\n *    //_result:\n *\n *    // Hashes the SIX (6) string characters, i.e.\n *    // [ \"0\", \"x\", \"4\", \"2\", \"4\", \"3\" ]\n *    hashMessage(\"0x4243\")\n *    //_result:\n *\n *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...\n *    hashMessage(getBytes(\"0x4243\"))\n *    //_result:\n *\n *    // ...which is equal to using data\n *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))\n *    //_result:\n *\n */ function hashMessage(message) {\n    if (typeof message === \"string\") {\n        message = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(message);\n    }\n    return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.concat)([\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(_constants_index_js__WEBPACK_IMPORTED_MODULE_3__.MessagePrefix),\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(String(message.length)),\n        message\n    ]));\n}\n/**\n *  Return the address of the private key that produced\n *  the signature %%sig%% during signing for %%message%%.\n */ function verifyMessage(message, sig) {\n    const digest = hashMessage(message);\n    return (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_4__.recoverAddress)(digest, sig);\n} //# sourceMappingURL=message.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vaGFzaC9tZXNzYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBK0M7QUFDTztBQUNHO0FBQ0Q7QUFDeEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTJCQyxHQUNNLFNBQVNLLFlBQVlDLE9BQU87SUFDL0IsSUFBSSxPQUFRQSxZQUFhLFVBQVU7UUFDL0JBLFVBQVVGLDREQUFXQSxDQUFDRTtJQUMxQjtJQUNBLE9BQU9OLDJEQUFTQSxDQUFDRyx1REFBTUEsQ0FBQztRQUNwQkMsNERBQVdBLENBQUNILDhEQUFhQTtRQUN6QkcsNERBQVdBLENBQUNHLE9BQU9ELFFBQVFFLE1BQU07UUFDakNGO0tBQ0g7QUFDTDtBQUNBOzs7Q0FHQyxHQUNNLFNBQVNHLGNBQWNILE9BQU8sRUFBRUksR0FBRztJQUN0QyxNQUFNQyxTQUFTTixZQUFZQztJQUMzQixPQUFPSixxRUFBY0EsQ0FBQ1MsUUFBUUQ7QUFDbEMsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9oYXNoL21lc3NhZ2UuanM/MjUzOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiLi4vY3J5cHRvL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBNZXNzYWdlUHJlZml4IH0gZnJvbSBcIi4uL2NvbnN0YW50cy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgcmVjb3ZlckFkZHJlc3MgfSBmcm9tIFwiLi4vdHJhbnNhY3Rpb24vaW5kZXguanNcIjtcbmltcG9ydCB7IGNvbmNhdCwgdG9VdGY4Qnl0ZXMgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbi8qKlxuICogIENvbXB1dGVzIHRoZSBbW2xpbmstZWlwLTE5MV1dIHBlcnNvbmFsLXNpZ24gbWVzc2FnZSBkaWdlc3QgdG8gc2lnbi5cbiAqXG4gKiAgVGhpcyBwcmVmaXhlcyB0aGUgbWVzc2FnZSB3aXRoIFtbTWVzc2FnZVByZWZpeF1dIGFuZCB0aGUgZGVjaW1hbCBsZW5ndGhcbiAqICBvZiAlJW1lc3NhZ2UlJSBhbmQgY29tcHV0ZXMgdGhlIFtba2VjY2FrMjU2XV0gZGlnZXN0LlxuICpcbiAqICBJZiAlJW1lc3NhZ2UlJSBpcyBhIHN0cmluZywgaXQgaXMgY29udmVydGVkIHRvIGl0cyBVVEYtOCBieXRlc1xuICogIGZpcnN0LiBUbyBjb21wdXRlIHRoZSBkaWdlc3Qgb2YgYSBbW0RhdGFIZXhTdHJpbmddXSwgaXQgbXVzdCBiZSBjb252ZXJ0ZWRcbiAqICB0byBbYnl0ZXNdKGdldEJ5dGVzKS5cbiAqXG4gKiAgQGV4YW1wbGU6XG4gKiAgICBoYXNoTWVzc2FnZShcIkhlbGxvIFdvcmxkXCIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgLy8gSGFzaGVzIHRoZSBTSVggKDYpIHN0cmluZyBjaGFyYWN0ZXJzLCBpLmUuXG4gKiAgICAvLyBbIFwiMFwiLCBcInhcIiwgXCI0XCIsIFwiMlwiLCBcIjRcIiwgXCIzXCIgXVxuICogICAgaGFzaE1lc3NhZ2UoXCIweDQyNDNcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBIYXNoZXMgdGhlIFRXTyAoMikgYnl0ZXMgWyAweDQyLCAweDQzIF0uLi5cbiAqICAgIGhhc2hNZXNzYWdlKGdldEJ5dGVzKFwiMHg0MjQzXCIpKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIC8vIC4uLndoaWNoIGlzIGVxdWFsIHRvIHVzaW5nIGRhdGFcbiAqICAgIGhhc2hNZXNzYWdlKG5ldyBVaW50OEFycmF5KFsgMHg0MiwgMHg0MyBdKSlcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgaWYgKHR5cGVvZiAobWVzc2FnZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgbWVzc2FnZSA9IHRvVXRmOEJ5dGVzKG1lc3NhZ2UpO1xuICAgIH1cbiAgICByZXR1cm4ga2VjY2FrMjU2KGNvbmNhdChbXG4gICAgICAgIHRvVXRmOEJ5dGVzKE1lc3NhZ2VQcmVmaXgpLFxuICAgICAgICB0b1V0ZjhCeXRlcyhTdHJpbmcobWVzc2FnZS5sZW5ndGgpKSxcbiAgICAgICAgbWVzc2FnZVxuICAgIF0pKTtcbn1cbi8qKlxuICogIFJldHVybiB0aGUgYWRkcmVzcyBvZiB0aGUgcHJpdmF0ZSBrZXkgdGhhdCBwcm9kdWNlZFxuICogIHRoZSBzaWduYXR1cmUgJSVzaWclJSBkdXJpbmcgc2lnbmluZyBmb3IgJSVtZXNzYWdlJSUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2ZXJpZnlNZXNzYWdlKG1lc3NhZ2UsIHNpZykge1xuICAgIGNvbnN0IGRpZ2VzdCA9IGhhc2hNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIHJldHVybiByZWNvdmVyQWRkcmVzcyhkaWdlc3QsIHNpZyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdlLmpzLm1hcCJdLCJuYW1lcyI6WyJrZWNjYWsyNTYiLCJNZXNzYWdlUHJlZml4IiwicmVjb3ZlckFkZHJlc3MiLCJjb25jYXQiLCJ0b1V0ZjhCeXRlcyIsImhhc2hNZXNzYWdlIiwibWVzc2FnZSIsIlN0cmluZyIsImxlbmd0aCIsInZlcmlmeU1lc3NhZ2UiLCJzaWciLCJkaWdlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/hash/message.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/hash/namehash.js":
/*!*******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/hash/namehash.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dnsEncode: function() { return /* binding */ dnsEncode; },\n/* harmony export */   ensNormalize: function() { return /* binding */ ensNormalize; },\n/* harmony export */   isValidName: function() { return /* binding */ isValidName; },\n/* harmony export */   namehash: function() { return /* binding */ namehash; }\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _adraffy_ens_normalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @adraffy/ens-normalize */ \"(app-pages-browser)/../node_modules/@adraffy/ens-normalize/dist/index.mjs\");\n\n\n\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp);\n    return comp;\n}\nfunction ensNameSplit(name) {\n    const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.toUtf8Bytes)(ensNormalize(name));\n    const comps = [];\n    if (name.length === 0) {\n        return comps;\n    }\n    let last = 0;\n    for(let i = 0; i < bytes.length; i++){\n        const d = bytes[i];\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n    // There was a stray separator at the end of the name\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(last < bytes.length, \"invalid ENS name; empty component\", \"name\", name);\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\n/**\n *  Returns the ENS %%name%% normalized.\n */ function ensNormalize(name) {\n    try {\n        if (name.length === 0) {\n            throw new Error(\"empty label\");\n        }\n        return (0,_adraffy_ens_normalize__WEBPACK_IMPORTED_MODULE_0__.ens_normalize)(name);\n    } catch (error) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(false, \"invalid ENS name (\".concat(error.message, \")\"), \"name\", name);\n    }\n}\n/**\n *  Returns ``true`` if %%name%% is a valid ENS name.\n */ function isValidName(name) {\n    try {\n        return ensNameSplit(name).length !== 0;\n    } catch (error) {}\n    return false;\n}\n/**\n *  Returns the [[link-namehash]] for %%name%%.\n */ function namehash(name) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(typeof name === \"string\", \"invalid ENS name; not a string\", \"name\", name);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(name.length, \"invalid ENS name (empty label)\", \"name\", name);\n    let result = Zeros;\n    const comps = ensNameSplit(name);\n    while(comps.length){\n        result = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.concat)([\n            result,\n            (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.keccak256)(comps.pop())\n        ]));\n    }\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)(result);\n}\n/**\n *  Returns the DNS encoded %%name%%.\n *\n *  This is used for various parts of ENS name resolution, such\n *  as the wildcard resolution.\n */ function dnsEncode(name, _maxLength) {\n    const length = _maxLength != null ? _maxLength : 63;\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(length <= 255, \"DNS encoded label cannot exceed 255\", \"length\", length);\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.concat)(ensNameSplit(name).map((comp)=>{\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(comp.length <= length, \"label \".concat(JSON.stringify(name), \" exceeds \").concat(length, \" bytes\"), \"name\", name);\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n    }))) + \"00\";\n} //# sourceMappingURL=namehash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vaGFzaC9uYW1laGFzaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBK0M7QUFDa0M7QUFDMUI7QUFDdkQsTUFBTU0sUUFBUSxJQUFJQyxXQUFXO0FBQzdCRCxNQUFNRSxJQUFJLENBQUM7QUFDWCxTQUFTQyxlQUFlQyxJQUFJO0lBQ3hCUCwrREFBY0EsQ0FBQ08sS0FBS0MsTUFBTSxLQUFLLEdBQUcscUNBQXFDLFFBQVFEO0lBQy9FLE9BQU9BO0FBQ1g7QUFDQSxTQUFTRSxhQUFhQyxJQUFJO0lBQ3RCLE1BQU1DLFFBQVFWLDREQUFXQSxDQUFDVyxhQUFhRjtJQUN2QyxNQUFNRyxRQUFRLEVBQUU7SUFDaEIsSUFBSUgsS0FBS0YsTUFBTSxLQUFLLEdBQUc7UUFDbkIsT0FBT0s7SUFDWDtJQUNBLElBQUlDLE9BQU87SUFDWCxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUosTUFBTUgsTUFBTSxFQUFFTyxJQUFLO1FBQ25DLE1BQU1DLElBQUlMLEtBQUssQ0FBQ0ksRUFBRTtRQUNsQiw4Q0FBOEM7UUFDOUMsSUFBSUMsTUFBTSxNQUFNO1lBQ1pILE1BQU1JLElBQUksQ0FBQ1gsZUFBZUssTUFBTU8sS0FBSyxDQUFDSixNQUFNQztZQUM1Q0QsT0FBT0MsSUFBSTtRQUNmO0lBQ0o7SUFDQSxxREFBcUQ7SUFDckRmLCtEQUFjQSxDQUFDYyxPQUFPSCxNQUFNSCxNQUFNLEVBQUUscUNBQXFDLFFBQVFFO0lBQ2pGRyxNQUFNSSxJQUFJLENBQUNYLGVBQWVLLE1BQU1PLEtBQUssQ0FBQ0o7SUFDdEMsT0FBT0Q7QUFDWDtBQUNBOztDQUVDLEdBQ00sU0FBU0QsYUFBYUYsSUFBSTtJQUM3QixJQUFJO1FBQ0EsSUFBSUEsS0FBS0YsTUFBTSxLQUFLLEdBQUc7WUFDbkIsTUFBTSxJQUFJVyxNQUFNO1FBQ3BCO1FBQ0EsT0FBT2pCLHFFQUFhQSxDQUFDUTtJQUN6QixFQUNBLE9BQU9VLE9BQU87UUFDVnBCLCtEQUFjQSxDQUFDLE9BQU8scUJBQW1DLE9BQWRvQixNQUFNQyxPQUFPLEVBQUMsTUFBSSxRQUFRWDtJQUN6RTtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxTQUFTWSxZQUFZWixJQUFJO0lBQzVCLElBQUk7UUFDQSxPQUFRRCxhQUFhQyxNQUFNRixNQUFNLEtBQUs7SUFDMUMsRUFDQSxPQUFPWSxPQUFPLENBQUU7SUFDaEIsT0FBTztBQUNYO0FBQ0E7O0NBRUMsR0FDTSxTQUFTRyxTQUFTYixJQUFJO0lBQ3pCViwrREFBY0EsQ0FBQyxPQUFRVSxTQUFVLFVBQVUsa0NBQWtDLFFBQVFBO0lBQ3JGViwrREFBY0EsQ0FBQ1UsS0FBS0YsTUFBTSxFQUFHLGtDQUFpQyxRQUFRRTtJQUN0RSxJQUFJYyxTQUFTckI7SUFDYixNQUFNVSxRQUFRSixhQUFhQztJQUMzQixNQUFPRyxNQUFNTCxNQUFNLENBQUU7UUFDakJnQixTQUFTM0IsMkRBQVNBLENBQUNDLHVEQUFNQSxDQUFDO1lBQUMwQjtZQUFRM0IsMkRBQVNBLENBQUVnQixNQUFNWSxHQUFHO1NBQUs7SUFDaEU7SUFDQSxPQUFPMUIsd0RBQU9BLENBQUN5QjtBQUNuQjtBQUNBOzs7OztDQUtDLEdBQ00sU0FBU0UsVUFBVWhCLElBQUksRUFBRWlCLFVBQVU7SUFDdEMsTUFBTW5CLFNBQVMsY0FBZSxPQUFRbUIsYUFBYTtJQUNuRDNCLCtEQUFjQSxDQUFDUSxVQUFVLEtBQUssdUNBQXVDLFVBQVVBO0lBQy9FLE9BQU9ULHdEQUFPQSxDQUFDRCx1REFBTUEsQ0FBQ1csYUFBYUMsTUFBTWtCLEdBQUcsQ0FBQyxDQUFDckI7UUFDMUNQLCtEQUFjQSxDQUFDTyxLQUFLQyxNQUFNLElBQUlBLFFBQVEsU0FBeUNBLE9BQWhDcUIsS0FBS0MsU0FBUyxDQUFDcEIsT0FBTSxhQUFrQixPQUFQRixRQUFPLFdBQVMsUUFBUUU7UUFDdkcsTUFBTUMsUUFBUSxJQUFJUCxXQUFXRyxLQUFLQyxNQUFNLEdBQUc7UUFDM0NHLE1BQU1vQixHQUFHLENBQUN4QixNQUFNO1FBQ2hCSSxLQUFLLENBQUMsRUFBRSxHQUFHQSxNQUFNSCxNQUFNLEdBQUc7UUFDMUIsT0FBT0c7SUFDWCxPQUFPO0FBQ1gsRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9oYXNoL25hbWVoYXNoLmpzPzY1MGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSBcIi4uL2NyeXB0by9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY29uY2F0LCBoZXhsaWZ5LCBhc3NlcnRBcmd1bWVudCwgdG9VdGY4Qnl0ZXMgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGVuc19ub3JtYWxpemUgfSBmcm9tIFwiQGFkcmFmZnkvZW5zLW5vcm1hbGl6ZVwiO1xuY29uc3QgWmVyb3MgPSBuZXcgVWludDhBcnJheSgzMik7XG5aZXJvcy5maWxsKDApO1xuZnVuY3Rpb24gY2hlY2tDb21wb25lbnQoY29tcCkge1xuICAgIGFzc2VydEFyZ3VtZW50KGNvbXAubGVuZ3RoICE9PSAwLCBcImludmFsaWQgRU5TIG5hbWU7IGVtcHR5IGNvbXBvbmVudFwiLCBcImNvbXBcIiwgY29tcCk7XG4gICAgcmV0dXJuIGNvbXA7XG59XG5mdW5jdGlvbiBlbnNOYW1lU3BsaXQobmFtZSkge1xuICAgIGNvbnN0IGJ5dGVzID0gdG9VdGY4Qnl0ZXMoZW5zTm9ybWFsaXplKG5hbWUpKTtcbiAgICBjb25zdCBjb21wcyA9IFtdO1xuICAgIGlmIChuYW1lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gY29tcHM7XG4gICAgfVxuICAgIGxldCBsYXN0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGQgPSBieXRlc1tpXTtcbiAgICAgICAgLy8gQSBzZXBhcmF0b3IgKGkuZS4gXCIuXCIpOyBjb3B5IHRoaXMgY29tcG9uZW50XG4gICAgICAgIGlmIChkID09PSAweDJlKSB7XG4gICAgICAgICAgICBjb21wcy5wdXNoKGNoZWNrQ29tcG9uZW50KGJ5dGVzLnNsaWNlKGxhc3QsIGkpKSk7XG4gICAgICAgICAgICBsYXN0ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVGhlcmUgd2FzIGEgc3RyYXkgc2VwYXJhdG9yIGF0IHRoZSBlbmQgb2YgdGhlIG5hbWVcbiAgICBhc3NlcnRBcmd1bWVudChsYXN0IDwgYnl0ZXMubGVuZ3RoLCBcImludmFsaWQgRU5TIG5hbWU7IGVtcHR5IGNvbXBvbmVudFwiLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgY29tcHMucHVzaChjaGVja0NvbXBvbmVudChieXRlcy5zbGljZShsYXN0KSkpO1xuICAgIHJldHVybiBjb21wcztcbn1cbi8qKlxuICogIFJldHVybnMgdGhlIEVOUyAlJW5hbWUlJSBub3JtYWxpemVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5zTm9ybWFsaXplKG5hbWUpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAobmFtZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImVtcHR5IGxhYmVsXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnNfbm9ybWFsaXplKG5hbWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIGBpbnZhbGlkIEVOUyBuYW1lICgke2Vycm9yLm1lc3NhZ2V9KWAsIFwibmFtZVwiLCBuYW1lKTtcbiAgICB9XG59XG4vKipcbiAqICBSZXR1cm5zIGBgdHJ1ZWBgIGlmICUlbmFtZSUlIGlzIGEgdmFsaWQgRU5TIG5hbWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkTmFtZShuYW1lKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIChlbnNOYW1lU3BsaXQobmFtZSkubGVuZ3RoICE9PSAwKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqICBSZXR1cm5zIHRoZSBbW2xpbmstbmFtZWhhc2hdXSBmb3IgJSVuYW1lJSUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuYW1laGFzaChuYW1lKSB7XG4gICAgYXNzZXJ0QXJndW1lbnQodHlwZW9mIChuYW1lKSA9PT0gXCJzdHJpbmdcIiwgXCJpbnZhbGlkIEVOUyBuYW1lOyBub3QgYSBzdHJpbmdcIiwgXCJuYW1lXCIsIG5hbWUpO1xuICAgIGFzc2VydEFyZ3VtZW50KG5hbWUubGVuZ3RoLCBgaW52YWxpZCBFTlMgbmFtZSAoZW1wdHkgbGFiZWwpYCwgXCJuYW1lXCIsIG5hbWUpO1xuICAgIGxldCByZXN1bHQgPSBaZXJvcztcbiAgICBjb25zdCBjb21wcyA9IGVuc05hbWVTcGxpdChuYW1lKTtcbiAgICB3aGlsZSAoY29tcHMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGtlY2NhazI1Nihjb25jYXQoW3Jlc3VsdCwga2VjY2FrMjU2KChjb21wcy5wb3AoKSkpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gaGV4bGlmeShyZXN1bHQpO1xufVxuLyoqXG4gKiAgUmV0dXJucyB0aGUgRE5TIGVuY29kZWQgJSVuYW1lJSUuXG4gKlxuICogIFRoaXMgaXMgdXNlZCBmb3IgdmFyaW91cyBwYXJ0cyBvZiBFTlMgbmFtZSByZXNvbHV0aW9uLCBzdWNoXG4gKiAgYXMgdGhlIHdpbGRjYXJkIHJlc29sdXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkbnNFbmNvZGUobmFtZSwgX21heExlbmd0aCkge1xuICAgIGNvbnN0IGxlbmd0aCA9IChfbWF4TGVuZ3RoICE9IG51bGwpID8gX21heExlbmd0aCA6IDYzO1xuICAgIGFzc2VydEFyZ3VtZW50KGxlbmd0aCA8PSAyNTUsIFwiRE5TIGVuY29kZWQgbGFiZWwgY2Fubm90IGV4Y2VlZCAyNTVcIiwgXCJsZW5ndGhcIiwgbGVuZ3RoKTtcbiAgICByZXR1cm4gaGV4bGlmeShjb25jYXQoZW5zTmFtZVNwbGl0KG5hbWUpLm1hcCgoY29tcCkgPT4ge1xuICAgICAgICBhc3NlcnRBcmd1bWVudChjb21wLmxlbmd0aCA8PSBsZW5ndGgsIGBsYWJlbCAke0pTT04uc3RyaW5naWZ5KG5hbWUpfSBleGNlZWRzICR7bGVuZ3RofSBieXRlc2AsIFwibmFtZVwiLCBuYW1lKTtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShjb21wLmxlbmd0aCArIDEpO1xuICAgICAgICBieXRlcy5zZXQoY29tcCwgMSk7XG4gICAgICAgIGJ5dGVzWzBdID0gYnl0ZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH0pKSkgKyBcIjAwXCI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYW1laGFzaC5qcy5tYXAiXSwibmFtZXMiOlsia2VjY2FrMjU2IiwiY29uY2F0IiwiaGV4bGlmeSIsImFzc2VydEFyZ3VtZW50IiwidG9VdGY4Qnl0ZXMiLCJlbnNfbm9ybWFsaXplIiwiWmVyb3MiLCJVaW50OEFycmF5IiwiZmlsbCIsImNoZWNrQ29tcG9uZW50IiwiY29tcCIsImxlbmd0aCIsImVuc05hbWVTcGxpdCIsIm5hbWUiLCJieXRlcyIsImVuc05vcm1hbGl6ZSIsImNvbXBzIiwibGFzdCIsImkiLCJkIiwicHVzaCIsInNsaWNlIiwiRXJyb3IiLCJlcnJvciIsIm1lc3NhZ2UiLCJpc1ZhbGlkTmFtZSIsIm5hbWVoYXNoIiwicmVzdWx0IiwicG9wIiwiZG5zRW5jb2RlIiwiX21heExlbmd0aCIsIm1hcCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/hash/namehash.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/hash/solidity.js":
/*!*******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/hash/solidity.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   solidityPacked: function() { return /* binding */ solidityPacked; },\n/* harmony export */   solidityPackedKeccak256: function() { return /* binding */ solidityPackedKeccak256; },\n/* harmony export */   solidityPackedSha256: function() { return /* binding */ solidityPackedSha256; }\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/sha2.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n\n\n\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nfunction _pack(type, value, isArray) {\n    switch(type){\n        case \"address\":\n            if (isArray) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)(value, 32));\n            }\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(value));\n        case \"string\":\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.toUtf8Bytes)(value);\n        case \"bytes\":\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(value);\n        case \"bool\":\n            value = !!value ? \"0x01\" : \"0x00\";\n            if (isArray) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)(value, 32));\n            }\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n        let signed = match[1] === \"int\";\n        let size = parseInt(match[2] || \"256\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, \"invalid number type\", \"type\", type);\n        if (isArray) {\n            size = 256;\n        }\n        if (signed) {\n            value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.toTwos)(value, size);\n        }\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.toBeArray)(value), size / 8));\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(String(size) === match[1] && size !== 0 && size <= 32, \"invalid bytes type\", \"type\", type);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataLength)(value) === size, \"invalid value for \".concat(type), \"value\", value);\n        if (isArray) {\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadBytes)(value, 32));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(count === value.length, \"invalid array length for \".concat(type), \"value\", value);\n        const result = [];\n        value.forEach(function(value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)(result));\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(false, \"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\n/**\n *   Computes the [[link-solc-packed]] representation of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPacked([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */ function solidityPacked(types, values) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(types.length === values.length, \"wrong number of values; expected ${ types.length }\", \"values\", values);\n    const tight = [];\n    types.forEach(function(type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)(tight));\n}\n/**\n *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedKeccak256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */ function solidityPackedKeccak256(types, values) {\n    return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.keccak256)(solidityPacked(types, values));\n}\n/**\n *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedSha256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */ function solidityPackedSha256(types, values) {\n    return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_6__.sha256)(solidityPacked(types, values));\n} //# sourceMappingURL=solidity.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/hash/solidity.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/hash/typed-data.js":
/*!*********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/hash/typed-data.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypedDataEncoder: function() { return /* binding */ TypedDataEncoder; },\n/* harmony export */   verifyTypedData: function() { return /* binding */ verifyTypedData; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/address.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _id_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./id.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/id.js\");\n//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\n\n\n\n\n\n\n\n\n\n\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n;\n;\nfunction hexPadRight(value) {\n    const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\n            bytes,\n            padding.slice(padOffset)\n        ]);\n    }\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes);\n}\nconst hexTrue = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toBeHex)(BN_1, 32);\nconst hexFalse = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toBeHex)(BN_0, 32);\nconst domainFieldTypes = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\nconst domainFieldNames = [\n    \"name\",\n    \"version\",\n    \"chainId\",\n    \"verifyingContract\",\n    \"salt\"\n];\nfunction checkString(key) {\n    return function(value) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(typeof value === \"string\", \"invalid domain value for \".concat(JSON.stringify(key)), \"domain.\".concat(key), value);\n        return value;\n    };\n}\nconst domainChecks = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function(_value) {\n        const value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(_value, \"domain.chainId\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\n        if (Number.isSafeInteger(value)) {\n            return Number(value);\n        }\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toQuantity)(value);\n    },\n    verifyingContract: function(value) {\n        try {\n            return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_3__.getAddress)(value).toLowerCase();\n        } catch (error) {}\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(false, 'invalid domain value \"verifyingContract\"', \"domain.verifyingContract\", value);\n    },\n    salt: function(value) {\n        const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(value, \"domain.salt\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(bytes.length === 32, 'invalid domain value \"salt\"', \"domain.salt\", value);\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes);\n    }\n};\nfunction getBaseEncoder(type) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d+)$/);\n        if (match) {\n            const signed = match[1] === \"\";\n            const width = parseInt(match[2]);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), \"invalid numeric width\", \"type\", type);\n            const boundsUpper = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.mask)(BN_MAX_UINT256, signed ? width - 1 : width);\n            const boundsLower = signed ? (boundsUpper + BN_1) * BN__1 : BN_0;\n            return function(_value) {\n                const value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(_value, \"value\");\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(value >= boundsLower && value <= boundsUpper, \"value out-of-bounds for \".concat(type), \"value\", value);\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toBeHex)(signed ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toTwos)(value, 256) : value, 32);\n            };\n        }\n    }\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n            return function(value) {\n                const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(value);\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(bytes.length === width, \"invalid length for \".concat(type), \"value\", value);\n                return hexPadRight(value);\n            };\n        }\n    }\n    switch(type){\n        case \"address\":\n            return function(value) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)((0,_address_index_js__WEBPACK_IMPORTED_MODULE_3__.getAddress)(value), 32);\n            };\n        case \"bool\":\n            return function(value) {\n                return !value ? hexFalse : hexTrue;\n            };\n        case \"bytes\":\n            return function(value) {\n                return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_4__.keccak256)(value);\n            };\n        case \"string\":\n            return function(value) {\n                return (0,_id_js__WEBPACK_IMPORTED_MODULE_5__.id)(value);\n            };\n    }\n    return null;\n}\nfunction encodeType(name, fields) {\n    return \"\".concat(name, \"(\").concat(fields.map((param)=>{\n        let { name, type } = param;\n        return type + \" \" + name;\n    }).join(\",\"), \")\");\n}\n// foo[][3] => { base: \"foo\", index: \"[][3]\", array: {\n//     base: \"foo\", prefix: \"foo[]\", count: 3 } }\nfunction splitArray(type) {\n    const match = type.match(/^([^\\x5b]*)((\\x5b\\d*\\x5d)*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n        return {\n            base: match[1],\n            index: match[2] + match[4],\n            array: {\n                base: match[1],\n                prefix: match[1] + match[2],\n                count: match[5] ? parseInt(match[5]) : -1\n            }\n        };\n    }\n    return {\n        base: type\n    };\n}\nvar _types = /*#__PURE__*/ new WeakMap(), _fullTypes = /*#__PURE__*/ new WeakMap(), _encoderCache = /*#__PURE__*/ new WeakMap(), _getEncoder = /*#__PURE__*/ new WeakSet();\n/**\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\n *  for signed typed data.\n *\n *  This is useful for those that wish to compute various components of a\n *  typed data hash, primary types, or sub-components, but generally the\n *  higher level [[Signer-signTypedData]] is more useful.\n */ class TypedDataEncoder {\n    /**\n     *  The types.\n     */ get types() {\n        return JSON.parse((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_6__._)(this, _types));\n    }\n    /**\n     *  Returnthe encoder for the specific %%type%%.\n     */ getEncoder(type) {\n        let encoder = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_6__._)(this, _encoderCache).get(type);\n        if (!encoder) {\n            encoder = (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_7__._)(this, _getEncoder, getEncoder).call(this, type);\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_6__._)(this, _encoderCache).set(type, encoder);\n        }\n        return encoder;\n    }\n    /**\n     *  Return the full type for %%name%%.\n     */ encodeType(name) {\n        const result = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_6__._)(this, _fullTypes).get(name);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(result, \"unknown type: \".concat(JSON.stringify(name)), \"name\", name);\n        return result;\n    }\n    /**\n     *  Return the encoded %%value%% for the %%type%%.\n     */ encodeData(type, value) {\n        return this.getEncoder(type)(value);\n    }\n    /**\n     *  Returns the hash of %%value%% for the type of %%name%%.\n     */ hashStruct(name, value) {\n        return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_4__.keccak256)(this.encodeData(name, value));\n    }\n    /**\n     *  Return the fulled encoded %%value%% for the [[types]].\n     */ encode(value) {\n        return this.encodeData(this.primaryType, value);\n    }\n    /**\n     *  Return the hash of the fully encoded %%value%% for the [[types]].\n     */ hash(value) {\n        return this.hashStruct(this.primaryType, value);\n    }\n    /**\n     *  @_ignore:\n     */ _visit(type, value, callback) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n        // Array\n        const array = splitArray(type).array;\n        if (array) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(array.count === -1 || array.count === value.length, \"array length mismatch; expected length \".concat(array.count), \"value\", value);\n            return value.map((v)=>this._visit(array.prefix, v, callback));\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, param)=>{\n                let { name, type } = param;\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, {});\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(false, \"unknown type: \".concat(type), \"type\", type);\n    }\n    /**\n     *  Call %%calback%% for each value in %%value%%, passing the type and\n     *  component within %%value%%.\n     *\n     *  This is useful for replacing addresses or other transformation that\n     *  may be desired on each component, based on its type.\n     */ visit(value, callback) {\n        return this._visit(this.primaryType, value, callback);\n    }\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     */ static from(types) {\n        return new TypedDataEncoder(types);\n    }\n    /**\n     *  Return the primary type for %%types%%.\n     */ static getPrimaryType(types) {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n    /**\n     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\n     */ static hashStruct(name, types, value) {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n    /**\n     *  Return the domain hash for %%domain%%.\n     */ static hashDomain(domain) {\n        const domainFields = [];\n        for(const name in domain){\n            if (domain[name] == null) {\n                continue;\n            }\n            const type = domainFieldTypes[name];\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(type, \"invalid typed-data domain key: \".concat(JSON.stringify(name)), \"domain\", domain);\n            domainFields.push({\n                name,\n                type\n            });\n        }\n        domainFields.sort((a, b)=>{\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n            EIP712Domain: domainFields\n        }, domain);\n    }\n    /**\n     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */ static encode(domain, types, value) {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n    /**\n     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */ static hash(domain, types, value) {\n        return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_4__.keccak256)(TypedDataEncoder.encode(domain, types, value));\n    }\n    // Replaces all address types with ENS names with their looked up address\n    /**\n     * Resolves to the value from resolving all addresses in %%value%% for\n     * %%types%% and the %%domain%%.\n     */ static async resolveNames(domain, types, value, resolveName) {\n        // Make a copy to isolate it from the object passed in\n        domain = Object.assign({}, domain);\n        // Allow passing null to ignore value\n        for(const key in domain){\n            if (domain[key] == null) {\n                delete domain[key];\n            }\n        }\n        // Look up all ENS names\n        const ensCache = {};\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n        // Get a list of all the addresses\n        encoder.visit(value, (type, value)=>{\n            if (type === \"address\" && !(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n        // Lookup each name\n        for(const name in ensCache){\n            ensCache[name] = await resolveName(name);\n        }\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type, value)=>{\n            if (type === \"address\" && ensCache[value]) {\n                return ensCache[value];\n            }\n            return value;\n        });\n        return {\n            domain,\n            value\n        };\n    }\n    /**\n     *  Returns the JSON-encoded payload expected by nodes which implement\n     *  the JSON-RPC [[link-eip-712]] method.\n     */ static getPayload(domain, types, value) {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n        // Derive the EIP712Domain Struct reference type\n        const domainValues = {};\n        const domainTypes = [];\n        domainFieldNames.forEach((name)=>{\n            const value = domain[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({\n                name,\n                type: domainFieldTypes[name]\n            });\n        });\n        const encoder = TypedDataEncoder.from(types);\n        // Get the normalized types\n        types = encoder.types;\n        const typesWithDomain = Object.assign({}, types);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        typesWithDomain.EIP712Domain = domainTypes;\n        // Validate the data structures and types\n        encoder.encode(value);\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value)=>{\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(value));\n                }\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(value).toString();\n                }\n                switch(type){\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(typeof value === \"string\", \"invalid string\", \"value\", value);\n                        return value;\n                }\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(false, \"unsupported type\", \"type\", type);\n            })\n        };\n    }\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     *\n     *  This performs all necessary checking that types are valid and\n     *  do not violate the [[link-eip-712]] structural constraints as\n     *  well as computes the [[primaryType]].\n     */ constructor(_types1){\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_8__._)(this, _getEncoder);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_9__._)(this, _types, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_9__._)(this, _fullTypes, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_9__._)(this, _encoderCache, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_10__._)(this, _fullTypes, new Map());\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_10__._)(this, _encoderCache, new Map());\n        // Link struct types to their direct child structs\n        const links = new Map();\n        // Link structs to structs which contain them as a child\n        const parents = new Map();\n        // Link all subtypes within a given struct\n        const subtypes = new Map();\n        const types = {};\n        Object.keys(_types1).forEach((type)=>{\n            types[type] = _types1[type].map((param)=>{\n                let { name, type } = param;\n                // Normalize the base type (unless name conflict)\n                let { base, index } = splitArray(type);\n                if (base === \"int\" && !_types1[\"int\"]) {\n                    base = \"int256\";\n                }\n                if (base === \"uint\" && !_types1[\"uint\"]) {\n                    base = \"uint256\";\n                }\n                return {\n                    name,\n                    type: base + (index || \"\")\n                };\n            });\n            links.set(type, new Set());\n            parents.set(type, []);\n            subtypes.set(type, new Set());\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_10__._)(this, _types, JSON.stringify(types));\n        for(const name in types){\n            const uniqueNames = new Set();\n            for (const field of types[name]){\n                // Check each field has a unique name\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(!uniqueNames.has(field.name), \"duplicate variable name \".concat(JSON.stringify(field.name), \" in \").concat(JSON.stringify(name)), \"types\", _types1);\n                uniqueNames.add(field.name);\n                // Get the base type (drop any array specifiers)\n                const baseType = splitArray(field.type).base;\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(baseType !== name, \"circular type reference to \".concat(JSON.stringify(baseType)), \"types\", _types1);\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    continue;\n                }\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(parents.has(baseType), \"unknown type \".concat(JSON.stringify(baseType)), \"types\", _types1);\n                // Add linkage\n                parents.get(baseType).push(name);\n                links.get(name).add(baseType);\n            }\n        }\n        // Deduce the primary type\n        const primaryTypes = Array.from(parents.keys()).filter((n)=>parents.get(n).length === 0);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(primaryTypes.length !== 0, \"missing primary type\", \"types\", _types1);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(primaryTypes.length === 1, \"ambiguous primary types or unused types: \".concat(primaryTypes.map((t)=>JSON.stringify(t)).join(\", \")), \"types\", _types1);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_11__.defineProperties)(this, {\n            primaryType: primaryTypes[0]\n        });\n        // Check for circular type references\n        function checkCircular(type, found) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(!found.has(type), \"circular type reference to \".concat(JSON.stringify(type)), \"types\", _types1);\n            found.add(type);\n            for (const child of links.get(type)){\n                if (!parents.has(child)) {\n                    continue;\n                }\n                // Recursively check children\n                checkCircular(child, found);\n                // Mark all ancestors as having this decendant\n                for (const subtype of found){\n                    subtypes.get(subtype).add(child);\n                }\n            }\n            found.delete(type);\n        }\n        checkCircular(this.primaryType, new Set());\n        // Compute each fully describe type\n        for (const [name, set] of subtypes){\n            const st = Array.from(set);\n            st.sort();\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_6__._)(this, _fullTypes).set(name, encodeType(name, types[name]) + st.map((t)=>encodeType(t, types[t])).join(\"\"));\n        }\n    }\n}\nfunction getEncoder(type) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n        const encoder = getBaseEncoder(type);\n        if (encoder) {\n            return encoder;\n        }\n    }\n    // Array\n    const array = splitArray(type).array;\n    if (array) {\n        const subtype = array.prefix;\n        const subEncoder = this.getEncoder(subtype);\n        return (value)=>{\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(array.count === -1 || array.count === value.length, \"array length mismatch; expected length \".concat(array.count), \"value\", value);\n            let result = value.map(subEncoder);\n            if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_6__._)(this, _fullTypes).has(subtype)) {\n                result = result.map(_crypto_index_js__WEBPACK_IMPORTED_MODULE_4__.keccak256);\n            }\n            return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_4__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)(result));\n        };\n    }\n    // Struct\n    const fields = this.types[type];\n    if (fields) {\n        const encodedType = (0,_id_js__WEBPACK_IMPORTED_MODULE_5__.id)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_6__._)(this, _fullTypes).get(type));\n        return (value)=>{\n            const values = fields.map((param)=>{\n                let { name, type } = param;\n                const result = this.getEncoder(type)(value[name]);\n                if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_6__._)(this, _fullTypes).has(type)) {\n                    return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_4__.keccak256)(result);\n                }\n                return result;\n            });\n            values.unshift(encodedType);\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)(values);\n        };\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(false, \"unknown type: \".concat(type), \"type\", type);\n}\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */ function verifyTypedData(domain, types, value, signature) {\n    return (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_12__.recoverAddress)(TypedDataEncoder.hash(domain, types, value), signature);\n} //# sourceMappingURL=typed-data.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/hash/typed-data.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/abstract-provider.js":
/*!*********************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/abstract-provider.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractProvider: function() { return /* binding */ AbstractProvider; },\n/* harmony export */   UnmanagedSubscriber: function() { return /* binding */ UnmanagedSubscriber; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _swc_helpers_class_private_field_update__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_update */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_update.js\");\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/checks.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../constants/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/constants/addresses.js\");\n/* harmony import */ var _contract_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../contract/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../hash/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/namehash.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/transaction.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fetch.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/events.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _ens_resolver_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ens-resolver.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/ens-resolver.js\");\n/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./format.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/format.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./network.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./provider.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider.js\");\n/* harmony import */ var _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./subscriber-polling.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/subscriber-polling.js\");\n/**\n *  The available providers should suffice for most developers purposes,\n *  but the [[AbstractProvider]] class has many features which enable\n *  sub-classing it for specific purposes.\n *\n *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]\n */ // @TODO\n// Event coalescence\n//   When we register an event with an async value (e.g. address is a Signer\n//   or ENS name), we need to add it immeidately for the Event API, but also\n//   need time to resolve the address. Upon resolving the address, we need to\n//   migrate the listener to the static event. We also need to maintain a map\n//   of Signer/ENS name to address so we can sync respond to listenerCount.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Constants\nconst BN_2 = BigInt(2);\nconst MAX_CCIP_REDIRECTS = 10;\nfunction isPromise(value) {\n    return value && typeof value.then === \"function\";\n}\nfunction getTag(prefix, value) {\n    return prefix + \":\" + JSON.stringify(value, (k, v)=>{\n        if (v == null) {\n            return \"null\";\n        }\n        if (typeof v === \"bigint\") {\n            return \"bigint:\".concat(v.toString());\n        }\n        if (typeof v === \"string\") {\n            return v.toLowerCase();\n        }\n        // Sort object keys\n        if (typeof v === \"object\" && !Array.isArray(v)) {\n            const keys = Object.keys(v);\n            keys.sort();\n            return keys.reduce((accum, key)=>{\n                accum[key] = v[key];\n                return accum;\n            }, {});\n        }\n        return v;\n    });\n}\n/**\n *  An **UnmanagedSubscriber** is useful for events which do not require\n *  any additional management, such as ``\"debug\"`` which only requires\n *  emit in synchronous event loop triggered calls.\n */ class UnmanagedSubscriber {\n    start() {}\n    stop() {}\n    pause(dropWhilePaused) {}\n    resume() {}\n    /**\n     *  Create a new UnmanagedSubscriber with %%name%%.\n     */ constructor(name){\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\n            name\n        });\n    }\n}\nfunction copy(value) {\n    return JSON.parse(JSON.stringify(value));\n}\nfunction concisify(items) {\n    items = Array.from(new Set(items).values());\n    items.sort();\n    return items;\n}\nasync function getSubscription(_event, provider) {\n    if (_event == null) {\n        throw new Error(\"invalid event\");\n    }\n    // Normalize topic array info an EventFilter\n    if (Array.isArray(_event)) {\n        _event = {\n            topics: _event\n        };\n    }\n    if (typeof _event === \"string\") {\n        switch(_event){\n            case \"block\":\n            case \"debug\":\n            case \"error\":\n            case \"finalized\":\n            case \"network\":\n            case \"pending\":\n            case \"safe\":\n                {\n                    return {\n                        type: _event,\n                        tag: _event\n                    };\n                }\n        }\n    }\n    if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(_event, 32)) {\n        const hash = _event.toLowerCase();\n        return {\n            type: \"transaction\",\n            tag: getTag(\"tx\", {\n                hash\n            }),\n            hash\n        };\n    }\n    if (_event.orphan) {\n        const event = _event;\n        // @TODO: Should lowercase and whatnot things here instead of copy...\n        return {\n            type: \"orphan\",\n            tag: getTag(\"orphan\", event),\n            filter: copy(event)\n        };\n    }\n    if (_event.address || _event.topics) {\n        const event = _event;\n        const filter = {\n            topics: (event.topics || []).map((t)=>{\n                if (t == null) {\n                    return null;\n                }\n                if (Array.isArray(t)) {\n                    return concisify(t.map((t)=>t.toLowerCase()));\n                }\n                return t.toLowerCase();\n            })\n        };\n        if (event.address) {\n            const addresses = [];\n            const promises = [];\n            const addAddress = (addr)=>{\n                if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(addr)) {\n                    addresses.push(addr);\n                } else {\n                    promises.push((async ()=>{\n                        addresses.push(await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveAddress)(addr, provider));\n                    })());\n                }\n            };\n            if (Array.isArray(event.address)) {\n                event.address.forEach(addAddress);\n            } else {\n                addAddress(event.address);\n            }\n            if (promises.length) {\n                await Promise.all(promises);\n            }\n            filter.address = concisify(addresses.map((a)=>a.toLowerCase()));\n        }\n        return {\n            filter,\n            tag: getTag(\"event\", filter),\n            type: \"event\"\n        };\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(false, \"unknown ProviderEvent\", \"event\", _event);\n}\nfunction getTime() {\n    return new Date().getTime();\n}\nconst defaultOptions = {\n    cacheTimeout: 250,\n    pollingInterval: 4000\n};\nvar _subs = /*#__PURE__*/ new WeakMap(), _plugins = /*#__PURE__*/ new WeakMap(), // null=unpaused, true=paused+dropWhilePaused, false=paused\n_pausedState = /*#__PURE__*/ new WeakMap(), _destroyed = /*#__PURE__*/ new WeakMap(), _networkPromise = /*#__PURE__*/ new WeakMap(), _anyNetwork = /*#__PURE__*/ new WeakMap(), _performCache = /*#__PURE__*/ new WeakMap(), // The most recent block number if running an event or -1 if no \"block\" event\n_lastBlockNumber = /*#__PURE__*/ new WeakMap(), _nextTimer = /*#__PURE__*/ new WeakMap(), _timers = /*#__PURE__*/ new WeakMap(), _disableCcipRead = /*#__PURE__*/ new WeakMap(), _options = /*#__PURE__*/ new WeakMap(), _perform = /*#__PURE__*/ new WeakSet(), _call = /*#__PURE__*/ new WeakSet(), _checkNetwork = /*#__PURE__*/ new WeakSet(), _getAccountValue = /*#__PURE__*/ new WeakSet(), _getBlock = /*#__PURE__*/ new WeakSet(), _hasSub = /*#__PURE__*/ new WeakSet(), _getSub = /*#__PURE__*/ new WeakSet();\n/**\n *  An **AbstractProvider** provides a base class for other sub-classes to\n *  implement the [[Provider]] API by normalizing input arguments and\n *  formatting output results as well as tracking events for consistent\n *  behaviour on an eventually-consistent network.\n */ class AbstractProvider {\n    get pollingInterval() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _options).pollingInterval;\n    }\n    /**\n     *  Returns ``this``, to allow an **AbstractProvider** to implement\n     *  the [[ContractRunner]] interface.\n     */ get provider() {\n        return this;\n    }\n    /**\n     *  Returns all the registered plug-ins.\n     */ get plugins() {\n        return Array.from((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _plugins).values());\n    }\n    /**\n     *  Attach a new plug-in.\n     */ attachPlugin(plugin) {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _plugins).get(plugin.name)) {\n            throw new Error(\"cannot replace existing plugin: \".concat(plugin.name, \" \"));\n        }\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _plugins).set(plugin.name, plugin.connect(this));\n        return this;\n    }\n    /**\n     *  Get a plugin by name.\n     */ getPlugin(name) {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _plugins).get(name) || null;\n    }\n    /**\n     *  Prevent any CCIP-read operation, regardless of whether requested\n     *  in a [[call]] using ``enableCcipRead``.\n     */ get disableCcipRead() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _disableCcipRead);\n    }\n    set disableCcipRead(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _disableCcipRead, !!value);\n    }\n    /**\n     *  Resolves to the data for executing the CCIP-read operations.\n     */ async ccipReadFetch(tx, calldata, urls) {\n        if (this.disableCcipRead || urls.length === 0 || tx.to == null) {\n            return null;\n        }\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n        const errorMessages = [];\n        for(let i = 0; i < urls.length; i++){\n            const url = urls[i];\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n            // If no {data} is present, use POST; otherwise GET\n            //const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n            //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n            //    value.status = response.statusCode;\n            //    return value;\n            //});\n            const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_6__.FetchRequest(href);\n            if (url.indexOf(\"{data}\") === -1) {\n                request.body = {\n                    data,\n                    sender\n                };\n            }\n            this.emit(\"debug\", {\n                action: \"sendCcipReadFetchRequest\",\n                request,\n                index: i,\n                urls\n            });\n            let errorMessage = \"unknown error\";\n            const resp = await request.send();\n            try {\n                const result = resp.bodyJson;\n                if (result.data) {\n                    this.emit(\"debug\", {\n                        action: \"receiveCcipReadFetchResult\",\n                        request,\n                        result\n                    });\n                    return result.data;\n                }\n                if (result.message) {\n                    errorMessage = result.message;\n                }\n                this.emit(\"debug\", {\n                    action: \"receiveCcipReadFetchError\",\n                    request,\n                    result\n                });\n            } catch (error) {}\n            // 4xx indicates the result is not present; stop\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(resp.statusCode < 400 || resp.statusCode >= 500, \"response not found during CCIP fetch: \".concat(errorMessage), \"OFFCHAIN_FAULT\", {\n                reason: \"404_MISSING_RESOURCE\",\n                transaction: tx,\n                info: {\n                    url,\n                    errorMessage\n                }\n            });\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(false, \"error encountered during CCIP fetch: \".concat(errorMessages.map((m)=>JSON.stringify(m)).join(\", \")), \"OFFCHAIN_FAULT\", {\n            reason: \"500_SERVER_ERROR\",\n            transaction: tx,\n            info: {\n                urls,\n                errorMessages\n            }\n        });\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a block before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Block]].\n     */ _wrapBlock(value, network) {\n        return new _provider_js__WEBPACK_IMPORTED_MODULE_7__.Block((0,_format_js__WEBPACK_IMPORTED_MODULE_8__.formatBlock)(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a log before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Log]].\n     */ _wrapLog(value, network) {\n        return new _provider_js__WEBPACK_IMPORTED_MODULE_7__.Log((0,_format_js__WEBPACK_IMPORTED_MODULE_8__.formatLog)(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  receipt before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionReceipt]].\n     */ _wrapTransactionReceipt(value, network) {\n        return new _provider_js__WEBPACK_IMPORTED_MODULE_7__.TransactionReceipt((0,_format_js__WEBPACK_IMPORTED_MODULE_8__.formatTransactionReceipt)(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  response before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionResponse]].\n     */ _wrapTransactionResponse(tx, network) {\n        return new _provider_js__WEBPACK_IMPORTED_MODULE_7__.TransactionResponse((0,_format_js__WEBPACK_IMPORTED_MODULE_8__.formatTransactionResponse)(tx), this);\n    }\n    /**\n     *  Resolves to the Network, forcing a network detection using whatever\n     *  technique the sub-class requires.\n     *\n     *  Sub-classes **must** override this.\n     */ _detectNetwork() {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(false, \"sub-classes must implement this\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_detectNetwork\"\n        });\n    }\n    /**\n     *  Sub-classes should use this to perform all built-in operations. All\n     *  methods sanitizes and normalizes the values passed into this.\n     *\n     *  Sub-classes **must** override this.\n     */ async _perform(req) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(false, \"unsupported method: \".concat(req.method), \"UNSUPPORTED_OPERATION\", {\n            operation: req.method,\n            info: req\n        });\n    }\n    // State\n    async getBlockNumber() {\n        const blockNumber = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getNumber)(await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _perform, perform).call(this, {\n            method: \"getBlockNumber\"\n        }), \"%response\");\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _lastBlockNumber) >= 0) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _lastBlockNumber, blockNumber);\n        }\n        return blockNumber;\n    }\n    /**\n     *  Returns or resolves to the address for %%address%%, resolving ENS\n     *  names and [[Addressable]] objects and returning if already an\n     *  address.\n     */ _getAddress(address) {\n        return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveAddress)(address, this);\n    }\n    /**\n     *  Returns or resolves to a valid block tag for %%blockTag%%, resolving\n     *  negative values and returning if already a valid block tag.\n     */ _getBlockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        switch(blockTag){\n            case \"earliest\":\n                return \"0x0\";\n            case \"finalized\":\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n                return blockTag;\n        }\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(blockTag)) {\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(blockTag, 32)) {\n                return blockTag;\n            }\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.toQuantity)(blockTag);\n        }\n        if (typeof blockTag === \"bigint\") {\n            blockTag = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getNumber)(blockTag, \"blockTag\");\n        }\n        if (typeof blockTag === \"number\") {\n            if (blockTag >= 0) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.toQuantity)(blockTag);\n            }\n            if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _lastBlockNumber) >= 0) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.toQuantity)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _lastBlockNumber) + blockTag);\n            }\n            return this.getBlockNumber().then((b)=>(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.toQuantity)(b + blockTag));\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(false, \"invalid blockTag\", \"blockTag\", blockTag);\n    }\n    /**\n     *  Returns or resolves to a filter for %%filter%%, resolving any ENS\n     *  names or [[Addressable]] object and returning if already a valid\n     *  filter.\n     */ _getFilter(filter) {\n        // Create a canonical representation of the topics\n        const topics = (filter.topics || []).map((t)=>{\n            if (t == null) {\n                return null;\n            }\n            if (Array.isArray(t)) {\n                return concisify(t.map((t)=>t.toLowerCase()));\n            }\n            return t.toLowerCase();\n        });\n        const blockHash = \"blockHash\" in filter ? filter.blockHash : undefined;\n        const resolve = (_address, fromBlock, toBlock)=>{\n            let address = undefined;\n            switch(_address.length){\n                case 0:\n                    break;\n                case 1:\n                    address = _address[0];\n                    break;\n                default:\n                    _address.sort();\n                    address = _address;\n            }\n            if (blockHash) {\n                if (fromBlock != null || toBlock != null) {\n                    throw new Error(\"invalid filter\");\n                }\n            }\n            const filter = {};\n            if (address) {\n                filter.address = address;\n            }\n            if (topics.length) {\n                filter.topics = topics;\n            }\n            if (fromBlock) {\n                filter.fromBlock = fromBlock;\n            }\n            if (toBlock) {\n                filter.toBlock = toBlock;\n            }\n            if (blockHash) {\n                filter.blockHash = blockHash;\n            }\n            return filter;\n        };\n        // Addresses could be async (ENS names or Addressables)\n        let address = [];\n        if (filter.address) {\n            if (Array.isArray(filter.address)) {\n                for (const addr of filter.address){\n                    address.push(this._getAddress(addr));\n                }\n            } else {\n                address.push(this._getAddress(filter.address));\n            }\n        }\n        let fromBlock = undefined;\n        if (\"fromBlock\" in filter) {\n            fromBlock = this._getBlockTag(filter.fromBlock);\n        }\n        let toBlock = undefined;\n        if (\"toBlock\" in filter) {\n            toBlock = this._getBlockTag(filter.toBlock);\n        }\n        if (address.filter((a)=>typeof a !== \"string\").length || fromBlock != null && typeof fromBlock !== \"string\" || toBlock != null && typeof toBlock !== \"string\") {\n            return Promise.all([\n                Promise.all(address),\n                fromBlock,\n                toBlock\n            ]).then((result)=>{\n                return resolve(result[0], result[1], result[2]);\n            });\n        }\n        return resolve(address, fromBlock, toBlock);\n    }\n    /**\n     *  Returns or resovles to a transaction for %%request%%, resolving\n     *  any ENS names or [[Addressable]] and returning if already a valid\n     *  transaction.\n     */ _getTransactionRequest(_request) {\n        const request = (0,_provider_js__WEBPACK_IMPORTED_MODULE_7__.copyRequest)(_request);\n        const promises = [];\n        [\n            \"to\",\n            \"from\"\n        ].forEach((key)=>{\n            if (request[key] == null) {\n                return;\n            }\n            const addr = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveAddress)(request[key], this);\n            if (isPromise(addr)) {\n                promises.push(async function() {\n                    request[key] = await addr;\n                }());\n            } else {\n                request[key] = addr;\n            }\n        });\n        if (request.blockTag != null) {\n            const blockTag = this._getBlockTag(request.blockTag);\n            if (isPromise(blockTag)) {\n                promises.push(async function() {\n                    request.blockTag = await blockTag;\n                }());\n            } else {\n                request.blockTag = blockTag;\n            }\n        }\n        if (promises.length) {\n            return async function() {\n                await Promise.all(promises);\n                return request;\n            }();\n        }\n        return request;\n    }\n    async getNetwork() {\n        // No explicit network was set and this is our first time\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _networkPromise) == null) {\n            // Detect the current network (shared with all calls)\n            const detectNetwork = (async ()=>{\n                try {\n                    const network = await this._detectNetwork();\n                    this.emit(\"network\", network, null);\n                    return network;\n                } catch (error) {\n                    if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _networkPromise) === detectNetwork) {\n                        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _networkPromise, null);\n                    }\n                    throw error;\n                }\n            })();\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _networkPromise, detectNetwork);\n            return (await detectNetwork).clone();\n        }\n        const networkPromise = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _networkPromise);\n        const [expected, actual] = await Promise.all([\n            networkPromise,\n            this._detectNetwork() // The actual connected network\n        ]);\n        if (expected.chainId !== actual.chainId) {\n            if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _anyNetwork)) {\n                // The \"any\" network can change, so notify listeners\n                this.emit(\"network\", actual, expected);\n                // Update the network if something else hasn't already changed it\n                if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _networkPromise) === networkPromise) {\n                    (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _networkPromise, Promise.resolve(actual));\n                }\n            } else {\n                // Otherwise, we do not allow changes to the underlying network\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(false, \"network changed: \".concat(expected.chainId, \" => \").concat(actual.chainId, \" \"), \"NETWORK_ERROR\", {\n                    event: \"changed\"\n                });\n            }\n        }\n        return expected.clone();\n    }\n    async getFeeData() {\n        const network = await this.getNetwork();\n        const getFeeDataFunc = async ()=>{\n            const { _block, gasPrice, priorityFee } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\n                _block: (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _getBlock, getBlock).call(this, \"latest\", false),\n                gasPrice: (async ()=>{\n                    try {\n                        const value = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _perform, perform).call(this, {\n                            method: \"getGasPrice\"\n                        });\n                        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getBigInt)(value, \"%response\");\n                    } catch (error) {}\n                    return null;\n                })(),\n                priorityFee: (async ()=>{\n                    try {\n                        const value = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _perform, perform).call(this, {\n                            method: \"getPriorityFee\"\n                        });\n                        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getBigInt)(value, \"%response\");\n                    } catch (error) {}\n                    return null;\n                })()\n            });\n            let maxFeePerGas = null;\n            let maxPriorityFeePerGas = null;\n            // These are the recommended EIP-1559 heuristics for fee data\n            const block = this._wrapBlock(_block, network);\n            if (block && block.baseFeePerGas) {\n                maxPriorityFeePerGas = priorityFee != null ? priorityFee : BigInt(\"1000000000\");\n                maxFeePerGas = block.baseFeePerGas * BN_2 + maxPriorityFeePerGas;\n            }\n            return new _provider_js__WEBPACK_IMPORTED_MODULE_7__.FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);\n        };\n        // Check for a FeeDataNetWorkPlugin\n        const plugin = network.getPlugin(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n        if (plugin) {\n            const req = new _utils_index_js__WEBPACK_IMPORTED_MODULE_6__.FetchRequest(plugin.url);\n            const feeData = await plugin.processFunc(getFeeDataFunc, this, req);\n            return new _provider_js__WEBPACK_IMPORTED_MODULE_7__.FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);\n        }\n        return await getFeeDataFunc();\n    }\n    async estimateGas(_tx) {\n        let tx = this._getTransactionRequest(_tx);\n        if (isPromise(tx)) {\n            tx = await tx;\n        }\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getBigInt)(await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _perform, perform).call(this, {\n            method: \"estimateGas\",\n            transaction: tx\n        }), \"%response\");\n    }\n    async call(_tx) {\n        const { tx, blockTag } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\n            tx: this._getTransactionRequest(_tx),\n            blockTag: this._getBlockTag(_tx.blockTag)\n        });\n        return await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _checkNetwork, checkNetwork).call(this, (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _call, call).call(this, tx, blockTag, _tx.enableCcipRead ? 0 : -1));\n    }\n    async getBalance(address, blockTag) {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getBigInt)(await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _getAccountValue, getAccountValue).call(this, {\n            method: \"getBalance\"\n        }, address, blockTag), \"%response\");\n    }\n    async getTransactionCount(address, blockTag) {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getNumber)(await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _getAccountValue, getAccountValue).call(this, {\n            method: \"getTransactionCount\"\n        }, address, blockTag), \"%response\");\n    }\n    async getCode(address, blockTag) {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _getAccountValue, getAccountValue).call(this, {\n            method: \"getCode\"\n        }, address, blockTag));\n    }\n    async getStorage(address, _position, blockTag) {\n        const position = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getBigInt)(_position, \"position\");\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _getAccountValue, getAccountValue).call(this, {\n            method: \"getStorage\",\n            position\n        }, address, blockTag));\n    }\n    // Write\n    async broadcastTransaction(signedTx) {\n        const { blockNumber, hash, network } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\n            blockNumber: this.getBlockNumber(),\n            hash: this._perform({\n                method: \"broadcastTransaction\",\n                signedTransaction: signedTx\n            }),\n            network: this.getNetwork()\n        });\n        const tx = _transaction_index_js__WEBPACK_IMPORTED_MODULE_11__.Transaction.from(signedTx);\n        if (tx.hash !== hash) {\n            throw new Error(\"@TODO: the returned hash did not match\");\n        }\n        return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);\n    }\n    // Queries\n    async getBlock(block, prefetchTxs) {\n        const { network, params } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\n            network: this.getNetwork(),\n            params: (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _getBlock, getBlock).call(this, block, !!prefetchTxs)\n        });\n        if (params == null) {\n            return null;\n        }\n        return this._wrapBlock(params, network);\n    }\n    async getTransaction(hash) {\n        const { network, params } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\n            network: this.getNetwork(),\n            params: (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _perform, perform).call(this, {\n                method: \"getTransaction\",\n                hash\n            })\n        });\n        if (params == null) {\n            return null;\n        }\n        return this._wrapTransactionResponse(params, network);\n    }\n    async getTransactionReceipt(hash) {\n        const { network, params } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\n            network: this.getNetwork(),\n            params: (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _perform, perform).call(this, {\n                method: \"getTransactionReceipt\",\n                hash\n            })\n        });\n        if (params == null) {\n            return null;\n        }\n        // Some backends did not backfill the effectiveGasPrice into old transactions\n        // in the receipt, so we look it up manually and inject it.\n        if (params.gasPrice == null && params.effectiveGasPrice == null) {\n            const tx = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _perform, perform).call(this, {\n                method: \"getTransaction\",\n                hash\n            });\n            if (tx == null) {\n                throw new Error(\"report this; could not find tx or effectiveGasPrice\");\n            }\n            params.effectiveGasPrice = tx.gasPrice;\n        }\n        return this._wrapTransactionReceipt(params, network);\n    }\n    async getTransactionResult(hash) {\n        const { result } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\n            network: this.getNetwork(),\n            result: (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _perform, perform).call(this, {\n                method: \"getTransactionResult\",\n                hash\n            })\n        });\n        if (result == null) {\n            return null;\n        }\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(result);\n    }\n    // Bloom-filter Queries\n    async getLogs(_filter) {\n        let filter = this._getFilter(_filter);\n        if (isPromise(filter)) {\n            filter = await filter;\n        }\n        const { network, params } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\n            network: this.getNetwork(),\n            params: (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _perform, perform).call(this, {\n                method: \"getLogs\",\n                filter\n            })\n        });\n        return params.map((p)=>this._wrapLog(p, network));\n    }\n    // ENS\n    _getProvider(chainId) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(false, \"provider cannot connect to target network\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_getProvider()\"\n        });\n    }\n    async getResolver(name) {\n        return await _ens_resolver_js__WEBPACK_IMPORTED_MODULE_12__.EnsResolver.fromName(this, name);\n    }\n    async getAvatar(name) {\n        const resolver = await this.getResolver(name);\n        if (resolver) {\n            return await resolver.getAvatar();\n        }\n        return null;\n    }\n    async resolveName(name) {\n        const resolver = await this.getResolver(name);\n        if (resolver) {\n            return await resolver.getAddress();\n        }\n        return null;\n    }\n    async lookupAddress(address) {\n        address = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_13__.getAddress)(address);\n        const node = (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_14__.namehash)(address.substring(2).toLowerCase() + \".addr.reverse\");\n        try {\n            const ensAddr = await _ens_resolver_js__WEBPACK_IMPORTED_MODULE_12__.EnsResolver.getEnsAddress(this);\n            const ensContract = new _contract_index_js__WEBPACK_IMPORTED_MODULE_15__.Contract(ensAddr, [\n                \"function resolver(bytes32) view returns (address)\"\n            ], this);\n            const resolver = await ensContract.resolver(node);\n            if (resolver == null || resolver === _constants_index_js__WEBPACK_IMPORTED_MODULE_16__.ZeroAddress) {\n                return null;\n            }\n            const resolverContract = new _contract_index_js__WEBPACK_IMPORTED_MODULE_15__.Contract(resolver, [\n                \"function name(bytes32) view returns (string)\"\n            ], this);\n            const name = await resolverContract.name(node);\n            // Failed forward resolution\n            const check = await this.resolveName(name);\n            if (check !== address) {\n                return null;\n            }\n            return name;\n        } catch (error) {\n            // No data was returned from the resolver\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.isError)(error, \"BAD_DATA\") && error.value === \"0x\") {\n                return null;\n            }\n            // Something reerted\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.isError)(error, \"CALL_EXCEPTION\")) {\n                return null;\n            }\n            throw error;\n        }\n        return null;\n    }\n    async waitForTransaction(hash, _confirms, timeout) {\n        const confirms = _confirms != null ? _confirms : 1;\n        if (confirms === 0) {\n            return this.getTransactionReceipt(hash);\n        }\n        return new Promise(async (resolve, reject)=>{\n            let timer = null;\n            const listener = async (blockNumber)=>{\n                try {\n                    const receipt = await this.getTransactionReceipt(hash);\n                    if (receipt != null) {\n                        if (blockNumber - receipt.blockNumber + 1 >= confirms) {\n                            resolve(receipt);\n                            //this.off(\"block\", listener);\n                            if (timer) {\n                                clearTimeout(timer);\n                                timer = null;\n                            }\n                            return;\n                        }\n                    }\n                } catch (error) {\n                    console.log(\"EEE\", error);\n                }\n                this.once(\"block\", listener);\n            };\n            if (timeout != null) {\n                timer = setTimeout(()=>{\n                    if (timer == null) {\n                        return;\n                    }\n                    timer = null;\n                    this.off(\"block\", listener);\n                    reject((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.makeError)(\"timeout\", \"TIMEOUT\", {\n                        reason: \"timeout\"\n                    }));\n                }, timeout);\n            }\n            listener(await this.getBlockNumber());\n        });\n    }\n    async waitForBlock(blockTag) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(false, \"not implemented yet\", \"NOT_IMPLEMENTED\", {\n            operation: \"waitForBlock\"\n        });\n    }\n    /**\n     *  Clear a timer created using the [[_setTimeout]] method.\n     */ _clearTimeout(timerId) {\n        const timer = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _timers).get(timerId);\n        if (!timer) {\n            return;\n        }\n        if (timer.timer) {\n            clearTimeout(timer.timer);\n        }\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _timers).delete(timerId);\n    }\n    /**\n     *  Create a timer that will execute %%func%% after at least %%timeout%%\n     *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute\n     *  in the next event loop.\n     *\n     *  [Pausing](AbstractProvider-paused) the provider will pause any\n     *  associated timers.\n     */ _setTimeout(_func, timeout) {\n        if (timeout == null) {\n            timeout = 0;\n        }\n        const timerId = (0,_swc_helpers_class_private_field_update__WEBPACK_IMPORTED_MODULE_17__._)(this, _nextTimer).value++;\n        const func = ()=>{\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _timers).delete(timerId);\n            _func();\n        };\n        if (this.paused) {\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _timers).set(timerId, {\n                timer: null,\n                func,\n                time: timeout\n            });\n        } else {\n            const timer = setTimeout(func, timeout);\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _timers).set(timerId, {\n                timer,\n                func,\n                time: getTime()\n            });\n        }\n        return timerId;\n    }\n    /**\n     *  Perform %%func%% on each subscriber.\n     */ _forEachSubscriber(func) {\n        for (const sub of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _subs).values()){\n            func(sub.subscriber);\n        }\n    }\n    /**\n     *  Sub-classes may override this to customize subscription\n     *  implementations.\n     */ _getSubscriber(sub) {\n        switch(sub.type){\n            case \"debug\":\n            case \"error\":\n            case \"network\":\n                return new UnmanagedSubscriber(sub.type);\n            case \"block\":\n                {\n                    const subscriber = new _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_18__.PollingBlockSubscriber(this);\n                    subscriber.pollingInterval = this.pollingInterval;\n                    return subscriber;\n                }\n            case \"safe\":\n            case \"finalized\":\n                return new _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_18__.PollingBlockTagSubscriber(this, sub.type);\n            case \"event\":\n                return new _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_18__.PollingEventSubscriber(this, sub.filter);\n            case \"transaction\":\n                return new _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_18__.PollingTransactionSubscriber(this, sub.hash);\n            case \"orphan\":\n                return new _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_18__.PollingOrphanSubscriber(this, sub.filter);\n        }\n        throw new Error(\"unsupported event: \".concat(sub.type));\n    }\n    /**\n     *  If a [[Subscriber]] fails and needs to replace itself, this\n     *  method may be used.\n     *\n     *  For example, this is used for providers when using the\n     *  ``eth_getFilterChanges`` method, which can return null if state\n     *  filters are not supported by the backend, allowing the Subscriber\n     *  to swap in a [[PollingEventSubscriber]].\n     */ _recoverSubscriber(oldSub, newSub) {\n        for (const sub of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _subs).values()){\n            if (sub.subscriber === oldSub) {\n                if (sub.started) {\n                    sub.subscriber.stop();\n                }\n                sub.subscriber = newSub;\n                if (sub.started) {\n                    newSub.start();\n                }\n                if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _pausedState) != null) {\n                    newSub.pause((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _pausedState));\n                }\n                break;\n            }\n        }\n    }\n    async on(event, listener) {\n        const sub = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _getSub, getSub).call(this, event);\n        sub.listeners.push({\n            listener,\n            once: false\n        });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _pausedState) != null) {\n                sub.subscriber.pause((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _pausedState));\n            }\n        }\n        return this;\n    }\n    async once(event, listener) {\n        const sub = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _getSub, getSub).call(this, event);\n        sub.listeners.push({\n            listener,\n            once: true\n        });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _pausedState) != null) {\n                sub.subscriber.pause((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _pausedState));\n            }\n        }\n        return this;\n    }\n    async emit(event) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const sub = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _hasSub, hasSub).call(this, event, args);\n        // If there is not subscription or if a recent emit removed\n        // the last of them (which also deleted the sub) do nothing\n        if (!sub || sub.listeners.length === 0) {\n            return false;\n        }\n        ;\n        const count = sub.listeners.length;\n        sub.listeners = sub.listeners.filter((param)=>{\n            let { listener, once } = param;\n            const payload = new _utils_index_js__WEBPACK_IMPORTED_MODULE_19__.EventPayload(this, once ? null : listener, event);\n            try {\n                listener.call(this, ...args, payload);\n            } catch (error) {}\n            return !once;\n        });\n        if (sub.listeners.length === 0) {\n            if (sub.started) {\n                sub.subscriber.stop();\n            }\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _subs).delete(sub.tag);\n        }\n        return count > 0;\n    }\n    async listenerCount(event) {\n        if (event) {\n            const sub = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _hasSub, hasSub).call(this, event);\n            if (!sub) {\n                return 0;\n            }\n            return sub.listeners.length;\n        }\n        let total = 0;\n        for (const { listeners } of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _subs).values()){\n            total += listeners.length;\n        }\n        return total;\n    }\n    async listeners(event) {\n        if (event) {\n            const sub = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _hasSub, hasSub).call(this, event);\n            if (!sub) {\n                return [];\n            }\n            return sub.listeners.map((param)=>{\n                let { listener } = param;\n                return listener;\n            });\n        }\n        let result = [];\n        for (const { listeners } of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _subs).values()){\n            result = result.concat(listeners.map((param)=>{\n                let { listener } = param;\n                return listener;\n            }));\n        }\n        return result;\n    }\n    async off(event, listener) {\n        const sub = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _hasSub, hasSub).call(this, event);\n        if (!sub) {\n            return this;\n        }\n        if (listener) {\n            const index = sub.listeners.map((param)=>{\n                let { listener } = param;\n                return listener;\n            }).indexOf(listener);\n            if (index >= 0) {\n                sub.listeners.splice(index, 1);\n            }\n        }\n        if (!listener || sub.listeners.length === 0) {\n            if (sub.started) {\n                sub.subscriber.stop();\n            }\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _subs).delete(sub.tag);\n        }\n        return this;\n    }\n    async removeAllListeners(event) {\n        if (event) {\n            const { tag, started, subscriber } = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _getSub, getSub).call(this, event);\n            if (started) {\n                subscriber.stop();\n            }\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _subs).delete(tag);\n        } else {\n            for (const [tag, { started, subscriber }] of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _subs)){\n                if (started) {\n                    subscriber.stop();\n                }\n                (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _subs).delete(tag);\n            }\n        }\n        return this;\n    }\n    // Alias for \"on\"\n    async addListener(event, listener) {\n        return await this.on(event, listener);\n    }\n    // Alias for \"off\"\n    async removeListener(event, listener) {\n        return this.off(event, listener);\n    }\n    /**\n     *  If this provider has been destroyed using the [[destroy]] method.\n     *\n     *  Once destroyed, all resources are reclaimed, internal event loops\n     *  and timers are cleaned up and no further requests may be sent to\n     *  the provider.\n     */ get destroyed() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _destroyed);\n    }\n    /**\n     *  Sub-classes may use this to shutdown any sockets or release their\n     *  resources and reject any pending requests.\n     *\n     *  Sub-classes **must** call ``super.destroy()``.\n     */ destroy() {\n        // Stop all listeners\n        this.removeAllListeners();\n        // Shut down all tiemrs\n        for (const timerId of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _timers).keys()){\n            this._clearTimeout(timerId);\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _destroyed, true);\n    }\n    /**\n     *  Whether the provider is currently paused.\n     *\n     *  A paused provider will not emit any events, and generally should\n     *  not make any requests to the network, but that is up to sub-classes\n     *  to manage.\n     *\n     *  Setting ``paused = true`` is identical to calling ``.pause(false)``,\n     *  which will buffer any events that occur while paused until the\n     *  provider is unpaused.\n     */ get paused() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _pausedState) != null;\n    }\n    set paused(pause) {\n        if (!!pause === this.paused) {\n            return;\n        }\n        if (this.paused) {\n            this.resume();\n        } else {\n            this.pause(false);\n        }\n    }\n    /**\n     *  Pause the provider. If %%dropWhilePaused%%, any events that occur\n     *  while paused are dropped, otherwise all events will be emitted once\n     *  the provider is unpaused.\n     */ pause(dropWhilePaused) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _lastBlockNumber, -1);\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _pausedState) != null) {\n            if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _pausedState) == !!dropWhilePaused) {\n                return;\n            }\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(false, \"cannot change pause type; resume first\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"pause\"\n            });\n        }\n        this._forEachSubscriber((s)=>s.pause(dropWhilePaused));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _pausedState, !!dropWhilePaused);\n        for (const timer of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _timers).values()){\n            // Clear the timer\n            if (timer.timer) {\n                clearTimeout(timer.timer);\n            }\n            // Remaining time needed for when we become unpaused\n            timer.time = getTime() - timer.time;\n        }\n    }\n    /**\n     *  Resume the provider.\n     */ resume() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _pausedState) == null) {\n            return;\n        }\n        this._forEachSubscriber((s)=>s.resume());\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _pausedState, null);\n        for (const timer of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _timers).values()){\n            // Remaining time when we were paused\n            let timeout = timer.time;\n            if (timeout < 0) {\n                timeout = 0;\n            }\n            // Start time (in cause paused, so we con compute remaininf time)\n            timer.time = getTime();\n            // Start the timer\n            setTimeout(timer.func, timeout);\n        }\n    }\n    /**\n     *  Create a new **AbstractProvider** connected to %%network%%, or\n     *  use the various network detection capabilities to discover the\n     *  [[Network]] if necessary.\n     */ constructor(_network, options){\n        // Shares multiple identical requests made during the same 250ms\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _perform);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _call);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _checkNetwork);\n        // Account\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _getAccountValue);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _getBlock);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _hasSub);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _getSub);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_21__._)(this, _subs, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_21__._)(this, _plugins, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_21__._)(this, _pausedState, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_21__._)(this, _destroyed, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_21__._)(this, _networkPromise, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_21__._)(this, _anyNetwork, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_21__._)(this, _performCache, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_21__._)(this, _lastBlockNumber, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_21__._)(this, _nextTimer, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_21__._)(this, _timers, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_21__._)(this, _disableCcipRead, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_21__._)(this, _options, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _options, Object.assign({}, defaultOptions, options || {}));\n        if (_network === \"any\") {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _anyNetwork, true);\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _networkPromise, null);\n        } else if (_network) {\n            const network = _network_js__WEBPACK_IMPORTED_MODULE_22__.Network.from(_network);\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _anyNetwork, false);\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _networkPromise, Promise.resolve(network));\n            setTimeout(()=>{\n                this.emit(\"network\", network, null);\n            }, 0);\n        } else {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _anyNetwork, false);\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _networkPromise, null);\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _lastBlockNumber, -1);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _performCache, new Map());\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _subs, new Map());\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _plugins, new Map());\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _pausedState, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _destroyed, false);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _nextTimer, 1);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _timers, new Map());\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _disableCcipRead, false);\n    }\n}\nasync function perform(req) {\n    const timeout = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _options).cacheTimeout;\n    // Caching disabled\n    if (timeout < 0) {\n        return await this._perform(req);\n    }\n    // Create a tag\n    const tag = getTag(req.method, req);\n    let perform = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _performCache).get(tag);\n    if (!perform) {\n        perform = this._perform(req);\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _performCache).set(tag, perform);\n        setTimeout(()=>{\n            if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _performCache).get(tag) === perform) {\n                (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _performCache).delete(tag);\n            }\n        }, timeout);\n    }\n    return await perform;\n}\nasync function call(tx, blockTag, attempt) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(attempt < MAX_CCIP_REDIRECTS, \"CCIP read exceeded maximum redirections\", \"OFFCHAIN_FAULT\", {\n        reason: \"TOO_MANY_REDIRECTS\",\n        transaction: Object.assign({}, tx, {\n            blockTag,\n            enableCcipRead: true\n        })\n    });\n    // This came in as a PerformActionTransaction, so to/from are safe; we can cast\n    const transaction = (0,_provider_js__WEBPACK_IMPORTED_MODULE_7__.copyRequest)(tx);\n    try {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(await this._perform({\n            method: \"call\",\n            transaction,\n            blockTag\n        }));\n    } catch (error) {\n        // CCIP Read OffchainLookup\n        if (!this.disableCcipRead && (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.isCallException)(error) && error.data && attempt >= 0 && blockTag === \"latest\" && transaction.to != null && (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(error.data, 0, 4) === \"0x556f1830\") {\n            const data = error.data;\n            const txSender = await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveAddress)(transaction.to, this);\n            // Parse the CCIP Read Arguments\n            let ccipArgs;\n            try {\n                ccipArgs = parseOffchainLookup((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(error.data, 4));\n            } catch (error) {\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(false, error.message, \"OFFCHAIN_FAULT\", {\n                    reason: \"BAD_DATA\",\n                    transaction,\n                    info: {\n                        data\n                    }\n                });\n            }\n            // Check the sender of the OffchainLookup matches the transaction\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), \"CCIP Read sender mismatch\", \"CALL_EXCEPTION\", {\n                action: \"call\",\n                data,\n                reason: \"OffchainLookup\",\n                transaction: transaction,\n                invocation: null,\n                revert: {\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    name: \"OffchainLookup\",\n                    args: ccipArgs.errorArgs\n                }\n            });\n            const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(ccipResult != null, \"CCIP Read failed to fetch data\", \"OFFCHAIN_FAULT\", {\n                reason: \"FETCH_FAILED\",\n                transaction,\n                info: {\n                    data: error.data,\n                    errorArgs: ccipArgs.errorArgs\n                }\n            });\n            const tx = {\n                to: txSender,\n                data: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.concat)([\n                    ccipArgs.selector,\n                    encodeBytes([\n                        ccipResult,\n                        ccipArgs.extraData\n                    ])\n                ])\n            };\n            this.emit(\"debug\", {\n                action: \"sendCcipReadCall\",\n                transaction: tx\n            });\n            try {\n                const result = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _call, call).call(this, tx, blockTag, attempt + 1);\n                this.emit(\"debug\", {\n                    action: \"receiveCcipReadCallResult\",\n                    transaction: Object.assign({}, tx),\n                    result\n                });\n                return result;\n            } catch (error) {\n                this.emit(\"debug\", {\n                    action: \"receiveCcipReadCallError\",\n                    transaction: Object.assign({}, tx),\n                    error\n                });\n                throw error;\n            }\n        }\n        throw error;\n    }\n}\nasync function checkNetwork(promise) {\n    const { value } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\n        network: this.getNetwork(),\n        value: promise\n    });\n    return value;\n}\nasync function getAccountValue(request, _address, _blockTag) {\n    let address = this._getAddress(_address);\n    let blockTag = this._getBlockTag(_blockTag);\n    if (typeof address !== \"string\" || typeof blockTag !== \"string\") {\n        [address, blockTag] = await Promise.all([\n            address,\n            blockTag\n        ]);\n    }\n    return await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _checkNetwork, checkNetwork).call(this, (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _perform, perform).call(this, Object.assign(request, {\n        address,\n        blockTag\n    })));\n}\nasync function getBlock(block, includeTransactions) {\n    // @TODO: Add CustomBlockPlugin check\n    if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(block, 32)) {\n        return await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _perform, perform).call(this, {\n            method: \"getBlock\",\n            blockHash: block,\n            includeTransactions\n        });\n    }\n    let blockTag = this._getBlockTag(block);\n    if (typeof blockTag !== \"string\") {\n        blockTag = await blockTag;\n    }\n    return await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _perform, perform).call(this, {\n        method: \"getBlock\",\n        blockTag,\n        includeTransactions\n    });\n}\nasync function hasSub(event, emitArgs) {\n    let sub = await getSubscription(event, this);\n    // This is a log that is removing an existing log; we actually want\n    // to emit an orphan event for the removed log\n    if (sub.type === \"event\" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {\n        sub = await getSubscription({\n            orphan: \"drop-log\",\n            log: emitArgs[0]\n        }, this);\n    }\n    return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _subs).get(sub.tag) || null;\n}\nasync function getSub(event) {\n    const subscription = await getSubscription(event, this);\n    // Prevent tampering with our tag in any subclass' _getSubscriber\n    const tag = subscription.tag;\n    let sub = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _subs).get(tag);\n    if (!sub) {\n        const subscriber = this._getSubscriber(subscription);\n        const addressableMap = new WeakMap();\n        const nameMap = new Map();\n        sub = {\n            subscriber,\n            tag,\n            addressableMap,\n            nameMap,\n            started: false,\n            listeners: []\n        };\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _subs).set(tag, sub);\n    }\n    return sub;\n}\nfunction _parseString(result, start) {\n    try {\n        const bytes = _parseBytes(result, start);\n        if (bytes) {\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_23__.toUtf8String)(bytes);\n        }\n    } catch (error) {}\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    try {\n        const offset = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getNumber)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(result, start, start + 32));\n        const length = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getNumber)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(result, offset, offset + 32));\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(result, offset + 32, offset + 32 + length);\n    } catch (error) {}\n    return null;\n}\nfunction numPad(value) {\n    const result = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.toBeArray)(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if (value.length % 32 === 0) {\n        return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\nconst empty = new Uint8Array([]);\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for(let i = 0; i < datas.length; i++){\n        result.push(empty);\n        byteCount += 32;\n    }\n    for(let i = 0; i < datas.length; i++){\n        const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.concat)(result);\n}\nconst zeros = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nfunction parseOffchainLookup(data) {\n    const result = {\n        sender: \"\",\n        urls: [],\n        calldata: \"\",\n        selector: \"\",\n        extraData: \"\",\n        errorArgs: []\n    };\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataLength)(data) >= 5 * 32, \"insufficient OffchainLookup data\", \"OFFCHAIN_FAULT\", {\n        reason: \"insufficient OffchainLookup data\"\n    });\n    const sender = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(data, 0, 32);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(sender, 0, 12) === (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(zeros, 0, 12), \"corrupt OffchainLookup sender\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup sender\"\n    });\n    result.sender = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(sender, 12);\n    // Read the URLs from the response\n    try {\n        const urls = [];\n        const urlsOffset = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getNumber)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(data, 32, 64));\n        const urlsLength = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getNumber)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(data, urlsOffset, urlsOffset + 32));\n        const urlsData = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(data, urlsOffset + 32);\n        for(let u = 0; u < urlsLength; u++){\n            const url = _parseString(urlsData, u * 32);\n            if (url == null) {\n                throw new Error(\"abort\");\n            }\n            urls.push(url);\n        }\n        result.urls = urls;\n    } catch (error) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(false, \"corrupt OffchainLookup urls\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup urls\"\n        });\n    }\n    // Get the CCIP calldata to forward\n    try {\n        const calldata = _parseBytes(data, 64);\n        if (calldata == null) {\n            throw new Error(\"abort\");\n        }\n        result.calldata = calldata;\n    } catch (error) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(false, \"corrupt OffchainLookup calldata\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup calldata\"\n        });\n    }\n    // Get the callbackSelector (bytes4)\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(data, 100, 128) === (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(zeros, 0, 28), \"corrupt OffchainLookup callbaackSelector\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup callbaackSelector\"\n    });\n    result.selector = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(data, 96, 100);\n    // Get the extra data to send back to the contract as context\n    try {\n        const extraData = _parseBytes(data, 128);\n        if (extraData == null) {\n            throw new Error(\"abort\");\n        }\n        result.extraData = extraData;\n    } catch (error) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(false, \"corrupt OffchainLookup extraData\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup extraData\"\n        });\n    }\n    result.errorArgs = \"sender,urls,calldata,selector,extraData\".split(/,/).map((k)=>result[k]);\n    return result;\n} //# sourceMappingURL=abstract-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/abstract-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/abstract-signer.js":
/*!*******************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/abstract-signer.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractSigner: function() { return /* binding */ AbstractSigner; },\n/* harmony export */   VoidSigner: function() { return /* binding */ VoidSigner; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/checks.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/transaction.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _provider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider.js\");\n/**\n *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes\n *  are sufficent for most developers, but this is provided to\n *  fascilitate more complex Signers.\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */ \n\n\n\n\n\nfunction checkProvider(signer, operation) {\n    if (signer.provider) {\n        return signer.provider;\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", {\n        operation\n    });\n}\nasync function populate(signer, tx) {\n    let pop = (0,_provider_js__WEBPACK_IMPORTED_MODULE_1__.copyRequest)(tx);\n    if (pop.to != null) {\n        pop.to = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveAddress)(pop.to, signer);\n    }\n    if (pop.from != null) {\n        const from = pop.from;\n        pop.from = Promise.all([\n            signer.getAddress(),\n            (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveAddress)(from, signer)\n        ]).then((param)=>{\n            let [address, from] = param;\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(address.toLowerCase() === from.toLowerCase(), \"transaction from mismatch\", \"tx.from\", from);\n            return address;\n        });\n    } else {\n        pop.from = signer.getAddress();\n    }\n    return await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.resolveProperties)(pop);\n}\n/**\n *  An **AbstractSigner** includes most of teh functionality required\n *  to get a [[Signer]] working as expected, but requires a few\n *  Signer-specific methods be overridden.\n *\n */ class AbstractSigner {\n    async getNonce(blockTag) {\n        return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\n    }\n    async populateCall(tx) {\n        const pop = await populate(this, tx);\n        return pop;\n    }\n    async populateTransaction(tx) {\n        const provider = checkProvider(this, \"populateTransaction\");\n        const pop = await populate(this, tx);\n        if (pop.nonce == null) {\n            pop.nonce = await this.getNonce(\"pending\");\n        }\n        if (pop.gasLimit == null) {\n            pop.gasLimit = await this.estimateGas(pop);\n        }\n        // Populate the chain ID\n        const network = await this.provider.getNetwork();\n        if (pop.chainId != null) {\n            const chainId = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.getBigInt)(pop.chainId);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n        } else {\n            pop.chainId = network.chainId;\n        }\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\n        const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;\n        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n        } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n        }\n        if ((pop.type === 2 || pop.type == null) && pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null) {\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\n            pop.type = 2;\n        } else if (pop.type === 0 || pop.type === 1) {\n            // Explicit Legacy or EIP-2930 transaction\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getGasPrice\"\n            });\n            // Populate missing gasPrice\n            if (pop.gasPrice == null) {\n                pop.gasPrice = feeData.gasPrice;\n            }\n        } else {\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n            if (pop.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n                    // Upgrade transaction from null to eip-1559\n                    pop.type = 2;\n                    if (pop.gasPrice != null) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        const gasPrice = pop.gasPrice;\n                        delete pop.gasPrice;\n                        pop.maxFeePerGas = gasPrice;\n                        pop.maxPriorityFeePerGas = gasPrice;\n                    } else {\n                        // Populate missing fee data\n                        if (pop.maxFeePerGas == null) {\n                            pop.maxFeePerGas = feeData.maxFeePerGas;\n                        }\n                        if (pop.maxPriorityFeePerGas == null) {\n                            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                        }\n                    }\n                } else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n                    // ...but they are trying to use EIP-1559 properties\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"populateTransaction\"\n                    });\n                    // Populate missing fee data\n                    if (pop.gasPrice == null) {\n                        pop.gasPrice = feeData.gasPrice;\n                    }\n                    // Explicitly set untyped transaction to legacy\n                    // @TODO: Maybe this shold allow type 1?\n                    pop.type = 0;\n                } else {\n                    // getFeeData has failed us.\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"signer.getFeeData\"\n                    });\n                }\n            } else if (pop.type === 2) {\n                // Explicitly using EIP-1559\n                // Populate missing fee data\n                if (pop.maxFeePerGas == null) {\n                    pop.maxFeePerGas = feeData.maxFeePerGas;\n                }\n                if (pop.maxPriorityFeePerGas == null) {\n                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                }\n            }\n        }\n        //@TOOD: Don't await all over the place; save them up for\n        // the end for better batching\n        return await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.resolveProperties)(pop);\n    }\n    async estimateGas(tx) {\n        return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\n    }\n    async call(tx) {\n        return checkProvider(this, \"call\").call(await this.populateCall(tx));\n    }\n    async resolveName(name) {\n        const provider = checkProvider(this, \"resolveName\");\n        return await provider.resolveName(name);\n    }\n    async sendTransaction(tx) {\n        const provider = checkProvider(this, \"sendTransaction\");\n        const pop = await this.populateTransaction(tx);\n        delete pop.from;\n        const txObj = _transaction_index_js__WEBPACK_IMPORTED_MODULE_5__.Transaction.from(pop);\n        return await provider.broadcastTransaction(await this.signTransaction(txObj));\n    }\n    /**\n     *  Creates a new Signer connected to %%provider%%.\n     */ constructor(provider){\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.defineProperties)(this, {\n            provider: provider || null\n        });\n    }\n}\nvar _throwUnsupported = /*#__PURE__*/ new WeakSet();\n/**\n *  A **VoidSigner** is a class deisgned to allow an address to be used\n *  in any API which accepts a Signer, but for which there are no\n *  credentials available to perform any actual signing.\n *\n *  This for example allow impersonating an account for the purpose of\n *  static calls or estimating gas, but does not allow sending transactions.\n */ class VoidSigner extends AbstractSigner {\n    async getAddress() {\n        return this.address;\n    }\n    connect(provider) {\n        return new VoidSigner(this.address, provider);\n    }\n    async signTransaction(tx) {\n        (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_6__._)(this, _throwUnsupported, throwUnsupported).call(this, \"transactions\", \"signTransaction\");\n    }\n    async signMessage(message) {\n        (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_6__._)(this, _throwUnsupported, throwUnsupported).call(this, \"messages\", \"signMessage\");\n    }\n    async signTypedData(domain, types, value) {\n        (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_6__._)(this, _throwUnsupported, throwUnsupported).call(this, \"typed-data\", \"signTypedData\");\n    }\n    /**\n     *  Creates a new **VoidSigner** with %%address%% attached to\n     *  %%provider%%.\n     */ constructor(address, provider){\n        super(provider);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_7__._)(this, _throwUnsupported);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.defineProperties)(this, {\n            address\n        });\n    }\n} //# sourceMappingURL=abstract-signer.js.map\nfunction throwUnsupported(suffix, operation) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"VoidSigner cannot sign \".concat(suffix), \"UNSUPPORTED_OPERATION\", {\n        operation\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/abstract-signer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/community.js":
/*!*************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/community.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   showThrottleMessage: function() { return /* binding */ showThrottleMessage; }\n/* harmony export */ });\n/**\n *  There are many awesome community services that provide Ethereum\n *  nodes both for developers just starting out and for large-scale\n *  communities.\n *\n *  @_section: api/providers/thirdparty: Community Providers  [thirdparty]\n */ // Show the throttle message only once per service\nconst shown = new Set();\n/**\n *  Displays a warning in tht console when the community resource is\n *  being used too heavily by the app, recommending the developer\n *  acquire their own credentials instead of using the community\n *  credentials.\n *\n *  The notification will only occur once per service.\n */ function showThrottleMessage(service) {\n    if (shown.has(service)) {\n        return;\n    }\n    shown.add(service);\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded for \".concat(service, \" (this message will not be repeated)\"));\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https://docs.ethers.org/api-keys/\");\n    console.log(\"==========================\");\n} //# sourceMappingURL=community.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL2NvbW11bml0eS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztDQU1DLEdBQ0Qsa0RBQWtEO0FBQ2xELE1BQU1BLFFBQVEsSUFBSUM7QUFDbEI7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNDLG9CQUFvQkMsT0FBTztJQUN2QyxJQUFJSCxNQUFNSSxHQUFHLENBQUNELFVBQVU7UUFDcEI7SUFDSjtJQUNBSCxNQUFNSyxHQUFHLENBQUNGO0lBQ1ZHLFFBQVFDLEdBQUcsQ0FBQztJQUNaRCxRQUFRQyxHQUFHLENBQUMsNkJBQXFDLE9BQVJKLFNBQVE7SUFDakRHLFFBQVFDLEdBQUcsQ0FBQztJQUNaRCxRQUFRQyxHQUFHLENBQUM7SUFDWkQsUUFBUUMsR0FBRyxDQUFDO0lBQ1pELFFBQVFDLEdBQUcsQ0FBQztJQUNaRCxRQUFRQyxHQUFHLENBQUM7SUFDWkQsUUFBUUMsR0FBRyxDQUFDO0lBQ1pELFFBQVFDLEdBQUcsQ0FBQztJQUNaRCxRQUFRQyxHQUFHLENBQUM7SUFDWkQsUUFBUUMsR0FBRyxDQUFDO0lBQ1pELFFBQVFDLEdBQUcsQ0FBQztBQUNoQixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3Byb3ZpZGVycy9jb21tdW5pdHkuanM/YjM3YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBUaGVyZSBhcmUgbWFueSBhd2Vzb21lIGNvbW11bml0eSBzZXJ2aWNlcyB0aGF0IHByb3ZpZGUgRXRoZXJldW1cbiAqICBub2RlcyBib3RoIGZvciBkZXZlbG9wZXJzIGp1c3Qgc3RhcnRpbmcgb3V0IGFuZCBmb3IgbGFyZ2Utc2NhbGVcbiAqICBjb21tdW5pdGllcy5cbiAqXG4gKiAgQF9zZWN0aW9uOiBhcGkvcHJvdmlkZXJzL3RoaXJkcGFydHk6IENvbW11bml0eSBQcm92aWRlcnMgIFt0aGlyZHBhcnR5XVxuICovXG4vLyBTaG93IHRoZSB0aHJvdHRsZSBtZXNzYWdlIG9ubHkgb25jZSBwZXIgc2VydmljZVxuY29uc3Qgc2hvd24gPSBuZXcgU2V0KCk7XG4vKipcbiAqICBEaXNwbGF5cyBhIHdhcm5pbmcgaW4gdGh0IGNvbnNvbGUgd2hlbiB0aGUgY29tbXVuaXR5IHJlc291cmNlIGlzXG4gKiAgYmVpbmcgdXNlZCB0b28gaGVhdmlseSBieSB0aGUgYXBwLCByZWNvbW1lbmRpbmcgdGhlIGRldmVsb3BlclxuICogIGFjcXVpcmUgdGhlaXIgb3duIGNyZWRlbnRpYWxzIGluc3RlYWQgb2YgdXNpbmcgdGhlIGNvbW11bml0eVxuICogIGNyZWRlbnRpYWxzLlxuICpcbiAqICBUaGUgbm90aWZpY2F0aW9uIHdpbGwgb25seSBvY2N1ciBvbmNlIHBlciBzZXJ2aWNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hvd1Rocm90dGxlTWVzc2FnZShzZXJ2aWNlKSB7XG4gICAgaWYgKHNob3duLmhhcyhzZXJ2aWNlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHNob3duLmFkZChzZXJ2aWNlKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PSBOT1RJQ0UgPT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKGBSZXF1ZXN0LVJhdGUgRXhjZWVkZWQgZm9yICR7c2VydmljZX0gKHRoaXMgbWVzc2FnZSB3aWxsIG5vdCBiZSByZXBlYXRlZClgKTtcbiAgICBjb25zb2xlLmxvZyhcIlwiKTtcbiAgICBjb25zb2xlLmxvZyhcIlRoZSBkZWZhdWx0IEFQSSBrZXlzIGZvciBlYWNoIHNlcnZpY2UgYXJlIHByb3ZpZGVkIGFzIGEgaGlnaGx5LXRocm90dGxlZCxcIik7XG4gICAgY29uc29sZS5sb2coXCJjb21tdW5pdHkgcmVzb3VyY2UgZm9yIGxvdy10cmFmZmljIHByb2plY3RzIGFuZCBlYXJseSBwcm90b3R5cGluZy5cIik7XG4gICAgY29uc29sZS5sb2coXCJcIik7XG4gICAgY29uc29sZS5sb2coXCJXaGlsZSB5b3VyIGFwcGxpY2F0aW9uIHdpbGwgY29udGludWUgdG8gZnVuY3Rpb24sIHdlIGhpZ2hseSByZWNvbW1lbmRlZFwiKTtcbiAgICBjb25zb2xlLmxvZyhcInNpZ25pbmcgdXAgZm9yIHlvdXIgb3duIEFQSSBrZXlzIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UsIGluY3JlYXNlIHlvdXJcIik7XG4gICAgY29uc29sZS5sb2coXCJyZXF1ZXN0IHJhdGUvbGltaXQgYW5kIGVuYWJsZSBvdGhlciBwZXJrcywgc3VjaCBhcyBtZXRyaWNzIGFuZCBhZHZhbmNlZCBBUElzLlwiKTtcbiAgICBjb25zb2xlLmxvZyhcIlwiKTtcbiAgICBjb25zb2xlLmxvZyhcIkZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi9cXC9kb2NzLmV0aGVycy5vcmcvYXBpLWtleXMvXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiPT09PT09PT09PT09PT09PT09PT09PT09PT1cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tdW5pdHkuanMubWFwIl0sIm5hbWVzIjpbInNob3duIiwiU2V0Iiwic2hvd1Rocm90dGxlTWVzc2FnZSIsInNlcnZpY2UiLCJoYXMiLCJhZGQiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/community.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/default-provider.js":
/*!********************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/default-provider.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultProvider: function() { return /* binding */ getDefaultProvider; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _provider_ankr_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./provider-ankr.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-ankr.js\");\n/* harmony import */ var _provider_alchemy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./provider-alchemy.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-alchemy.js\");\n/* harmony import */ var _provider_cloudflare_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./provider-cloudflare.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-cloudflare.js\");\n/* harmony import */ var _provider_etherscan_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./provider-etherscan.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-etherscan.js\");\n/* harmony import */ var _provider_infura_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./provider-infura.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-infura.js\");\n/* harmony import */ var _provider_quicknode_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./provider-quicknode.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-quicknode.js\");\n/* harmony import */ var _provider_fallback_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./provider-fallback.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-fallback.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./network.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_websocket_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-websocket.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-websocket.js\");\n\n\n\n\n\n\n//import { PocketProvider } from \"./provider-pocket.js\";\n\n\n\n\n\nfunction isWebSocketLike(value) {\n    return value && typeof value.send === \"function\" && typeof value.close === \"function\";\n}\nconst Testnets = \"goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt\".split(\" \");\n/**\n *  Returns a default provider for %%network%%.\n *\n *  If %%network%% is a [[WebSocketLike]] or string that begins with\n *  ``\"ws:\"`` or ``\"wss:\"``, a [[WebSocketProvider]] is returned backed\n *  by that WebSocket or URL.\n *\n *  If %%network%% is a string that begins with ``\"HTTP:\"`` or ``\"HTTPS:\"``,\n *  a [[JsonRpcProvider]] is returned connected to that URL.\n *\n *  Otherwise, a default provider is created backed by well-known public\n *  Web3 backends (such as [[link-infura]]) using community-provided API\n *  keys.\n *\n *  The %%options%% allows specifying custom API keys per backend (setting\n *  an API key to ``\"-\"`` will omit that provider) and ``options.exclusive``\n *  can be set to either a backend name or and array of backend names, which\n *  will whitelist **only** those backends.\n *\n *  Current backend strings supported are:\n *  - ``\"alchemy\"``\n *  - ``\"ankr\"``\n *  - ``\"cloudflare\"``\n *  - ``\"etherscan\"``\n *  - ``\"infura\"``\n *  - ``\"publicPolygon\"``\n *  - ``\"quicknode\"``\n *\n *  @example:\n *    // Connect to a local Geth node\n *    provider = getDefaultProvider(\"http://localhost:8545/\");\n *\n *    // Connect to Ethereum mainnet with any current and future\n *    // third-party services available\n *    provider = getDefaultProvider(\"mainnet\");\n *\n *    // Connect to Polygon, but only allow Etherscan and\n *    // INFURA and use \"MY_API_KEY\" in calls to Etherscan.\n *    provider = getDefaultProvider(\"matic\", {\n *      etherscan: \"MY_API_KEY\",\n *      exclusive: [ \"etherscan\", \"infura\" ]\n *    });\n */ function getDefaultProvider(network, options) {\n    if (options == null) {\n        options = {};\n    }\n    const allowService = (name)=>{\n        if (options[name] === \"-\") {\n            return false;\n        }\n        if (typeof options.exclusive === \"string\") {\n            return name === options.exclusive;\n        }\n        if (Array.isArray(options.exclusive)) {\n            return options.exclusive.indexOf(name) !== -1;\n        }\n        return true;\n    };\n    if (typeof network === \"string\" && network.match(/^https?:/)) {\n        return new _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider(network);\n    }\n    if (typeof network === \"string\" && network.match(/^wss?:/) || isWebSocketLike(network)) {\n        return new _provider_websocket_js__WEBPACK_IMPORTED_MODULE_1__.WebSocketProvider(network);\n    }\n    // Get the network and name, if possible\n    let staticNetwork = null;\n    try {\n        staticNetwork = _network_js__WEBPACK_IMPORTED_MODULE_2__.Network.from(network);\n    } catch (error) {}\n    const providers = [];\n    if (allowService(\"publicPolygon\") && staticNetwork) {\n        if (staticNetwork.name === \"matic\") {\n            providers.push(new _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider(\"https://polygon-rpc.com/\", staticNetwork, {\n                staticNetwork\n            }));\n        }\n    }\n    if (allowService(\"alchemy\")) {\n        try {\n            providers.push(new _provider_alchemy_js__WEBPACK_IMPORTED_MODULE_3__.AlchemyProvider(network, options.alchemy));\n        } catch (error) {}\n    }\n    if (allowService(\"ankr\") && options.ankr != null) {\n        try {\n            providers.push(new _provider_ankr_js__WEBPACK_IMPORTED_MODULE_4__.AnkrProvider(network, options.ankr));\n        } catch (error) {}\n    }\n    if (allowService(\"cloudflare\")) {\n        try {\n            providers.push(new _provider_cloudflare_js__WEBPACK_IMPORTED_MODULE_5__.CloudflareProvider(network));\n        } catch (error) {}\n    }\n    if (allowService(\"etherscan\")) {\n        try {\n            providers.push(new _provider_etherscan_js__WEBPACK_IMPORTED_MODULE_6__.EtherscanProvider(network, options.etherscan));\n        } catch (error) {}\n    }\n    if (allowService(\"infura\")) {\n        try {\n            let projectId = options.infura;\n            let projectSecret = undefined;\n            if (typeof projectId === \"object\") {\n                projectSecret = projectId.projectSecret;\n                projectId = projectId.projectId;\n            }\n            providers.push(new _provider_infura_js__WEBPACK_IMPORTED_MODULE_7__.InfuraProvider(network, projectId, projectSecret));\n        } catch (error) {}\n    }\n    /*\n        if (options.pocket !== \"-\") {\n            try {\n                let appId = options.pocket;\n                let secretKey: undefined | string = undefined;\n                let loadBalancer: undefined | boolean = undefined;\n                if (typeof(appId) === \"object\") {\n                    loadBalancer = !!appId.loadBalancer;\n                    secretKey = appId.secretKey;\n                    appId = appId.appId;\n                }\n                providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));\n            } catch (error) { console.log(error); }\n        }\n    */ if (allowService(\"quicknode\")) {\n        try {\n            let token = options.quicknode;\n            providers.push(new _provider_quicknode_js__WEBPACK_IMPORTED_MODULE_8__.QuickNodeProvider(network, token));\n        } catch (error) {}\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.assert)(providers.length, \"unsupported default network\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getDefaultProvider\"\n    });\n    // No need for a FallbackProvider\n    if (providers.length === 1) {\n        return providers[0];\n    }\n    // We use the floor because public third-party providers can be unreliable,\n    // so a low number of providers with a large quorum will fail too often\n    let quorum = Math.floor(providers.length / 2);\n    if (quorum > 2) {\n        quorum = 2;\n    }\n    // Testnets don't need as strong a security gaurantee and speed is\n    // more useful during testing\n    if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) {\n        quorum = 1;\n    }\n    // Provided override qorum takes priority\n    if (options && options.quorum) {\n        quorum = options.quorum;\n    }\n    return new _provider_fallback_js__WEBPACK_IMPORTED_MODULE_10__.FallbackProvider(providers, undefined, {\n        quorum\n    });\n} //# sourceMappingURL=default-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/default-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/ens-resolver.js":
/*!****************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/ens-resolver.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasicMulticoinProviderPlugin: function() { return /* binding */ BasicMulticoinProviderPlugin; },\n/* harmony export */   EnsResolver: function() { return /* binding */ EnsResolver; },\n/* harmony export */   MulticoinProviderPlugin: function() { return /* binding */ MulticoinProviderPlugin; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _swc_helpers_class_static_private_method_get__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @swc/helpers/_/_class_static_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_static_private_method_get.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constants/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/constants/addresses.js\");\n/* harmony import */ var _contract_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../contract/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../hash/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/namehash.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/base58.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fetch.js\");\n/**\n *  ENS is a service which allows easy-to-remember names to map to\n *  network addresses.\n *\n *  @_section: api/providers/ens-resolver:ENS Resolver  [about-ens-rsolver]\n */ \n\n\n\n\n\n\n\n\n\n\n// @TODO: This should use the fetch-data:ipfs gateway\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported IPFS format\", \"link\", link);\n    }\n    return \"https://gateway.ipfs.io/ipfs/\".concat(link);\n}\n;\n;\n/**\n *  A provider plugin super-class for processing multicoin address types.\n */ class MulticoinProviderPlugin {\n    connect(proivder) {\n        return this;\n    }\n    /**\n     *  Returns ``true`` if %%coinType%% is supported by this plugin.\n     */ supportsCoinType(coinType) {\n        return false;\n    }\n    /**\n     *  Resovles to the encoded %%address%% for %%coinType%%.\n     */ async encodeAddress(coinType, address) {\n        throw new Error(\"unsupported coin\");\n    }\n    /**\n     *  Resovles to the decoded %%data%% for %%coinType%%.\n     */ async decodeAddress(coinType, data) {\n        throw new Error(\"unsupported coin\");\n    }\n    /**\n     *  Creates a new **MulticoinProviderPluing** for %%name%%.\n     */ constructor(name){\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n            name\n        });\n    }\n}\nconst BasicMulticoinPluginId = \"org.ethers.plugins.provider.BasicMulticoin\";\n/**\n *  A **BasicMulticoinProviderPlugin** provides service for common\n *  coin types, which do not require additional libraries to encode or\n *  decode.\n */ class BasicMulticoinProviderPlugin extends MulticoinProviderPlugin {\n    /**\n     *  Creates a new **BasicMulticoinProviderPlugin**.\n     */ constructor(){\n        super(BasicMulticoinPluginId);\n    }\n}\nconst matcherIpfs = new RegExp(\"^(ipfs)://(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https)://(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")\n];\nvar // For EIP-2544 names, the ancestor that provided the resolver\n_supports2544 = /*#__PURE__*/ new WeakMap(), _resolver = /*#__PURE__*/ new WeakMap(), _fetch = /*#__PURE__*/ new WeakSet();\n/**\n *  A connected object to a resolved ENS name resolver, which can be\n *  used to query additional details.\n */ class EnsResolver {\n    /**\n     *  Resolves to true if the resolver supports wildcard resolution.\n     */ async supportsWildcard() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _supports2544) == null) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _supports2544, (async ()=>{\n                try {\n                    return await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _resolver).supportsInterface(\"0x9061b923\");\n                } catch (error) {\n                    // Wildcard resolvers must understand supportsInterface\n                    // and return true.\n                    if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"CALL_EXCEPTION\")) {\n                        return false;\n                    }\n                    // Let future attempts try again...\n                    (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _supports2544, null);\n                    throw error;\n                }\n            })());\n        }\n        return await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _supports2544);\n    }\n    /**\n     *  Resolves to the address for %%coinType%% or null if the\n     *  provided %%coinType%% has not been configured.\n     */ async getAddress(coinType) {\n        if (coinType == null) {\n            coinType = 60;\n        }\n        if (coinType === 60) {\n            try {\n                const result = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _fetch, fetch).call(this, \"addr(bytes32)\");\n                // No address\n                if (result == null || result === _constants_index_js__WEBPACK_IMPORTED_MODULE_5__.ZeroAddress) {\n                    return null;\n                }\n                return result;\n            } catch (error) {\n                if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"CALL_EXCEPTION\")) {\n                    return null;\n                }\n                throw error;\n            }\n        }\n        // Try decoding its EVM canonical chain as an EVM chain address first\n        if (coinType >= 0 && coinType < 0x80000000) {\n            let ethCoinType = coinType + 0x80000000;\n            const data = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _fetch, fetch).call(this, \"addr(bytes32,uint)\", [\n                ethCoinType\n            ]);\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.isHexString)(data, 20)) {\n                return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_7__.getAddress)(data);\n            }\n        }\n        let coinPlugin = null;\n        for (const plugin of this.provider.plugins){\n            if (!(plugin instanceof MulticoinProviderPlugin)) {\n                continue;\n            }\n            if (plugin.supportsCoinType(coinType)) {\n                coinPlugin = plugin;\n                break;\n            }\n        }\n        if (coinPlugin == null) {\n            return null;\n        }\n        // keccak256(\"addr(bytes32,uint256\")\n        const data = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _fetch, fetch).call(this, \"addr(bytes32,uint)\", [\n            coinType\n        ]);\n        // No address\n        if (data == null || data === \"0x\") {\n            return null;\n        }\n        // Compute the address\n        const address = await coinPlugin.decodeAddress(coinType, data);\n        if (address != null) {\n            return address;\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"invalid coin data\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"getAddress(\".concat(coinType, \")\"),\n            info: {\n                coinType,\n                data\n            }\n        });\n    }\n    /**\n     *  Resolves to the EIP-634 text record for %%key%%, or ``null``\n     *  if unconfigured.\n     */ async getText(key) {\n        const data = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _fetch, fetch).call(this, \"text(bytes32,string)\", [\n            key\n        ]);\n        if (data == null || data === \"0x\") {\n            return null;\n        }\n        return data;\n    }\n    /**\n     *  Rsolves to the content-hash or ``null`` if unconfigured.\n     */ async getContentHash() {\n        // keccak256(\"contenthash()\")\n        const data = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _fetch, fetch).call(this, \"contenthash(bytes32)\");\n        // No contenthash\n        if (data == null || data === \"0x\") {\n            return null;\n        }\n        // IPFS (CID: 1, Type: 70=DAG-PB, 72=libp2p-key)\n        const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const scheme = ipfs[1] === \"e3010170\" ? \"ipfs\" : \"ipns\";\n            const length = parseInt(ipfs[4], 16);\n            if (ipfs[5].length === length * 2) {\n                return \"\".concat(scheme, \"://\").concat((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.encodeBase58)(\"0x\" + ipfs[2]));\n            }\n        }\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n        if (swarm && swarm[1].length === 64) {\n            return \"bzz://\".concat(swarm[1]);\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"invalid or unsupported content hash data\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"getContentHash()\",\n            info: {\n                data\n            }\n        });\n    }\n    /**\n     *  Resolves to the avatar url or ``null`` if the avatar is either\n     *  unconfigured or incorrectly configured (e.g. references an NFT\n     *  not owned by the address).\n     *\n     *  If diagnosing issues with configurations, the [[_getAvatar]]\n     *  method may be useful.\n     */ async getAvatar() {\n        const avatar = await this._getAvatar();\n        return avatar.url;\n    }\n    /**\n     *  When resolving an avatar, there are many steps involved, such\n     *  fetching metadata and possibly validating ownership of an\n     *  NFT.\n     *\n     *  This method can be used to examine each step and the value it\n     *  was working from.\n     */ async _getAvatar() {\n        const linkage = [\n            {\n                type: \"name\",\n                value: this.name\n            }\n        ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) {\n                linkage.push({\n                    type: \"!avatar\",\n                    value: \"\"\n                });\n                return {\n                    url: null,\n                    linkage\n                };\n            }\n            linkage.push({\n                type: \"avatar\",\n                value: avatar\n            });\n            for(let i = 0; i < matchers.length; i++){\n                const match = avatar.match(matchers[i]);\n                if (match == null) {\n                    continue;\n                }\n                const scheme = match[1].toLowerCase();\n                switch(scheme){\n                    case \"https\":\n                    case \"data\":\n                        linkage.push({\n                            type: \"url\",\n                            value: avatar\n                        });\n                        return {\n                            linkage,\n                            url: avatar\n                        };\n                    case \"ipfs\":\n                        {\n                            const url = getIpfsLink(avatar);\n                            linkage.push({\n                                type: \"ipfs\",\n                                value: avatar\n                            });\n                            linkage.push({\n                                type: \"url\",\n                                value: url\n                            });\n                            return {\n                                linkage,\n                                url\n                            };\n                        }\n                    case \"erc721\":\n                    case \"erc1155\":\n                        {\n                            // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                            const selector = scheme === \"erc721\" ? \"tokenURI(uint256)\" : \"uri(uint256)\";\n                            linkage.push({\n                                type: scheme,\n                                value: avatar\n                            });\n                            // The owner of this name\n                            const owner = await this.getAddress();\n                            if (owner == null) {\n                                linkage.push({\n                                    type: \"!owner\",\n                                    value: \"\"\n                                });\n                                return {\n                                    url: null,\n                                    linkage\n                                };\n                            }\n                            const comps = (match[2] || \"\").split(\"/\");\n                            if (comps.length !== 2) {\n                                linkage.push({\n                                    type: \"!\".concat(scheme, \"caip\"),\n                                    value: match[2] || \"\"\n                                });\n                                return {\n                                    url: null,\n                                    linkage\n                                };\n                            }\n                            const tokenId = comps[1];\n                            const contract = new _contract_index_js__WEBPACK_IMPORTED_MODULE_9__.Contract(comps[0], [\n                                // ERC-721\n                                \"function tokenURI(uint) view returns (string)\",\n                                \"function ownerOf(uint) view returns (address)\",\n                                // ERC-1155\n                                \"function uri(uint) view returns (string)\",\n                                \"function balanceOf(address, uint256) view returns (uint)\"\n                            ], this.provider);\n                            // Check that this account owns the token\n                            if (scheme === \"erc721\") {\n                                const tokenOwner = await contract.ownerOf(tokenId);\n                                if (owner !== tokenOwner) {\n                                    linkage.push({\n                                        type: \"!owner\",\n                                        value: tokenOwner\n                                    });\n                                    return {\n                                        url: null,\n                                        linkage\n                                    };\n                                }\n                                linkage.push({\n                                    type: \"owner\",\n                                    value: tokenOwner\n                                });\n                            } else if (scheme === \"erc1155\") {\n                                const balance = await contract.balanceOf(owner, tokenId);\n                                if (!balance) {\n                                    linkage.push({\n                                        type: \"!balance\",\n                                        value: \"0\"\n                                    });\n                                    return {\n                                        url: null,\n                                        linkage\n                                    };\n                                }\n                                linkage.push({\n                                    type: \"balance\",\n                                    value: balance.toString()\n                                });\n                            }\n                            // Call the token contract for the metadata URL\n                            let metadataUrl = await contract[selector](tokenId);\n                            if (metadataUrl == null || metadataUrl === \"0x\") {\n                                linkage.push({\n                                    type: \"!metadata-url\",\n                                    value: \"\"\n                                });\n                                return {\n                                    url: null,\n                                    linkage\n                                };\n                            }\n                            linkage.push({\n                                type: \"metadata-url-base\",\n                                value: metadataUrl\n                            });\n                            // ERC-1155 allows a generic {id} in the URL\n                            if (scheme === \"erc1155\") {\n                                metadataUrl = metadataUrl.replace(\"{id}\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__.toBeHex)(tokenId, 32).substring(2));\n                                linkage.push({\n                                    type: \"metadata-url-expanded\",\n                                    value: metadataUrl\n                                });\n                            }\n                            // Transform IPFS metadata links\n                            if (metadataUrl.match(/^ipfs:/i)) {\n                                metadataUrl = getIpfsLink(metadataUrl);\n                            }\n                            linkage.push({\n                                type: \"metadata-url\",\n                                value: metadataUrl\n                            });\n                            // Get the token metadata\n                            let metadata = {};\n                            const response = await new _utils_index_js__WEBPACK_IMPORTED_MODULE_11__.FetchRequest(metadataUrl).send();\n                            response.assertOk();\n                            try {\n                                metadata = response.bodyJson;\n                            } catch (error) {\n                                try {\n                                    linkage.push({\n                                        type: \"!metadata\",\n                                        value: response.bodyText\n                                    });\n                                } catch (error) {\n                                    const bytes = response.body;\n                                    if (bytes) {\n                                        linkage.push({\n                                            type: \"!metadata\",\n                                            value: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.hexlify)(bytes)\n                                        });\n                                    }\n                                    return {\n                                        url: null,\n                                        linkage\n                                    };\n                                }\n                                return {\n                                    url: null,\n                                    linkage\n                                };\n                            }\n                            if (!metadata) {\n                                linkage.push({\n                                    type: \"!metadata\",\n                                    value: \"\"\n                                });\n                                return {\n                                    url: null,\n                                    linkage\n                                };\n                            }\n                            linkage.push({\n                                type: \"metadata\",\n                                value: JSON.stringify(metadata)\n                            });\n                            // Pull the image URL out\n                            let imageUrl = metadata.image;\n                            if (typeof imageUrl !== \"string\") {\n                                linkage.push({\n                                    type: \"!imageUrl\",\n                                    value: \"\"\n                                });\n                                return {\n                                    url: null,\n                                    linkage\n                                };\n                            }\n                            if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                            } else {\n                                // Transform IPFS link to gateway\n                                const ipfs = imageUrl.match(matcherIpfs);\n                                if (ipfs == null) {\n                                    linkage.push({\n                                        type: \"!imageUrl-ipfs\",\n                                        value: imageUrl\n                                    });\n                                    return {\n                                        url: null,\n                                        linkage\n                                    };\n                                }\n                                linkage.push({\n                                    type: \"imageUrl-ipfs\",\n                                    value: imageUrl\n                                });\n                                imageUrl = getIpfsLink(imageUrl);\n                            }\n                            linkage.push({\n                                type: \"url\",\n                                value: imageUrl\n                            });\n                            return {\n                                linkage,\n                                url: imageUrl\n                            };\n                        }\n                }\n            }\n        } catch (error) {}\n        return {\n            linkage,\n            url: null\n        };\n    }\n    static async getEnsAddress(provider) {\n        const network = await provider.getNetwork();\n        const ensPlugin = network.getPlugin(\"org.ethers.plugins.network.Ens\");\n        // No ENS...\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(ensPlugin, \"network does not support ENS\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"getEnsAddress\",\n            info: {\n                network\n            }\n        });\n        return ensPlugin.address;\n    }\n    /**\n     *  Resolve to the ENS resolver for %%name%% using %%provider%% or\n     *  ``null`` if unconfigured.\n     */ static async fromName(provider, name) {\n        let currentName = name;\n        while(true){\n            if (currentName === \"\" || currentName === \".\") {\n                return null;\n            }\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") {\n                return null;\n            }\n            // Check the current node for a resolver\n            const addr = await (0,_swc_helpers_class_static_private_method_get__WEBPACK_IMPORTED_MODULE_12__._)(EnsResolver, EnsResolver, getResolver).call(EnsResolver, provider, currentName);\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new EnsResolver(provider, addr, name);\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !await resolver.supportsWildcard()) {\n                    return null;\n                }\n                return resolver;\n            }\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n    }\n    constructor(provider, address, name){\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_13__._)(this, _fetch);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _supports2544, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _resolver, {\n            writable: true,\n            value: void 0\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n            provider,\n            address,\n            name\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _supports2544, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _resolver, new _contract_index_js__WEBPACK_IMPORTED_MODULE_9__.Contract(address, [\n            \"function supportsInterface(bytes4) view returns (bool)\",\n            \"function resolve(bytes, bytes) view returns (bytes)\",\n            \"function addr(bytes32) view returns (address)\",\n            \"function addr(bytes32, uint) view returns (bytes)\",\n            \"function text(bytes32, string) view returns (string)\",\n            \"function contenthash(bytes32) view returns (bytes)\"\n        ], provider));\n    }\n} //# sourceMappingURL=ens-resolver.js.map\nasync function fetch(funcName, params) {\n    params = (params || []).slice();\n    const iface = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _resolver).interface;\n    // The first parameters is always the nodehash\n    params.unshift((0,_hash_index_js__WEBPACK_IMPORTED_MODULE_15__.namehash)(this.name));\n    let fragment = null;\n    if (await this.supportsWildcard()) {\n        fragment = iface.getFunction(funcName);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(fragment, \"missing fragment\", \"UNKNOWN_ERROR\", {\n            info: {\n                funcName\n            }\n        });\n        params = [\n            (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_15__.dnsEncode)(this.name, 255),\n            iface.encodeFunctionData(fragment, params)\n        ];\n        funcName = \"resolve(bytes,bytes)\";\n    }\n    params.push({\n        enableCcipRead: true\n    });\n    try {\n        const result = await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _resolver)[funcName](...params);\n        if (fragment) {\n            return iface.decodeFunctionResult(fragment, result)[0];\n        }\n        return result;\n    } catch (error) {\n        if (!(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"CALL_EXCEPTION\")) {\n            throw error;\n        }\n    }\n    return null;\n}\nasync function getResolver(provider, name) {\n    const ensAddr = await EnsResolver.getEnsAddress(provider);\n    try {\n        const contract = new _contract_index_js__WEBPACK_IMPORTED_MODULE_9__.Contract(ensAddr, [\n            \"function resolver(bytes32) view returns (address)\"\n        ], provider);\n        const addr = await contract.resolver((0,_hash_index_js__WEBPACK_IMPORTED_MODULE_15__.namehash)(name), {\n            enableCcipRead: true\n        });\n        if (addr === _constants_index_js__WEBPACK_IMPORTED_MODULE_5__.ZeroAddress) {\n            return null;\n        }\n        return addr;\n    } catch (error) {\n        // ENS registry cannot throw errors on resolver(bytes32),\n        // so probably a link error\n        throw error;\n    }\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/ens-resolver.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/format.js":
/*!**********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/format.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allowNull: function() { return /* binding */ allowNull; },\n/* harmony export */   arrayOf: function() { return /* binding */ arrayOf; },\n/* harmony export */   formatBlock: function() { return /* binding */ formatBlock; },\n/* harmony export */   formatBoolean: function() { return /* binding */ formatBoolean; },\n/* harmony export */   formatData: function() { return /* binding */ formatData; },\n/* harmony export */   formatHash: function() { return /* binding */ formatHash; },\n/* harmony export */   formatLog: function() { return /* binding */ formatLog; },\n/* harmony export */   formatReceiptLog: function() { return /* binding */ formatReceiptLog; },\n/* harmony export */   formatTransactionReceipt: function() { return /* binding */ formatTransactionReceipt; },\n/* harmony export */   formatTransactionResponse: function() { return /* binding */ formatTransactionResponse; },\n/* harmony export */   formatUint256: function() { return /* binding */ formatUint256; },\n/* harmony export */   object: function() { return /* binding */ object; }\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/contract-address.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signature.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/accesslist.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/**\n *  @_ignore\n */ \n\n\n\nconst BN_0 = BigInt(0);\nfunction allowNull(format, nullValue) {\n    return function(value) {\n        if (value == null) {\n            return nullValue;\n        }\n        return format(value);\n    };\n}\nfunction arrayOf(format, allowNull) {\n    return (array)=>{\n        if (allowNull && array == null) {\n            return null;\n        }\n        if (!Array.isArray(array)) {\n            throw new Error(\"not an array\");\n        }\n        return array.map((i)=>format(i));\n    };\n}\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nfunction object(format, altNames) {\n    return (value)=>{\n        const result = {};\n        for(const key in format){\n            let srcKey = key;\n            if (altNames && key in altNames && !(srcKey in value)) {\n                for (const altKey of altNames[key]){\n                    if (altKey in value) {\n                        srcKey = altKey;\n                        break;\n                    }\n                }\n            }\n            try {\n                const nv = format[key](value[srcKey]);\n                if (nv !== undefined) {\n                    result[key] = nv;\n                }\n            } catch (error) {\n                const message = error instanceof Error ? error.message : \"not-an-error\";\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"invalid value for value.\".concat(key, \" (\").concat(message, \")\"), \"BAD_DATA\", {\n                    value\n                });\n            }\n        }\n        return result;\n    };\n}\nfunction formatBoolean(value) {\n    switch(value){\n        case true:\n        case \"true\":\n            return true;\n        case false:\n        case \"false\":\n            return false;\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid boolean; \".concat(JSON.stringify(value)), \"value\", value);\n}\nfunction formatData(value) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(value, true), \"invalid data\", \"value\", value);\n    return value;\n}\nfunction formatHash(value) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(value, 32), \"invalid hash\", \"value\", value);\n    return value;\n}\nfunction formatUint256(value) {\n    if (!(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(value)) {\n        throw new Error(\"invalid uint256\");\n    }\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.zeroPadValue)(value, 32);\n}\nconst _formatLog = object({\n    address: _address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress,\n    blockHash: formatHash,\n    blockNumber: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber,\n    data: formatData,\n    index: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber,\n    removed: allowNull(formatBoolean, false),\n    topics: arrayOf(formatHash),\n    transactionHash: formatHash,\n    transactionIndex: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber\n}, {\n    index: [\n        \"logIndex\"\n    ]\n});\nfunction formatLog(value) {\n    return _formatLog(value);\n}\nconst _formatBlock = object({\n    hash: allowNull(formatHash),\n    parentHash: formatHash,\n    parentBeaconBlockRoot: allowNull(formatHash, null),\n    number: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber,\n    timestamp: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber,\n    nonce: allowNull(formatData),\n    difficulty: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt,\n    gasLimit: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt,\n    gasUsed: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt,\n    stateRoot: allowNull(formatHash, null),\n    receiptsRoot: allowNull(formatHash, null),\n    blobGasUsed: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt, null),\n    excessBlobGas: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt, null),\n    miner: allowNull(_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress),\n    extraData: formatData,\n    baseFeePerGas: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt)\n});\nfunction formatBlock(value) {\n    const result = _formatBlock(value);\n    result.transactions = value.transactions.map((tx)=>{\n        if (typeof tx === \"string\") {\n            return tx;\n        }\n        return formatTransactionResponse(tx);\n    });\n    return result;\n}\nconst _formatReceiptLog = object({\n    transactionIndex: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber,\n    blockNumber: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber,\n    transactionHash: formatHash,\n    address: _address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress,\n    topics: arrayOf(formatHash),\n    data: formatData,\n    index: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber,\n    blockHash: formatHash\n}, {\n    index: [\n        \"logIndex\"\n    ]\n});\nfunction formatReceiptLog(value) {\n    return _formatReceiptLog(value);\n}\nconst _formatTransactionReceipt = object({\n    to: allowNull(_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress, null),\n    from: allowNull(_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress, null),\n    contractAddress: allowNull(_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress, null),\n    // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n    index: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber,\n    root: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify),\n    gasUsed: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt,\n    blobGasUsed: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt, null),\n    logsBloom: allowNull(formatData),\n    blockHash: formatHash,\n    hash: formatHash,\n    logs: arrayOf(formatReceiptLog),\n    blockNumber: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber,\n    //confirmations: allowNull(getNumber, null),\n    cumulativeGasUsed: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt,\n    effectiveGasPrice: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt),\n    blobGasPrice: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt, null),\n    status: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber),\n    type: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber, 0)\n}, {\n    effectiveGasPrice: [\n        \"gasPrice\"\n    ],\n    hash: [\n        \"transactionHash\"\n    ],\n    index: [\n        \"transactionIndex\"\n    ]\n});\nfunction formatTransactionReceipt(value) {\n    return _formatTransactionReceipt(value);\n}\nfunction formatTransactionResponse(value) {\n    // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n    if (value.to && (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt)(value.to) === BN_0) {\n        value.to = \"0x0000000000000000000000000000000000000000\";\n    }\n    const result = object({\n        hash: formatHash,\n        // Some nodes do not return this, usually test nodes (like Ganache)\n        index: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber, undefined),\n        type: (value)=>{\n            if (value === \"0x\" || value == null) {\n                return 0;\n            }\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber)(value);\n        },\n        accessList: allowNull(_transaction_index_js__WEBPACK_IMPORTED_MODULE_4__.accessListify, null),\n        blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),\n        blockHash: allowNull(formatHash, null),\n        blockNumber: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber, null),\n        transactionIndex: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber, null),\n        from: _address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress,\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n        gasPrice: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt),\n        maxPriorityFeePerGas: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt),\n        maxFeePerGas: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt),\n        maxFeePerBlobGas: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt, null),\n        gasLimit: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt,\n        to: allowNull(_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress, null),\n        value: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt,\n        nonce: _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber,\n        data: formatData,\n        creates: allowNull(_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress, null),\n        chainId: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt, null)\n    }, {\n        data: [\n            \"input\"\n        ],\n        gasLimit: [\n            \"gas\"\n        ],\n        index: [\n            \"transactionIndex\"\n        ]\n    })(value);\n    // If to and creates are empty, populate the creates from the value\n    if (result.to == null && result.creates == null) {\n        result.creates = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_5__.getCreateAddress)(result);\n    }\n    // @TODO: Check fee data\n    // Add an access list to supported transaction types\n    if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n        result.accessList = [];\n    }\n    // Compute the signature\n    if (value.signature) {\n        result.signature = _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__.Signature.from(value.signature);\n    } else {\n        result.signature = _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__.Signature.from(value);\n    }\n    // Some backends omit ChainId on legacy transactions, but we can compute it\n    if (result.chainId == null) {\n        const chainId = result.signature.legacyChainId;\n        if (chainId != null) {\n            result.chainId = chainId;\n        }\n    }\n    // @TODO: check chainID\n    /*\n    if (value.chainId != null) {\n        let chainId = value.chainId;\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        result.chainId = chainId;\n\n    } else {\n        let chainId = value.networkId;\n\n        // geth-etc returns chainId\n        if (chainId == null && result.v == null) {\n            chainId = value.chainId;\n        }\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        if (typeof(chainId) !== \"number\" && result.v != null) {\n            chainId = (result.v - 35) / 2;\n            if (chainId < 0) { chainId = 0; }\n            chainId = parseInt(chainId);\n        }\n\n        if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n        result.chainId = chainId;\n    }\n    */ // 0x0000... should actually be null\n    if (result.blockHash && (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt)(result.blockHash) === BN_0) {\n        result.blockHash = null;\n    }\n    return result;\n} //# sourceMappingURL=format.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/format.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/network.js":
/*!***********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/network.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Network: function() { return /* binding */ Network; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/accesslist.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _plugins_network_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./plugins-network.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/plugins-network.js\");\n/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */ \n\n\n\n\n\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/ const Networks = new Map();\nvar _name = /*#__PURE__*/ new WeakMap(), _chainId = /*#__PURE__*/ new WeakMap(), _plugins = /*#__PURE__*/ new WeakMap();\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */ class Network {\n    /**\n     *  Returns a JSON-compatible representation of a Network.\n     */ toJSON() {\n        return {\n            name: this.name,\n            chainId: String(this.chainId)\n        };\n    }\n    /**\n     *  The network common name.\n     *\n     *  This is the canonical name, as networks migh have multiple\n     *  names.\n     */ get name() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _name);\n    }\n    set name(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _name, value);\n    }\n    /**\n     *  The network chain ID.\n     */ get chainId() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _chainId);\n    }\n    set chainId(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _chainId, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBigInt)(value, \"chainId\"));\n    }\n    /**\n     *  Returns true if %%other%% matches this network. Any chain ID\n     *  must match, and if no chain ID is present, the name must match.\n     *\n     *  This method does not currently check for additional properties,\n     *  such as ENS address or plug-in compatibility.\n     */ matches(other) {\n        if (other == null) {\n            return false;\n        }\n        if (typeof other === \"string\") {\n            try {\n                return this.chainId === (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBigInt)(other);\n            } catch (error) {}\n            return this.name === other;\n        }\n        if (typeof other === \"number\" || typeof other === \"bigint\") {\n            try {\n                return this.chainId === (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBigInt)(other);\n            } catch (error) {}\n            return false;\n        }\n        if (typeof other === \"object\") {\n            if (other.chainId != null) {\n                try {\n                    return this.chainId === (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBigInt)(other.chainId);\n                } catch (error) {}\n                return false;\n            }\n            if (other.name != null) {\n                return this.name === other.name;\n            }\n            return false;\n        }\n        return false;\n    }\n    /**\n     *  Returns the list of plugins currently attached to this Network.\n     */ get plugins() {\n        return Array.from((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _plugins).values());\n    }\n    /**\n     *  Attach a new %%plugin%% to this Network. The network name\n     *  must be unique, excluding any fragment.\n     */ attachPlugin(plugin) {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _plugins).get(plugin.name)) {\n            throw new Error(\"cannot replace existing plugin: \".concat(plugin.name, \" \"));\n        }\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _plugins).set(plugin.name, plugin.clone());\n        return this;\n    }\n    /**\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\n     *  with fragments will not be returned unless %%name%% includes\n     *  a fragment.\n     */ getPlugin(name) {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _plugins).get(name) || null;\n    }\n    /**\n     *  Gets a list of all plugins that match %%name%%, with otr without\n     *  a fragment.\n     */ getPlugins(basename) {\n        return this.plugins.filter((p)=>p.name.split(\"#\")[0] === basename);\n    }\n    /**\n     *  Create a copy of this Network.\n     */ clone() {\n        const clone = new Network(this.name, this.chainId);\n        this.plugins.forEach((plugin)=>{\n            clone.attachPlugin(plugin.clone());\n        });\n        return clone;\n    }\n    /**\n     *  Compute the intrinsic gas required for a transaction.\n     *\n     *  A GasCostPlugin can be attached to override the default\n     *  values.\n     */ computeIntrinsicGas(tx) {\n        const costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || new _plugins_network_js__WEBPACK_IMPORTED_MODULE_3__.GasCostPlugin();\n        let gas = costs.txBase;\n        if (tx.to == null) {\n            gas += costs.txCreate;\n        }\n        if (tx.data) {\n            for(let i = 2; i < tx.data.length; i += 2){\n                if (tx.data.substring(i, i + 2) === \"00\") {\n                    gas += costs.txDataZero;\n                } else {\n                    gas += costs.txDataNonzero;\n                }\n            }\n        }\n        if (tx.accessList) {\n            const accessList = (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_4__.accessListify)(tx.accessList);\n            for(const addr in accessList){\n                gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n            }\n        }\n        return gas;\n    }\n    /**\n     *  Returns a new Network for the %%network%% name or chainId.\n     */ static from(network) {\n        injectCommonNetworks();\n        // Default network\n        if (network == null) {\n            return Network.from(\"mainnet\");\n        }\n        // Canonical name or chain ID\n        if (typeof network === \"number\") {\n            network = BigInt(network);\n        }\n        if (typeof network === \"string\" || typeof network === \"bigint\") {\n            const networkFunc = Networks.get(network);\n            if (networkFunc) {\n                return networkFunc();\n            }\n            if (typeof network === \"bigint\") {\n                return new Network(\"unknown\", network);\n            }\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assertArgument)(false, \"unknown network\", \"network\", network);\n        }\n        // Clonable with network-like abilities\n        if (typeof network.clone === \"function\") {\n            const clone = network.clone();\n            //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n            //}\n            return clone;\n        }\n        // Networkish\n        if (typeof network === \"object\") {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assertArgument)(typeof network.name === \"string\" && typeof network.chainId === \"number\", \"invalid network object name or chainId\", \"network\", network);\n            const custom = new Network(network.name, network.chainId);\n            if (network.ensAddress || network.ensNetwork != null) {\n                custom.attachPlugin(new _plugins_network_js__WEBPACK_IMPORTED_MODULE_3__.EnsPlugin(network.ensAddress, network.ensNetwork));\n            }\n            //if ((<any>network).layerOneConnection) {\n            //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n            //}\n            return custom;\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assertArgument)(false, \"invalid network\", \"network\", network);\n    }\n    /**\n     *  Register %%nameOrChainId%% with a function which returns\n     *  an instance of a Network representing that chain.\n     */ static register(nameOrChainId, networkFunc) {\n        if (typeof nameOrChainId === \"number\") {\n            nameOrChainId = BigInt(nameOrChainId);\n        }\n        const existing = Networks.get(nameOrChainId);\n        if (existing) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assertArgument)(false, \"conflicting network for \".concat(JSON.stringify(existing.name)), \"nameOrChainId\", nameOrChainId);\n        }\n        Networks.set(nameOrChainId, networkFunc);\n    }\n    /**\n     *  Creates a new **Network** for %%name%% and %%chainId%%.\n     */ constructor(name, chainId){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _name, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _chainId, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _plugins, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _name, name);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _chainId, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBigInt)(chainId));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _plugins, new Map());\n    }\n}\n// We don't want to bring in formatUnits because it is backed by\n// FixedNumber and we want to keep Networks tiny. The values\n// included by the Gas Stations are also IEEE 754 with lots of\n// rounding issues and exceed the strict checks formatUnits has.\nfunction parseUnits(_value, decimals) {\n    const value = String(_value);\n    if (!value.match(/^[0-9.]+$/)) {\n        throw new Error(\"invalid gwei value: \".concat(_value));\n    }\n    // Break into [ whole, fraction ]\n    const comps = value.split(\".\");\n    if (comps.length === 1) {\n        comps.push(\"\");\n    }\n    // More than 1 decimal point or too many fractional positions\n    if (comps.length !== 2) {\n        throw new Error(\"invalid gwei value: \".concat(_value));\n    }\n    // Pad the fraction to 9 decimalplaces\n    while(comps[1].length < decimals){\n        comps[1] += \"0\";\n    }\n    // Too many decimals and some non-zero ending, take the ceiling\n    if (comps[1].length > 9) {\n        let frac = BigInt(comps[1].substring(0, 9));\n        if (!comps[1].substring(9).match(/^0+$/)) {\n            frac++;\n        }\n        comps[1] = frac.toString();\n    }\n    return BigInt(comps[0] + comps[1]);\n}\n// Used by Polygon to use a gas station for fee data\nfunction getGasStationPlugin(url) {\n    return new _plugins_network_js__WEBPACK_IMPORTED_MODULE_3__.FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request)=>{\n        // Prevent Cloudflare from blocking our request in node.js\n        request.setHeader(\"User-Agent\", \"ethers\");\n        let response;\n        try {\n            const [_response, _feeData] = await Promise.all([\n                request.send(),\n                fetchFeeData()\n            ]);\n            response = _response;\n            const payload = response.bodyJson.standard;\n            const feeData = {\n                gasPrice: _feeData.gasPrice,\n                maxFeePerGas: parseUnits(payload.maxFee, 9),\n                maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9)\n            };\n            return feeData;\n        } catch (error) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assert)(false, \"error encountered with polygon gas station (\".concat(JSON.stringify(request.url), \")\"), \"SERVER_ERROR\", {\n                request,\n                response,\n                error\n            });\n        }\n    });\n}\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks() {\n    if (injected) {\n        return;\n    }\n    injected = true;\n    /// Register popular Ethereum networks\n    function registerEth(name, chainId, options) {\n        const func = function() {\n            const network = new Network(name, chainId);\n            // We use 0 to disable ENS\n            if (options.ensNetwork != null) {\n                network.attachPlugin(new _plugins_network_js__WEBPACK_IMPORTED_MODULE_3__.EnsPlugin(null, options.ensNetwork));\n            }\n            network.attachPlugin(new _plugins_network_js__WEBPACK_IMPORTED_MODULE_3__.GasCostPlugin());\n            (options.plugins || []).forEach((plugin)=>{\n                network.attachPlugin(plugin);\n            });\n            return network;\n        };\n        // Register the network by name and chain ID\n        Network.register(name, func);\n        Network.register(chainId, func);\n        if (options.altNames) {\n            options.altNames.forEach((name)=>{\n                Network.register(name, func);\n            });\n        }\n    }\n    registerEth(\"mainnet\", 1, {\n        ensNetwork: 1,\n        altNames: [\n            \"homestead\"\n        ]\n    });\n    registerEth(\"ropsten\", 3, {\n        ensNetwork: 3\n    });\n    registerEth(\"rinkeby\", 4, {\n        ensNetwork: 4\n    });\n    registerEth(\"goerli\", 5, {\n        ensNetwork: 5\n    });\n    registerEth(\"kovan\", 42, {\n        ensNetwork: 42\n    });\n    registerEth(\"sepolia\", 11155111, {\n        ensNetwork: 11155111\n    });\n    registerEth(\"holesky\", 17000, {\n        ensNetwork: 17000\n    });\n    registerEth(\"classic\", 61, {});\n    registerEth(\"classicKotti\", 6, {});\n    registerEth(\"arbitrum\", 42161, {\n        ensNetwork: 1\n    });\n    registerEth(\"arbitrum-goerli\", 421613, {});\n    registerEth(\"arbitrum-sepolia\", 421614, {});\n    registerEth(\"base\", 8453, {\n        ensNetwork: 1\n    });\n    registerEth(\"base-goerli\", 84531, {});\n    registerEth(\"base-sepolia\", 84532, {});\n    registerEth(\"bnb\", 56, {\n        ensNetwork: 1\n    });\n    registerEth(\"bnbt\", 97, {});\n    registerEth(\"linea\", 59144, {\n        ensNetwork: 1\n    });\n    registerEth(\"linea-goerli\", 59140, {});\n    registerEth(\"matic\", 137, {\n        ensNetwork: 1,\n        plugins: [\n            getGasStationPlugin(\"https://gasstation.polygon.technology/v2\")\n        ]\n    });\n    registerEth(\"matic-mumbai\", 80001, {\n        altNames: [\n            \"maticMumbai\",\n            \"maticmum\"\n        ],\n        plugins: [\n            getGasStationPlugin(\"https://gasstation-testnet.polygon.technology/v2\")\n        ]\n    });\n    registerEth(\"optimism\", 10, {\n        ensNetwork: 1,\n        plugins: []\n    });\n    registerEth(\"optimism-goerli\", 420, {});\n    registerEth(\"optimism-sepolia\", 11155420, {});\n    registerEth(\"xdai\", 100, {\n        ensNetwork: 1\n    });\n} //# sourceMappingURL=network.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/network.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/plugins-network.js":
/*!*******************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/plugins-network.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnsPlugin: function() { return /* binding */ EnsPlugin; },\n/* harmony export */   FeeDataNetworkPlugin: function() { return /* binding */ FeeDataNetworkPlugin; },\n/* harmony export */   FetchUrlFeeDataNetworkPlugin: function() { return /* binding */ FetchUrlFeeDataNetworkPlugin; },\n/* harmony export */   GasCostPlugin: function() { return /* binding */ GasCostPlugin; },\n/* harmony export */   NetworkPlugin: function() { return /* binding */ NetworkPlugin; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _utils_properties_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/properties.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n\n\n\n\n\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */ class NetworkPlugin {\n    /**\n     *  Creates a copy of this plugin.\n     */ clone() {\n        return new NetworkPlugin(this.name);\n    }\n    /**\n     *  Creates a new **NetworkPlugin**.\n     */ constructor(name){\n        (0,_utils_properties_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\n            name\n        });\n    }\n}\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */ class GasCostPlugin extends NetworkPlugin {\n    clone() {\n        return new GasCostPlugin(this.effectiveBlock, this);\n    }\n    /**\n     *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n     *  latest block or another GasCostPlugin supercedes that block number,\n     *  with the associated %%costs%%.\n     */ constructor(effectiveBlock, costs){\n        if (effectiveBlock == null) {\n            effectiveBlock = 0;\n        }\n        super(\"org.ethers.network.plugins.GasCost#\".concat(effectiveBlock || 0));\n        const props = {\n            effectiveBlock\n        };\n        function set(name, nullish) {\n            let value = (costs || {})[name];\n            if (value == null) {\n                value = nullish;\n            }\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(typeof value === \"number\", \"invalud value for \".concat(name), \"costs\", costs);\n            props[name] = value;\n        }\n        set(\"txBase\", 21000);\n        set(\"txCreate\", 32000);\n        set(\"txDataZero\", 4);\n        set(\"txDataNonzero\", 16);\n        set(\"txAccessListStorageKey\", 1900);\n        set(\"txAccessListAddress\", 2400);\n        (0,_utils_properties_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, props);\n    }\n}\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */ class EnsPlugin extends NetworkPlugin {\n    clone() {\n        return new EnsPlugin(this.address, this.targetNetwork);\n    }\n    /**\n     *  Creates a new **EnsPlugin** connected to %%address%% on the\n     *  %%targetNetwork%%. The default ENS address and mainnet is used\n     *  if unspecified.\n     */ constructor(address, targetNetwork){\n        super(\"org.ethers.plugins.network.Ens\");\n        (0,_utils_properties_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\n            address: address || EnsAddress,\n            targetNetwork: targetNetwork == null ? 1 : targetNetwork\n        });\n    }\n}\nvar _feeDataFunc = /*#__PURE__*/ new WeakMap();\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */ class FeeDataNetworkPlugin extends NetworkPlugin {\n    /**\n     *  The fee data function provided to the constructor.\n     */ get feeDataFunc() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _feeDataFunc);\n    }\n    /**\n     *  Resolves to the fee data.\n     */ async getFeeData(provider) {\n        return await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _feeDataFunc).call(this, provider);\n    }\n    clone() {\n        return new FeeDataNetworkPlugin((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _feeDataFunc));\n    }\n    /**\n     *  Creates a new **FeeDataNetworkPlugin**.\n     */ constructor(feeDataFunc){\n        super(\"org.ethers.plugins.network.FeeData\");\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _feeDataFunc, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _feeDataFunc, feeDataFunc);\n    }\n}\nvar _url = /*#__PURE__*/ new WeakMap(), _processFunc = /*#__PURE__*/ new WeakMap();\nclass FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {\n    /**\n     *  The URL to initialize the FetchRequest with in %%processFunc%%.\n     */ get url() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _url);\n    }\n    /**\n     *  The callback to use when computing the FeeData.\n     */ get processFunc() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _processFunc);\n    }\n    // We are immutable, so we can serve as our own clone\n    clone() {\n        return this;\n    }\n    /**\n     *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will\n     *  be used when computing the fee data for the network.\n     */ constructor(url, processFunc){\n        super(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _url, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _processFunc, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _url, url);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _processFunc, processFunc);\n    }\n} /*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/  //# sourceMappingURL=plugins-network.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/plugins-network.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-alchemy.js":
/*!********************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/provider-alchemy.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlchemyProvider: function() { return /* binding */ AlchemyProvider; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fetch.js\");\n/* harmony import */ var _community_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./community.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/community.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./network.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/**\n *  [[link-alchemy]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\n *  - Base (``base``)\n *  - Base Goerlia Testnet (``base-goerli``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */ \n\n\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nfunction getHost(name) {\n    switch(name){\n        case \"mainnet\":\n            return \"eth-mainnet.alchemyapi.io\";\n        case \"goerli\":\n            return \"eth-goerli.g.alchemy.com\";\n        case \"sepolia\":\n            return \"eth-sepolia.g.alchemy.com\";\n        case \"arbitrum\":\n            return \"arb-mainnet.g.alchemy.com\";\n        case \"arbitrum-goerli\":\n            return \"arb-goerli.g.alchemy.com\";\n        case \"arbitrum-sepolia\":\n            return \"arb-sepolia.g.alchemy.com\";\n        case \"base\":\n            return \"base-mainnet.g.alchemy.com\";\n        case \"base-goerli\":\n            return \"base-goerli.g.alchemy.com\";\n        case \"base-sepolia\":\n            return \"base-sepolia.g.alchemy.com\";\n        case \"matic\":\n            return \"polygon-mainnet.g.alchemy.com\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.g.alchemy.com\";\n        case \"optimism\":\n            return \"opt-mainnet.g.alchemy.com\";\n        case \"optimism-goerli\":\n            return \"opt-goerli.g.alchemy.com\";\n        case \"optimism-sepolia\":\n            return \"opt-sepolia.g.alchemy.com\";\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */ class AlchemyProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__.JsonRpcProvider {\n    _getProvider(chainId) {\n        try {\n            return new AlchemyProvider(chainId, this.apiKey);\n        } catch (error) {}\n        return super._getProvider(chainId);\n    }\n    async _perform(req) {\n        // https://docs.alchemy.com/reference/trace-transaction\n        if (req.method === \"getTransactionResult\") {\n            const { trace, tx } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveProperties)({\n                trace: this.send(\"trace_transaction\", [\n                    req.hash\n                ]),\n                tx: this.getTransaction(req.hash)\n            });\n            if (trace == null || tx == null) {\n                return null;\n            }\n            let data;\n            let error = false;\n            try {\n                data = trace[0].result.output;\n                error = trace[0].error === \"Reverted\";\n            } catch (error) {}\n            if (data) {\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n                    action: \"getTransactionResult\",\n                    data,\n                    reason: null,\n                    transaction: tx,\n                    invocation: null,\n                    revert: null // @TODO\n                });\n                return data;\n            }\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"could not parse trace result\", \"BAD_DATA\", {\n                value: trace\n            });\n        }\n        return await super._perform(req);\n    }\n    isCommunityResource() {\n        return this.apiKey === defaultApiKey;\n    }\n    static getRequest(network, apiKey) {\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_3__.FetchRequest(\"https://\".concat(getHost(network.name), \"/v2/\").concat(apiKey));\n        request.allowGzip = true;\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt)=>{\n                (0,_community_js__WEBPACK_IMPORTED_MODULE_4__.showThrottleMessage)(\"alchemy\");\n                return true;\n            };\n        }\n        return request;\n    }\n    constructor(_network, apiKey){\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_5__.Network.from(_network);\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = AlchemyProvider.getRequest(network, apiKey);\n        super(request, network, {\n            staticNetwork: network\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.defineProperties)(this, {\n            apiKey\n        });\n    }\n} //# sourceMappingURL=provider-alchemy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-alchemy.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-ankr.js":
/*!*****************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/provider-ankr.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnkrProvider: function() { return /* binding */ AnkrProvider; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fetch.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _community_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./community.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/community.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./network.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/**\n *  [[link-ankr]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Base (``base``)\n *  - Base Goerlia Testnet (``base-goerli``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - BNB (``bnb``)\n *  - BNB Testnet (``bnbt``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\n */ \n\n\n\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n    switch(name){\n        case \"mainnet\":\n            return \"rpc.ankr.com/eth\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli\";\n        case \"sepolia\":\n            return \"rpc.ankr.com/eth_sepolia\";\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum\";\n        case \"base\":\n            return \"rpc.ankr.com/base\";\n        case \"base-goerli\":\n            return \"rpc.ankr.com/base_goerli\";\n        case \"base-sepolia\":\n            return \"rpc.ankr.com/base_sepolia\";\n        case \"bnb\":\n            return \"rpc.ankr.com/bsc\";\n        case \"bnbt\":\n            return \"rpc.ankr.com/bsc_testnet_chapel\";\n        case \"matic\":\n            return \"rpc.ankr.com/polygon\";\n        case \"matic-mumbai\":\n            return \"rpc.ankr.com/polygon_mumbai\";\n        case \"optimism\":\n            return \"rpc.ankr.com/optimism\";\n        case \"optimism-goerli\":\n            return \"rpc.ankr.com/optimism_testnet\";\n        case \"optimism-sepolia\":\n            return \"rpc.ankr.com/optimism_sepolia\";\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AnkrProvider** connects to the [[link-ankr]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-ankr-signup).\n */ class AnkrProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__.JsonRpcProvider {\n    _getProvider(chainId) {\n        try {\n            return new AnkrProvider(chainId, this.apiKey);\n        } catch (error) {}\n        return super._getProvider(chainId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%apiKey%%.\n     */ static getRequest(network, apiKey) {\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.FetchRequest(\"https://\".concat(getHost(network.name), \"/\").concat(apiKey));\n        request.allowGzip = true;\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt)=>{\n                (0,_community_js__WEBPACK_IMPORTED_MODULE_3__.showThrottleMessage)(\"AnkrProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n    getRpcError(payload, error) {\n        if (payload.method === \"eth_sendRawTransaction\") {\n            if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\n                error.error.message = \"replacement transaction underpriced\";\n            }\n        }\n        return super.getRpcError(payload, error);\n    }\n    isCommunityResource() {\n        return this.apiKey === defaultApiKey;\n    }\n    /**\n     *  Create a new **AnkrProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */ constructor(_network, apiKey){\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_4__.Network.from(_network);\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        // Ankr does not support filterId, so we force polling\n        const options = {\n            polling: true,\n            staticNetwork: network\n        };\n        const request = AnkrProvider.getRequest(network, apiKey);\n        super(request, network, options);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.defineProperties)(this, {\n            apiKey\n        });\n    }\n} //# sourceMappingURL=provider-ankr.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-ankr.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-browser.js":
/*!********************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/provider-browser.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BrowserProvider: function() { return /* binding */ BrowserProvider; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n\n\n\n\n\n;\nvar _request = /*#__PURE__*/ new WeakMap();\n/**\n *  A **BrowserProvider** is intended to wrap an injected provider which\n *  adheres to the [[link-eip-1193]] standard, which most (if not all)\n *  currently do.\n */ class BrowserProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpcApiPollingProvider {\n    async send(method, params) {\n        await this._start();\n        return await super.send(method, params);\n    }\n    async _send(payload) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(!Array.isArray(payload), \"EIP-1193 does not support batch request\", \"payload\", payload);\n        try {\n            const result = await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _request).call(this, payload.method, payload.params || []);\n            return [\n                {\n                    id: payload.id,\n                    result\n                }\n            ];\n        } catch (e) {\n            return [\n                {\n                    id: payload.id,\n                    error: {\n                        code: e.code,\n                        data: e.data,\n                        message: e.message\n                    }\n                }\n            ];\n        }\n    }\n    getRpcError(payload, error) {\n        error = JSON.parse(JSON.stringify(error));\n        // EIP-1193 gives us some machine-readable error codes, so rewrite\n        // them into \n        switch(error.error.code || -1){\n            case 4001:\n                error.error.message = \"ethers-user-denied: \".concat(error.error.message);\n                break;\n            case 4200:\n                error.error.message = \"ethers-unsupported: \".concat(error.error.message);\n                break;\n        }\n        return super.getRpcError(payload, error);\n    }\n    /**\n     *  Resolves to ``true`` if the provider manages the %%address%%.\n     */ async hasSigner(address) {\n        if (address == null) {\n            address = 0;\n        }\n        const accounts = await this.send(\"eth_accounts\", []);\n        if (typeof address === \"number\") {\n            return accounts.length > address;\n        }\n        address = address.toLowerCase();\n        return accounts.filter((a)=>a.toLowerCase() === address).length !== 0;\n    }\n    async getSigner(address) {\n        if (address == null) {\n            address = 0;\n        }\n        if (!await this.hasSigner(address)) {\n            try {\n                //const resp = \n                await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _request).call(this, \"eth_requestAccounts\", []);\n            //console.log(\"RESP\", resp);\n            } catch (error) {\n                const payload = error.payload;\n                throw this.getRpcError(payload, {\n                    id: payload.id,\n                    error\n                });\n            }\n        }\n        return await super.getSigner(address);\n    }\n    /**\n     *  Connnect to the %%ethereum%% provider, optionally forcing the\n     *  %%network%%.\n     */ constructor(ethereum, network){\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(ethereum && ethereum.request, \"invalid EIP-1193 provider\", \"ethereum\", ethereum);\n        super(network, {\n            batchMaxCount: 1\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _request, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _request, async (method, params)=>{\n            const payload = {\n                method,\n                params\n            };\n            this.emit(\"debug\", {\n                action: \"sendEip1193Request\",\n                payload\n            });\n            try {\n                const result = await ethereum.request(payload);\n                this.emit(\"debug\", {\n                    action: \"receiveEip1193Result\",\n                    result\n                });\n                return result;\n            } catch (e) {\n                const error = new Error(e.message);\n                error.code = e.code;\n                error.data = e.data;\n                error.payload = payload;\n                this.emit(\"debug\", {\n                    action: \"receiveEip1193Error\",\n                    error\n                });\n                throw error;\n            }\n        });\n    }\n} //# sourceMappingURL=provider-browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-cloudflare.js":
/*!***********************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/provider-cloudflare.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CloudflareProvider: function() { return /* binding */ CloudflareProvider; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./network.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/**\n *  About Cloudflare\n *\n *  @_subsection: api/providers/thirdparty:Cloudflare  [providers-cloudflare]\n */ \n\n\n/**\n *  About Cloudflare...\n */ class CloudflareProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider {\n    constructor(_network){\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_1__.Network.from(_network);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(network.name === \"mainnet\", \"unsupported network\", \"network\", _network);\n        super(\"https://cloudflare-eth.com/\", network, {\n            staticNetwork: network\n        });\n    }\n} //# sourceMappingURL=provider-cloudflare.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3Byb3ZpZGVyLWNsb3VkZmxhcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0NBSUMsR0FDa0Q7QUFDWjtBQUNpQjtBQUN4RDs7Q0FFQyxHQUNNLE1BQU1HLDJCQUEyQkQsaUVBQWVBO0lBQ25ERSxZQUFZQyxRQUFRLENBQUU7UUFDbEIsSUFBSUEsWUFBWSxNQUFNO1lBQ2xCQSxXQUFXO1FBQ2Y7UUFDQSxNQUFNQyxVQUFVTCxnREFBT0EsQ0FBQ00sSUFBSSxDQUFDRjtRQUM3QkwsK0RBQWNBLENBQUNNLFFBQVFFLElBQUksS0FBSyxXQUFXLHVCQUF1QixXQUFXSDtRQUM3RSxLQUFLLENBQUMsK0JBQWdDQyxTQUFTO1lBQUVHLGVBQWVIO1FBQVE7SUFDNUU7QUFDSixFQUNBLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3Byb3ZpZGVycy9wcm92aWRlci1jbG91ZGZsYXJlLmpzPzE0OTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQWJvdXQgQ2xvdWRmbGFyZVxuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS9wcm92aWRlcnMvdGhpcmRwYXJ0eTpDbG91ZGZsYXJlICBbcHJvdmlkZXJzLWNsb3VkZmxhcmVdXG4gKi9cbmltcG9ydCB7IGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBOZXR3b3JrIH0gZnJvbSBcIi4vbmV0d29yay5qc1wiO1xuaW1wb3J0IHsgSnNvblJwY1Byb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItanNvbnJwYy5qc1wiO1xuLyoqXG4gKiAgQWJvdXQgQ2xvdWRmbGFyZS4uLlxuICovXG5leHBvcnQgY2xhc3MgQ2xvdWRmbGFyZVByb3ZpZGVyIGV4dGVuZHMgSnNvblJwY1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihfbmV0d29yaykge1xuICAgICAgICBpZiAoX25ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgX25ldHdvcmsgPSBcIm1haW5uZXRcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXR3b3JrID0gTmV0d29yay5mcm9tKF9uZXR3b3JrKTtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQobmV0d29yay5uYW1lID09PSBcIm1haW5uZXRcIiwgXCJ1bnN1cHBvcnRlZCBuZXR3b3JrXCIsIFwibmV0d29ya1wiLCBfbmV0d29yayk7XG4gICAgICAgIHN1cGVyKFwiaHR0cHM6L1xcL2Nsb3VkZmxhcmUtZXRoLmNvbS9cIiwgbmV0d29yaywgeyBzdGF0aWNOZXR3b3JrOiBuZXR3b3JrIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLWNsb3VkZmxhcmUuanMubWFwIl0sIm5hbWVzIjpbImFzc2VydEFyZ3VtZW50IiwiTmV0d29yayIsIkpzb25ScGNQcm92aWRlciIsIkNsb3VkZmxhcmVQcm92aWRlciIsImNvbnN0cnVjdG9yIiwiX25ldHdvcmsiLCJuZXR3b3JrIiwiZnJvbSIsIm5hbWUiLCJzdGF0aWNOZXR3b3JrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-cloudflare.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-etherscan.js":
/*!**********************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/provider-etherscan.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EtherscanPlugin: function() { return /* binding */ EtherscanPlugin; },\n/* harmony export */   EtherscanProvider: function() { return /* binding */ EtherscanProvider; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../abi/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/abi-coder.js\");\n/* harmony import */ var _contract_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../contract/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/accesslist.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/transaction.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fetch.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _abstract_provider_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract-provider.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/abstract-provider.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./network.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _plugins_network_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plugins-network.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/plugins-network.js\");\n/* harmony import */ var _community_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./community.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/community.js\");\n/**\n *  [[link-etherscan]] provides a third-party service for connecting to\n *  various blockchains over a combination of JSON-RPC and custom API\n *  endpoints.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Sepolia Testnet (``holesky``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - BNB Smart Chain Testnet (``bnbt``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]\n */ \n\n\n\n\n\n\n\n\n\n\nconst THROTTLE = 2000;\nfunction isPromise(value) {\n    return value && typeof value.then === \"function\";\n}\nconst EtherscanPluginId = \"org.ethers.plugins.provider.Etherscan\";\n/**\n *  A Network can include an **EtherscanPlugin** to provide\n *  a custom base URL.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */ class EtherscanPlugin extends _plugins_network_js__WEBPACK_IMPORTED_MODULE_0__.NetworkPlugin {\n    clone() {\n        return new EtherscanPlugin(this.baseUrl);\n    }\n    /**\n     *  Creates a new **EtherscanProvider** which will use\n     *  %%baseUrl%%.\n     */ constructor(baseUrl){\n        super(EtherscanPluginId);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n            baseUrl\n        });\n    }\n}\nconst skipKeys = [\n    \"enableCcipRead\"\n];\nlet nextId = 1;\nvar _plugin = /*#__PURE__*/ new WeakMap();\n/**\n *  The **EtherscanBaseProvider** is the super-class of\n *  [[EtherscanProvider]], which should generally be used instead.\n *\n *  Since the **EtherscanProvider** includes additional code for\n *  [[Contract]] access, in //rare cases// that contracts are not\n *  used, this class can reduce code size.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */ class EtherscanProvider extends _abstract_provider_js__WEBPACK_IMPORTED_MODULE_2__.AbstractProvider {\n    /**\n     *  Returns the base URL.\n     *\n     *  If an [[EtherscanPlugin]] is configured on the\n     *  [[EtherscanBaseProvider_network]], returns the plugin's\n     *  baseUrl.\n     */ getBaseUrl() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _plugin)) {\n            return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _plugin).baseUrl;\n        }\n        switch(this.network.name){\n            case \"mainnet\":\n                return \"https://api.etherscan.io\";\n            case \"goerli\":\n                return \"https://api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https://api-sepolia.etherscan.io\";\n            case \"holesky\":\n                return \"https://api-holesky.etherscan.io\";\n            case \"arbitrum\":\n                return \"https://api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https://api-goerli.arbiscan.io\";\n            case \"bnb\":\n                return \"https://api.bscscan.com\";\n            case \"bnbt\":\n                return \"https://api-testnet.bscscan.com\";\n            case \"matic\":\n                return \"https://api.polygonscan.com\";\n            case \"matic-mumbai\":\n                return \"https://api-testnet.polygonscan.com\";\n            case \"optimism\":\n                return \"https://api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https://api-goerli-optimistic.etherscan.io\";\n            default:\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(false, \"unsupported network\", \"network\", this.network);\n    }\n    /**\n     *  Returns the URL for the %%module%% and %%params%%.\n     */ getUrl(module, params) {\n        const query = Object.keys(params).reduce((accum, key)=>{\n            const value = params[key];\n            if (value != null) {\n                accum += \"&\".concat(key, \"=\").concat(value);\n            }\n            return accum;\n        }, \"\");\n        const apiKey = this.apiKey ? \"&apikey=\".concat(this.apiKey) : \"\";\n        return \"\".concat(this.getBaseUrl(), \"/api?module=\").concat(module).concat(query).concat(apiKey);\n    }\n    /**\n     *  Returns the URL for using POST requests.\n     */ getPostUrl() {\n        return \"\".concat(this.getBaseUrl(), \"/api\");\n    }\n    /**\n     *  Returns the parameters for using POST requests.\n     */ getPostData(module, params) {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n    async detectNetwork() {\n        return this.network;\n    }\n    /**\n     *  Resolves to the result of calling %%module%% with %%params%%.\n     *\n     *  If %%post%%, the request is made as a POST request.\n     */ async fetch(module, params, post) {\n        const id = nextId++;\n        const url = post ? this.getPostUrl() : this.getUrl(module, params);\n        const payload = post ? this.getPostData(module, params) : null;\n        this.emit(\"debug\", {\n            action: \"sendRequest\",\n            id,\n            url,\n            payload: payload\n        });\n        const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_5__.FetchRequest(url);\n        request.setThrottleParams({\n            slotInterval: 1000\n        });\n        request.retryFunc = (req, resp, attempt)=>{\n            if (this.isCommunityResource()) {\n                (0,_community_js__WEBPACK_IMPORTED_MODULE_6__.showThrottleMessage)(\"Etherscan\");\n            }\n            return Promise.resolve(true);\n        };\n        request.processFunc = async (request, response)=>{\n            const result = response.hasBody() ? JSON.parse((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.toUtf8String)(response.body)) : {};\n            const throttle = (typeof result.result === \"string\" ? result.result : \"\").toLowerCase().indexOf(\"rate limit\") >= 0;\n            if (module === \"proxy\") {\n                // This JSON response indicates we are being throttled\n                if (result && result.status == 0 && result.message == \"NOTOK\" && throttle) {\n                    this.emit(\"debug\", {\n                        action: \"receiveError\",\n                        id,\n                        reason: \"proxy-NOTOK\",\n                        error: result\n                    });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            } else {\n                if (throttle) {\n                    this.emit(\"debug\", {\n                        action: \"receiveError\",\n                        id,\n                        reason: \"null result\",\n                        error: result.result\n                    });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            }\n            return response;\n        };\n        if (payload) {\n            request.setHeader(\"content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n            request.body = Object.keys(payload).map((k)=>\"\".concat(k, \"=\").concat(payload[k])).join(\"&\");\n        }\n        const response = await request.send();\n        try {\n            response.assertOk();\n        } catch (error) {\n            this.emit(\"debug\", {\n                action: \"receiveError\",\n                id,\n                error,\n                reason: \"assertOk\"\n            });\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(false, \"response error\", \"SERVER_ERROR\", {\n                request,\n                response\n            });\n        }\n        if (!response.hasBody()) {\n            this.emit(\"debug\", {\n                action: \"receiveError\",\n                id,\n                error: \"missing body\",\n                reason: \"null body\"\n            });\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(false, \"missing response\", \"SERVER_ERROR\", {\n                request,\n                response\n            });\n        }\n        const result = JSON.parse((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.toUtf8String)(response.body));\n        if (module === \"proxy\") {\n            if (result.jsonrpc != \"2.0\") {\n                this.emit(\"debug\", {\n                    action: \"receiveError\",\n                    id,\n                    result,\n                    reason: \"invalid JSON-RPC\"\n                });\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(false, \"invalid JSON-RPC response (missing jsonrpc='2.0')\", \"SERVER_ERROR\", {\n                    request,\n                    response,\n                    info: {\n                        result\n                    }\n                });\n            }\n            if (result.error) {\n                this.emit(\"debug\", {\n                    action: \"receiveError\",\n                    id,\n                    result,\n                    reason: \"JSON-RPC error\"\n                });\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(false, \"error response\", \"SERVER_ERROR\", {\n                    request,\n                    response,\n                    info: {\n                        result\n                    }\n                });\n            }\n            this.emit(\"debug\", {\n                action: \"receiveRequest\",\n                id,\n                result\n            });\n            return result.result;\n        } else {\n            // getLogs, getHistory have weird success responses\n            if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n                this.emit(\"debug\", {\n                    action: \"receiveRequest\",\n                    id,\n                    result\n                });\n                return result.result;\n            }\n            if (result.status != 1 || typeof result.message === \"string\" && !result.message.match(/^OK/)) {\n                this.emit(\"debug\", {\n                    action: \"receiveError\",\n                    id,\n                    result\n                });\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(false, \"error response\", \"SERVER_ERROR\", {\n                    request,\n                    response,\n                    info: {\n                        result\n                    }\n                });\n            }\n            this.emit(\"debug\", {\n                action: \"receiveRequest\",\n                id,\n                result\n            });\n            return result.result;\n        }\n    }\n    /**\n     *  Returns %%transaction%% normalized for the Etherscan API.\n     */ _getTransactionPostData(transaction) {\n        const result = {};\n        for(let key in transaction){\n            if (skipKeys.indexOf(key) >= 0) {\n                continue;\n            }\n            if (transaction[key] == null) {\n                continue;\n            }\n            let value = transaction[key];\n            if (key === \"type\" && value === 0) {\n                continue;\n            }\n            if (key === \"blockTag\" && value === \"latest\") {\n                continue;\n            }\n            // Quantity-types require no leading zero, unless 0\n            if (({\n                type: true,\n                gasLimit: true,\n                gasPrice: true,\n                maxFeePerGs: true,\n                maxPriorityFeePerGas: true,\n                nonce: true,\n                value: true\n            })[key]) {\n                value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.toQuantity)(value);\n            } else if (key === \"accessList\") {\n                value = \"[\" + (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_9__.accessListify)(value).map((set)=>{\n                    return '{address:\"'.concat(set.address, '\",storageKeys:[\"').concat(set.storageKeys.join('\",\"'), '\"]}');\n                }).join(\",\") + \"]\";\n            } else {\n                value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__.hexlify)(value);\n            }\n            result[key] = value;\n        }\n        return result;\n    }\n    /**\n     *  Throws the normalized Etherscan error.\n     */ _checkError(req, error, transaction) {\n        // Pull any message out if, possible\n        let message = \"\";\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.isError)(error, \"SERVER_ERROR\")) {\n            // Check for an error emitted by a proxy call\n            try {\n                message = error.info.result.error.message;\n            } catch (e) {}\n            if (!message) {\n                try {\n                    message = error.info.message;\n                } catch (e) {}\n            }\n        }\n        if (req.method === \"estimateGas\") {\n            if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(false, \"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: req.transaction\n                });\n            }\n        }\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            if (message.match(/execution reverted/i)) {\n                let data = \"\";\n                try {\n                    data = error.info.result.error.data;\n                } catch (error) {}\n                const e = _abi_index_js__WEBPACK_IMPORTED_MODULE_11__.AbiCoder.getBuiltinCallException(req.method, req.transaction, data);\n                e.info = {\n                    request: req,\n                    error\n                };\n                throw e;\n            }\n        }\n        if (message) {\n            if (req.method === \"broadcastTransaction\") {\n                const transaction = _transaction_index_js__WEBPACK_IMPORTED_MODULE_12__.Transaction.from(req.signedTransaction);\n                if (message.match(/replacement/i) && message.match(/underpriced/i)) {\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(false, \"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n                        transaction\n                    });\n                }\n                if (message.match(/insufficient funds/)) {\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(false, \"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                        transaction\n                    });\n                }\n                if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(false, \"nonce has already been used\", \"NONCE_EXPIRED\", {\n                        transaction\n                    });\n                }\n            }\n        }\n        // Something we could not process\n        throw error;\n    }\n    async _detectNetwork() {\n        return this.network;\n    }\n    async _perform(req) {\n        switch(req.method){\n            case \"chainId\":\n                return this.network.chainId;\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_blockNumber\"\n                });\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_gasPrice\"\n                });\n            case \"getPriorityFee\":\n                // This is temporary until Etherscan completes support\n                if (this.network.name === \"mainnet\") {\n                    return \"1000000000\";\n                } else if (this.network.name === \"optimism\") {\n                    return \"1000000\";\n                } else {\n                    throw new Error(\"fallback onto the AbstractProvider default\");\n                }\n            /* Working with Etherscan to get this added:\n            try {\n                const test = await this.fetch(\"proxy\", {\n                    action: \"eth_maxPriorityFeePerGas\"\n                });\n                console.log(test);\n                return test;\n            } catch (e) {\n                console.log(\"DEBUG\", e);\n                throw e;\n            }\n            */ /* This might be safe; but due to rounding neither myself\n               or Etherscan are necessarily comfortable with this. :)\n            try {\n                const result = await this.fetch(\"gastracker\", { action: \"gasoracle\" });\n                console.log(result);\n                const gasPrice = parseUnits(result.SafeGasPrice, \"gwei\");\n                const baseFee = parseUnits(result.suggestBaseFee, \"gwei\");\n                const priorityFee = gasPrice - baseFee;\n                if (priorityFee < 0) { throw new Error(\"negative priority fee; defer to abstract provider default\"); }\n                return priorityFee;\n            } catch (error) {\n                console.log(\"DEBUG\", error);\n                throw error;\n            }\n            */ case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n            case \"getStorage\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: req.address,\n                    position: req.position,\n                    tag: req.blockTag\n                });\n            case \"broadcastTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: req.signedTransaction\n                }, true).catch((error)=>{\n                    return this._checkError(req, error, req.signedTransaction);\n                });\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: req.blockTag,\n                        boolean: req.includeTransactions ? \"true\" : \"false\"\n                    });\n                }\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(false, \"getBlock by blockHash not supported by Etherscan\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"getBlock(blockHash)\"\n                });\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: req.hash\n                });\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: req.hash\n                });\n            case \"call\":\n                {\n                    if (req.blockTag !== \"latest\") {\n                        throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                    }\n                    const postData = this._getTransactionPostData(req.transaction);\n                    postData.module = \"proxy\";\n                    postData.action = \"eth_call\";\n                    try {\n                        return await this.fetch(\"proxy\", postData, true);\n                    } catch (error) {\n                        return this._checkError(req, error, req.transaction);\n                    }\n                }\n            case \"estimateGas\":\n                {\n                    const postData = this._getTransactionPostData(req.transaction);\n                    postData.module = \"proxy\";\n                    postData.action = \"eth_estimateGas\";\n                    try {\n                        return await this.fetch(\"proxy\", postData, true);\n                    } catch (error) {\n                        return this._checkError(req, error, req.transaction);\n                    }\n                }\n            /*\n                        case \"getLogs\": {\n                            // Needs to complain if more than one address is passed in\n                            const args: Record<string, any> = { action: \"getLogs\" }\n            \n                            if (params.filter.fromBlock) {\n                                args.fromBlock = checkLogTag(params.filter.fromBlock);\n                            }\n            \n                            if (params.filter.toBlock) {\n                                args.toBlock = checkLogTag(params.filter.toBlock);\n                            }\n            \n                            if (params.filter.address) {\n                                args.address = params.filter.address;\n                            }\n            \n                            // @TODO: We can handle slightly more complicated logs using the logs API\n                            if (params.filter.topics && params.filter.topics.length > 0) {\n                                if (params.filter.topics.length > 1) {\n                                    logger.throwError(\"unsupported topic count\", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                                }\n                                if (params.filter.topics.length === 1) {\n                                    const topic0 = params.filter.topics[0];\n                                    if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                                        logger.throwError(\"unsupported topic format\", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                                    }\n                                    args.topic0 = topic0;\n                                }\n                            }\n            \n                            const logs: Array<any> = await this.fetch(\"logs\", args);\n            \n                            // Cache txHash => blockHash\n                            let blocks: { [tag: string]: string } = {};\n            \n                            // Add any missing blockHash to the logs\n                            for (let i = 0; i < logs.length; i++) {\n                                const log = logs[i];\n                                if (log.blockHash != null) { continue; }\n                                if (blocks[log.blockNumber] == null) {\n                                    const block = await this.getBlock(log.blockNumber);\n                                    if (block) {\n                                        blocks[log.blockNumber] = block.hash;\n                                    }\n                                }\n            \n                                log.blockHash = blocks[log.blockNumber];\n                            }\n            \n                            return logs;\n                        }\n            */ default:\n                break;\n        }\n        return super._perform(req);\n    }\n    async getNetwork() {\n        return this.network;\n    }\n    /**\n     *  Resolves to the current price of ether.\n     *\n     *  This returns ``0`` on any network other than ``mainnet``.\n     */ async getEtherPrice() {\n        if (this.network.name !== \"mainnet\") {\n            return 0.0;\n        }\n        return parseFloat((await this.fetch(\"stats\", {\n            action: \"ethprice\"\n        })).ethusd);\n    }\n    /**\n     *  Resolves to a [Contract]] for %%address%%, using the\n     *  Etherscan API to retreive the Contract ABI.\n     */ async getContract(_address) {\n        let address = this._getAddress(_address);\n        if (isPromise(address)) {\n            address = await address;\n        }\n        try {\n            const resp = await this.fetch(\"contract\", {\n                action: \"getabi\",\n                address\n            });\n            const abi = JSON.parse(resp);\n            return new _contract_index_js__WEBPACK_IMPORTED_MODULE_13__.Contract(address, abi, this);\n        } catch (error) {\n            return null;\n        }\n    }\n    isCommunityResource() {\n        return this.apiKey == null;\n    }\n    /**\n     *  Creates a new **EtherscanBaseProvider**.\n     */ constructor(_network, _apiKey){\n        const apiKey = _apiKey != null ? _apiKey : null;\n        super();\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _plugin, {\n            writable: true,\n            value: void 0\n        });\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_15__.Network.from(_network);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_16__._)(this, _plugin, network.getPlugin(EtherscanPluginId));\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\n            apiKey,\n            network\n        });\n        // Test that the network is supported by Etherscan\n        this.getBaseUrl();\n    }\n} //# sourceMappingURL=provider-etherscan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-etherscan.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-fallback.js":
/*!*********************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/provider-fallback.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FallbackProvider: function() { return /* binding */ FallbackProvider; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _abstract_provider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abstract-provider.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/abstract-provider.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./network.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/network.js\");\n/**\n *  A **FallbackProvider** provides resilience, security and performance\n *  in a way that is customizable and configurable.\n *\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\n */ \n\n\n\n\n\n\n\nconst BN_1 = BigInt(\"1\");\nconst BN_2 = BigInt(\"2\");\nfunction shuffle(array) {\n    for(let i = array.length - 1; i > 0; i--){\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n}\nfunction stall(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, duration);\n    });\n}\nfunction getTime() {\n    return new Date().getTime();\n}\nfunction stringify(value) {\n    return JSON.stringify(value, (key, value)=>{\n        if (typeof value === \"bigint\") {\n            return {\n                type: \"bigint\",\n                value: value.toString()\n            };\n        }\n        return value;\n    });\n}\n;\nconst defaultConfig = {\n    stallTimeout: 400,\n    priority: 1,\n    weight: 1\n};\nconst defaultState = {\n    blockNumber: -2,\n    requests: 0,\n    lateResponses: 0,\n    errorResponses: 0,\n    outOfSync: -1,\n    unsupportedEvents: 0,\n    rollingDuration: 0,\n    score: 0,\n    _network: null,\n    _updateNumber: null,\n    _totalTime: 0,\n    _lastFatalError: null,\n    _lastFatalErrorTimestamp: 0\n};\nasync function waitForSync(config, blockNumber) {\n    while(config.blockNumber < 0 || config.blockNumber < blockNumber){\n        if (!config._updateNumber) {\n            config._updateNumber = (async ()=>{\n                try {\n                    const blockNumber = await config.provider.getBlockNumber();\n                    if (blockNumber > config.blockNumber) {\n                        config.blockNumber = blockNumber;\n                    }\n                } catch (error) {\n                    config.blockNumber = -2;\n                    config._lastFatalError = error;\n                    config._lastFatalErrorTimestamp = getTime();\n                }\n                config._updateNumber = null;\n            })();\n        }\n        await config._updateNumber;\n        config.outOfSync++;\n        if (config._lastFatalError) {\n            break;\n        }\n    }\n}\nfunction _normalize(value) {\n    if (value == null) {\n        return \"null\";\n    }\n    if (Array.isArray(value)) {\n        return \"[\" + value.map(_normalize).join(\",\") + \"]\";\n    }\n    if (typeof value === \"object\" && typeof value.toJSON === \"function\") {\n        return _normalize(value.toJSON());\n    }\n    switch(typeof value){\n        case \"boolean\":\n        case \"symbol\":\n            return value.toString();\n        case \"bigint\":\n        case \"number\":\n            return BigInt(value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\":\n            {\n                const keys = Object.keys(value);\n                keys.sort();\n                return \"{\" + keys.map((k)=>\"\".concat(JSON.stringify(k), \":\").concat(_normalize(value[k]))).join(\",\") + \"}\";\n            }\n    }\n    console.log(\"Could not serialize\", value);\n    throw new Error(\"Hmm...\");\n}\nfunction normalizeResult(value) {\n    if (\"error\" in value) {\n        const error = value.error;\n        return {\n            tag: _normalize(error),\n            value: error\n        };\n    }\n    const result = value.result;\n    return {\n        tag: _normalize(result),\n        value: result\n    };\n}\n// This strategy picks the highest weight result, as long as the weight is\n// equal to or greater than quorum\nfunction checkQuorum(quorum, results) {\n    const tally = new Map();\n    for (const { value, tag, weight } of results){\n        const t = tally.get(tag) || {\n            value,\n            weight: 0\n        };\n        t.weight += weight;\n        tally.set(tag, t);\n    }\n    let best = null;\n    for (const r of tally.values()){\n        if (r.weight >= quorum && (!best || r.weight > best.weight)) {\n            best = r;\n        }\n    }\n    if (best) {\n        return best.value;\n    }\n    return undefined;\n}\nfunction getMedian(quorum, results) {\n    let resultWeight = 0;\n    const errorMap = new Map();\n    let bestError = null;\n    const values = [];\n    for (const { value, tag, weight } of results){\n        if (value instanceof Error) {\n            const e = errorMap.get(tag) || {\n                value,\n                weight: 0\n            };\n            e.weight += weight;\n            errorMap.set(tag, e);\n            if (bestError == null || e.weight > bestError.weight) {\n                bestError = e;\n            }\n        } else {\n            values.push(BigInt(value));\n            resultWeight += weight;\n        }\n    }\n    if (resultWeight < quorum) {\n        // We have quorum for an error\n        if (bestError && bestError.weight >= quorum) {\n            return bestError.value;\n        }\n        // We do not have quorum for a result\n        return undefined;\n    }\n    // Get the sorted values\n    values.sort((a, b)=>a < b ? -1 : b > a ? 1 : 0);\n    const mid = Math.floor(values.length / 2);\n    // Odd-length; take the middle value\n    if (values.length % 2) {\n        return values[mid];\n    }\n    // Even length; take the ceiling of the mean of the center two values\n    return (values[mid - 1] + values[mid] + BN_1) / BN_2;\n}\nfunction getAnyResult(quorum, results) {\n    // If any value or error meets quorum, that is our preferred result\n    const result = checkQuorum(quorum, results);\n    if (result !== undefined) {\n        return result;\n    }\n    // Otherwise, do we have any result?\n    for (const r of results){\n        if (r.value) {\n            return r.value;\n        }\n    }\n    // Nope!\n    return undefined;\n}\nfunction getFuzzyMode(quorum, results) {\n    if (quorum === 1) {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(getMedian(quorum, results), \"%internal\");\n    }\n    const tally = new Map();\n    const add = (result, weight)=>{\n        const t = tally.get(result) || {\n            result,\n            weight: 0\n        };\n        t.weight += weight;\n        tally.set(result, t);\n    };\n    for (const { weight, value } of results){\n        const r = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(value);\n        add(r - 1, weight);\n        add(r, weight);\n        add(r + 1, weight);\n    }\n    let bestWeight = 0;\n    let bestResult = undefined;\n    for (const { weight, result } of tally.values()){\n        // Use this result, if this result meets quorum and has either:\n        // - a better weight\n        // - or equal weight, but the result is larger\n        if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {\n            bestWeight = weight;\n            bestResult = result;\n        }\n    }\n    return bestResult;\n}\nvar _configs = /*#__PURE__*/ new WeakMap(), _height = /*#__PURE__*/ new WeakMap(), _initialSyncPromise = /*#__PURE__*/ new WeakMap(), // Grab the next (random) config that is not already part of\n// the running set\n_getNextConfig = /*#__PURE__*/ new WeakSet(), // Adds a new runner (if available) to running.\n_addRunner = /*#__PURE__*/ new WeakSet(), _initialSync = /*#__PURE__*/ new WeakSet(), _checkQuorum = /*#__PURE__*/ new WeakSet(), _waitForQuorum = /*#__PURE__*/ new WeakSet();\n/**\n *  A **FallbackProvider** manages several [[Providers]] providing\n *  resilience by switching between slow or misbehaving nodes, security\n *  by requiring multiple backends to aggree and performance by allowing\n *  faster backends to respond earlier.\n *\n */ class FallbackProvider extends _abstract_provider_js__WEBPACK_IMPORTED_MODULE_1__.AbstractProvider {\n    get providerConfigs() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _configs).map((c)=>{\n            const result = Object.assign({}, c);\n            for(const key in result){\n                if (key[0] === \"_\") {\n                    delete result[key];\n                }\n            }\n            return result;\n        });\n    }\n    async _detectNetwork() {\n        return _network_js__WEBPACK_IMPORTED_MODULE_3__.Network.from((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(await this._perform({\n            method: \"chainId\"\n        })));\n    }\n    // @TODO: Add support to select providers to be the event subscriber\n    //_getSubscriber(sub: Subscription): Subscriber {\n    //    throw new Error(\"@TODO\");\n    //}\n    /**\n     *  Transforms a %%req%% into the correct method call on %%provider%%.\n     */ async _translatePerform(provider, req) {\n        switch(req.method){\n            case \"broadcastTransaction\":\n                return await provider.broadcastTransaction(req.signedTransaction);\n            case \"call\":\n                return await provider.call(Object.assign({}, req.transaction, {\n                    blockTag: req.blockTag\n                }));\n            case \"chainId\":\n                return (await provider.getNetwork()).chainId;\n            case \"estimateGas\":\n                return await provider.estimateGas(req.transaction);\n            case \"getBalance\":\n                return await provider.getBalance(req.address, req.blockTag);\n            case \"getBlock\":\n                {\n                    const block = \"blockHash\" in req ? req.blockHash : req.blockTag;\n                    return await provider.getBlock(block, req.includeTransactions);\n                }\n            case \"getBlockNumber\":\n                return await provider.getBlockNumber();\n            case \"getCode\":\n                return await provider.getCode(req.address, req.blockTag);\n            case \"getGasPrice\":\n                return (await provider.getFeeData()).gasPrice;\n            case \"getPriorityFee\":\n                return (await provider.getFeeData()).maxPriorityFeePerGas;\n            case \"getLogs\":\n                return await provider.getLogs(req.filter);\n            case \"getStorage\":\n                return await provider.getStorage(req.address, req.position, req.blockTag);\n            case \"getTransaction\":\n                return await provider.getTransaction(req.hash);\n            case \"getTransactionCount\":\n                return await provider.getTransactionCount(req.address, req.blockTag);\n            case \"getTransactionReceipt\":\n                return await provider.getTransactionReceipt(req.hash);\n            case \"getTransactionResult\":\n                return await provider.getTransactionResult(req.hash);\n        }\n    }\n    async _perform(req) {\n        // Broadcasting a transaction is rare (ish) and already incurs\n        // a cost on the user, so spamming is safe-ish. Just send it to\n        // every backend.\n        if (req.method === \"broadcastTransaction\") {\n            // Once any broadcast provides a positive result, use it. No\n            // need to wait for anyone else\n            const results = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _configs).map((c)=>null);\n            const broadcasts = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _configs).map(async (param, index)=>{\n                let { provider, weight } = param;\n                try {\n                    const result = await provider._perform(req);\n                    results[index] = Object.assign(normalizeResult({\n                        result\n                    }), {\n                        weight\n                    });\n                } catch (error) {\n                    results[index] = Object.assign(normalizeResult({\n                        error\n                    }), {\n                        weight\n                    });\n                }\n            });\n            // As each promise finishes...\n            while(true){\n                // Check for a valid broadcast result\n                const done = results.filter((r)=>r != null);\n                for (const { value } of done){\n                    if (!(value instanceof Error)) {\n                        return value;\n                    }\n                }\n                // Check for a legit broadcast error (one which we cannot\n                // recover from; some nodes may return the following red\n                // herring events:\n                // - alredy seend (UNKNOWN_ERROR)\n                // - NONCE_EXPIRED\n                // - REPLACEMENT_UNDERPRICED\n                const result = checkQuorum(this.quorum, results.filter((r)=>r != null));\n                if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.isError)(result, \"INSUFFICIENT_FUNDS\")) {\n                    throw result;\n                }\n                // Kick off the next provider (if any)\n                const waiting = broadcasts.filter((b, i)=>results[i] == null);\n                if (waiting.length === 0) {\n                    break;\n                }\n                await Promise.race(waiting);\n            }\n            // Use standard quorum results; any result was returned above,\n            // so this will find any error that met quorum if any\n            const result = getAnyResult(this.quorum, results);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(result !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\n                request: \"%sub-requests\",\n                info: {\n                    request: req,\n                    results: results.map(stringify)\n                }\n            });\n            if (result instanceof Error) {\n                throw result;\n            }\n            return result;\n        }\n        await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _initialSync, initialSync).call(this);\n        // Bootstrap enough runners to meet quorum\n        const running = new Set();\n        let inflightQuorum = 0;\n        while(true){\n            const runner = (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _addRunner, addRunner).call(this, running, req);\n            if (runner == null) {\n                break;\n            }\n            inflightQuorum += runner.config.weight;\n            if (inflightQuorum >= this.quorum) {\n                break;\n            }\n        }\n        const result = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _waitForQuorum, waitForQuorum).call(this, running, req);\n        // Track requests sent to a provider that are still\n        // outstanding after quorum has been otherwise found\n        for (const runner of running){\n            if (runner.perform && runner.result == null) {\n                runner.config.lateResponses++;\n            }\n        }\n        return result;\n    }\n    async destroy() {\n        for (const { provider } of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _configs)){\n            provider.destroy();\n        }\n        super.destroy();\n    }\n    /**\n     *  Creates a new **FallbackProvider** with %%providers%% connected to\n     *  %%network%%.\n     *\n     *  If a [[Provider]] is included in %%providers%%, defaults are used\n     *  for the configuration.\n     */ constructor(providers, network, options){\n        super(network, options);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _getNextConfig);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _addRunner);\n        // Initializes the blockNumber and network for each runner and\n        // blocks until initialized\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _initialSync);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _checkQuorum);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _waitForQuorum);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_7__._)(this, _configs, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_7__._)(this, _height, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_7__._)(this, _initialSyncPromise, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_8__._)(this, _configs, providers.map((p)=>{\n            if (p instanceof _abstract_provider_js__WEBPACK_IMPORTED_MODULE_1__.AbstractProvider) {\n                return Object.assign({\n                    provider: p\n                }, defaultConfig, defaultState);\n            } else {\n                return Object.assign({}, defaultConfig, p, defaultState);\n            }\n        }));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_8__._)(this, _height, -2);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_8__._)(this, _initialSyncPromise, null);\n        if (options && options.quorum != null) {\n            this.quorum = options.quorum;\n        } else {\n            this.quorum = Math.ceil((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _configs).reduce((accum, config)=>{\n                accum += config.weight;\n                return accum;\n            }, 0) / 2);\n        }\n        this.eventQuorum = 1;\n        this.eventWorkers = 1;\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(this.quorum <= (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _configs).reduce((a, c)=>a + c.weight, 0), \"quorum exceed provider wieght\", \"quorum\", this.quorum);\n    }\n} //# sourceMappingURL=provider-fallback.js.map\nfunction getNextConfig(running) {\n    // @TODO: Maybe do a check here to favour (heavily) providers that\n    //        do not require waitForSync and disfavour providers that\n    //        seem down-ish or are behaving slowly\n    const configs = Array.from(running).map((r)=>r.config);\n    // Shuffle the states, sorted by priority\n    const allConfigs = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _configs).slice();\n    shuffle(allConfigs);\n    allConfigs.sort((a, b)=>a.priority - b.priority);\n    for (const config of allConfigs){\n        if (config._lastFatalError) {\n            continue;\n        }\n        if (configs.indexOf(config) === -1) {\n            return config;\n        }\n    }\n    return null;\n}\nfunction addRunner(running, req) {\n    const config = (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _getNextConfig, getNextConfig).call(this, running);\n    // No runners available\n    if (config == null) {\n        return null;\n    }\n    // Create a new runner\n    const runner = {\n        config,\n        result: null,\n        didBump: false,\n        perform: null,\n        staller: null\n    };\n    const now = getTime();\n    // Start performing this operation\n    runner.perform = (async ()=>{\n        try {\n            config.requests++;\n            const result = await this._translatePerform(config.provider, req);\n            runner.result = {\n                result\n            };\n        } catch (error) {\n            config.errorResponses++;\n            runner.result = {\n                error\n            };\n        }\n        const dt = getTime() - now;\n        config._totalTime += dt;\n        config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\n        runner.perform = null;\n    })();\n    // Start a staller; when this times out, it's time to force\n    // kicking off another runner because we are taking too long\n    runner.staller = (async ()=>{\n        await stall(config.stallTimeout);\n        runner.staller = null;\n    })();\n    running.add(runner);\n    return runner;\n}\nasync function initialSync() {\n    let initialSync = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _initialSyncPromise);\n    if (!initialSync) {\n        const promises = [];\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _configs).forEach((config)=>{\n            promises.push((async ()=>{\n                await waitForSync(config, 0);\n                if (!config._lastFatalError) {\n                    config._network = await config.provider.getNetwork();\n                }\n            })());\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_8__._)(this, _initialSyncPromise, initialSync = (async ()=>{\n            // Wait for all providers to have a block number and network\n            await Promise.all(promises);\n            // Check all the networks match\n            let chainId = null;\n            for (const config of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _configs)){\n                if (config._lastFatalError) {\n                    continue;\n                }\n                const network = config._network;\n                if (chainId == null) {\n                    chainId = network.chainId;\n                } else if (network.chainId !== chainId) {\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"new FallbackProvider\"\n                    });\n                }\n            }\n        })());\n    }\n    await initialSync;\n}\nasync function checkQuorum1(running, req) {\n    // Get all the result objects\n    const results = [];\n    for (const runner of running){\n        if (runner.result != null) {\n            const { tag, value } = normalizeResult(runner.result);\n            results.push({\n                tag,\n                value,\n                weight: runner.config.weight\n            });\n        }\n    }\n    // Are there enough results to event meet quorum?\n    if (results.reduce((a, r)=>a + r.weight, 0) < this.quorum) {\n        return undefined;\n    }\n    switch(req.method){\n        case \"getBlockNumber\":\n            {\n                // We need to get the bootstrap block height\n                if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _height) === -2) {\n                    (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_8__._)(this, _height, Math.ceil((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(getMedian(this.quorum, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _configs).filter((c)=>!c._lastFatalError).map((c)=>({\n                            value: c.blockNumber,\n                            tag: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(c.blockNumber).toString(),\n                            weight: c.weight\n                        }))))));\n                }\n                // Find the mode across all the providers, allowing for\n                // a little drift between block heights\n                const mode = getFuzzyMode(this.quorum, results);\n                if (mode === undefined) {\n                    return undefined;\n                }\n                if (mode > (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _height)) {\n                    (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_8__._)(this, _height, mode);\n                }\n                return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _height);\n            }\n        case \"getGasPrice\":\n        case \"getPriorityFee\":\n        case \"estimateGas\":\n            return getMedian(this.quorum, results);\n        case \"getBlock\":\n            // Pending blocks are in the mempool and already\n            // quite untrustworthy; just grab anything\n            if (\"blockTag\" in req && req.blockTag === \"pending\") {\n                return getAnyResult(this.quorum, results);\n            }\n            return checkQuorum(this.quorum, results);\n        case \"call\":\n        case \"chainId\":\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorage\":\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n        case \"getLogs\":\n            return checkQuorum(this.quorum, results);\n        case \"broadcastTransaction\":\n            return getAnyResult(this.quorum, results);\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"_perform(\".concat(stringify(req.method), \")\")\n    });\n}\nasync function waitForQuorum(running, req) {\n    if (running.size === 0) {\n        throw new Error(\"no runners?!\");\n    }\n    // Any promises that are interesting to watch for; an expired stall\n    // or a successful perform\n    const interesting = [];\n    let newRunners = 0;\n    for (const runner of running){\n        // No responses, yet; keep an eye on it\n        if (runner.perform) {\n            interesting.push(runner.perform);\n        }\n        // Still stalling...\n        if (runner.staller) {\n            interesting.push(runner.staller);\n            continue;\n        }\n        // This runner has already triggered another runner\n        if (runner.didBump) {\n            continue;\n        }\n        // Got a response (result or error) or stalled; kick off another runner\n        runner.didBump = true;\n        newRunners++;\n    }\n    // Check if we have reached quorum on a result (or error)\n    const value = await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _checkQuorum, checkQuorum1).call(this, running, req);\n    if (value !== undefined) {\n        if (value instanceof Error) {\n            throw value;\n        }\n        return value;\n    }\n    // Add any new runners, because a staller timed out or a result\n    // or error response came in.\n    for(let i = 0; i < newRunners; i++){\n        (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _addRunner, addRunner).call(this, running, req);\n    }\n    // All providers have returned, and we have no result\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\n        request: \"%sub-requests\",\n        info: {\n            request: req,\n            results: Array.from(running).map((r)=>stringify(r.result))\n        }\n    });\n    // Wait for someone to either complete its perform or stall out\n    await Promise.race(interesting);\n    // This is recursive, but at worst case the depth is 2x the\n    // number of providers (each has a perform and a staller)\n    return await (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_5__._)(this, _waitForQuorum, waitForQuorum).call(this, running, req);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3Byb3ZpZGVyLWZhbGxiYWNrLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Q0FLQzs7Ozs7QUFDeUY7QUFDaEM7QUFDbkI7QUFDdkMsTUFBTU8sT0FBT0MsT0FBTztBQUNwQixNQUFNQyxPQUFPRCxPQUFPO0FBQ3BCLFNBQVNFLFFBQVFDLEtBQUs7SUFDbEIsSUFBSyxJQUFJQyxJQUFJRCxNQUFNRSxNQUFNLEdBQUcsR0FBR0QsSUFBSSxHQUFHQSxJQUFLO1FBQ3ZDLE1BQU1FLElBQUlDLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsTUFBTSxLQUFNTCxDQUFBQSxJQUFJO1FBQzFDLE1BQU1NLE1BQU1QLEtBQUssQ0FBQ0MsRUFBRTtRQUNwQkQsS0FBSyxDQUFDQyxFQUFFLEdBQUdELEtBQUssQ0FBQ0csRUFBRTtRQUNuQkgsS0FBSyxDQUFDRyxFQUFFLEdBQUdJO0lBQ2Y7QUFDSjtBQUNBLFNBQVNDLE1BQU1DLFFBQVE7SUFDbkIsT0FBTyxJQUFJQyxRQUFRLENBQUNDO1FBQWNDLFdBQVdELFNBQVNGO0lBQVc7QUFDckU7QUFDQSxTQUFTSTtJQUFZLE9BQU8sSUFBS0MsT0FBUUQsT0FBTztBQUFJO0FBQ3BELFNBQVNFLFVBQVVDLEtBQUs7SUFDcEIsT0FBT0MsS0FBS0YsU0FBUyxDQUFDQyxPQUFPLENBQUNFLEtBQUtGO1FBQy9CLElBQUksT0FBUUEsVUFBVyxVQUFVO1lBQzdCLE9BQU87Z0JBQUVHLE1BQU07Z0JBQVVILE9BQU9BLE1BQU1JLFFBQVE7WUFBRztRQUNyRDtRQUNBLE9BQU9KO0lBQ1g7QUFDSjs7QUFFQSxNQUFNSyxnQkFBZ0I7SUFBRUMsY0FBYztJQUFLQyxVQUFVO0lBQUdDLFFBQVE7QUFBRTtBQUNsRSxNQUFNQyxlQUFlO0lBQ2pCQyxhQUFhLENBQUM7SUFBR0MsVUFBVTtJQUFHQyxlQUFlO0lBQUdDLGdCQUFnQjtJ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QUNBLG1EQUFtRDtRQUNuRCxJQUFJdEIsT0FBT3FCLE9BQU8sRUFBRTtZQUNoQjtRQUNKO1FBQ0EsdUVBQXVFO1FBQ3ZFckIsT0FBT3FCLE9BQU8sR0FBRztRQUNqQlc7SUFDSjtJQUNBLHlEQUF5RDtJQUN6RCxNQUFNdkosUUFBUSxNQUFNLDZFQUFJLEVBQUU0QyxjQUFBQSxtQkFBTixJQUFJLEVBQWN3RSxTQUFTcEM7SUFDL0MsSUFBSWhGLFVBQVV1RCxXQUFXO1FBQ3JCLElBQUl2RCxpQkFBaUJ3QyxPQUFPO1lBQ3hCLE1BQU14QztRQUNWO1FBQ0EsT0FBT0E7SUFDWDtJQUNBLCtEQUErRDtJQUMvRCw2QkFBNkI7SUFDN0IsSUFBSyxJQUFJZixJQUFJLEdBQUdBLElBQUlzSyxZQUFZdEssSUFBSztRQUNqQyw2RUFBSSxFQUFFdUksWUFBQUEsZ0JBQU4sSUFBSSxFQUFZSixTQUFTcEM7SUFDN0I7SUFDQSxxREFBcUQ7SUFDckQzRyx1REFBTUEsQ0FBQ2lMLFlBQVlwSyxNQUFNLEdBQUcsR0FBRyxrQkFBa0IsZ0JBQWdCO1FBQzdEK0gsU0FBUztRQUNUQyxNQUFNO1lBQUVELFNBQVNqQztZQUFLbEMsU0FBU2pCLE1BQU0rQyxJQUFJLENBQUN3QyxTQUFTckYsR0FBRyxDQUFDLENBQUNzQixJQUFNdEQsVUFBVXNELEVBQUVWLE1BQU07UUFBRztJQUN2RjtJQUNBLCtEQUErRDtJQUMvRCxNQUFNakQsUUFBUXNILElBQUksQ0FBQ3NDO0lBQ25CLDJEQUEyRDtJQUMzRCx5REFBeUQ7SUFDekQsT0FBTyxNQUFNLDZFQUFJLEVBQUU3QixnQkFBQUEsb0JBQU4sSUFBSSxFQUFnQkwsU0FBU3BDO0FBQzlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3Byb3ZpZGVyLWZhbGxiYWNrLmpzP2JiMzUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQSAqKkZhbGxiYWNrUHJvdmlkZXIqKiBwcm92aWRlcyByZXNpbGllbmNlLCBzZWN1cml0eSBhbmQgcGVyZm9ybWFuY2VcbiAqICBpbiBhIHdheSB0aGF0IGlzIGN1c3RvbWl6YWJsZSBhbmQgY29uZmlndXJhYmxlLlxuICpcbiAqICBAX3NlY3Rpb246IGFwaS9wcm92aWRlcnMvZmFsbGJhY2stcHJvdmlkZXI6RmFsbGJhY2sgUHJvdmlkZXIgW2Fib3V0LWZhbGxiYWNrLXByb3ZpZGVyXVxuICovXG5pbXBvcnQgeyBhc3NlcnQsIGFzc2VydEFyZ3VtZW50LCBnZXRCaWdJbnQsIGdldE51bWJlciwgaXNFcnJvciB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQWJzdHJhY3RQcm92aWRlciB9IGZyb20gXCIuL2Fic3RyYWN0LXByb3ZpZGVyLmpzXCI7XG5pbXBvcnQgeyBOZXR3b3JrIH0gZnJvbSBcIi4vbmV0d29yay5qc1wiO1xuY29uc3QgQk5fMSA9IEJpZ0ludChcIjFcIik7XG5jb25zdCBCTl8yID0gQmlnSW50KFwiMlwiKTtcbmZ1bmN0aW9uIHNodWZmbGUoYXJyYXkpIHtcbiAgICBmb3IgKGxldCBpID0gYXJyYXkubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xuICAgICAgICBjb25zdCBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XG4gICAgICAgIGNvbnN0IHRtcCA9IGFycmF5W2ldO1xuICAgICAgICBhcnJheVtpXSA9IGFycmF5W2pdO1xuICAgICAgICBhcnJheVtqXSA9IHRtcDtcbiAgICB9XG59XG5mdW5jdGlvbiBzdGFsbChkdXJhdGlvbikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4geyBzZXRUaW1lb3V0KHJlc29sdmUsIGR1cmF0aW9uKTsgfSk7XG59XG5mdW5jdGlvbiBnZXRUaW1lKCkgeyByZXR1cm4gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTsgfVxuZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwiYmlnaW50XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFwiYmlnaW50XCIsIHZhbHVlOiB2YWx1ZS50b1N0cmluZygpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xufVxuO1xuY29uc3QgZGVmYXVsdENvbmZpZyA9IHsgc3RhbGxUaW1lb3V0OiA0MDAsIHByaW9yaXR5OiAxLCB3ZWlnaHQ6IDEgfTtcbmNvbnN0IGRlZmF1bHRTdGF0ZSA9IHtcbiAgICBibG9ja051bWJlcjogLTIsIHJlcXVlc3RzOiAwLCBsYXRlUmVzcG9uc2VzOiAwLCBlcnJvclJlc3BvbnNlczogMCxcbiAgICBvdXRPZlN5bmM6IC0xLCB1bnN1cHBvcnRlZEV2ZW50czogMCwgcm9sbGluZ0R1cmF0aW9uOiAwLCBzY29yZTogMCxcbiAgICBfbmV0d29yazogbnVsbCwgX3VwZGF0ZU51bWJlcjogbnVsbCwgX3RvdGFsVGltZTogMCxcbiAgICBfbGFzdEZhdGFsRXJyb3I6IG51bGwsIF9sYXN0RmF0YWxFcnJvclRpbWVzdGFtcDogMFxufTtcbmFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JTeW5jKGNvbmZpZywgYmxvY2tOdW1iZXIpIHtcbiAgICB3aGlsZSAoY29uZmlnLmJsb2NrTnVtYmVyIDwgMCB8fCBjb25maWcuYmxvY2tOdW1iZXIgPCBibG9ja051bWJlcikge1xuICAgICAgICBpZiAoIWNvbmZpZy5fdXBkYXRlTnVtYmVyKSB7XG4gICAgICAgICAgICBjb25maWcuX3VwZGF0ZU51bWJlciA9IChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmxvY2tOdW1iZXIgPSBhd2FpdCBjb25maWcucHJvdmlkZXIuZ2V0QmxvY2tOdW1iZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrTnVtYmVyID4gY29uZmlnLmJsb2NrTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuYmxvY2tOdW1iZXIgPSBibG9ja051bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLmJsb2NrTnVtYmVyID0gLTI7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fbGFzdEZhdGFsRXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9sYXN0RmF0YWxFcnJvclRpbWVzdGFtcCA9IGdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uZmlnLl91cGRhdGVOdW1iZXIgPSBudWxsO1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBjb25maWcuX3VwZGF0ZU51bWJlcjtcbiAgICAgICAgY29uZmlnLm91dE9mU3luYysrO1xuICAgICAgICBpZiAoY29uZmlnLl9sYXN0RmF0YWxFcnJvcikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBfbm9ybWFsaXplKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIFwiW1wiICsgKHZhbHVlLm1hcChfbm9ybWFsaXplKSkuam9pbihcIixcIikgKyBcIl1cIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiAodmFsdWUudG9KU09OKSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBfbm9ybWFsaXplKHZhbHVlLnRvSlNPTigpKTtcbiAgICB9XG4gICAgc3dpdGNoICh0eXBlb2YgKHZhbHVlKSkge1xuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICByZXR1cm4gQmlnSW50KHZhbHVlKS50b1N0cmluZygpO1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICBjYXNlIFwib2JqZWN0XCI6IHtcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gICAgICAgICAgICBrZXlzLnNvcnQoKTtcbiAgICAgICAgICAgIHJldHVybiBcIntcIiArIGtleXMubWFwKChrKSA9PiBgJHtKU09OLnN0cmluZ2lmeShrKX06JHtfbm9ybWFsaXplKHZhbHVlW2tdKX1gKS5qb2luKFwiLFwiKSArIFwifVwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwiQ291bGQgbm90IHNlcmlhbGl6ZVwiLCB2YWx1ZSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSG1tLi4uXCIpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUmVzdWx0KHZhbHVlKSB7XG4gICAgaWYgKFwiZXJyb3JcIiBpbiB2YWx1ZSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IHZhbHVlLmVycm9yO1xuICAgICAgICByZXR1cm4geyB0YWc6IF9ub3JtYWxpemUoZXJyb3IpLCB2YWx1ZTogZXJyb3IgfTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gdmFsdWUucmVzdWx0O1xuICAgIHJldHVybiB7IHRhZzogX25vcm1hbGl6ZShyZXN1bHQpLCB2YWx1ZTogcmVzdWx0IH07XG59XG4vLyBUaGlzIHN0cmF0ZWd5IHBpY2tzIHRoZSBoaWdoZXN0IHdlaWdodCByZXN1bHQsIGFzIGxvbmcgYXMgdGhlIHdlaWdodCBpc1xuLy8gZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIHF1b3J1bVxuZnVuY3Rpb24gY2hlY2tRdW9ydW0ocXVvcnVtLCByZXN1bHRzKSB7XG4gICAgY29uc3QgdGFsbHkgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCB7IHZhbHVlLCB0YWcsIHdlaWdodCB9IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgY29uc3QgdCA9IHRhbGx5LmdldCh0YWcpIHx8IHsgdmFsdWUsIHdlaWdodDogMCB9O1xuICAgICAgICB0LndlaWdodCArPSB3ZWlnaHQ7XG4gICAgICAgIHRhbGx5LnNldCh0YWcsIHQpO1xuICAgIH1cbiAgICBsZXQgYmVzdCA9IG51bGw7XG4gICAgZm9yIChjb25zdCByIG9mIHRhbGx5LnZhbHVlcygpKSB7XG4gICAgICAgIGlmIChyLndlaWdodCA+PSBxdW9ydW0gJiYgKCFiZXN0IHx8IHIud2VpZ2h0ID4gYmVzdC53ZWlnaHQpKSB7XG4gICAgICAgICAgICBiZXN0ID0gcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYmVzdCkge1xuICAgICAgICByZXR1cm4gYmVzdC52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGdldE1lZGlhbihxdW9ydW0sIHJlc3VsdHMpIHtcbiAgICBsZXQgcmVzdWx0V2VpZ2h0ID0gMDtcbiAgICBjb25zdCBlcnJvck1hcCA9IG5ldyBNYXAoKTtcbiAgICBsZXQgYmVzdEVycm9yID0gbnVsbDtcbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHsgdmFsdWUsIHRhZywgd2VpZ2h0IH0gb2YgcmVzdWx0cykge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgY29uc3QgZSA9IGVycm9yTWFwLmdldCh0YWcpIHx8IHsgdmFsdWUsIHdlaWdodDogMCB9O1xuICAgICAgICAgICAgZS53ZWlnaHQgKz0gd2VpZ2h0O1xuICAgICAgICAgICAgZXJyb3JNYXAuc2V0KHRhZywgZSk7XG4gICAgICAgICAgICBpZiAoYmVzdEVycm9yID09IG51bGwgfHwgZS53ZWlnaHQgPiBiZXN0RXJyb3Iud2VpZ2h0KSB7XG4gICAgICAgICAgICAgICAgYmVzdEVycm9yID0gZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKEJpZ0ludCh2YWx1ZSkpO1xuICAgICAgICAgICAgcmVzdWx0V2VpZ2h0ICs9IHdlaWdodDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVzdWx0V2VpZ2h0IDwgcXVvcnVtKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgcXVvcnVtIGZvciBhbiBlcnJvclxuICAgICAgICBpZiAoYmVzdEVycm9yICYmIGJlc3RFcnJvci53ZWlnaHQgPj0gcXVvcnVtKSB7XG4gICAgICAgICAgICByZXR1cm4gYmVzdEVycm9yLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGRvIG5vdCBoYXZlIHF1b3J1bSBmb3IgYSByZXN1bHRcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gR2V0IHRoZSBzb3J0ZWQgdmFsdWVzXG4gICAgdmFsdWVzLnNvcnQoKGEsIGIpID0+ICgoYSA8IGIpID8gLTEgOiAoYiA+IGEpID8gMSA6IDApKTtcbiAgICBjb25zdCBtaWQgPSBNYXRoLmZsb29yKHZhbHVlcy5sZW5ndGggLyAyKTtcbiAgICAvLyBPZGQtbGVuZ3RoOyB0YWtlIHRoZSBtaWRkbGUgdmFsdWVcbiAgICBpZiAodmFsdWVzLmxlbmd0aCAlIDIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlc1ttaWRdO1xuICAgIH1cbiAgICAvLyBFdmVuIGxlbmd0aDsgdGFrZSB0aGUgY2VpbGluZyBvZiB0aGUgbWVhbiBvZiB0aGUgY2VudGVyIHR3byB2YWx1ZXNcbiAgICByZXR1cm4gKHZhbHVlc1ttaWQgLSAxXSArIHZhbHVlc1ttaWRdICsgQk5fMSkgLyBCTl8yO1xufVxuZnVuY3Rpb24gZ2V0QW55UmVzdWx0KHF1b3J1bSwgcmVzdWx0cykge1xuICAgIC8vIElmIGFueSB2YWx1ZSBvciBlcnJvciBtZWV0cyBxdW9ydW0sIHRoYXQgaXMgb3VyIHByZWZlcnJlZCByZXN1bHRcbiAgICBjb25zdCByZXN1bHQgPSBjaGVja1F1b3J1bShxdW9ydW0sIHJlc3VsdHMpO1xuICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UsIGRvIHdlIGhhdmUgYW55IHJlc3VsdD9cbiAgICBmb3IgKGNvbnN0IHIgb2YgcmVzdWx0cykge1xuICAgICAgICBpZiAoci52YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHIudmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gTm9wZSFcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZ2V0RnV6enlNb2RlKHF1b3J1bSwgcmVzdWx0cykge1xuICAgIGlmIChxdW9ydW0gPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGdldE51bWJlcihnZXRNZWRpYW4ocXVvcnVtLCByZXN1bHRzKSwgXCIlaW50ZXJuYWxcIik7XG4gICAgfVxuICAgIGNvbnN0IHRhbGx5ID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGFkZCA9IChyZXN1bHQsIHdlaWdodCkgPT4ge1xuICAgICAgICBjb25zdCB0ID0gdGFsbHkuZ2V0KHJlc3VsdCkgfHwgeyByZXN1bHQsIHdlaWdodDogMCB9O1xuICAgICAgICB0LndlaWdodCArPSB3ZWlnaHQ7XG4gICAgICAgIHRhbGx5LnNldChyZXN1bHQsIHQpO1xuICAgIH07XG4gICAgZm9yIChjb25zdCB7IHdlaWdodCwgdmFsdWUgfSBvZiByZXN1bHRzKSB7XG4gICAgICAgIGNvbnN0IHIgPSBnZXROdW1iZXIodmFsdWUpO1xuICAgICAgICBhZGQociAtIDEsIHdlaWdodCk7XG4gICAgICAgIGFkZChyLCB3ZWlnaHQpO1xuICAgICAgICBhZGQociArIDEsIHdlaWdodCk7XG4gICAgfVxuICAgIGxldCBiZXN0V2VpZ2h0ID0gMDtcbiAgICBsZXQgYmVzdFJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICBmb3IgKGNvbnN0IHsgd2VpZ2h0LCByZXN1bHQgfSBvZiB0YWxseS52YWx1ZXMoKSkge1xuICAgICAgICAvLyBVc2UgdGhpcyByZXN1bHQsIGlmIHRoaXMgcmVzdWx0IG1lZXRzIHF1b3J1bSBhbmQgaGFzIGVpdGhlcjpcbiAgICAgICAgLy8gLSBhIGJldHRlciB3ZWlnaHRcbiAgICAgICAgLy8gLSBvciBlcXVhbCB3ZWlnaHQsIGJ1dCB0aGUgcmVzdWx0IGlzIGxhcmdlclxuICAgICAgICBpZiAod2VpZ2h0ID49IHF1b3J1bSAmJiAod2VpZ2h0ID4gYmVzdFdlaWdodCB8fCAoYmVzdFJlc3VsdCAhPSBudWxsICYmIHdlaWdodCA9PT0gYmVzdFdlaWdodCAmJiByZXN1bHQgPiBiZXN0UmVzdWx0KSkpIHtcbiAgICAgICAgICAgIGJlc3RXZWlnaHQgPSB3ZWlnaHQ7XG4gICAgICAgICAgICBiZXN0UmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiZXN0UmVzdWx0O1xufVxuLyoqXG4gKiAgQSAqKkZhbGxiYWNrUHJvdmlkZXIqKiBtYW5hZ2VzIHNldmVyYWwgW1tQcm92aWRlcnNdXSBwcm92aWRpbmdcbiAqICByZXNpbGllbmNlIGJ5IHN3aXRjaGluZyBiZXR3ZWVuIHNsb3cgb3IgbWlzYmVoYXZpbmcgbm9kZXMsIHNlY3VyaXR5XG4gKiAgYnkgcmVxdWlyaW5nIG11bHRpcGxlIGJhY2tlbmRzIHRvIGFnZ3JlZSBhbmQgcGVyZm9ybWFuY2UgYnkgYWxsb3dpbmdcbiAqICBmYXN0ZXIgYmFja2VuZHMgdG8gcmVzcG9uZCBlYXJsaWVyLlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIEZhbGxiYWNrUHJvdmlkZXIgZXh0ZW5kcyBBYnN0cmFjdFByb3ZpZGVyIHtcbiAgICAvKipcbiAgICAgKiAgVGhlIG51bWJlciBvZiBiYWNrZW5kcyB0aGF0IG11c3QgYWdyZWUgb24gYSB2YWx1ZSBiZWZvcmUgaXQgaXNcbiAgICAgKiAgYWNjcGV0ZWQuXG4gICAgICovXG4gICAgcXVvcnVtO1xuICAgIC8qKlxuICAgICAqICBAX2lnbm9yZTpcbiAgICAgKi9cbiAgICBldmVudFF1b3J1bTtcbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgZXZlbnRXb3JrZXJzO1xuICAgICNjb25maWdzO1xuICAgICNoZWlnaHQ7XG4gICAgI2luaXRpYWxTeW5jUHJvbWlzZTtcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKkZhbGxiYWNrUHJvdmlkZXIqKiB3aXRoICUlcHJvdmlkZXJzJSUgY29ubmVjdGVkIHRvXG4gICAgICogICUlbmV0d29yayUlLlxuICAgICAqXG4gICAgICogIElmIGEgW1tQcm92aWRlcl1dIGlzIGluY2x1ZGVkIGluICUlcHJvdmlkZXJzJSUsIGRlZmF1bHRzIGFyZSB1c2VkXG4gICAgICogIGZvciB0aGUgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlcnMsIG5ldHdvcmssIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIobmV0d29yaywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuI2NvbmZpZ3MgPSBwcm92aWRlcnMubWFwKChwKSA9PiB7XG4gICAgICAgICAgICBpZiAocCBpbnN0YW5jZW9mIEFic3RyYWN0UHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IHByb3ZpZGVyOiBwIH0sIGRlZmF1bHRDb25maWcsIGRlZmF1bHRTdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdENvbmZpZywgcCwgZGVmYXVsdFN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI2hlaWdodCA9IC0yO1xuICAgICAgICB0aGlzLiNpbml0aWFsU3luY1Byb21pc2UgPSBudWxsO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnF1b3J1bSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnF1b3J1bSA9IG9wdGlvbnMucXVvcnVtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5xdW9ydW0gPSBNYXRoLmNlaWwodGhpcy4jY29uZmlncy5yZWR1Y2UoKGFjY3VtLCBjb25maWcpID0+IHtcbiAgICAgICAgICAgICAgICBhY2N1bSArPSBjb25maWcud2VpZ2h0O1xuICAgICAgICAgICAgICAgIHJldHVybiBhY2N1bTtcbiAgICAgICAgICAgIH0sIDApIC8gMik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ldmVudFF1b3J1bSA9IDE7XG4gICAgICAgIHRoaXMuZXZlbnRXb3JrZXJzID0gMTtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQodGhpcy5xdW9ydW0gPD0gdGhpcy4jY29uZmlncy5yZWR1Y2UoKGEsIGMpID0+IChhICsgYy53ZWlnaHQpLCAwKSwgXCJxdW9ydW0gZXhjZWVkIHByb3ZpZGVyIHdpZWdodFwiLCBcInF1b3J1bVwiLCB0aGlzLnF1b3J1bSk7XG4gICAgfVxuICAgIGdldCBwcm92aWRlckNvbmZpZ3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNjb25maWdzLm1hcCgoYykgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbih7fSwgYyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5WzBdID09PSBcIl9cIikge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzdWx0W2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIF9kZXRlY3ROZXR3b3JrKCkge1xuICAgICAgICByZXR1cm4gTmV0d29yay5mcm9tKGdldEJpZ0ludChhd2FpdCB0aGlzLl9wZXJmb3JtKHsgbWV0aG9kOiBcImNoYWluSWRcIiB9KSkpO1xuICAgIH1cbiAgICAvLyBAVE9ETzogQWRkIHN1cHBvcnQgdG8gc2VsZWN0IHByb3ZpZGVycyB0byBiZSB0aGUgZXZlbnQgc3Vic2NyaWJlclxuICAgIC8vX2dldFN1YnNjcmliZXIoc3ViOiBTdWJzY3JpcHRpb24pOiBTdWJzY3JpYmVyIHtcbiAgICAvLyAgICB0aHJvdyBuZXcgRXJyb3IoXCJAVE9ET1wiKTtcbiAgICAvL31cbiAgICAvKipcbiAgICAgKiAgVHJhbnNmb3JtcyBhICUlcmVxJSUgaW50byB0aGUgY29ycmVjdCBtZXRob2QgY2FsbCBvbiAlJXByb3ZpZGVyJSUuXG4gICAgICovXG4gICAgYXN5bmMgX3RyYW5zbGF0ZVBlcmZvcm0ocHJvdmlkZXIsIHJlcSkge1xuICAgICAgICBzd2l0Y2ggKHJlcS5tZXRob2QpIHtcbiAgICAgICAgICAgIGNhc2UgXCJicm9hZGNhc3RUcmFuc2FjdGlvblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBwcm92aWRlci5icm9hZGNhc3RUcmFuc2FjdGlvbihyZXEuc2lnbmVkVHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgY2FzZSBcImNhbGxcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgcHJvdmlkZXIuY2FsbChPYmplY3QuYXNzaWduKHt9LCByZXEudHJhbnNhY3Rpb24sIHsgYmxvY2tUYWc6IHJlcS5ibG9ja1RhZyB9KSk7XG4gICAgICAgICAgICBjYXNlIFwiY2hhaW5JZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAoYXdhaXQgcHJvdmlkZXIuZ2V0TmV0d29yaygpKS5jaGFpbklkO1xuICAgICAgICAgICAgY2FzZSBcImVzdGltYXRlR2FzXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLmVzdGltYXRlR2FzKHJlcS50cmFuc2FjdGlvbik7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0QmFsYW5jZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBwcm92aWRlci5nZXRCYWxhbmNlKHJlcS5hZGRyZXNzLCByZXEuYmxvY2tUYWcpO1xuICAgICAgICAgICAgY2FzZSBcImdldEJsb2NrXCI6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBibG9jayA9IChcImJsb2NrSGFzaFwiIGluIHJlcSkgPyByZXEuYmxvY2tIYXNoIDogcmVxLmJsb2NrVGFnO1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBwcm92aWRlci5nZXRCbG9jayhibG9jaywgcmVxLmluY2x1ZGVUcmFuc2FjdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImdldEJsb2NrTnVtYmVyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLmdldEJsb2NrTnVtYmVyKCk7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0Q29kZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBwcm92aWRlci5nZXRDb2RlKHJlcS5hZGRyZXNzLCByZXEuYmxvY2tUYWcpO1xuICAgICAgICAgICAgY2FzZSBcImdldEdhc1ByaWNlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhd2FpdCBwcm92aWRlci5nZXRGZWVEYXRhKCkpLmdhc1ByaWNlO1xuICAgICAgICAgICAgY2FzZSBcImdldFByaW9yaXR5RmVlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhd2FpdCBwcm92aWRlci5nZXRGZWVEYXRhKCkpLm1heFByaW9yaXR5RmVlUGVyR2FzO1xuICAgICAgICAgICAgY2FzZSBcImdldExvZ3NcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgcHJvdmlkZXIuZ2V0TG9ncyhyZXEuZmlsdGVyKTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRTdG9yYWdlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLmdldFN0b3JhZ2UocmVxLmFkZHJlc3MsIHJlcS5wb3NpdGlvbiwgcmVxLmJsb2NrVGFnKTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRUcmFuc2FjdGlvblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBwcm92aWRlci5nZXRUcmFuc2FjdGlvbihyZXEuaGFzaCk7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0VHJhbnNhY3Rpb25Db3VudFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBwcm92aWRlci5nZXRUcmFuc2FjdGlvbkNvdW50KHJlcS5hZGRyZXNzLCByZXEuYmxvY2tUYWcpO1xuICAgICAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uUmVjZWlwdFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBwcm92aWRlci5nZXRUcmFuc2FjdGlvblJlY2VpcHQocmVxLmhhc2gpO1xuICAgICAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uUmVzdWx0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLmdldFRyYW5zYWN0aW9uUmVzdWx0KHJlcS5oYXNoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBHcmFiIHRoZSBuZXh0IChyYW5kb20pIGNvbmZpZyB0aGF0IGlzIG5vdCBhbHJlYWR5IHBhcnQgb2ZcbiAgICAvLyB0aGUgcnVubmluZyBzZXRcbiAgICAjZ2V0TmV4dENvbmZpZyhydW5uaW5nKSB7XG4gICAgICAgIC8vIEBUT0RPOiBNYXliZSBkbyBhIGNoZWNrIGhlcmUgdG8gZmF2b3VyIChoZWF2aWx5KSBwcm92aWRlcnMgdGhhdFxuICAgICAgICAvLyAgICAgICAgZG8gbm90IHJlcXVpcmUgd2FpdEZvclN5bmMgYW5kIGRpc2Zhdm91ciBwcm92aWRlcnMgdGhhdFxuICAgICAgICAvLyAgICAgICAgc2VlbSBkb3duLWlzaCBvciBhcmUgYmVoYXZpbmcgc2xvd2x5XG4gICAgICAgIGNvbnN0IGNvbmZpZ3MgPSBBcnJheS5mcm9tKHJ1bm5pbmcpLm1hcCgocikgPT4gci5jb25maWcpO1xuICAgICAgICAvLyBTaHVmZmxlIHRoZSBzdGF0ZXMsIHNvcnRlZCBieSBwcmlvcml0eVxuICAgICAgICBjb25zdCBhbGxDb25maWdzID0gdGhpcy4jY29uZmlncy5zbGljZSgpO1xuICAgICAgICBzaHVmZmxlKGFsbENvbmZpZ3MpO1xuICAgICAgICBhbGxDb25maWdzLnNvcnQoKGEsIGIpID0+IChhLnByaW9yaXR5IC0gYi5wcmlvcml0eSkpO1xuICAgICAgICBmb3IgKGNvbnN0IGNvbmZpZyBvZiBhbGxDb25maWdzKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLl9sYXN0RmF0YWxFcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZ3MuaW5kZXhPZihjb25maWcpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIEFkZHMgYSBuZXcgcnVubmVyIChpZiBhdmFpbGFibGUpIHRvIHJ1bm5pbmcuXG4gICAgI2FkZFJ1bm5lcihydW5uaW5nLCByZXEpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy4jZ2V0TmV4dENvbmZpZyhydW5uaW5nKTtcbiAgICAgICAgLy8gTm8gcnVubmVycyBhdmFpbGFibGVcbiAgICAgICAgaWYgKGNvbmZpZyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgcnVubmVyXG4gICAgICAgIGNvbnN0IHJ1bm5lciA9IHtcbiAgICAgICAgICAgIGNvbmZpZywgcmVzdWx0OiBudWxsLCBkaWRCdW1wOiBmYWxzZSxcbiAgICAgICAgICAgIHBlcmZvcm06IG51bGwsIHN0YWxsZXI6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgbm93ID0gZ2V0VGltZSgpO1xuICAgICAgICAvLyBTdGFydCBwZXJmb3JtaW5nIHRoaXMgb3BlcmF0aW9uXG4gICAgICAgIHJ1bm5lci5wZXJmb3JtID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLnJlcXVlc3RzKys7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fdHJhbnNsYXRlUGVyZm9ybShjb25maWcucHJvdmlkZXIsIHJlcSk7XG4gICAgICAgICAgICAgICAgcnVubmVyLnJlc3VsdCA9IHsgcmVzdWx0IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuZXJyb3JSZXNwb25zZXMrKztcbiAgICAgICAgICAgICAgICBydW5uZXIucmVzdWx0ID0geyBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZHQgPSAoZ2V0VGltZSgpIC0gbm93KTtcbiAgICAgICAgICAgIGNvbmZpZy5fdG90YWxUaW1lICs9IGR0O1xuICAgICAgICAgICAgY29uZmlnLnJvbGxpbmdEdXJhdGlvbiA9IDAuOTUgKiBjb25maWcucm9sbGluZ0R1cmF0aW9uICsgMC4wNSAqIGR0O1xuICAgICAgICAgICAgcnVubmVyLnBlcmZvcm0gPSBudWxsO1xuICAgICAgICB9KSgpO1xuICAgICAgICAvLyBTdGFydCBhIHN0YWxsZXI7IHdoZW4gdGhpcyB0aW1lcyBvdXQsIGl0J3MgdGltZSB0byBmb3JjZVxuICAgICAgICAvLyBraWNraW5nIG9mZiBhbm90aGVyIHJ1bm5lciBiZWNhdXNlIHdlIGFyZSB0YWtpbmcgdG9vIGxvbmdcbiAgICAgICAgcnVubmVyLnN0YWxsZXIgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgc3RhbGwoY29uZmlnLnN0YWxsVGltZW91dCk7XG4gICAgICAgICAgICBydW5uZXIuc3RhbGxlciA9IG51bGw7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHJ1bm5pbmcuYWRkKHJ1bm5lcik7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemVzIHRoZSBibG9ja051bWJlciBhbmQgbmV0d29yayBmb3IgZWFjaCBydW5uZXIgYW5kXG4gICAgLy8gYmxvY2tzIHVudGlsIGluaXRpYWxpemVkXG4gICAgYXN5bmMgI2luaXRpYWxTeW5jKCkge1xuICAgICAgICBsZXQgaW5pdGlhbFN5bmMgPSB0aGlzLiNpbml0aWFsU3luY1Byb21pc2U7XG4gICAgICAgIGlmICghaW5pdGlhbFN5bmMpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgICAgICAgICB0aGlzLiNjb25maWdzLmZvckVhY2goKGNvbmZpZykgPT4ge1xuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgd2FpdEZvclN5bmMoY29uZmlnLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25maWcuX2xhc3RGYXRhbEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuX25ldHdvcmsgPSBhd2FpdCBjb25maWcucHJvdmlkZXIuZ2V0TmV0d29yaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuI2luaXRpYWxTeW5jUHJvbWlzZSA9IGluaXRpYWxTeW5jID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBXYWl0IGZvciBhbGwgcHJvdmlkZXJzIHRvIGhhdmUgYSBibG9jayBudW1iZXIgYW5kIG5ldHdvcmtcbiAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgYWxsIHRoZSBuZXR3b3JrcyBtYXRjaFxuICAgICAgICAgICAgICAgIGxldCBjaGFpbklkID0gbnVsbDtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNvbmZpZyBvZiB0aGlzLiNjb25maWdzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcuX2xhc3RGYXRhbEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXR3b3JrID0gKGNvbmZpZy5fbmV0d29yayk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFpbklkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluSWQgPSBuZXR3b3JrLmNoYWluSWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobmV0d29yay5jaGFpbklkICE9PSBjaGFpbklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnQoZmFsc2UsIFwiY2Fubm90IG1peCBwcm92aWRlcnMgb24gZGlmZmVyZW50IG5ldHdvcmtzXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwibmV3IEZhbGxiYWNrUHJvdmlkZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGluaXRpYWxTeW5jO1xuICAgIH1cbiAgICBhc3luYyAjY2hlY2tRdW9ydW0ocnVubmluZywgcmVxKSB7XG4gICAgICAgIC8vIEdldCBhbGwgdGhlIHJlc3VsdCBvYmplY3RzXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBydW5uZXIgb2YgcnVubmluZykge1xuICAgICAgICAgICAgaWYgKHJ1bm5lci5yZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdGFnLCB2YWx1ZSB9ID0gbm9ybWFsaXplUmVzdWx0KHJ1bm5lci5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7IHRhZywgdmFsdWUsIHdlaWdodDogcnVubmVyLmNvbmZpZy53ZWlnaHQgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXJlIHRoZXJlIGVub3VnaCByZXN1bHRzIHRvIGV2ZW50IG1lZXQgcXVvcnVtP1xuICAgICAgICBpZiAocmVzdWx0cy5yZWR1Y2UoKGEsIHIpID0+IChhICsgci53ZWlnaHQpLCAwKSA8IHRoaXMucXVvcnVtKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAocmVxLm1ldGhvZCkge1xuICAgICAgICAgICAgY2FzZSBcImdldEJsb2NrTnVtYmVyXCI6IHtcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGdldCB0aGUgYm9vdHN0cmFwIGJsb2NrIGhlaWdodFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLiNoZWlnaHQgPT09IC0yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2hlaWdodCA9IE1hdGguY2VpbChnZXROdW1iZXIoZ2V0TWVkaWFuKHRoaXMucXVvcnVtLCB0aGlzLiNjb25maWdzLmZpbHRlcigoYykgPT4gKCFjLl9sYXN0RmF0YWxFcnJvcikpLm1hcCgoYykgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjLmJsb2NrTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiBnZXROdW1iZXIoYy5ibG9ja051bWJlcikudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodDogYy53ZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgfSkpKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBtb2RlIGFjcm9zcyBhbGwgdGhlIHByb3ZpZGVycywgYWxsb3dpbmcgZm9yXG4gICAgICAgICAgICAgICAgLy8gYSBsaXR0bGUgZHJpZnQgYmV0d2VlbiBibG9jayBoZWlnaHRzXG4gICAgICAgICAgICAgICAgY29uc3QgbW9kZSA9IGdldEZ1enp5TW9kZSh0aGlzLnF1b3J1bSwgcmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgaWYgKG1vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobW9kZSA+IHRoaXMuI2hlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiNoZWlnaHQgPSBtb2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImdldEdhc1ByaWNlXCI6XG4gICAgICAgICAgICBjYXNlIFwiZ2V0UHJpb3JpdHlGZWVcIjpcbiAgICAgICAgICAgIGNhc2UgXCJlc3RpbWF0ZUdhc1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRNZWRpYW4odGhpcy5xdW9ydW0sIHJlc3VsdHMpO1xuICAgICAgICAgICAgY2FzZSBcImdldEJsb2NrXCI6XG4gICAgICAgICAgICAgICAgLy8gUGVuZGluZyBibG9ja3MgYXJlIGluIHRoZSBtZW1wb29sIGFuZCBhbHJlYWR5XG4gICAgICAgICAgICAgICAgLy8gcXVpdGUgdW50cnVzdHdvcnRoeTsganVzdCBncmFiIGFueXRoaW5nXG4gICAgICAgICAgICAgICAgaWYgKFwiYmxvY2tUYWdcIiBpbiByZXEgJiYgcmVxLmJsb2NrVGFnID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QW55UmVzdWx0KHRoaXMucXVvcnVtLCByZXN1bHRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrUXVvcnVtKHRoaXMucXVvcnVtLCByZXN1bHRzKTtcbiAgICAgICAgICAgIGNhc2UgXCJjYWxsXCI6XG4gICAgICAgICAgICBjYXNlIFwiY2hhaW5JZFwiOlxuICAgICAgICAgICAgY2FzZSBcImdldEJhbGFuY2VcIjpcbiAgICAgICAgICAgIGNhc2UgXCJnZXRUcmFuc2FjdGlvbkNvdW50XCI6XG4gICAgICAgICAgICBjYXNlIFwiZ2V0Q29kZVwiOlxuICAgICAgICAgICAgY2FzZSBcImdldFN0b3JhZ2VcIjpcbiAgICAgICAgICAgIGNhc2UgXCJnZXRUcmFuc2FjdGlvblwiOlxuICAgICAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uUmVjZWlwdFwiOlxuICAgICAgICAgICAgY2FzZSBcImdldExvZ3NcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hlY2tRdW9ydW0odGhpcy5xdW9ydW0sIHJlc3VsdHMpO1xuICAgICAgICAgICAgY2FzZSBcImJyb2FkY2FzdFRyYW5zYWN0aW9uXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEFueVJlc3VsdCh0aGlzLnF1b3J1bSwgcmVzdWx0cyk7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0KGZhbHNlLCBcInVuc3VwcG9ydGVkIG1ldGhvZFwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XG4gICAgICAgICAgICBvcGVyYXRpb246IGBfcGVyZm9ybSgke3N0cmluZ2lmeShyZXEubWV0aG9kKX0pYFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgI3dhaXRGb3JRdW9ydW0ocnVubmluZywgcmVxKSB7XG4gICAgICAgIGlmIChydW5uaW5nLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vIHJ1bm5lcnM/IVwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbnkgcHJvbWlzZXMgdGhhdCBhcmUgaW50ZXJlc3RpbmcgdG8gd2F0Y2ggZm9yOyBhbiBleHBpcmVkIHN0YWxsXG4gICAgICAgIC8vIG9yIGEgc3VjY2Vzc2Z1bCBwZXJmb3JtXG4gICAgICAgIGNvbnN0IGludGVyZXN0aW5nID0gW107XG4gICAgICAgIGxldCBuZXdSdW5uZXJzID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBydW5uZXIgb2YgcnVubmluZykge1xuICAgICAgICAgICAgLy8gTm8gcmVzcG9uc2VzLCB5ZXQ7IGtlZXAgYW4gZXllIG9uIGl0XG4gICAgICAgICAgICBpZiAocnVubmVyLnBlcmZvcm0pIHtcbiAgICAgICAgICAgICAgICBpbnRlcmVzdGluZy5wdXNoKHJ1bm5lci5wZXJmb3JtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFN0aWxsIHN0YWxsaW5nLi4uXG4gICAgICAgICAgICBpZiAocnVubmVyLnN0YWxsZXIpIHtcbiAgICAgICAgICAgICAgICBpbnRlcmVzdGluZy5wdXNoKHJ1bm5lci5zdGFsbGVyKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoaXMgcnVubmVyIGhhcyBhbHJlYWR5IHRyaWdnZXJlZCBhbm90aGVyIHJ1bm5lclxuICAgICAgICAgICAgaWYgKHJ1bm5lci5kaWRCdW1wKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBHb3QgYSByZXNwb25zZSAocmVzdWx0IG9yIGVycm9yKSBvciBzdGFsbGVkOyBraWNrIG9mZiBhbm90aGVyIHJ1bm5lclxuICAgICAgICAgICAgcnVubmVyLmRpZEJ1bXAgPSB0cnVlO1xuICAgICAgICAgICAgbmV3UnVubmVycysrO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgcmVhY2hlZCBxdW9ydW0gb24gYSByZXN1bHQgKG9yIGVycm9yKVxuICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHRoaXMuI2NoZWNrUXVvcnVtKHJ1bm5pbmcsIHJlcSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkZCBhbnkgbmV3IHJ1bm5lcnMsIGJlY2F1c2UgYSBzdGFsbGVyIHRpbWVkIG91dCBvciBhIHJlc3VsdFxuICAgICAgICAvLyBvciBlcnJvciByZXNwb25zZSBjYW1lIGluLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld1J1bm5lcnM7IGkrKykge1xuICAgICAgICAgICAgdGhpcy4jYWRkUnVubmVyKHJ1bm5pbmcsIHJlcSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsIHByb3ZpZGVycyBoYXZlIHJldHVybmVkLCBhbmQgd2UgaGF2ZSBubyByZXN1bHRcbiAgICAgICAgYXNzZXJ0KGludGVyZXN0aW5nLmxlbmd0aCA+IDAsIFwicXVvcnVtIG5vdCBtZXRcIiwgXCJTRVJWRVJfRVJST1JcIiwge1xuICAgICAgICAgICAgcmVxdWVzdDogXCIlc3ViLXJlcXVlc3RzXCIsXG4gICAgICAgICAgICBpbmZvOiB7IHJlcXVlc3Q6IHJlcSwgcmVzdWx0czogQXJyYXkuZnJvbShydW5uaW5nKS5tYXAoKHIpID0+IHN0cmluZ2lmeShyLnJlc3VsdCkpIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFdhaXQgZm9yIHNvbWVvbmUgdG8gZWl0aGVyIGNvbXBsZXRlIGl0cyBwZXJmb3JtIG9yIHN0YWxsIG91dFxuICAgICAgICBhd2FpdCBQcm9taXNlLnJhY2UoaW50ZXJlc3RpbmcpO1xuICAgICAgICAvLyBUaGlzIGlzIHJlY3Vyc2l2ZSwgYnV0IGF0IHdvcnN0IGNhc2UgdGhlIGRlcHRoIGlzIDJ4IHRoZVxuICAgICAgICAvLyBudW1iZXIgb2YgcHJvdmlkZXJzIChlYWNoIGhhcyBhIHBlcmZvcm0gYW5kIGEgc3RhbGxlcilcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuI3dhaXRGb3JRdW9ydW0ocnVubmluZywgcmVxKTtcbiAgICB9XG4gICAgYXN5bmMgX3BlcmZvcm0ocmVxKSB7XG4gICAgICAgIC8vIEJyb2FkY2FzdGluZyBhIHRyYW5zYWN0aW9uIGlzIHJhcmUgKGlzaCkgYW5kIGFscmVhZHkgaW5jdXJzXG4gICAgICAgIC8vIGEgY29zdCBvbiB0aGUgdXNlciwgc28gc3BhbW1pbmcgaXMgc2FmZS1pc2guIEp1c3Qgc2VuZCBpdCB0b1xuICAgICAgICAvLyBldmVyeSBiYWNrZW5kLlxuICAgICAgICBpZiAocmVxLm1ldGhvZCA9PT0gXCJicm9hZGNhc3RUcmFuc2FjdGlvblwiKSB7XG4gICAgICAgICAgICAvLyBPbmNlIGFueSBicm9hZGNhc3QgcHJvdmlkZXMgYSBwb3NpdGl2ZSByZXN1bHQsIHVzZSBpdC4gTm9cbiAgICAgICAgICAgIC8vIG5lZWQgdG8gd2FpdCBmb3IgYW55b25lIGVsc2VcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSB0aGlzLiNjb25maWdzLm1hcCgoYykgPT4gbnVsbCk7XG4gICAgICAgICAgICBjb25zdCBicm9hZGNhc3RzID0gdGhpcy4jY29uZmlncy5tYXAoYXN5bmMgKHsgcHJvdmlkZXIsIHdlaWdodCB9LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb3ZpZGVyLl9wZXJmb3JtKHJlcSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHNbaW5kZXhdID0gT2JqZWN0LmFzc2lnbihub3JtYWxpemVSZXN1bHQoeyByZXN1bHQgfSksIHsgd2VpZ2h0IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1tpbmRleF0gPSBPYmplY3QuYXNzaWduKG5vcm1hbGl6ZVJlc3VsdCh7IGVycm9yIH0pLCB7IHdlaWdodCB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIEFzIGVhY2ggcHJvbWlzZSBmaW5pc2hlcy4uLlxuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgYSB2YWxpZCBicm9hZGNhc3QgcmVzdWx0XG4gICAgICAgICAgICAgICAgY29uc3QgZG9uZSA9IHJlc3VsdHMuZmlsdGVyKChyKSA9PiAociAhPSBudWxsKSk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB7IHZhbHVlIH0gb2YgZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBhIGxlZ2l0IGJyb2FkY2FzdCBlcnJvciAob25lIHdoaWNoIHdlIGNhbm5vdFxuICAgICAgICAgICAgICAgIC8vIHJlY292ZXIgZnJvbTsgc29tZSBub2RlcyBtYXkgcmV0dXJuIHRoZSBmb2xsb3dpbmcgcmVkXG4gICAgICAgICAgICAgICAgLy8gaGVycmluZyBldmVudHM6XG4gICAgICAgICAgICAgICAgLy8gLSBhbHJlZHkgc2VlbmQgKFVOS05PV05fRVJST1IpXG4gICAgICAgICAgICAgICAgLy8gLSBOT05DRV9FWFBJUkVEXG4gICAgICAgICAgICAgICAgLy8gLSBSRVBMQUNFTUVOVF9VTkRFUlBSSUNFRFxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNoZWNrUXVvcnVtKHRoaXMucXVvcnVtLCByZXN1bHRzLmZpbHRlcigocikgPT4gKHIgIT0gbnVsbCkpKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNFcnJvcihyZXN1bHQsIFwiSU5TVUZGSUNJRU5UX0ZVTkRTXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gS2ljayBvZmYgdGhlIG5leHQgcHJvdmlkZXIgKGlmIGFueSlcbiAgICAgICAgICAgICAgICBjb25zdCB3YWl0aW5nID0gYnJvYWRjYXN0cy5maWx0ZXIoKGIsIGkpID0+IChyZXN1bHRzW2ldID09IG51bGwpKTtcbiAgICAgICAgICAgICAgICBpZiAod2FpdGluZy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UucmFjZSh3YWl0aW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVzZSBzdGFuZGFyZCBxdW9ydW0gcmVzdWx0czsgYW55IHJlc3VsdCB3YXMgcmV0dXJuZWQgYWJvdmUsXG4gICAgICAgICAgICAvLyBzbyB0aGlzIHdpbGwgZmluZCBhbnkgZXJyb3IgdGhhdCBtZXQgcXVvcnVtIGlmIGFueVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZ2V0QW55UmVzdWx0KHRoaXMucXVvcnVtLCByZXN1bHRzKTtcbiAgICAgICAgICAgIGFzc2VydChyZXN1bHQgIT09IHVuZGVmaW5lZCwgXCJwcm9ibGVtIG11bHRpLWJyb2FkY2FzdGluZ1wiLCBcIlNFUlZFUl9FUlJPUlwiLCB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdDogXCIlc3ViLXJlcXVlc3RzXCIsXG4gICAgICAgICAgICAgICAgaW5mbzogeyByZXF1ZXN0OiByZXEsIHJlc3VsdHM6IHJlc3VsdHMubWFwKHN0cmluZ2lmeSkgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuI2luaXRpYWxTeW5jKCk7XG4gICAgICAgIC8vIEJvb3RzdHJhcCBlbm91Z2ggcnVubmVycyB0byBtZWV0IHF1b3J1bVxuICAgICAgICBjb25zdCBydW5uaW5nID0gbmV3IFNldCgpO1xuICAgICAgICBsZXQgaW5mbGlnaHRRdW9ydW0gPSAwO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgY29uc3QgcnVubmVyID0gdGhpcy4jYWRkUnVubmVyKHJ1bm5pbmcsIHJlcSk7XG4gICAgICAgICAgICBpZiAocnVubmVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluZmxpZ2h0UXVvcnVtICs9IHJ1bm5lci5jb25maWcud2VpZ2h0O1xuICAgICAgICAgICAgaWYgKGluZmxpZ2h0UXVvcnVtID49IHRoaXMucXVvcnVtKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy4jd2FpdEZvclF1b3J1bShydW5uaW5nLCByZXEpO1xuICAgICAgICAvLyBUcmFjayByZXF1ZXN0cyBzZW50IHRvIGEgcHJvdmlkZXIgdGhhdCBhcmUgc3RpbGxcbiAgICAgICAgLy8gb3V0c3RhbmRpbmcgYWZ0ZXIgcXVvcnVtIGhhcyBiZWVuIG90aGVyd2lzZSBmb3VuZFxuICAgICAgICBmb3IgKGNvbnN0IHJ1bm5lciBvZiBydW5uaW5nKSB7XG4gICAgICAgICAgICBpZiAocnVubmVyLnBlcmZvcm0gJiYgcnVubmVyLnJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcnVubmVyLmNvbmZpZy5sYXRlUmVzcG9uc2VzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYXN5bmMgZGVzdHJveSgpIHtcbiAgICAgICAgZm9yIChjb25zdCB7IHByb3ZpZGVyIH0gb2YgdGhpcy4jY29uZmlncykge1xuICAgICAgICAgICAgcHJvdmlkZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlci1mYWxsYmFjay5qcy5tYXAiXSwibmFtZXMiOlsiYXNzZXJ0IiwiYXNzZXJ0QXJndW1lbnQiLCJnZXRCaWdJbnQiLCJnZXROdW1iZXIiLCJpc0Vycm9yIiwiQWJzdHJhY3RQcm92aWRlciIsIk5ldHdvcmsiLCJCTl8xIiwiQmlnSW50IiwiQk5fMiIsInNodWZmbGUiLCJhcnJheSIsImkiLCJsZW5ndGgiLCJqIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwidG1wIiwic3RhbGwiLCJkdXJhdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImdldFRpbWUiLCJEYXRlIiwic3RyaW5naWZ5IiwidmFsdWUiLCJKU09OIiwia2V5IiwidHlwZSIsInRvU3RyaW5nIiwiZGVmYXVsdENvbmZpZyIsInN0YWxsVGltZW91dCIsInByaW9yaXR5Iiwid2VpZ2h0IiwiZGVmYXVsdFN0YXRlIiwiYmxvY2tOdW1iZXIiLCJyZXF1ZXN0cyIsImxhdGVSZXNwb25zZXMiLCJlcnJvclJlc3BvbnNlcyIsIm91dE9mU3luYyIsInVuc3VwcG9ydGVkRXZlbnRzIiwicm9sbGluZ0R1cmF0aW9uIiwic2NvcmUiLCJfbmV0d29yayIsIl91cGRhdGVOdW1iZXIiLCJfdG90YWxUaW1lIiwiX2xhc3RGYXRhbEVycm9yIiwiX2xhc3RGYXRhbEVycm9yVGltZXN0YW1wIiwid2FpdEZvclN5bmMiLCJjb25maWciLCJwcm92aWRlciIsImdldEJsb2NrTnVtYmVyIiwiZXJyb3IiLCJfbm9ybWFsaXplIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiam9pbiIsInRvSlNPTiIsImtleXMiLCJPYmplY3QiLCJzb3J0IiwiayIsImNvbnNvbGUiLCJsb2ciLCJFcnJvciIsIm5vcm1hbGl6ZVJlc3VsdCIsInRhZyIsInJlc3VsdCIsImNoZWNrUXVvcnVtIiwicXVvcnVtIiwicmVzdWx0cyIsInRhbGx5IiwiTWFwIiwidCIsImdldCIsInNldCIsImJlc3QiLCJyIiwidmFsdWVzIiwidW5kZWZpbmVkIiwiZ2V0TWVkaWFuIiwicmVzdWx0V2VpZ2h0IiwiZXJyb3JNYXAiLCJiZXN0RXJyb3IiLCJlIiwicHVzaCIsImEiLCJiIiwibWlkIiwiZ2V0QW55UmVzdWx0IiwiZ2V0RnV6enlNb2RlIiwiYWRkIiwiYmVzdFdlaWdodCIsImJlc3RSZXN1bHQiLCJGYWxsYmFja1Byb3ZpZGVyIiwicHJvdmlkZXJDb25maWdzIiwiY29uZmlncyIsImMiLCJhc3NpZ24iLCJfZGV0ZWN0TmV0d29yayIsImZyb20iLCJfcGVyZm9ybSIsIm1ldGhvZCIsIl90cmFuc2xhdGVQZXJmb3JtIiwicmVxIiwiYnJvYWRjYXN0VHJhbnNhY3Rpb24iLCJzaWduZWRUcmFuc2FjdGlvbiIsImNhbGwiLCJ0cmFuc2FjdGlvbiIsImJsb2NrVGFnIiwiZ2V0TmV0d29yayIsImNoYWluSWQiLCJlc3RpbWF0ZUdhcyIsImdldEJhbGFuY2UiLCJhZGRyZXNzIiwiYmxvY2siLCJibG9ja0hhc2giLCJnZXRCbG9jayIsImluY2x1ZGVUcmFuc2FjdGlvbnMiLCJnZXRDb2RlIiwiZ2V0RmVlRGF0YSIsImdhc1ByaWNlIiwibWF4UHJpb3JpdHlGZWVQZXJHYXMiLCJnZXRMb2dzIiwiZmlsdGVyIiwiZ2V0U3RvcmFnZSIsInBvc2l0aW9uIiwiZ2V0VHJhbnNhY3Rpb24iLCJoYXNoIiwiZ2V0VHJhbnNhY3Rpb25Db3VudCIsImdldFRyYW5zYWN0aW9uUmVjZWlwdCIsImdldFRyYW5zYWN0aW9uUmVzdWx0IiwiYnJvYWRjYXN0cyIsImluZGV4IiwiZG9uZSIsIndhaXRpbmciLCJyYWNlIiwicmVxdWVzdCIsImluZm8iLCJpbml0aWFsU3luYyIsInJ1bm5pbmciLCJTZXQiLCJpbmZsaWdodFF1b3J1bSIsInJ1bm5lciIsImFkZFJ1bm5lciIsIndhaXRGb3JRdW9ydW0iLCJwZXJmb3JtIiwiZGVzdHJveSIsImNvbnN0cnVjdG9yIiwicHJvdmlkZXJzIiwibmV0d29yayIsIm9wdGlvbnMiLCJwIiwiaGVpZ2h0IiwiaW5pdGlhbFN5bmNQcm9taXNlIiwiY2VpbCIsInJlZHVjZSIsImFjY3VtIiwiZXZlbnRRdW9ydW0iLCJldmVudFdvcmtlcnMiLCJhbGxDb25maWdzIiwic2xpY2UiLCJpbmRleE9mIiwiZ2V0TmV4dENvbmZpZyIsImRpZEJ1bXAiLCJzdGFsbGVyIiwibm93IiwiZHQiLCJwcm9taXNlcyIsImZvckVhY2giLCJhbGwiLCJvcGVyYXRpb24iLCJtb2RlIiwic2l6ZSIsImludGVyZXN0aW5nIiwibmV3UnVubmVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-fallback.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-infura.js":
/*!*******************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/provider-infura.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InfuraProvider: function() { return /* binding */ InfuraProvider; },\n/* harmony export */   InfuraWebSocketProvider: function() { return /* binding */ InfuraWebSocketProvider; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fetch.js\");\n/* harmony import */ var _community_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./community.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/community.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./network.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/* harmony import */ var _provider_websocket_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-websocket.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-websocket.js\");\n/**\n *  [[link-infura]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\n *  - Base (``base``)\n *  - Base Goerlia Testnet (``base-goerli``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - BNB Smart Chain Testnet (``bnbt``)\n *  - Linea (``linea``)\n *  - Linea Goerlia Testnet (``linea-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\n */ \n\n\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nfunction getHost(name) {\n    switch(name){\n        case \"mainnet\":\n            return \"mainnet.infura.io\";\n        case \"goerli\":\n            return \"goerli.infura.io\";\n        case \"sepolia\":\n            return \"sepolia.infura.io\";\n        case \"arbitrum\":\n            return \"arbitrum-mainnet.infura.io\";\n        case \"arbitrum-goerli\":\n            return \"arbitrum-goerli.infura.io\";\n        case \"arbitrum-sepolia\":\n            return \"arbitrum-sepolia.infura.io\";\n        case \"base\":\n            return \"base-mainnet.infura.io\";\n        case \"base-goerlia\":\n            return \"base-goerli.infura.io\";\n        case \"base-sepolia\":\n            return \"base-sepolia.infura.io\";\n        case \"bnb\":\n            return \"bnbsmartchain-mainnet.infura.io\";\n        case \"bnbt\":\n            return \"bnbsmartchain-testnet.infura.io\";\n        case \"linea\":\n            return \"linea-mainnet.infura.io\";\n        case \"linea-goerli\":\n            return \"linea-goerli.infura.io\";\n        case \"matic\":\n            return \"polygon-mainnet.infura.io\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.infura.io\";\n        case \"optimism\":\n            return \"optimism-mainnet.infura.io\";\n        case \"optimism-goerli\":\n            return \"optimism-goerli.infura.io\";\n        case \"optimism-sepolia\":\n            return \"optimism-sepolia.infura.io\";\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\n *  WebSocket end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */ class InfuraWebSocketProvider extends _provider_websocket_js__WEBPACK_IMPORTED_MODULE_1__.WebSocketProvider {\n    isCommunityResource() {\n        return this.projectId === defaultProjectId;\n    }\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */ constructor(network, projectId){\n        const provider = new InfuraProvider(network, projectId);\n        const req = provider._getConnection();\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!req.credentials, \"INFURA WebSocket project secrets unsupported\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"InfuraProvider.getWebSocketProvider()\"\n        });\n        const url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.defineProperties)(this, {\n            projectId: provider.projectId,\n            projectSecret: provider.projectSecret\n        });\n    }\n}\n/**\n *  The **InfuraProvider** connects to the [[link-infura]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */ class InfuraProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_3__.JsonRpcProvider {\n    _getProvider(chainId) {\n        try {\n            return new InfuraProvider(chainId, this.projectId, this.projectSecret);\n        } catch (error) {}\n        return super._getProvider(chainId);\n    }\n    isCommunityResource() {\n        return this.projectId === defaultProjectId;\n    }\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */ static getWebSocketProvider(network, projectId) {\n        return new InfuraWebSocketProvider(network, projectId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%%\n     *  with %%projectId%% and %%projectSecret%%.\n     */ static getRequest(network, projectId, projectSecret) {\n        if (projectId == null) {\n            projectId = defaultProjectId;\n        }\n        if (projectSecret == null) {\n            projectSecret = null;\n        }\n        const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_4__.FetchRequest(\"https://\".concat(getHost(network.name), \"/v3/\").concat(projectId));\n        request.allowGzip = true;\n        if (projectSecret) {\n            request.setCredentials(\"\", projectSecret);\n        }\n        if (projectId === defaultProjectId) {\n            request.retryFunc = async (request, response, attempt)=>{\n                (0,_community_js__WEBPACK_IMPORTED_MODULE_5__.showThrottleMessage)(\"InfuraProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n    /**\n     *  Creates a new **InfuraProvider**.\n     */ constructor(_network, projectId, projectSecret){\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_6__.Network.from(_network);\n        if (projectId == null) {\n            projectId = defaultProjectId;\n        }\n        if (projectSecret == null) {\n            projectSecret = null;\n        }\n        const request = InfuraProvider.getRequest(network, projectId, projectSecret);\n        super(request, network, {\n            staticNetwork: network\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.defineProperties)(this, {\n            projectId,\n            projectSecret\n        });\n    }\n} //# sourceMappingURL=provider-infura.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-infura.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-ipcsocket-browser.js":
/*!******************************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/provider-ipcsocket-browser.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IpcSocketProvider: function() { return /* binding */ IpcSocketProvider; }\n/* harmony export */ });\nconst IpcSocketProvider = undefined;\n //# sourceMappingURL=provider-ipcsocket-browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3Byb3ZpZGVyLWlwY3NvY2tldC1icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxvQkFBb0JDO0FBQ0csQ0FDN0Isc0RBQXNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3Byb3ZpZGVyLWlwY3NvY2tldC1icm93c2VyLmpzP2MwYTEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgSXBjU29ja2V0UHJvdmlkZXIgPSB1bmRlZmluZWQ7XG5leHBvcnQgeyBJcGNTb2NrZXRQcm92aWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXItaXBjc29ja2V0LWJyb3dzZXIuanMubWFwIl0sIm5hbWVzIjpbIklwY1NvY2tldFByb3ZpZGVyIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-ipcsocket-browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js":
/*!********************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonRpcApiPollingProvider: function() { return /* binding */ JsonRpcApiPollingProvider; },\n/* harmony export */   JsonRpcApiProvider: function() { return /* binding */ JsonRpcApiProvider; },\n/* harmony export */   JsonRpcProvider: function() { return /* binding */ JsonRpcProvider; },\n/* harmony export */   JsonRpcSigner: function() { return /* binding */ JsonRpcSigner; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _swc_helpers_class_private_field_update__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_update */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_update.js\");\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../abi/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/abi/abi-coder.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/checks.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../hash/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/typed-data.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/accesslist.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fetch.js\");\n/* harmony import */ var _abstract_provider_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./abstract-provider.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/abstract-provider.js\");\n/* harmony import */ var _abstract_signer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-signer.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/abstract-signer.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./network.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _subscriber_filterid_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./subscriber-filterid.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/subscriber-filterid.js\");\n/* harmony import */ var _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./subscriber-polling.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/subscriber-polling.js\");\n/**\n *  One of the most common ways to interact with the blockchain is\n *  by a node running a JSON-RPC interface which can be connected to,\n *  based on the transport, using:\n *\n *  - HTTP or HTTPS - [[JsonRpcProvider]]\n *  - WebSocket - [[WebSocketProvider]]\n *  - IPC - [[IpcSocketProvider]]\n *\n * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]\n */ // @TODO:\n// - Add the batching API\n// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\n//const Methods = \"getAddress,then\".split(/,/g);\nfunction deepCopy(value) {\n    if (value == null || Primitive.indexOf(typeof value) >= 0) {\n        return value;\n    }\n    // Keep any Addressable\n    if (typeof value.getAddress === \"function\") {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        return value.map(deepCopy);\n    }\n    if (typeof value === \"object\") {\n        return Object.keys(value).reduce((accum, key)=>{\n            accum[key] = value[key];\n            return accum;\n        }, {});\n    }\n    throw new Error(\"should not happen: \".concat(value, \" (\").concat(typeof value, \")\"));\n}\nfunction stall(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, duration);\n    });\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nfunction isPollable(value) {\n    return value && typeof value.pollingInterval === \"number\";\n}\nconst defaultOptions = {\n    polling: false,\n    staticNetwork: null,\n    batchStallTime: 10,\n    batchMaxSize: 1 << 20,\n    batchMaxCount: 100,\n    cacheTimeout: 250,\n    pollingInterval: 4000\n};\n// @TODO: Unchecked Signers\nclass JsonRpcSigner extends _abstract_signer_js__WEBPACK_IMPORTED_MODULE_0__.AbstractSigner {\n    connect(provider) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"signer.connect\"\n        });\n    }\n    async getAddress() {\n        return this.address;\n    }\n    // JSON-RPC will automatially fill in nonce, etc. so we just check from\n    async populateTransaction(tx) {\n        return await this.populateCall(tx);\n    }\n    // Returns just the hash of the transaction after sent, which is what\n    // the bare JSON-RPC API does;\n    async sendUncheckedTransaction(_tx) {\n        const tx = deepCopy(_tx);\n        const promises = [];\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const _from = tx.from;\n            promises.push((async ()=>{\n                const from = await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveAddress)(_from, this.provider);\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n                tx.from = from;\n            })());\n        } else {\n            tx.from = this.address;\n        }\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (tx.gasLimit == null) {\n            promises.push((async ()=>{\n                tx.gasLimit = await this.provider.estimateGas({\n                    ...tx,\n                    from: this.address\n                });\n            })());\n        }\n        // The address may be an ENS name or Addressable\n        if (tx.to != null) {\n            const _to = tx.to;\n            promises.push((async ()=>{\n                tx.to = await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveAddress)(_to, this.provider);\n            })());\n        }\n        // Wait until all of our properties are filled in\n        if (promises.length) {\n            await Promise.all(promises);\n        }\n        const hexTx = this.provider.getRpcTransaction(tx);\n        return this.provider.send(\"eth_sendTransaction\", [\n            hexTx\n        ]);\n    }\n    async sendTransaction(tx) {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider.getBlockNumber();\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(tx);\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return await new Promise((resolve, reject)=>{\n            const timeouts = [\n                1000,\n                100\n            ];\n            let invalids = 0;\n            const checkTx = async ()=>{\n                try {\n                    // Try getting the transaction\n                    const tx = await this.provider.getTransaction(hash);\n                    if (tx != null) {\n                        resolve(tx.replaceableTransaction(blockNumber));\n                        return;\n                    }\n                } catch (error) {\n                    // If we were cancelled: stop polling.\n                    // If the data is bad: the node returns bad transactions\n                    // If the network changed: calling again will also fail\n                    // If unsupported: likely destroyed\n                    if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isError)(error, \"CANCELLED\") || (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isError)(error, \"BAD_DATA\") || (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isError)(error, \"NETWORK_ERROR\" || 0)) {\n                        if (error.info == null) {\n                            error.info = {};\n                        }\n                        error.info.sendTransactionHash = hash;\n                        reject(error);\n                        return;\n                    }\n                    // Stop-gap for misbehaving backends; see #4513\n                    if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isError)(error, \"INVALID_ARGUMENT\")) {\n                        invalids++;\n                        if (error.info == null) {\n                            error.info = {};\n                        }\n                        error.info.sendTransactionHash = hash;\n                        if (invalids > 10) {\n                            reject(error);\n                            return;\n                        }\n                    }\n                    // Notify anyone that cares; but we will try again, since\n                    // it is likely an intermittent service error\n                    this.provider.emit(\"error\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"failed to fetch transation after sending (will try again)\", \"UNKNOWN_ERROR\", {\n                        error\n                    }));\n                }\n                // Wait another 4 seconds\n                this.provider._setTimeout(()=>{\n                    checkTx();\n                }, timeouts.pop() || 4000);\n            };\n            checkTx();\n        });\n    }\n    async signTransaction(_tx) {\n        const tx = deepCopy(_tx);\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const from = await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveAddress)(tx.from, this.provider);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n            tx.from = from;\n        } else {\n            tx.from = this.address;\n        }\n        const hexTx = this.provider.getRpcTransaction(tx);\n        return await this.provider.send(\"eth_signTransaction\", [\n            hexTx\n        ]);\n    }\n    async signMessage(_message) {\n        const message = typeof _message === \"string\" ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(_message) : _message;\n        return await this.provider.send(\"personal_sign\", [\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)(message),\n            this.address.toLowerCase()\n        ]);\n    }\n    async signTypedData(domain, types, _value) {\n        const value = deepCopy(_value);\n        // Populate any ENS names (in-place)\n        const populated = await _hash_index_js__WEBPACK_IMPORTED_MODULE_5__.TypedDataEncoder.resolveNames(domain, types, value, async (value)=>{\n            const address = await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveAddress)(value);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(address != null, \"TypedData does not support null address\", \"value\", value);\n            return address;\n        });\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            this.address.toLowerCase(),\n            JSON.stringify(_hash_index_js__WEBPACK_IMPORTED_MODULE_5__.TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n    async unlock(password) {\n        return this.provider.send(\"personal_unlockAccount\", [\n            this.address.toLowerCase(),\n            password,\n            null\n        ]);\n    }\n    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n    async _legacySignMessage(_message) {\n        const message = typeof _message === \"string\" ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(_message) : _message;\n        return await this.provider.send(\"eth_sign\", [\n            this.address.toLowerCase(),\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)(message)\n        ]);\n    }\n    constructor(provider, address){\n        super(provider);\n        address = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_6__.getAddress)(address);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.defineProperties)(this, {\n            address\n        });\n    }\n}\nvar _options = /*#__PURE__*/ new WeakMap(), // The next ID to use for the JSON-RPC ID field\n_nextId = /*#__PURE__*/ new WeakMap(), // Payloads are queued and triggered in batches using the drainTimer\n_payloads = /*#__PURE__*/ new WeakMap(), _drainTimer = /*#__PURE__*/ new WeakMap(), _notReady = /*#__PURE__*/ new WeakMap(), _network = /*#__PURE__*/ new WeakMap(), _pendingDetectNetwork = /*#__PURE__*/ new WeakMap(), _scheduleDrain = /*#__PURE__*/ new WeakSet();\n/**\n *  The JsonRpcApiProvider is an abstract class and **MUST** be\n *  sub-classed.\n *\n *  It provides the base for all JSON-RPC-based Provider interaction.\n *\n *  Sub-classing Notes:\n *  - a sub-class MUST override _send\n *  - a sub-class MUST call the `_start()` method once connected\n */ class JsonRpcApiProvider extends _abstract_provider_js__WEBPACK_IMPORTED_MODULE_8__.AbstractProvider {\n    /**\n     *  Returns the value associated with the option %%key%%.\n     *\n     *  Sub-classes can use this to inquire about configuration options.\n     */ _getOption(key) {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _options)[key];\n    }\n    /**\n     *  Gets the [[Network]] this provider has committed to. On each call, the network\n     *  is detected, and if it has changed, the call will reject.\n     */ get _network() {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _network), \"network is not available yet\", \"NETWORK_ERROR\");\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _network);\n    }\n    /**\n     *  Resolves to the non-normalized value by performing %%req%%.\n     *\n     *  Sub-classes may override this to modify behavior of actions,\n     *  and should generally call ``super._perform`` as a fallback.\n     */ async _perform(req) {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            let tx = req.transaction;\n            if (tx && tx.type != null && (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__.getBigInt)(tx.type)) {\n                // If there are no EIP-1559 properties, it might be non-EIP-a559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        req = Object.assign({}, req, {\n                            transaction: Object.assign({}, tx, {\n                                type: undefined\n                            })\n                        });\n                    }\n                }\n            }\n        }\n        const request = this.getRpcRequest(req);\n        if (request != null) {\n            return await this.send(request.method, request.args);\n        }\n        return super._perform(req);\n    }\n    /**\n     *  Sub-classes may override this; it detects the *actual* network that\n     *  we are **currently** connected to.\n     *\n     *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\n     *  _send primitive must be used instead.\n     */ async _detectNetwork() {\n        const network = this._getOption(\"staticNetwork\");\n        if (network) {\n            if (network === true) {\n                if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _network)) {\n                    return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _network);\n                }\n            } else {\n                return network;\n            }\n        }\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _pendingDetectNetwork)) {\n            return await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _pendingDetectNetwork);\n        }\n        // If we are ready, use ``send``, which enabled requests to be batched\n        if (this.ready) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _pendingDetectNetwork, (async ()=>{\n                try {\n                    const result = _network_js__WEBPACK_IMPORTED_MODULE_12__.Network.from((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__.getBigInt)(await this.send(\"eth_chainId\", [])));\n                    (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _pendingDetectNetwork, null);\n                    return result;\n                } catch (error) {\n                    (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _pendingDetectNetwork, null);\n                    throw error;\n                }\n            })());\n            return await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _pendingDetectNetwork);\n        }\n        // We are not ready yet; use the primitive _send\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _pendingDetectNetwork, (async ()=>{\n            const payload = {\n                id: (0,_swc_helpers_class_private_field_update__WEBPACK_IMPORTED_MODULE_13__._)(this, _nextId).value++,\n                method: \"eth_chainId\",\n                params: [],\n                jsonrpc: \"2.0\"\n            };\n            this.emit(\"debug\", {\n                action: \"sendRpcPayload\",\n                payload\n            });\n            let result;\n            try {\n                result = (await this._send(payload))[0];\n                (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _pendingDetectNetwork, null);\n            } catch (error) {\n                (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _pendingDetectNetwork, null);\n                this.emit(\"debug\", {\n                    action: \"receiveRpcError\",\n                    error\n                });\n                throw error;\n            }\n            this.emit(\"debug\", {\n                action: \"receiveRpcResult\",\n                result\n            });\n            if (\"result\" in result) {\n                return _network_js__WEBPACK_IMPORTED_MODULE_12__.Network.from((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__.getBigInt)(result.result));\n            }\n            throw this.getRpcError(payload, result);\n        })());\n        return await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _pendingDetectNetwork);\n    }\n    /**\n     *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\n     *  will be passed to [[_send]] from [[send]]. If it is overridden, then\n     *  ``super._start()`` **MUST** be called.\n     *\n     *  Calling it multiple times is safe and has no effect.\n     */ _start() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _notReady) == null || (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _notReady).resolve == null) {\n            return;\n        }\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _notReady).resolve();\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _notReady, null);\n        (async ()=>{\n            // Bootstrap the network\n            while((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _network) == null && !this.destroyed){\n                try {\n                    (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _network, await this._detectNetwork());\n                } catch (error) {\n                    if (this.destroyed) {\n                        break;\n                    }\n                    console.log(\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\");\n                    this.emit(\"error\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"failed to bootstrap network detection\", \"NETWORK_ERROR\", {\n                        event: \"initial-network-discovery\",\n                        info: {\n                            error\n                        }\n                    }));\n                    await stall(1000);\n                }\n            }\n            // Start dispatching requests\n            (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_14__._)(this, _scheduleDrain, scheduleDrain).call(this);\n        })();\n    }\n    /**\n     *  Resolves once the [[_start]] has been called. This can be used in\n     *  sub-classes to defer sending data until the connection has been\n     *  established.\n     */ async _waitUntilReady() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _notReady) == null) {\n            return;\n        }\n        return await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _notReady).promise;\n    }\n    /**\n     *  Return a Subscriber that will manage the %%sub%%.\n     *\n     *  Sub-classes may override this to modify the behavior of\n     *  subscription management.\n     */ _getSubscriber(sub) {\n        // Pending Filters aren't availble via polling\n        if (sub.type === \"pending\") {\n            return new _subscriber_filterid_js__WEBPACK_IMPORTED_MODULE_15__.FilterIdPendingSubscriber(this);\n        }\n        if (sub.type === \"event\") {\n            if (this._getOption(\"polling\")) {\n                return new _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_16__.PollingEventSubscriber(this, sub.filter);\n            }\n            return new _subscriber_filterid_js__WEBPACK_IMPORTED_MODULE_15__.FilterIdEventSubscriber(this, sub.filter);\n        }\n        // Orphaned Logs are handled automatically, by the filter, since\n        // logs with removed are emitted by it\n        if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\n            return new _abstract_provider_js__WEBPACK_IMPORTED_MODULE_8__.UnmanagedSubscriber(\"orphan\");\n        }\n        return super._getSubscriber(sub);\n    }\n    /**\n     *  Returns true only if the [[_start]] has been called.\n     */ get ready() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _notReady) == null;\n    }\n    /**\n     *  Returns %%tx%% as a normalized JSON-RPC transaction request,\n     *  which has all values hexlified and any numeric values converted\n     *  to Quantity values.\n     */ getRpcTransaction(tx) {\n        const result = {};\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\n            \"chainId\",\n            \"gasLimit\",\n            \"gasPrice\",\n            \"type\",\n            \"maxFeePerGas\",\n            \"maxPriorityFeePerGas\",\n            \"nonce\",\n            \"value\"\n        ].forEach((key)=>{\n            if (tx[key] == null) {\n                return;\n            }\n            let dstKey = key;\n            if (key === \"gasLimit\") {\n                dstKey = \"gas\";\n            }\n            result[dstKey] = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__.toQuantity)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__.getBigInt)(tx[key], \"tx.\".concat(key)));\n        });\n        // Make sure addresses and data are lowercase\n        [\n            \"from\",\n            \"to\",\n            \"data\"\n        ].forEach((key)=>{\n            if (tx[key] == null) {\n                return;\n            }\n            result[key] = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)(tx[key]);\n        });\n        // Normalize the access list object\n        if (tx.accessList) {\n            result[\"accessList\"] = (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_17__.accessListify)(tx.accessList);\n        }\n        return result;\n    }\n    /**\n     *  Returns the request method and arguments required to perform\n     *  %%req%%.\n     */ getRpcRequest(req) {\n        switch(req.method){\n            case \"chainId\":\n                return {\n                    method: \"eth_chainId\",\n                    args: []\n                };\n            case \"getBlockNumber\":\n                return {\n                    method: \"eth_blockNumber\",\n                    args: []\n                };\n            case \"getGasPrice\":\n                return {\n                    method: \"eth_gasPrice\",\n                    args: []\n                };\n            case \"getPriorityFee\":\n                return {\n                    method: \"eth_maxPriorityFeePerGas\",\n                    args: []\n                };\n            case \"getBalance\":\n                return {\n                    method: \"eth_getBalance\",\n                    args: [\n                        getLowerCase(req.address),\n                        req.blockTag\n                    ]\n                };\n            case \"getTransactionCount\":\n                return {\n                    method: \"eth_getTransactionCount\",\n                    args: [\n                        getLowerCase(req.address),\n                        req.blockTag\n                    ]\n                };\n            case \"getCode\":\n                return {\n                    method: \"eth_getCode\",\n                    args: [\n                        getLowerCase(req.address),\n                        req.blockTag\n                    ]\n                };\n            case \"getStorage\":\n                return {\n                    method: \"eth_getStorageAt\",\n                    args: [\n                        getLowerCase(req.address),\n                        \"0x\" + req.position.toString(16),\n                        req.blockTag\n                    ]\n                };\n            case \"broadcastTransaction\":\n                return {\n                    method: \"eth_sendRawTransaction\",\n                    args: [\n                        req.signedTransaction\n                    ]\n                };\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return {\n                        method: \"eth_getBlockByNumber\",\n                        args: [\n                            req.blockTag,\n                            !!req.includeTransactions\n                        ]\n                    };\n                } else if (\"blockHash\" in req) {\n                    return {\n                        method: \"eth_getBlockByHash\",\n                        args: [\n                            req.blockHash,\n                            !!req.includeTransactions\n                        ]\n                    };\n                }\n                break;\n            case \"getTransaction\":\n                return {\n                    method: \"eth_getTransactionByHash\",\n                    args: [\n                        req.hash\n                    ]\n                };\n            case \"getTransactionReceipt\":\n                return {\n                    method: \"eth_getTransactionReceipt\",\n                    args: [\n                        req.hash\n                    ]\n                };\n            case \"call\":\n                return {\n                    method: \"eth_call\",\n                    args: [\n                        this.getRpcTransaction(req.transaction),\n                        req.blockTag\n                    ]\n                };\n            case \"estimateGas\":\n                {\n                    return {\n                        method: \"eth_estimateGas\",\n                        args: [\n                            this.getRpcTransaction(req.transaction)\n                        ]\n                    };\n                }\n            case \"getLogs\":\n                if (req.filter && req.filter.address != null) {\n                    if (Array.isArray(req.filter.address)) {\n                        req.filter.address = req.filter.address.map(getLowerCase);\n                    } else {\n                        req.filter.address = getLowerCase(req.filter.address);\n                    }\n                }\n                return {\n                    method: \"eth_getLogs\",\n                    args: [\n                        req.filter\n                    ]\n                };\n        }\n        return null;\n    }\n    /**\n     *  Returns an ethers-style Error for the given JSON-RPC error\n     *  %%payload%%, coalescing the various strings and error shapes\n     *  that different nodes return, coercing them into a machine-readable\n     *  standardized error.\n     */ getRpcError(payload, _error) {\n        const { method } = payload;\n        const { error } = _error;\n        if (method === \"eth_estimateGas\" && error.message) {\n            const msg = error.message;\n            if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: payload.params[0],\n                    info: {\n                        payload,\n                        error\n                    }\n                });\n            }\n        }\n        if (method === \"eth_call\" || method === \"eth_estimateGas\") {\n            const result = spelunkData(error);\n            const e = _abi_index_js__WEBPACK_IMPORTED_MODULE_18__.AbiCoder.getBuiltinCallException(method === \"eth_call\" ? \"call\" : \"estimateGas\", payload.params[0], result ? result.data : null);\n            e.info = {\n                error,\n                payload\n            };\n            return e;\n        }\n        // Only estimateGas and call can return arbitrary contract-defined text, so now we\n        // we can process text safely.\n        const message = JSON.stringify(spelunkMessage(error));\n        if (typeof error.message === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\n            const actionMap = {\n                eth_sign: \"signMessage\",\n                personal_sign: \"signMessage\",\n                eth_signTypedData_v4: \"signTypedData\",\n                eth_signTransaction: \"signTransaction\",\n                eth_sendTransaction: \"sendTransaction\",\n                eth_requestAccounts: \"requestAccess\",\n                wallet_requestAccounts: \"requestAccess\"\n            };\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"user rejected action\", \"ACTION_REJECTED\", {\n                action: actionMap[method] || \"unknown\",\n                reason: \"rejected\",\n                info: {\n                    payload,\n                    error\n                }\n            });\n        }\n        if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\n            const transaction = payload.params[0];\n            if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                    transaction,\n                    info: {\n                        error\n                    }\n                });\n            }\n            if (message.match(/nonce/i) && message.match(/too low/i)) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"nonce has already been used\", \"NONCE_EXPIRED\", {\n                    transaction,\n                    info: {\n                        error\n                    }\n                });\n            }\n            // \"replacement transaction underpriced\"\n            if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n                    transaction,\n                    info: {\n                        error\n                    }\n                });\n            }\n            if (message.match(/only replay-protected/i)) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\n                    operation: method,\n                    info: {\n                        transaction,\n                        info: {\n                            error\n                        }\n                    }\n                });\n            }\n        }\n        let unsupported = !!message.match(/the method .* does not exist/i);\n        if (!unsupported) {\n            if (error && error.details && error.details.startsWith(\"Unauthorized method:\")) {\n                unsupported = true;\n            }\n        }\n        if (unsupported) {\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\n                operation: payload.method,\n                info: {\n                    error,\n                    payload\n                }\n            });\n        }\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"could not coalesce error\", \"UNKNOWN_ERROR\", {\n            error,\n            payload\n        });\n    }\n    /**\n     *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\n     *  over the underlying channel. This can be used to call methods\n     *  on the backend that do not have a high-level API within the Provider\n     *  API.\n     *\n     *  This method queues requests according to the batch constraints\n     *  in the options, assigns the request a unique ID.\n     *\n     *  **Do NOT override** this method in sub-classes; instead\n     *  override [[_send]] or force the options values in the\n     *  call to the constructor to modify this method's behavior.\n     */ send(method, params) {\n        // @TODO: cache chainId?? purge on switch_networks\n        // We have been destroyed; no operations are supported anymore\n        if (this.destroyed) {\n            return Promise.reject((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n                operation: method\n            }));\n        }\n        const id = (0,_swc_helpers_class_private_field_update__WEBPACK_IMPORTED_MODULE_13__._)(this, _nextId).value++;\n        const promise = new Promise((resolve, reject)=>{\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _payloads).push({\n                resolve,\n                reject,\n                payload: {\n                    method,\n                    params,\n                    id,\n                    jsonrpc: \"2.0\"\n                }\n            });\n        });\n        // If there is not a pending drainTimer, set one\n        (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_14__._)(this, _scheduleDrain, scheduleDrain).call(this);\n        return promise;\n    }\n    /**\n     *  Resolves to the [[Signer]] account for  %%address%% managed by\n     *  the client.\n     *\n     *  If the %%address%% is a number, it is used as an index in the\n     *  the accounts from [[listAccounts]].\n     *\n     *  This can only be used on clients which manage accounts (such as\n     *  Geth with imported account or MetaMask).\n     *\n     *  Throws if the account doesn't exist.\n     */ async getSigner(address) {\n        if (address == null) {\n            address = 0;\n        }\n        const accountsPromise = this.send(\"eth_accounts\", []);\n        // Account index\n        if (typeof address === \"number\") {\n            const accounts = await accountsPromise;\n            if (address >= accounts.length) {\n                throw new Error(\"no such account\");\n            }\n            return new JsonRpcSigner(this, accounts[address]);\n        }\n        const { accounts } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.resolveProperties)({\n            network: this.getNetwork(),\n            accounts: accountsPromise\n        });\n        // Account address\n        address = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_6__.getAddress)(address);\n        for (const account of accounts){\n            if ((0,_address_index_js__WEBPACK_IMPORTED_MODULE_6__.getAddress)(account) === address) {\n                return new JsonRpcSigner(this, address);\n            }\n        }\n        throw new Error(\"invalid account\");\n    }\n    async listAccounts() {\n        const accounts = await this.send(\"eth_accounts\", []);\n        return accounts.map((a)=>new JsonRpcSigner(this, a));\n    }\n    destroy() {\n        // Stop processing requests\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _drainTimer)) {\n            clearTimeout((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _drainTimer));\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _drainTimer, null);\n        }\n        // Cancel all pending requests\n        for (const { payload, reject } of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _payloads)){\n            reject((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n                operation: payload.method\n            }));\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _payloads, []);\n        // Parent clean-up\n        super.destroy();\n    }\n    constructor(network, options){\n        super(network, options);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_19__._)(this, _scheduleDrain);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _options, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _nextId, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _payloads, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _drainTimer, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _notReady, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _network, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _pendingDetectNetwork, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _nextId, 1);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _options, Object.assign({}, defaultOptions, options || {}));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _payloads, []);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _drainTimer, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _network, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _pendingDetectNetwork, null);\n        {\n            let resolve = null;\n            const promise = new Promise((_resolve)=>{\n                resolve = _resolve;\n            });\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _notReady, {\n                promise,\n                resolve\n            });\n        }\n        const staticNetwork = this._getOption(\"staticNetwork\");\n        if (typeof staticNetwork === \"boolean\") {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(!staticNetwork || network !== \"any\", \"staticNetwork cannot be used on special network 'any'\", \"options\", options);\n            if (staticNetwork && network != null) {\n                (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _network, _network_js__WEBPACK_IMPORTED_MODULE_12__.Network.from(network));\n            }\n        } else if (staticNetwork) {\n            // Make sure any static network is compatbile with the provided netwrok\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(network == null || staticNetwork.matches(network), \"staticNetwork MUST match network object\", \"options\", options);\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _network, staticNetwork);\n        }\n    }\n}\nfunction scheduleDrain() {\n    if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _drainTimer)) {\n        return;\n    }\n    // If we aren't using batching, no harm in sending it immediately\n    const stallTime = this._getOption(\"batchMaxCount\") === 1 ? 0 : this._getOption(\"batchStallTime\");\n    (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _drainTimer, setTimeout(()=>{\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _drainTimer, null);\n        const payloads = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _payloads);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _payloads, []);\n        while(payloads.length){\n            // Create payload batches that satisfy our batch constraints\n            const batch = [\n                payloads.shift()\n            ];\n            while(payloads.length){\n                if (batch.length === (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _options).batchMaxCount) {\n                    break;\n                }\n                batch.push(payloads.shift());\n                const bytes = JSON.stringify(batch.map((p)=>p.payload));\n                if (bytes.length > (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _options).batchMaxSize) {\n                    payloads.unshift(batch.pop());\n                    break;\n                }\n            }\n            // Process the result to each payload\n            (async ()=>{\n                const payload = batch.length === 1 ? batch[0].payload : batch.map((p)=>p.payload);\n                this.emit(\"debug\", {\n                    action: \"sendRpcPayload\",\n                    payload\n                });\n                try {\n                    const result = await this._send(payload);\n                    this.emit(\"debug\", {\n                        action: \"receiveRpcResult\",\n                        result\n                    });\n                    // Process results in batch order\n                    for (const { resolve, reject, payload } of batch){\n                        if (this.destroyed) {\n                            reject((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n                                operation: payload.method\n                            }));\n                            continue;\n                        }\n                        // Find the matching result\n                        const resp = result.filter((r)=>r.id === payload.id)[0];\n                        // No result; the node failed us in unexpected ways\n                        if (resp == null) {\n                            const error = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"missing response for request\", \"BAD_DATA\", {\n                                value: result,\n                                info: {\n                                    payload\n                                }\n                            });\n                            this.emit(\"error\", error);\n                            reject(error);\n                            continue;\n                        }\n                        // The response is an error\n                        if (\"error\" in resp) {\n                            reject(this.getRpcError(payload, resp));\n                            continue;\n                        }\n                        // All good; send the result\n                        resolve(resp.result);\n                    }\n                } catch (error) {\n                    this.emit(\"debug\", {\n                        action: \"receiveRpcError\",\n                        error\n                    });\n                    for (const { reject } of batch){\n                        // @TODO: augment the error with the payload\n                        reject(error);\n                    }\n                }\n            })();\n        }\n    }, stallTime));\n}\nvar _pollingInterval = /*#__PURE__*/ new WeakMap();\n// @TODO: remove this in v7, it is not exported because this functionality\n// is exposed in the JsonRpcApiProvider by setting polling to true. It should\n// be safe to remove regardless, because it isn't reachable, but just in case.\n/**\n *  @_ignore:\n */ class JsonRpcApiPollingProvider extends JsonRpcApiProvider {\n    _getSubscriber(sub) {\n        const subscriber = super._getSubscriber(sub);\n        if (isPollable(subscriber)) {\n            subscriber.pollingInterval = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _pollingInterval);\n        }\n        return subscriber;\n    }\n    /**\n     *  The polling interval (default: 4000 ms)\n     */ get pollingInterval() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _pollingInterval);\n    }\n    set pollingInterval(value) {\n        if (!Number.isInteger(value) || value < 0) {\n            throw new Error(\"invalid interval\");\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _pollingInterval, value);\n        this._forEachSubscriber((sub)=>{\n            if (isPollable(sub)) {\n                sub.pollingInterval = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _pollingInterval);\n            }\n        });\n    }\n    constructor(network, options){\n        super(network, options);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _pollingInterval, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _pollingInterval, 4000);\n    }\n}\nvar _connect = /*#__PURE__*/ new WeakMap();\n/**\n *  The JsonRpcProvider is one of the most common Providers,\n *  which performs all operations over HTTP (or HTTPS) requests.\n *\n *  Events are processed by polling the backend for the current block\n *  number; when it advances, all block-base events are then checked\n *  for updates.\n */ class JsonRpcProvider extends JsonRpcApiPollingProvider {\n    _getConnection() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_9__._)(this, _connect).clone();\n    }\n    async send(method, params) {\n        // All requests are over HTTP, so we can just start handling requests\n        // We do this here rather than the constructor so that we don't send any\n        // requests to the network (i.e. eth_chainId) until we absolutely have to.\n        await this._start();\n        return await super.send(method, params);\n    }\n    async _send(payload) {\n        // Configure a POST connection for the requested method\n        const request = this._getConnection();\n        request.body = JSON.stringify(payload);\n        request.setHeader(\"content-type\", \"application/json\");\n        const response = await request.send();\n        response.assertOk();\n        let resp = response.bodyJson;\n        if (!Array.isArray(resp)) {\n            resp = [\n                resp\n            ];\n        }\n        return resp;\n    }\n    constructor(url, network, options){\n        if (url == null) {\n            url = \"http://localhost:8545\";\n        }\n        super(network, options);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_20__._)(this, _connect, {\n            writable: true,\n            value: void 0\n        });\n        if (typeof url === \"string\") {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _connect, new _utils_index_js__WEBPACK_IMPORTED_MODULE_21__.FetchRequest(url));\n        } else {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _connect, url.clone());\n        }\n    }\n}\nfunction spelunkData(value) {\n    if (value == null) {\n        return null;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof value.message === \"string\" && value.message.match(/revert/i) && (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.isHexString)(value.data)) {\n        return {\n            message: value.message,\n            data: value.data\n        };\n    }\n    // Spelunk further...\n    if (typeof value === \"object\") {\n        for(const key in value){\n            const result = spelunkData(value[key]);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof value === \"string\") {\n        try {\n            return spelunkData(JSON.parse(value));\n        } catch (error) {}\n    }\n    return null;\n}\nfunction _spelunkMessage(value, result) {\n    if (value == null) {\n        return;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof value.message === \"string\") {\n        result.push(value.message);\n    }\n    // Spelunk further...\n    if (typeof value === \"object\") {\n        for(const key in value){\n            _spelunkMessage(value[key], result);\n        }\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof value === \"string\") {\n        try {\n            return _spelunkMessage(JSON.parse(value), result);\n        } catch (error) {}\n    }\n}\nfunction spelunkMessage(value) {\n    const result = [];\n    _spelunkMessage(value, result);\n    return result;\n} //# sourceMappingURL=provider-jsonrpc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3Byb3ZpZGVyLWpzb25ycGMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7OztDQVVDLEdBQ0QsU0FBUztBQUNULHlCQUF5QjtBQUN6Qix5UUFBeVE7Ozs7Ozs7QUFDOU47QUFDc0I7QUFDYjtBQUNJO0FBQ29JO0FBQzdHO0FBQ3pCO0FBQ2Y7QUFDdUQ7QUFDN0I7QUFDakUsTUFBTXdCLFlBQVksK0NBQStDQyxLQUFLLENBQUM7QUFDdkUsZ0RBQWdEO0FBQ2hELFNBQVNDLFNBQVNDLEtBQUs7SUFDbkIsSUFBSUEsU0FBUyxRQUFRSCxVQUFVSSxPQUFPLENBQUMsT0FBUUQsVUFBVyxHQUFHO1FBQ3pELE9BQU9BO0lBQ1g7SUFDQSx1QkFBdUI7SUFDdkIsSUFBSSxPQUFRQSxNQUFNMUIsVUFBVSxLQUFNLFlBQVk7UUFDMUMsT0FBTzBCO0lBQ1g7SUFDQSxJQUFJRSxNQUFNQyxPQUFPLENBQUNILFFBQVE7UUFDdEIsT0FBUUEsTUFBTUksR0FBRyxDQUFDTDtJQUN0QjtJQUNBLElBQUksT0FBUUMsVUFBVyxVQUFVO1FBQzdCLE9BQU9LLE9BQU9DLElBQUksQ0FBQ04sT0FBT08sTUFBTSxDQUFDLENBQUNDLE9BQU9DO1lBQ3JDRCxLQUFLLENBQUNDLElBQUksR0FBR1QsS0FBSyxDQUFDUyxJQUFJO1lBQ3ZCLE9BQU9EO1FBQ1gsR0FBRyxDQUFDO0lBQ1I7SUFDQSxNQUFNLElBQUlFLE1BQU0sc0JBQWdDLE9BQVZWLE9BQU0sTUFBbUIsT0FBZixPQUFRQSxPQUFPO0FBQ25FO0FBQ0EsU0FBU1csTUFBTUMsUUFBUTtJQUNuQixPQUFPLElBQUlDLFFBQVEsQ0FBQ0M7UUFBY0MsV0FBV0QsU0FBU0Y7SUFBVztBQUNyRTtBQUNBLFNBQVNJLGFBQWFoQixLQUFLO0lBQ3ZCLElBQUlBLE9BQU87UUFDUCxPQUFPQSxN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LENBQUU7SUFDcEI7QUFDSjtBQUNBLFNBQVNtRixlQUFlL0ksS0FBSztJQUN6QixNQUFNeUcsU0FBUyxFQUFFO0lBQ2pCdUYsZ0JBQWdCaE0sT0FBT3lHO0lBQ3ZCLE9BQU9BO0FBQ1gsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvcHJvdmlkZXItanNvbnJwYy5qcz80NmI2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIE9uZSBvZiB0aGUgbW9zdCBjb21tb24gd2F5cyB0byBpbnRlcmFjdCB3aXRoIHRoZSBibG9ja2NoYWluIGlzXG4gKiAgYnkgYSBub2RlIHJ1bm5pbmcgYSBKU09OLVJQQyBpbnRlcmZhY2Ugd2hpY2ggY2FuIGJlIGNvbm5lY3RlZCB0byxcbiAqICBiYXNlZCBvbiB0aGUgdHJhbnNwb3J0LCB1c2luZzpcbiAqXG4gKiAgLSBIVFRQIG9yIEhUVFBTIC0gW1tKc29uUnBjUHJvdmlkZXJdXVxuICogIC0gV2ViU29ja2V0IC0gW1tXZWJTb2NrZXRQcm92aWRlcl1dXG4gKiAgLSBJUEMgLSBbW0lwY1NvY2tldFByb3ZpZGVyXV1cbiAqXG4gKiBAX3NlY3Rpb246IGFwaS9wcm92aWRlcnMvanNvbnJwYzpKU09OLVJQQyBQcm92aWRlciAgW2Fib3V0LWpzb25ycGNQcm92aWRlcl1cbiAqL1xuLy8gQFRPRE86XG4vLyAtIEFkZCB0aGUgYmF0Y2hpbmcgQVBJXG4vLyBodHRwczovL3BsYXlncm91bmQub3Blbi1ycGMub3JnLz9zY2hlbWFVcmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2V0aGVyZXVtL2V0aDEuMC1hcGlzL2Fzc2VtYmxlZC1zcGVjL29wZW5ycGMuanNvbiZ1aVNjaGVtYSU1QmFwcEJhciU1RCU1QnVpOnNwbGl0VmlldyU1RD10cnVlJnVpU2NoZW1hJTVCYXBwQmFyJTVEJTVCdWk6aW5wdXQlNUQ9ZmFsc2UmdWlTY2hlbWElNUJhcHBCYXIlNUQlNUJ1aTpleGFtcGxlc0Ryb3Bkb3duJTVEPWZhbHNlXG5pbXBvcnQgeyBBYmlDb2RlciB9IGZyb20gXCIuLi9hYmkvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldEFkZHJlc3MsIHJlc29sdmVBZGRyZXNzIH0gZnJvbSBcIi4uL2FkZHJlc3MvaW5kZXguanNcIjtcbmltcG9ydCB7IFR5cGVkRGF0YUVuY29kZXIgfSBmcm9tIFwiLi4vaGFzaC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgYWNjZXNzTGlzdGlmeSB9IGZyb20gXCIuLi90cmFuc2FjdGlvbi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcywgZ2V0QmlnSW50LCBoZXhsaWZ5LCBpc0hleFN0cmluZywgdG9RdWFudGl0eSwgdG9VdGY4Qnl0ZXMsIGlzRXJyb3IsIG1ha2VFcnJvciwgYXNzZXJ0LCBhc3NlcnRBcmd1bWVudCwgRmV0Y2hSZXF1ZXN0LCByZXNvbHZlUHJvcGVydGllcyB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQWJzdHJhY3RQcm92aWRlciwgVW5tYW5hZ2VkU3Vic2NyaWJlciB9IGZyb20gXCIuL2Fic3RyYWN0LXByb3ZpZGVyLmpzXCI7XG5pbXBvcnQgeyBBYnN0cmFjdFNpZ25lciB9IGZyb20gXCIuL2Fic3RyYWN0LXNpZ25lci5qc1wiO1xuaW1wb3J0IHsgTmV0d29yayB9IGZyb20gXCIuL25ldHdvcmsuanNcIjtcbmltcG9ydCB7IEZpbHRlcklkRXZlbnRTdWJzY3JpYmVyLCBGaWx0ZXJJZFBlbmRpbmdTdWJzY3JpYmVyIH0gZnJvbSBcIi4vc3Vic2NyaWJlci1maWx0ZXJpZC5qc1wiO1xuaW1wb3J0IHsgUG9sbGluZ0V2ZW50U3Vic2NyaWJlciB9IGZyb20gXCIuL3N1YnNjcmliZXItcG9sbGluZy5qc1wiO1xuY29uc3QgUHJpbWl0aXZlID0gXCJiaWdpbnQsYm9vbGVhbixmdW5jdGlvbixudW1iZXIsc3RyaW5nLHN5bWJvbFwiLnNwbGl0KC8sL2cpO1xuLy9jb25zdCBNZXRob2RzID0gXCJnZXRBZGRyZXNzLHRoZW5cIi5zcGxpdCgvLC9nKTtcbmZ1bmN0aW9uIGRlZXBDb3B5KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgUHJpbWl0aXZlLmluZGV4T2YodHlwZW9mICh2YWx1ZSkpID49IDApIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICAvLyBLZWVwIGFueSBBZGRyZXNzYWJsZVxuICAgIGlmICh0eXBlb2YgKHZhbHVlLmdldEFkZHJlc3MpID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZS5tYXAoZGVlcENvcHkpKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkucmVkdWNlKChhY2N1bSwga2V5KSA9PiB7XG4gICAgICAgICAgICBhY2N1bVtrZXldID0gdmFsdWVba2V5XTtcbiAgICAgICAgICAgIHJldHVybiBhY2N1bTtcbiAgICAgICAgfSwge30pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYHNob3VsZCBub3QgaGFwcGVuOiAke3ZhbHVlfSAoJHt0eXBlb2YgKHZhbHVlKX0pYCk7XG59XG5mdW5jdGlvbiBzdGFsbChkdXJhdGlvbikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4geyBzZXRUaW1lb3V0KHJlc29sdmUsIGR1cmF0aW9uKTsgfSk7XG59XG5mdW5jdGlvbiBnZXRMb3dlckNhc2UodmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGlzUG9sbGFibGUodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiAodmFsdWUucG9sbGluZ0ludGVydmFsKSA9PT0gXCJudW1iZXJcIik7XG59XG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBwb2xsaW5nOiBmYWxzZSxcbiAgICBzdGF0aWNOZXR3b3JrOiBudWxsLFxuICAgIGJhdGNoU3RhbGxUaW1lOiAxMCxcbiAgICBiYXRjaE1heFNpemU6ICgxIDw8IDIwKSxcbiAgICBiYXRjaE1heENvdW50OiAxMDAsXG4gICAgY2FjaGVUaW1lb3V0OiAyNTAsXG4gICAgcG9sbGluZ0ludGVydmFsOiA0MDAwXG59O1xuLy8gQFRPRE86IFVuY2hlY2tlZCBTaWduZXJzXG5leHBvcnQgY2xhc3MgSnNvblJwY1NpZ25lciBleHRlbmRzIEFic3RyYWN0U2lnbmVyIHtcbiAgICBhZGRyZXNzO1xuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyLCBhZGRyZXNzKSB7XG4gICAgICAgIHN1cGVyKHByb3ZpZGVyKTtcbiAgICAgICAgYWRkcmVzcyA9IGdldEFkZHJlc3MoYWRkcmVzcyk7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBhZGRyZXNzIH0pO1xuICAgIH1cbiAgICBjb25uZWN0KHByb3ZpZGVyKSB7XG4gICAgICAgIGFzc2VydChmYWxzZSwgXCJjYW5ub3QgcmVjb25uZWN0IEpzb25ScGNTaWduZXJcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcInNpZ25lci5jb25uZWN0XCJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGdldEFkZHJlc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZHJlc3M7XG4gICAgfVxuICAgIC8vIEpTT04tUlBDIHdpbGwgYXV0b21hdGlhbGx5IGZpbGwgaW4gbm9uY2UsIGV0Yy4gc28gd2UganVzdCBjaGVjayBmcm9tXG4gICAgYXN5bmMgcG9wdWxhdGVUcmFuc2FjdGlvbih0eCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wb3B1bGF0ZUNhbGwodHgpO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIGp1c3QgdGhlIGhhc2ggb2YgdGhlIHRyYW5zYWN0aW9uIGFmdGVyIHNlbnQsIHdoaWNoIGlzIHdoYXRcbiAgICAvLyB0aGUgYmFyZSBKU09OLVJQQyBBUEkgZG9lcztcbiAgICBhc3luYyBzZW5kVW5jaGVja2VkVHJhbnNhY3Rpb24oX3R4KSB7XG4gICAgICAgIGNvbnN0IHR4ID0gZGVlcENvcHkoX3R4KTtcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBmcm9tIG1hdGNoZXMgdGhlIHNlbmRlclxuICAgICAgICBpZiAodHguZnJvbSkge1xuICAgICAgICAgICAgY29uc3QgX2Zyb20gPSB0eC5mcm9tO1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZyb20gPSBhd2FpdCByZXNvbHZlQWRkcmVzcyhfZnJvbSwgdGhpcy5wcm92aWRlcik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZnJvbSAhPSBudWxsICYmIGZyb20udG9Mb3dlckNhc2UoKSA9PT0gdGhpcy5hZGRyZXNzLnRvTG93ZXJDYXNlKCksIFwiZnJvbSBhZGRyZXNzIG1pc21hdGNoXCIsIFwidHJhbnNhY3Rpb25cIiwgX3R4KTtcbiAgICAgICAgICAgICAgICB0eC5mcm9tID0gZnJvbTtcbiAgICAgICAgICAgIH0pKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHguZnJvbSA9IHRoaXMuYWRkcmVzcztcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgSlNPTi1SUEMgZm9yIGV0aF9zZW5kVHJhbnNhY3Rpb24gdXNlcyA5MDAwMCBnYXM7IGlmIHRoZSB1c2VyXG4gICAgICAgIC8vIHdpc2hlcyB0byB1c2UgdGhpcywgaXQgaXMgZWFzeSB0byBzcGVjaWZ5IGV4cGxpY2l0bHksIG90aGVyd2lzZVxuICAgICAgICAvLyB3ZSBsb29rIGl0IHVwIGZvciB0aGVtLlxuICAgICAgICBpZiAodHguZ2FzTGltaXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHR4Lmdhc0xpbWl0ID0gYXdhaXQgdGhpcy5wcm92aWRlci5lc3RpbWF0ZUdhcyh7IC4uLnR4LCBmcm9tOiB0aGlzLmFkZHJlc3MgfSk7XG4gICAgICAgICAgICB9KSgpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgYWRkcmVzcyBtYXkgYmUgYW4gRU5TIG5hbWUgb3IgQWRkcmVzc2FibGVcbiAgICAgICAgaWYgKHR4LnRvICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IF90byA9IHR4LnRvO1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHR4LnRvID0gYXdhaXQgcmVzb2x2ZUFkZHJlc3MoX3RvLCB0aGlzLnByb3ZpZGVyKTtcbiAgICAgICAgICAgIH0pKCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdhaXQgdW50aWwgYWxsIG9mIG91ciBwcm9wZXJ0aWVzIGFyZSBmaWxsZWQgaW5cbiAgICAgICAgaWYgKHByb21pc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhleFR4ID0gdGhpcy5wcm92aWRlci5nZXRScGNUcmFuc2FjdGlvbih0eCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLnNlbmQoXCJldGhfc2VuZFRyYW5zYWN0aW9uXCIsIFtoZXhUeF0pO1xuICAgIH1cbiAgICBhc3luYyBzZW5kVHJhbnNhY3Rpb24odHgpIHtcbiAgICAgICAgLy8gVGhpcyBjYW5ub3QgYmUgbWluZWQgYW55IGVhcmxpZXIgdGhhbiBhbnkgcmVjZW50IGJsb2NrXG4gICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyID0gYXdhaXQgdGhpcy5wcm92aWRlci5nZXRCbG9ja051bWJlcigpO1xuICAgICAgICAvLyBTZW5kIHRoZSB0cmFuc2FjdGlvblxuICAgICAgICBjb25zdCBoYXNoID0gYXdhaXQgdGhpcy5zZW5kVW5jaGVja2VkVHJhbnNhY3Rpb24odHgpO1xuICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5LCBKU09OLVJQQyBvbmx5IHByb3ZpZGVzIGFuZCBvcGFxdWUgdHJhbnNhY3Rpb24gaGFzaFxuICAgICAgICAvLyBmb3IgYSByZXNwb25zZSwgYW5kIHdlIG5lZWQgdGhlIGFjdHVhbCB0cmFuc2FjdGlvbiwgc28gd2UgcG9sbFxuICAgICAgICAvLyBmb3IgaXQ7IGl0IHNob3VsZCBzaG93IHVwIHZlcnkgcXVpY2tseVxuICAgICAgICByZXR1cm4gYXdhaXQgKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXRzID0gWzEwMDAsIDEwMF07XG4gICAgICAgICAgICBsZXQgaW52YWxpZHMgPSAwO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tUeCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUcnkgZ2V0dGluZyB0aGUgdHJhbnNhY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHggPSBhd2FpdCB0aGlzLnByb3ZpZGVyLmdldFRyYW5zYWN0aW9uKGhhc2gpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0eC5yZXBsYWNlYWJsZVRyYW5zYWN0aW9uKGJsb2NrTnVtYmVyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHdlcmUgY2FuY2VsbGVkOiBzdG9wIHBvbGxpbmcuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBkYXRhIGlzIGJhZDogdGhlIG5vZGUgcmV0dXJucyBiYWQgdHJhbnNhY3Rpb25zXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBuZXR3b3JrIGNoYW5nZWQ6IGNhbGxpbmcgYWdhaW4gd2lsbCBhbHNvIGZhaWxcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdW5zdXBwb3J0ZWQ6IGxpa2VseSBkZXN0cm95ZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRXJyb3IoZXJyb3IsIFwiQ0FOQ0VMTEVEXCIpIHx8IGlzRXJyb3IoZXJyb3IsIFwiQkFEX0RBVEFcIikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRXJyb3IoZXJyb3IsIFwiTkVUV09SS19FUlJPUlwiIHx8IGlzRXJyb3IoZXJyb3IsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLmluZm8gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLmluZm8gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLmluZm8uc2VuZFRyYW5zYWN0aW9uSGFzaCA9IGhhc2g7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFN0b3AtZ2FwIGZvciBtaXNiZWhhdmluZyBiYWNrZW5kczsgc2VlICM0NTEzXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0Vycm9yKGVycm9yLCBcIklOVkFMSURfQVJHVU1FTlRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWRzKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IuaW5mbyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IuaW5mbyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IuaW5mby5zZW5kVHJhbnNhY3Rpb25IYXNoID0gaGFzaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnZhbGlkcyA+IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gTm90aWZ5IGFueW9uZSB0aGF0IGNhcmVzOyBidXQgd2Ugd2lsbCB0cnkgYWdhaW4sIHNpbmNlXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0IGlzIGxpa2VseSBhbiBpbnRlcm1pdHRlbnQgc2VydmljZSBlcnJvclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3ZpZGVyLmVtaXQoXCJlcnJvclwiLCBtYWtlRXJyb3IoXCJmYWlsZWQgdG8gZmV0Y2ggdHJhbnNhdGlvbiBhZnRlciBzZW5kaW5nICh3aWxsIHRyeSBhZ2FpbilcIiwgXCJVTktOT1dOX0VSUk9SXCIsIHsgZXJyb3IgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBXYWl0IGFub3RoZXIgNCBzZWNvbmRzXG4gICAgICAgICAgICAgICAgdGhpcy5wcm92aWRlci5fc2V0VGltZW91dCgoKSA9PiB7IGNoZWNrVHgoKTsgfSwgdGltZW91dHMucG9wKCkgfHwgNDAwMCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2hlY2tUeCgpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGFzeW5jIHNpZ25UcmFuc2FjdGlvbihfdHgpIHtcbiAgICAgICAgY29uc3QgdHggPSBkZWVwQ29weShfdHgpO1xuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGZyb20gbWF0Y2hlcyB0aGUgc2VuZGVyXG4gICAgICAgIGlmICh0eC5mcm9tKSB7XG4gICAgICAgICAgICBjb25zdCBmcm9tID0gYXdhaXQgcmVzb2x2ZUFkZHJlc3ModHguZnJvbSwgdGhpcy5wcm92aWRlcik7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChmcm9tICE9IG51bGwgJiYgZnJvbS50b0xvd2VyQ2FzZSgpID09PSB0aGlzLmFkZHJlc3MudG9Mb3dlckNhc2UoKSwgXCJmcm9tIGFkZHJlc3MgbWlzbWF0Y2hcIiwgXCJ0cmFuc2FjdGlvblwiLCBfdHgpO1xuICAgICAgICAgICAgdHguZnJvbSA9IGZyb207XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0eC5mcm9tID0gdGhpcy5hZGRyZXNzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhleFR4ID0gdGhpcy5wcm92aWRlci5nZXRScGNUcmFuc2FjdGlvbih0eCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3ZpZGVyLnNlbmQoXCJldGhfc2lnblRyYW5zYWN0aW9uXCIsIFtoZXhUeF0pO1xuICAgIH1cbiAgICBhc3luYyBzaWduTWVzc2FnZShfbWVzc2FnZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gKCh0eXBlb2YgKF9tZXNzYWdlKSA9PT0gXCJzdHJpbmdcIikgPyB0b1V0ZjhCeXRlcyhfbWVzc2FnZSkgOiBfbWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3ZpZGVyLnNlbmQoXCJwZXJzb25hbF9zaWduXCIsIFtcbiAgICAgICAgICAgIGhleGxpZnkobWVzc2FnZSksIHRoaXMuYWRkcmVzcy50b0xvd2VyQ2FzZSgpXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBhc3luYyBzaWduVHlwZWREYXRhKGRvbWFpbiwgdHlwZXMsIF92YWx1ZSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGRlZXBDb3B5KF92YWx1ZSk7XG4gICAgICAgIC8vIFBvcHVsYXRlIGFueSBFTlMgbmFtZXMgKGluLXBsYWNlKVxuICAgICAgICBjb25zdCBwb3B1bGF0ZWQgPSBhd2FpdCBUeXBlZERhdGFFbmNvZGVyLnJlc29sdmVOYW1lcyhkb21haW4sIHR5cGVzLCB2YWx1ZSwgYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhZGRyZXNzID0gYXdhaXQgcmVzb2x2ZUFkZHJlc3ModmFsdWUpO1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoYWRkcmVzcyAhPSBudWxsLCBcIlR5cGVkRGF0YSBkb2VzIG5vdCBzdXBwb3J0IG51bGwgYWRkcmVzc1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBhZGRyZXNzO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvdmlkZXIuc2VuZChcImV0aF9zaWduVHlwZWREYXRhX3Y0XCIsIFtcbiAgICAgICAgICAgIHRoaXMuYWRkcmVzcy50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoVHlwZWREYXRhRW5jb2Rlci5nZXRQYXlsb2FkKHBvcHVsYXRlZC5kb21haW4sIHR5cGVzLCBwb3B1bGF0ZWQudmFsdWUpKVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgYXN5bmMgdW5sb2NrKHBhc3N3b3JkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLnNlbmQoXCJwZXJzb25hbF91bmxvY2tBY2NvdW50XCIsIFtcbiAgICAgICAgICAgIHRoaXMuYWRkcmVzcy50b0xvd2VyQ2FzZSgpLCBwYXNzd29yZCwgbnVsbFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9KU09OLVJQQyNldGhfc2lnblxuICAgIGFzeW5jIF9sZWdhY3lTaWduTWVzc2FnZShfbWVzc2FnZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gKCh0eXBlb2YgKF9tZXNzYWdlKSA9PT0gXCJzdHJpbmdcIikgPyB0b1V0ZjhCeXRlcyhfbWVzc2FnZSkgOiBfbWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3ZpZGVyLnNlbmQoXCJldGhfc2lnblwiLCBbXG4gICAgICAgICAgICB0aGlzLmFkZHJlc3MudG9Mb3dlckNhc2UoKSwgaGV4bGlmeShtZXNzYWdlKVxuICAgICAgICBdKTtcbiAgICB9XG59XG4vKipcbiAqICBUaGUgSnNvblJwY0FwaVByb3ZpZGVyIGlzIGFuIGFic3RyYWN0IGNsYXNzIGFuZCAqKk1VU1QqKiBiZVxuICogIHN1Yi1jbGFzc2VkLlxuICpcbiAqICBJdCBwcm92aWRlcyB0aGUgYmFzZSBmb3IgYWxsIEpTT04tUlBDLWJhc2VkIFByb3ZpZGVyIGludGVyYWN0aW9uLlxuICpcbiAqICBTdWItY2xhc3NpbmcgTm90ZXM6XG4gKiAgLSBhIHN1Yi1jbGFzcyBNVVNUIG92ZXJyaWRlIF9zZW5kXG4gKiAgLSBhIHN1Yi1jbGFzcyBNVVNUIGNhbGwgdGhlIGBfc3RhcnQoKWAgbWV0aG9kIG9uY2UgY29ubmVjdGVkXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uUnBjQXBpUHJvdmlkZXIgZXh0ZW5kcyBBYnN0cmFjdFByb3ZpZGVyIHtcbiAgICAjb3B0aW9ucztcbiAgICAvLyBUaGUgbmV4dCBJRCB0byB1c2UgZm9yIHRoZSBKU09OLVJQQyBJRCBmaWVsZFxuICAgICNuZXh0SWQ7XG4gICAgLy8gUGF5bG9hZHMgYXJlIHF1ZXVlZCBhbmQgdHJpZ2dlcmVkIGluIGJhdGNoZXMgdXNpbmcgdGhlIGRyYWluVGltZXJcbiAgICAjcGF5bG9hZHM7XG4gICAgI2RyYWluVGltZXI7XG4gICAgI25vdFJlYWR5O1xuICAgICNuZXR3b3JrO1xuICAgICNwZW5kaW5nRGV0ZWN0TmV0d29yaztcbiAgICAjc2NoZWR1bGVEcmFpbigpIHtcbiAgICAgICAgaWYgKHRoaXMuI2RyYWluVGltZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBhcmVuJ3QgdXNpbmcgYmF0Y2hpbmcsIG5vIGhhcm0gaW4gc2VuZGluZyBpdCBpbW1lZGlhdGVseVxuICAgICAgICBjb25zdCBzdGFsbFRpbWUgPSAodGhpcy5fZ2V0T3B0aW9uKFwiYmF0Y2hNYXhDb3VudFwiKSA9PT0gMSkgPyAwIDogdGhpcy5fZ2V0T3B0aW9uKFwiYmF0Y2hTdGFsbFRpbWVcIik7XG4gICAgICAgIHRoaXMuI2RyYWluVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuI2RyYWluVGltZXIgPSBudWxsO1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZHMgPSB0aGlzLiNwYXlsb2FkcztcbiAgICAgICAgICAgIHRoaXMuI3BheWxvYWRzID0gW107XG4gICAgICAgICAgICB3aGlsZSAocGF5bG9hZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHBheWxvYWQgYmF0Y2hlcyB0aGF0IHNhdGlzZnkgb3VyIGJhdGNoIGNvbnN0cmFpbnRzXG4gICAgICAgICAgICAgICAgY29uc3QgYmF0Y2ggPSBbKHBheWxvYWRzLnNoaWZ0KCkpXTtcbiAgICAgICAgICAgICAgICB3aGlsZSAocGF5bG9hZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXRjaC5sZW5ndGggPT09IHRoaXMuI29wdGlvbnMuYmF0Y2hNYXhDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYmF0Y2gucHVzaCgocGF5bG9hZHMuc2hpZnQoKSkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBieXRlcyA9IEpTT04uc3RyaW5naWZ5KGJhdGNoLm1hcCgocCkgPT4gcC5wYXlsb2FkKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChieXRlcy5sZW5ndGggPiB0aGlzLiNvcHRpb25zLmJhdGNoTWF4U2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZHMudW5zaGlmdCgoYmF0Y2gucG9wKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgdGhlIHJlc3VsdCB0byBlYWNoIHBheWxvYWRcbiAgICAgICAgICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gKChiYXRjaC5sZW5ndGggPT09IDEpID8gYmF0Y2hbMF0ucGF5bG9hZCA6IGJhdGNoLm1hcCgocCkgPT4gcC5wYXlsb2FkKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHsgYWN0aW9uOiBcInNlbmRScGNQYXlsb2FkXCIsIHBheWxvYWQgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9zZW5kKHBheWxvYWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwgeyBhY3Rpb246IFwicmVjZWl2ZVJwY1Jlc3VsdFwiLCByZXN1bHQgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIHJlc3VsdHMgaW4gYmF0Y2ggb3JkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgeyByZXNvbHZlLCByZWplY3QsIHBheWxvYWQgfSBvZiBiYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobWFrZUVycm9yKFwicHJvdmlkZXIgZGVzdHJveWVkOyBjYW5jZWxsZWQgcmVxdWVzdFwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogcGF5bG9hZC5tZXRob2QgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmluZCB0aGUgbWF0Y2hpbmcgcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcCA9IHJlc3VsdC5maWx0ZXIoKHIpID0+IChyLmlkID09PSBwYXlsb2FkLmlkKSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gcmVzdWx0OyB0aGUgbm9kZSBmYWlsZWQgdXMgaW4gdW5leHBlY3RlZCB3YXlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3AgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG1ha2VFcnJvcihcIm1pc3NpbmcgcmVzcG9uc2UgZm9yIHJlcXVlc3RcIiwgXCJCQURfREFUQVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVzdWx0LCBpbmZvOiB7IHBheWxvYWQgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlc3BvbnNlIGlzIGFuIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiZXJyb3JcIiBpbiByZXNwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCh0aGlzLmdldFJwY0Vycm9yKHBheWxvYWQsIHJlc3ApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbCBnb29kOyBzZW5kIHRoZSByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3AucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHsgYWN0aW9uOiBcInJlY2VpdmVScGNFcnJvclwiLCBlcnJvciB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgeyByZWplY3QgfSBvZiBiYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEBUT0RPOiBhdWdtZW50IHRoZSBlcnJvciB3aXRoIHRoZSBwYXlsb2FkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHN0YWxsVGltZSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG5ldHdvcmssIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIobmV0d29yaywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuI25leHRJZCA9IDE7XG4gICAgICAgIHRoaXMuI29wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyB8fCB7fSk7XG4gICAgICAgIHRoaXMuI3BheWxvYWRzID0gW107XG4gICAgICAgIHRoaXMuI2RyYWluVGltZXIgPSBudWxsO1xuICAgICAgICB0aGlzLiNuZXR3b3JrID0gbnVsbDtcbiAgICAgICAgdGhpcy4jcGVuZGluZ0RldGVjdE5ldHdvcmsgPSBudWxsO1xuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgcmVzb2x2ZSA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKF9yZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSA9IF9yZXNvbHZlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLiNub3RSZWFkeSA9IHsgcHJvbWlzZSwgcmVzb2x2ZSB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXRpY05ldHdvcmsgPSB0aGlzLl9nZXRPcHRpb24oXCJzdGF0aWNOZXR3b3JrXCIpO1xuICAgICAgICBpZiAodHlwZW9mIChzdGF0aWNOZXR3b3JrKSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KCFzdGF0aWNOZXR3b3JrIHx8IG5ldHdvcmsgIT09IFwiYW55XCIsIFwic3RhdGljTmV0d29yayBjYW5ub3QgYmUgdXNlZCBvbiBzcGVjaWFsIG5ldHdvcmsgJ2FueSdcIiwgXCJvcHRpb25zXCIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKHN0YXRpY05ldHdvcmsgJiYgbmV0d29yayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jbmV0d29yayA9IE5ldHdvcmsuZnJvbShuZXR3b3JrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0aWNOZXR3b3JrKSB7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgYW55IHN0YXRpYyBuZXR3b3JrIGlzIGNvbXBhdGJpbGUgd2l0aCB0aGUgcHJvdmlkZWQgbmV0d3Jva1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQobmV0d29yayA9PSBudWxsIHx8IHN0YXRpY05ldHdvcmsubWF0Y2hlcyhuZXR3b3JrKSwgXCJzdGF0aWNOZXR3b3JrIE1VU1QgbWF0Y2ggbmV0d29yayBvYmplY3RcIiwgXCJvcHRpb25zXCIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy4jbmV0d29yayA9IHN0YXRpY05ldHdvcms7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGUgb3B0aW9uICUla2V5JSUuXG4gICAgICpcbiAgICAgKiAgU3ViLWNsYXNzZXMgY2FuIHVzZSB0aGlzIHRvIGlucXVpcmUgYWJvdXQgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICAgICAqL1xuICAgIF9nZXRPcHRpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNvcHRpb25zW2tleV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBHZXRzIHRoZSBbW05ldHdvcmtdXSB0aGlzIHByb3ZpZGVyIGhhcyBjb21taXR0ZWQgdG8uIE9uIGVhY2ggY2FsbCwgdGhlIG5ldHdvcmtcbiAgICAgKiAgaXMgZGV0ZWN0ZWQsIGFuZCBpZiBpdCBoYXMgY2hhbmdlZCwgdGhlIGNhbGwgd2lsbCByZWplY3QuXG4gICAgICovXG4gICAgZ2V0IF9uZXR3b3JrKCkge1xuICAgICAgICBhc3NlcnQodGhpcy4jbmV0d29yaywgXCJuZXR3b3JrIGlzIG5vdCBhdmFpbGFibGUgeWV0XCIsIFwiTkVUV09SS19FUlJPUlwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuI25ldHdvcms7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXNvbHZlcyB0byB0aGUgbm9uLW5vcm1hbGl6ZWQgdmFsdWUgYnkgcGVyZm9ybWluZyAlJXJlcSUlLlxuICAgICAqXG4gICAgICogIFN1Yi1jbGFzc2VzIG1heSBvdmVycmlkZSB0aGlzIHRvIG1vZGlmeSBiZWhhdmlvciBvZiBhY3Rpb25zLFxuICAgICAqICBhbmQgc2hvdWxkIGdlbmVyYWxseSBjYWxsIGBgc3VwZXIuX3BlcmZvcm1gYCBhcyBhIGZhbGxiYWNrLlxuICAgICAqL1xuICAgIGFzeW5jIF9wZXJmb3JtKHJlcSkge1xuICAgICAgICAvLyBMZWdhY3kgbmV0d29ya3MgZG8gbm90IGxpa2UgdGhlIHR5cGUgZmllbGQgYmVpbmcgcGFzc2VkIGFsb25nICh3aGljaFxuICAgICAgICAvLyBpcyBmYWlyKSwgc28gd2UgZGVsZXRlIHR5cGUgaWYgaXQgaXMgMCBhbmQgYSBub24tRUlQLTE1NTkgbmV0d29ya1xuICAgICAgICBpZiAocmVxLm1ldGhvZCA9PT0gXCJjYWxsXCIgfHwgcmVxLm1ldGhvZCA9PT0gXCJlc3RpbWF0ZUdhc1wiKSB7XG4gICAgICAgICAgICBsZXQgdHggPSByZXEudHJhbnNhY3Rpb247XG4gICAgICAgICAgICBpZiAodHggJiYgdHgudHlwZSAhPSBudWxsICYmIGdldEJpZ0ludCh0eC50eXBlKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBFSVAtMTU1OSBwcm9wZXJ0aWVzLCBpdCBtaWdodCBiZSBub24tRUlQLWE1NTlcbiAgICAgICAgICAgICAgICBpZiAodHgubWF4RmVlUGVyR2FzID09IG51bGwgJiYgdHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWVEYXRhID0gYXdhaXQgdGhpcy5nZXRGZWVEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmZWVEYXRhLm1heEZlZVBlckdhcyA9PSBudWxsICYmIGZlZURhdGEubWF4UHJpb3JpdHlGZWVQZXJHYXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmV0d29yayBkb2Vzbid0IGtub3cgYWJvdXQgRUlQLTE1NTkgKGFuZCBoZW5jZSB0eXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxID0gT2JqZWN0LmFzc2lnbih7fSwgcmVxLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IE9iamVjdC5hc3NpZ24oe30sIHR4LCB7IHR5cGU6IHVuZGVmaW5lZCB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuZ2V0UnBjUmVxdWVzdChyZXEpO1xuICAgICAgICBpZiAocmVxdWVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5fcGVyZm9ybShyZXEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgU3ViLWNsYXNzZXMgbWF5IG92ZXJyaWRlIHRoaXM7IGl0IGRldGVjdHMgdGhlICphY3R1YWwqIG5ldHdvcmsgdGhhdFxuICAgICAqICB3ZSBhcmUgKipjdXJyZW50bHkqKiBjb25uZWN0ZWQgdG8uXG4gICAgICpcbiAgICAgKiAgS2VlcCBpbiBtaW5kIHRoYXQgW1tzZW5kXV0gbWF5IG9ubHkgYmUgdXNlZCBvbmNlIFtbcmVhZHldXSwgb3RoZXJ3aXNlIHRoZVxuICAgICAqICBfc2VuZCBwcmltaXRpdmUgbXVzdCBiZSB1c2VkIGluc3RlYWQuXG4gICAgICovXG4gICAgYXN5bmMgX2RldGVjdE5ldHdvcmsoKSB7XG4gICAgICAgIGNvbnN0IG5ldHdvcmsgPSB0aGlzLl9nZXRPcHRpb24oXCJzdGF0aWNOZXR3b3JrXCIpO1xuICAgICAgICBpZiAobmV0d29yaykge1xuICAgICAgICAgICAgaWYgKG5ldHdvcmsgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4jbmV0d29yaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jbmV0d29yaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV0d29yaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy4jcGVuZGluZ0RldGVjdE5ldHdvcmspIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLiNwZW5kaW5nRGV0ZWN0TmV0d29yaztcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBhcmUgcmVhZHksIHVzZSBgYHNlbmRgYCwgd2hpY2ggZW5hYmxlZCByZXF1ZXN0cyB0byBiZSBiYXRjaGVkXG4gICAgICAgIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgICAgICAgICB0aGlzLiNwZW5kaW5nRGV0ZWN0TmV0d29yayA9IChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gTmV0d29yay5mcm9tKGdldEJpZ0ludChhd2FpdCB0aGlzLnNlbmQoXCJldGhfY2hhaW5JZFwiLCBbXSkpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jcGVuZGluZ0RldGVjdE5ldHdvcmsgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jcGVuZGluZ0RldGVjdE5ldHdvcmsgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuI3BlbmRpbmdEZXRlY3ROZXR3b3JrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGFyZSBub3QgcmVhZHkgeWV0OyB1c2UgdGhlIHByaW1pdGl2ZSBfc2VuZFxuICAgICAgICB0aGlzLiNwZW5kaW5nRGV0ZWN0TmV0d29yayA9IChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgICAgICAgICAgIGlkOiB0aGlzLiNuZXh0SWQrKywgbWV0aG9kOiBcImV0aF9jaGFpbklkXCIsIHBhcmFtczogW10sIGpzb25ycGM6IFwiMi4wXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJzZW5kUnBjUGF5bG9hZFwiLCBwYXlsb2FkIH0pO1xuICAgICAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gKGF3YWl0IHRoaXMuX3NlbmQocGF5bG9hZCkpWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMuI3BlbmRpbmdEZXRlY3ROZXR3b3JrID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuI3BlbmRpbmdEZXRlY3ROZXR3b3JrID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJyZWNlaXZlUnBjRXJyb3JcIiwgZXJyb3IgfSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJyZWNlaXZlUnBjUmVzdWx0XCIsIHJlc3VsdCB9KTtcbiAgICAgICAgICAgIGlmIChcInJlc3VsdFwiIGluIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBOZXR3b3JrLmZyb20oZ2V0QmlnSW50KHJlc3VsdC5yZXN1bHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IHRoaXMuZ2V0UnBjRXJyb3IocGF5bG9hZCwgcmVzdWx0KTtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuI3BlbmRpbmdEZXRlY3ROZXR3b3JrO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgU3ViLWNsYXNzZXMgKipNVVNUKiogY2FsbCB0aGlzLiBVbnRpbCBbW19zdGFydF1dIGhhcyBiZWVuIGNhbGxlZCwgbm8gY2FsbHNcbiAgICAgKiAgd2lsbCBiZSBwYXNzZWQgdG8gW1tfc2VuZF1dIGZyb20gW1tzZW5kXV0uIElmIGl0IGlzIG92ZXJyaWRkZW4sIHRoZW5cbiAgICAgKiAgYGBzdXBlci5fc3RhcnQoKWBgICoqTVVTVCoqIGJlIGNhbGxlZC5cbiAgICAgKlxuICAgICAqICBDYWxsaW5nIGl0IG11bHRpcGxlIHRpbWVzIGlzIHNhZmUgYW5kIGhhcyBubyBlZmZlY3QuXG4gICAgICovXG4gICAgX3N0YXJ0KCkge1xuICAgICAgICBpZiAodGhpcy4jbm90UmVhZHkgPT0gbnVsbCB8fCB0aGlzLiNub3RSZWFkeS5yZXNvbHZlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNub3RSZWFkeS5yZXNvbHZlKCk7XG4gICAgICAgIHRoaXMuI25vdFJlYWR5ID0gbnVsbDtcbiAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIC8vIEJvb3RzdHJhcCB0aGUgbmV0d29ya1xuICAgICAgICAgICAgd2hpbGUgKHRoaXMuI25ldHdvcmsgPT0gbnVsbCAmJiAhdGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiNuZXR3b3JrID0gYXdhaXQgdGhpcy5fZGV0ZWN0TmV0d29yaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkpzb25ScGNQcm92aWRlciBmYWlsZWQgdG8gZGV0ZWN0IG5ldHdvcmsgYW5kIGNhbm5vdCBzdGFydCB1cDsgcmV0cnkgaW4gMXMgKHBlcmhhcHMgdGhlIFVSTCBpcyB3cm9uZyBvciB0aGUgbm9kZSBpcyBub3Qgc3RhcnRlZClcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIG1ha2VFcnJvcihcImZhaWxlZCB0byBib290c3RyYXAgbmV0d29yayBkZXRlY3Rpb25cIiwgXCJORVRXT1JLX0VSUk9SXCIsIHsgZXZlbnQ6IFwiaW5pdGlhbC1uZXR3b3JrLWRpc2NvdmVyeVwiLCBpbmZvOiB7IGVycm9yIH0gfSkpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzdGFsbCgxMDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdGFydCBkaXNwYXRjaGluZyByZXF1ZXN0c1xuICAgICAgICAgICAgdGhpcy4jc2NoZWR1bGVEcmFpbigpO1xuICAgICAgICB9KSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVzb2x2ZXMgb25jZSB0aGUgW1tfc3RhcnRdXSBoYXMgYmVlbiBjYWxsZWQuIFRoaXMgY2FuIGJlIHVzZWQgaW5cbiAgICAgKiAgc3ViLWNsYXNzZXMgdG8gZGVmZXIgc2VuZGluZyBkYXRhIHVudGlsIHRoZSBjb25uZWN0aW9uIGhhcyBiZWVuXG4gICAgICogIGVzdGFibGlzaGVkLlxuICAgICAqL1xuICAgIGFzeW5jIF93YWl0VW50aWxSZWFkeSgpIHtcbiAgICAgICAgaWYgKHRoaXMuI25vdFJlYWR5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy4jbm90UmVhZHkucHJvbWlzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIFN1YnNjcmliZXIgdGhhdCB3aWxsIG1hbmFnZSB0aGUgJSVzdWIlJS5cbiAgICAgKlxuICAgICAqICBTdWItY2xhc3NlcyBtYXkgb3ZlcnJpZGUgdGhpcyB0byBtb2RpZnkgdGhlIGJlaGF2aW9yIG9mXG4gICAgICogIHN1YnNjcmlwdGlvbiBtYW5hZ2VtZW50LlxuICAgICAqL1xuICAgIF9nZXRTdWJzY3JpYmVyKHN1Yikge1xuICAgICAgICAvLyBQZW5kaW5nIEZpbHRlcnMgYXJlbid0IGF2YWlsYmxlIHZpYSBwb2xsaW5nXG4gICAgICAgIGlmIChzdWIudHlwZSA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmlsdGVySWRQZW5kaW5nU3Vic2NyaWJlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3ViLnR5cGUgPT09IFwiZXZlbnRcIikge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2dldE9wdGlvbihcInBvbGxpbmdcIikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBvbGxpbmdFdmVudFN1YnNjcmliZXIodGhpcywgc3ViLmZpbHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZpbHRlcklkRXZlbnRTdWJzY3JpYmVyKHRoaXMsIHN1Yi5maWx0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE9ycGhhbmVkIExvZ3MgYXJlIGhhbmRsZWQgYXV0b21hdGljYWxseSwgYnkgdGhlIGZpbHRlciwgc2luY2VcbiAgICAgICAgLy8gbG9ncyB3aXRoIHJlbW92ZWQgYXJlIGVtaXR0ZWQgYnkgaXRcbiAgICAgICAgaWYgKHN1Yi50eXBlID09PSBcIm9ycGhhblwiICYmIHN1Yi5maWx0ZXIub3JwaGFuID09PSBcImRyb3AtbG9nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVW5tYW5hZ2VkU3Vic2NyaWJlcihcIm9ycGhhblwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuX2dldFN1YnNjcmliZXIoc3ViKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBvbmx5IGlmIHRoZSBbW19zdGFydF1dIGhhcyBiZWVuIGNhbGxlZC5cbiAgICAgKi9cbiAgICBnZXQgcmVhZHkoKSB7IHJldHVybiB0aGlzLiNub3RSZWFkeSA9PSBudWxsOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgJSV0eCUlIGFzIGEgbm9ybWFsaXplZCBKU09OLVJQQyB0cmFuc2FjdGlvbiByZXF1ZXN0LFxuICAgICAqICB3aGljaCBoYXMgYWxsIHZhbHVlcyBoZXhsaWZpZWQgYW5kIGFueSBudW1lcmljIHZhbHVlcyBjb252ZXJ0ZWRcbiAgICAgKiAgdG8gUXVhbnRpdHkgdmFsdWVzLlxuICAgICAqL1xuICAgIGdldFJwY1RyYW5zYWN0aW9uKHR4KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgICAvLyBKU09OLVJQQyBub3cgcmVxdWlyZXMgbnVtZXJpYyB2YWx1ZXMgdG8gYmUgXCJxdWFudGl0eVwiIHZhbHVlc1xuICAgICAgICBbXCJjaGFpbklkXCIsIFwiZ2FzTGltaXRcIiwgXCJnYXNQcmljZVwiLCBcInR5cGVcIiwgXCJtYXhGZWVQZXJHYXNcIiwgXCJtYXhQcmlvcml0eUZlZVBlckdhc1wiLCBcIm5vbmNlXCIsIFwidmFsdWVcIl0uZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAodHhba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRzdEtleSA9IGtleTtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IFwiZ2FzTGltaXRcIikge1xuICAgICAgICAgICAgICAgIGRzdEtleSA9IFwiZ2FzXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRbZHN0S2V5XSA9IHRvUXVhbnRpdHkoZ2V0QmlnSW50KHR4W2tleV0sIGB0eC4ke2tleX1gKSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBNYWtlIHN1cmUgYWRkcmVzc2VzIGFuZCBkYXRhIGFyZSBsb3dlcmNhc2VcbiAgICAgICAgW1wiZnJvbVwiLCBcInRvXCIsIFwiZGF0YVwiXS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGlmICh0eFtrZXldID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IGhleGxpZnkodHhba2V5XSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBOb3JtYWxpemUgdGhlIGFjY2VzcyBsaXN0IG9iamVjdFxuICAgICAgICBpZiAodHguYWNjZXNzTGlzdCkge1xuICAgICAgICAgICAgcmVzdWx0W1wiYWNjZXNzTGlzdFwiXSA9IGFjY2Vzc0xpc3RpZnkodHguYWNjZXNzTGlzdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIHJlcXVlc3QgbWV0aG9kIGFuZCBhcmd1bWVudHMgcmVxdWlyZWQgdG8gcGVyZm9ybVxuICAgICAqICAlJXJlcSUlLlxuICAgICAqL1xuICAgIGdldFJwY1JlcXVlc3QocmVxKSB7XG4gICAgICAgIHN3aXRjaCAocmVxLm1ldGhvZCkge1xuICAgICAgICAgICAgY2FzZSBcImNoYWluSWRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4geyBtZXRob2Q6IFwiZXRoX2NoYWluSWRcIiwgYXJnczogW10gfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRCbG9ja051bWJlclwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IG1ldGhvZDogXCJldGhfYmxvY2tOdW1iZXJcIiwgYXJnczogW10gfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRHYXNQcmljZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IG1ldGhvZDogXCJldGhfZ2FzUHJpY2VcIiwgYXJnczogW10gfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRQcmlvcml0eUZlZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IG1ldGhvZDogXCJldGhfbWF4UHJpb3JpdHlGZWVQZXJHYXNcIiwgYXJnczogW10gfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRCYWxhbmNlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9nZXRCYWxhbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtnZXRMb3dlckNhc2UocmVxLmFkZHJlc3MpLCByZXEuYmxvY2tUYWddXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRUcmFuc2FjdGlvbkNvdW50XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9nZXRUcmFuc2FjdGlvbkNvdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtnZXRMb3dlckNhc2UocmVxLmFkZHJlc3MpLCByZXEuYmxvY2tUYWddXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRDb2RlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9nZXRDb2RlXCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtnZXRMb3dlckNhc2UocmVxLmFkZHJlc3MpLCByZXEuYmxvY2tUYWddXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRTdG9yYWdlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9nZXRTdG9yYWdlQXRcIixcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TG93ZXJDYXNlKHJlcS5hZGRyZXNzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChcIjB4XCIgKyByZXEucG9zaXRpb24udG9TdHJpbmcoMTYpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcS5ibG9ja1RhZ1xuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgXCJicm9hZGNhc3RUcmFuc2FjdGlvblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJldGhfc2VuZFJhd1RyYW5zYWN0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtyZXEuc2lnbmVkVHJhbnNhY3Rpb25dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRCbG9ja1wiOlxuICAgICAgICAgICAgICAgIGlmIChcImJsb2NrVGFnXCIgaW4gcmVxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZXRoX2dldEJsb2NrQnlOdW1iZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtyZXEuYmxvY2tUYWcsICEhcmVxLmluY2x1ZGVUcmFuc2FjdGlvbnNdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFwiYmxvY2tIYXNoXCIgaW4gcmVxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZXRoX2dldEJsb2NrQnlIYXNoXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbcmVxLmJsb2NrSGFzaCwgISFyZXEuaW5jbHVkZVRyYW5zYWN0aW9uc11cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0VHJhbnNhY3Rpb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZXRoX2dldFRyYW5zYWN0aW9uQnlIYXNoXCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtyZXEuaGFzaF1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uUmVjZWlwdFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJldGhfZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtyZXEuaGFzaF1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBcImNhbGxcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZXRoX2NhbGxcIixcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW3RoaXMuZ2V0UnBjVHJhbnNhY3Rpb24ocmVxLnRyYW5zYWN0aW9uKSwgcmVxLmJsb2NrVGFnXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlIFwiZXN0aW1hdGVHYXNcIjoge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJldGhfZXN0aW1hdGVHYXNcIixcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW3RoaXMuZ2V0UnBjVHJhbnNhY3Rpb24ocmVxLnRyYW5zYWN0aW9uKV1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImdldExvZ3NcIjpcbiAgICAgICAgICAgICAgICBpZiAocmVxLmZpbHRlciAmJiByZXEuZmlsdGVyLmFkZHJlc3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXEuZmlsdGVyLmFkZHJlc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXEuZmlsdGVyLmFkZHJlc3MgPSByZXEuZmlsdGVyLmFkZHJlc3MubWFwKGdldExvd2VyQ2FzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXEuZmlsdGVyLmFkZHJlc3MgPSBnZXRMb3dlckNhc2UocmVxLmZpbHRlci5hZGRyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBtZXRob2Q6IFwiZXRoX2dldExvZ3NcIiwgYXJnczogW3JlcS5maWx0ZXJdIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGFuIGV0aGVycy1zdHlsZSBFcnJvciBmb3IgdGhlIGdpdmVuIEpTT04tUlBDIGVycm9yXG4gICAgICogICUlcGF5bG9hZCUlLCBjb2FsZXNjaW5nIHRoZSB2YXJpb3VzIHN0cmluZ3MgYW5kIGVycm9yIHNoYXBlc1xuICAgICAqICB0aGF0IGRpZmZlcmVudCBub2RlcyByZXR1cm4sIGNvZXJjaW5nIHRoZW0gaW50byBhIG1hY2hpbmUtcmVhZGFibGVcbiAgICAgKiAgc3RhbmRhcmRpemVkIGVycm9yLlxuICAgICAqL1xuICAgIGdldFJwY0Vycm9yKHBheWxvYWQsIF9lcnJvcikge1xuICAgICAgICBjb25zdCB7IG1ldGhvZCB9ID0gcGF5bG9hZDtcbiAgICAgICAgY29uc3QgeyBlcnJvciB9ID0gX2Vycm9yO1xuICAgICAgICBpZiAobWV0aG9kID09PSBcImV0aF9lc3RpbWF0ZUdhc1wiICYmIGVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IGVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICBpZiAoIW1zZy5tYXRjaCgvcmV2ZXJ0L2kpICYmIG1zZy5tYXRjaCgvaW5zdWZmaWNpZW50IGZ1bmRzL2kpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VFcnJvcihcImluc3VmZmljaWVudCBmdW5kc1wiLCBcIklOU1VGRklDSUVOVF9GVU5EU1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiAocGF5bG9hZC5wYXJhbXNbMF0pLFxuICAgICAgICAgICAgICAgICAgICBpbmZvOiB7IHBheWxvYWQsIGVycm9yIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWV0aG9kID09PSBcImV0aF9jYWxsXCIgfHwgbWV0aG9kID09PSBcImV0aF9lc3RpbWF0ZUdhc1wiKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBzcGVsdW5rRGF0YShlcnJvcik7XG4gICAgICAgICAgICBjb25zdCBlID0gQWJpQ29kZXIuZ2V0QnVpbHRpbkNhbGxFeGNlcHRpb24oKG1ldGhvZCA9PT0gXCJldGhfY2FsbFwiKSA/IFwiY2FsbFwiIDogXCJlc3RpbWF0ZUdhc1wiLCAocGF5bG9hZC5wYXJhbXNbMF0pLCAocmVzdWx0ID8gcmVzdWx0LmRhdGEgOiBudWxsKSk7XG4gICAgICAgICAgICBlLmluZm8gPSB7IGVycm9yLCBwYXlsb2FkIH07XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPbmx5IGVzdGltYXRlR2FzIGFuZCBjYWxsIGNhbiByZXR1cm4gYXJiaXRyYXJ5IGNvbnRyYWN0LWRlZmluZWQgdGV4dCwgc28gbm93IHdlXG4gICAgICAgIC8vIHdlIGNhbiBwcm9jZXNzIHRleHQgc2FmZWx5LlxuICAgICAgICBjb25zdCBtZXNzYWdlID0gSlNPTi5zdHJpbmdpZnkoc3BlbHVua01lc3NhZ2UoZXJyb3IpKTtcbiAgICAgICAgaWYgKHR5cGVvZiAoZXJyb3IubWVzc2FnZSkgPT09IFwic3RyaW5nXCIgJiYgZXJyb3IubWVzc2FnZS5tYXRjaCgvdXNlciBkZW5pZWR8ZXRoZXJzLXVzZXItZGVuaWVkL2kpKSB7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb25NYXAgPSB7XG4gICAgICAgICAgICAgICAgZXRoX3NpZ246IFwic2lnbk1lc3NhZ2VcIixcbiAgICAgICAgICAgICAgICBwZXJzb25hbF9zaWduOiBcInNpZ25NZXNzYWdlXCIsXG4gICAgICAgICAgICAgICAgZXRoX3NpZ25UeXBlZERhdGFfdjQ6IFwic2lnblR5cGVkRGF0YVwiLFxuICAgICAgICAgICAgICAgIGV0aF9zaWduVHJhbnNhY3Rpb246IFwic2lnblRyYW5zYWN0aW9uXCIsXG4gICAgICAgICAgICAgICAgZXRoX3NlbmRUcmFuc2FjdGlvbjogXCJzZW5kVHJhbnNhY3Rpb25cIixcbiAgICAgICAgICAgICAgICBldGhfcmVxdWVzdEFjY291bnRzOiBcInJlcXVlc3RBY2Nlc3NcIixcbiAgICAgICAgICAgICAgICB3YWxsZXRfcmVxdWVzdEFjY291bnRzOiBcInJlcXVlc3RBY2Nlc3NcIixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gbWFrZUVycm9yKGB1c2VyIHJlamVjdGVkIGFjdGlvbmAsIFwiQUNUSU9OX1JFSkVDVEVEXCIsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IChhY3Rpb25NYXBbbWV0aG9kXSB8fCBcInVua25vd25cIiksXG4gICAgICAgICAgICAgICAgcmVhc29uOiBcInJlamVjdGVkXCIsXG4gICAgICAgICAgICAgICAgaW5mbzogeyBwYXlsb2FkLCBlcnJvciB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWV0aG9kID09PSBcImV0aF9zZW5kUmF3VHJhbnNhY3Rpb25cIiB8fCBtZXRob2QgPT09IFwiZXRoX3NlbmRUcmFuc2FjdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IChwYXlsb2FkLnBhcmFtc1swXSk7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5tYXRjaCgvaW5zdWZmaWNpZW50IGZ1bmRzfGJhc2UgZmVlIGV4Y2VlZHMgZ2FzIGxpbWl0L2kpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VFcnJvcihcImluc3VmZmljaWVudCBmdW5kcyBmb3IgaW50cmluc2ljIHRyYW5zYWN0aW9uIGNvc3RcIiwgXCJJTlNVRkZJQ0lFTlRfRlVORFNcIiwge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbiwgaW5mbzogeyBlcnJvciB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5tYXRjaCgvbm9uY2UvaSkgJiYgbWVzc2FnZS5tYXRjaCgvdG9vIGxvdy9pKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlRXJyb3IoXCJub25jZSBoYXMgYWxyZWFkeSBiZWVuIHVzZWRcIiwgXCJOT05DRV9FWFBJUkVEXCIsIHsgdHJhbnNhY3Rpb24sIGluZm86IHsgZXJyb3IgfSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFwicmVwbGFjZW1lbnQgdHJhbnNhY3Rpb24gdW5kZXJwcmljZWRcIlxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UubWF0Y2goL3JlcGxhY2VtZW50IHRyYW5zYWN0aW9uL2kpICYmIG1lc3NhZ2UubWF0Y2goL3VuZGVycHJpY2VkL2kpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VFcnJvcihcInJlcGxhY2VtZW50IGZlZSB0b28gbG93XCIsIFwiUkVQTEFDRU1FTlRfVU5ERVJQUklDRURcIiwgeyB0cmFuc2FjdGlvbiwgaW5mbzogeyBlcnJvciB9IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UubWF0Y2goL29ubHkgcmVwbGF5LXByb3RlY3RlZC9pKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlRXJyb3IoXCJsZWdhY3kgcHJlLWVpcC0xNTUgdHJhbnNhY3Rpb25zIG5vdCBzdXBwb3J0ZWRcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb246IG1ldGhvZCwgaW5mbzogeyB0cmFuc2FjdGlvbiwgaW5mbzogeyBlcnJvciB9IH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgdW5zdXBwb3J0ZWQgPSAhIW1lc3NhZ2UubWF0Y2goL3RoZSBtZXRob2QgLiogZG9lcyBub3QgZXhpc3QvaSk7XG4gICAgICAgIGlmICghdW5zdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIGlmIChlcnJvciAmJiBlcnJvci5kZXRhaWxzICYmIGVycm9yLmRldGFpbHMuc3RhcnRzV2l0aChcIlVuYXV0aG9yaXplZCBtZXRob2Q6XCIpKSB7XG4gICAgICAgICAgICAgICAgdW5zdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh1bnN1cHBvcnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VFcnJvcihcInVuc3VwcG9ydGVkIG9wZXJhdGlvblwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBwYXlsb2FkLm1ldGhvZCwgaW5mbzogeyBlcnJvciwgcGF5bG9hZCB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFrZUVycm9yKFwiY291bGQgbm90IGNvYWxlc2NlIGVycm9yXCIsIFwiVU5LTk9XTl9FUlJPUlwiLCB7IGVycm9yLCBwYXlsb2FkIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVxdWVzdHMgdGhlICUlbWV0aG9kJSUgd2l0aCAlJXBhcmFtcyUlIHZpYSB0aGUgSlNPTi1SUEMgcHJvdG9jb2xcbiAgICAgKiAgb3ZlciB0aGUgdW5kZXJseWluZyBjaGFubmVsLiBUaGlzIGNhbiBiZSB1c2VkIHRvIGNhbGwgbWV0aG9kc1xuICAgICAqICBvbiB0aGUgYmFja2VuZCB0aGF0IGRvIG5vdCBoYXZlIGEgaGlnaC1sZXZlbCBBUEkgd2l0aGluIHRoZSBQcm92aWRlclxuICAgICAqICBBUEkuXG4gICAgICpcbiAgICAgKiAgVGhpcyBtZXRob2QgcXVldWVzIHJlcXVlc3RzIGFjY29yZGluZyB0byB0aGUgYmF0Y2ggY29uc3RyYWludHNcbiAgICAgKiAgaW4gdGhlIG9wdGlvbnMsIGFzc2lnbnMgdGhlIHJlcXVlc3QgYSB1bmlxdWUgSUQuXG4gICAgICpcbiAgICAgKiAgKipEbyBOT1Qgb3ZlcnJpZGUqKiB0aGlzIG1ldGhvZCBpbiBzdWItY2xhc3NlczsgaW5zdGVhZFxuICAgICAqICBvdmVycmlkZSBbW19zZW5kXV0gb3IgZm9yY2UgdGhlIG9wdGlvbnMgdmFsdWVzIGluIHRoZVxuICAgICAqICBjYWxsIHRvIHRoZSBjb25zdHJ1Y3RvciB0byBtb2RpZnkgdGhpcyBtZXRob2QncyBiZWhhdmlvci5cbiAgICAgKi9cbiAgICBzZW5kKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgICAgIC8vIEBUT0RPOiBjYWNoZSBjaGFpbklkPz8gcHVyZ2Ugb24gc3dpdGNoX25ldHdvcmtzXG4gICAgICAgIC8vIFdlIGhhdmUgYmVlbiBkZXN0cm95ZWQ7IG5vIG9wZXJhdGlvbnMgYXJlIHN1cHBvcnRlZCBhbnltb3JlXG4gICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG1ha2VFcnJvcihcInByb3ZpZGVyIGRlc3Ryb3llZDsgY2FuY2VsbGVkIHJlcXVlc3RcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IG1ldGhvZCB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLiNuZXh0SWQrKztcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuI3BheWxvYWRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHJlc29sdmUsIHJlamVjdCxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiB7IG1ldGhvZCwgcGFyYW1zLCBpZCwganNvbnJwYzogXCIyLjBcIiB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIG5vdCBhIHBlbmRpbmcgZHJhaW5UaW1lciwgc2V0IG9uZVxuICAgICAgICB0aGlzLiNzY2hlZHVsZURyYWluKCk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVzb2x2ZXMgdG8gdGhlIFtbU2lnbmVyXV0gYWNjb3VudCBmb3IgICUlYWRkcmVzcyUlIG1hbmFnZWQgYnlcbiAgICAgKiAgdGhlIGNsaWVudC5cbiAgICAgKlxuICAgICAqICBJZiB0aGUgJSVhZGRyZXNzJSUgaXMgYSBudW1iZXIsIGl0IGlzIHVzZWQgYXMgYW4gaW5kZXggaW4gdGhlXG4gICAgICogIHRoZSBhY2NvdW50cyBmcm9tIFtbbGlzdEFjY291bnRzXV0uXG4gICAgICpcbiAgICAgKiAgVGhpcyBjYW4gb25seSBiZSB1c2VkIG9uIGNsaWVudHMgd2hpY2ggbWFuYWdlIGFjY291bnRzIChzdWNoIGFzXG4gICAgICogIEdldGggd2l0aCBpbXBvcnRlZCBhY2NvdW50IG9yIE1ldGFNYXNrKS5cbiAgICAgKlxuICAgICAqICBUaHJvd3MgaWYgdGhlIGFjY291bnQgZG9lc24ndCBleGlzdC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRTaWduZXIoYWRkcmVzcykge1xuICAgICAgICBpZiAoYWRkcmVzcyA9PSBudWxsKSB7XG4gICAgICAgICAgICBhZGRyZXNzID0gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY2NvdW50c1Byb21pc2UgPSB0aGlzLnNlbmQoXCJldGhfYWNjb3VudHNcIiwgW10pO1xuICAgICAgICAvLyBBY2NvdW50IGluZGV4XG4gICAgICAgIGlmICh0eXBlb2YgKGFkZHJlc3MpID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBjb25zdCBhY2NvdW50cyA9IChhd2FpdCBhY2NvdW50c1Byb21pc2UpO1xuICAgICAgICAgICAgaWYgKGFkZHJlc3MgPj0gYWNjb3VudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm8gc3VjaCBhY2NvdW50XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBKc29uUnBjU2lnbmVyKHRoaXMsIGFjY291bnRzW2FkZHJlc3NdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGFjY291bnRzIH0gPSBhd2FpdCByZXNvbHZlUHJvcGVydGllcyh7XG4gICAgICAgICAgICBuZXR3b3JrOiB0aGlzLmdldE5ldHdvcmsoKSxcbiAgICAgICAgICAgIGFjY291bnRzOiBhY2NvdW50c1Byb21pc2VcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEFjY291bnQgYWRkcmVzc1xuICAgICAgICBhZGRyZXNzID0gZ2V0QWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgZm9yIChjb25zdCBhY2NvdW50IG9mIGFjY291bnRzKSB7XG4gICAgICAgICAgICBpZiAoZ2V0QWRkcmVzcyhhY2NvdW50KSA9PT0gYWRkcmVzcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSnNvblJwY1NpZ25lcih0aGlzLCBhZGRyZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGFjY291bnRcIik7XG4gICAgfVxuICAgIGFzeW5jIGxpc3RBY2NvdW50cygpIHtcbiAgICAgICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCB0aGlzLnNlbmQoXCJldGhfYWNjb3VudHNcIiwgW10pO1xuICAgICAgICByZXR1cm4gYWNjb3VudHMubWFwKChhKSA9PiBuZXcgSnNvblJwY1NpZ25lcih0aGlzLCBhKSk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIC8vIFN0b3AgcHJvY2Vzc2luZyByZXF1ZXN0c1xuICAgICAgICBpZiAodGhpcy4jZHJhaW5UaW1lcikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuI2RyYWluVGltZXIpO1xuICAgICAgICAgICAgdGhpcy4jZHJhaW5UaW1lciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2FuY2VsIGFsbCBwZW5kaW5nIHJlcXVlc3RzXG4gICAgICAgIGZvciAoY29uc3QgeyBwYXlsb2FkLCByZWplY3QgfSBvZiB0aGlzLiNwYXlsb2Fkcykge1xuICAgICAgICAgICAgcmVqZWN0KG1ha2VFcnJvcihcInByb3ZpZGVyIGRlc3Ryb3llZDsgY2FuY2VsbGVkIHJlcXVlc3RcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IHBheWxvYWQubWV0aG9kIH0pKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNwYXlsb2FkcyA9IFtdO1xuICAgICAgICAvLyBQYXJlbnQgY2xlYW4tdXBcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cbn1cbi8vIEBUT0RPOiByZW1vdmUgdGhpcyBpbiB2NywgaXQgaXMgbm90IGV4cG9ydGVkIGJlY2F1c2UgdGhpcyBmdW5jdGlvbmFsaXR5XG4vLyBpcyBleHBvc2VkIGluIHRoZSBKc29uUnBjQXBpUHJvdmlkZXIgYnkgc2V0dGluZyBwb2xsaW5nIHRvIHRydWUuIEl0IHNob3VsZFxuLy8gYmUgc2FmZSB0byByZW1vdmUgcmVnYXJkbGVzcywgYmVjYXVzZSBpdCBpc24ndCByZWFjaGFibGUsIGJ1dCBqdXN0IGluIGNhc2UuXG4vKipcbiAqICBAX2lnbm9yZTpcbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25ScGNBcGlQb2xsaW5nUHJvdmlkZXIgZXh0ZW5kcyBKc29uUnBjQXBpUHJvdmlkZXIge1xuICAgICNwb2xsaW5nSW50ZXJ2YWw7XG4gICAgY29uc3RydWN0b3IobmV0d29yaywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihuZXR3b3JrLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy4jcG9sbGluZ0ludGVydmFsID0gNDAwMDtcbiAgICB9XG4gICAgX2dldFN1YnNjcmliZXIoc3ViKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmliZXIgPSBzdXBlci5fZ2V0U3Vic2NyaWJlcihzdWIpO1xuICAgICAgICBpZiAoaXNQb2xsYWJsZShzdWJzY3JpYmVyKSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5wb2xsaW5nSW50ZXJ2YWwgPSB0aGlzLiNwb2xsaW5nSW50ZXJ2YWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgcG9sbGluZyBpbnRlcnZhbCAoZGVmYXVsdDogNDAwMCBtcylcbiAgICAgKi9cbiAgICBnZXQgcG9sbGluZ0ludGVydmFsKCkgeyByZXR1cm4gdGhpcy4jcG9sbGluZ0ludGVydmFsOyB9XG4gICAgc2V0IHBvbGxpbmdJbnRlcnZhbCh2YWx1ZSkge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIodmFsdWUpIHx8IHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBpbnRlcnZhbFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNwb2xsaW5nSW50ZXJ2YWwgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fZm9yRWFjaFN1YnNjcmliZXIoKHN1YikgPT4ge1xuICAgICAgICAgICAgaWYgKGlzUG9sbGFibGUoc3ViKSkge1xuICAgICAgICAgICAgICAgIHN1Yi5wb2xsaW5nSW50ZXJ2YWwgPSB0aGlzLiNwb2xsaW5nSW50ZXJ2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8qKlxuICogIFRoZSBKc29uUnBjUHJvdmlkZXIgaXMgb25lIG9mIHRoZSBtb3N0IGNvbW1vbiBQcm92aWRlcnMsXG4gKiAgd2hpY2ggcGVyZm9ybXMgYWxsIG9wZXJhdGlvbnMgb3ZlciBIVFRQIChvciBIVFRQUykgcmVxdWVzdHMuXG4gKlxuICogIEV2ZW50cyBhcmUgcHJvY2Vzc2VkIGJ5IHBvbGxpbmcgdGhlIGJhY2tlbmQgZm9yIHRoZSBjdXJyZW50IGJsb2NrXG4gKiAgbnVtYmVyOyB3aGVuIGl0IGFkdmFuY2VzLCBhbGwgYmxvY2stYmFzZSBldmVudHMgYXJlIHRoZW4gY2hlY2tlZFxuICogIGZvciB1cGRhdGVzLlxuICovXG5leHBvcnQgY2xhc3MgSnNvblJwY1Byb3ZpZGVyIGV4dGVuZHMgSnNvblJwY0FwaVBvbGxpbmdQcm92aWRlciB7XG4gICAgI2Nvbm5lY3Q7XG4gICAgY29uc3RydWN0b3IodXJsLCBuZXR3b3JrLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICh1cmwgPT0gbnVsbCkge1xuICAgICAgICAgICAgdXJsID0gXCJodHRwOi9cXC9sb2NhbGhvc3Q6ODU0NVwiO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKG5ldHdvcmssIG9wdGlvbnMpO1xuICAgICAgICBpZiAodHlwZW9mICh1cmwpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aGlzLiNjb25uZWN0ID0gbmV3IEZldGNoUmVxdWVzdCh1cmwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4jY29ubmVjdCA9IHVybC5jbG9uZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9nZXRDb25uZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jY29ubmVjdC5jbG9uZSgpO1xuICAgIH1cbiAgICBhc3luYyBzZW5kKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgICAgIC8vIEFsbCByZXF1ZXN0cyBhcmUgb3ZlciBIVFRQLCBzbyB3ZSBjYW4ganVzdCBzdGFydCBoYW5kbGluZyByZXF1ZXN0c1xuICAgICAgICAvLyBXZSBkbyB0aGlzIGhlcmUgcmF0aGVyIHRoYW4gdGhlIGNvbnN0cnVjdG9yIHNvIHRoYXQgd2UgZG9uJ3Qgc2VuZCBhbnlcbiAgICAgICAgLy8gcmVxdWVzdHMgdG8gdGhlIG5ldHdvcmsgKGkuZS4gZXRoX2NoYWluSWQpIHVudGlsIHdlIGFic29sdXRlbHkgaGF2ZSB0by5cbiAgICAgICAgYXdhaXQgdGhpcy5fc3RhcnQoKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLnNlbmQobWV0aG9kLCBwYXJhbXMpO1xuICAgIH1cbiAgICBhc3luYyBfc2VuZChwYXlsb2FkKSB7XG4gICAgICAgIC8vIENvbmZpZ3VyZSBhIFBPU1QgY29ubmVjdGlvbiBmb3IgdGhlIHJlcXVlc3RlZCBtZXRob2RcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX2dldENvbm5lY3Rpb24oKTtcbiAgICAgICAgcmVxdWVzdC5ib2R5ID0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZCk7XG4gICAgICAgIHJlcXVlc3Quc2V0SGVhZGVyKFwiY29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0LnNlbmQoKTtcbiAgICAgICAgcmVzcG9uc2UuYXNzZXJ0T2soKTtcbiAgICAgICAgbGV0IHJlc3AgPSByZXNwb25zZS5ib2R5SnNvbjtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlc3ApKSB7XG4gICAgICAgICAgICByZXNwID0gW3Jlc3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNwZWx1bmtEYXRhKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIFRoZXNlICphcmUqIHRoZSBkcm9pZHMgd2UncmUgbG9va2luZyBmb3IuXG4gICAgaWYgKHR5cGVvZiAodmFsdWUubWVzc2FnZSkgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUubWVzc2FnZS5tYXRjaCgvcmV2ZXJ0L2kpICYmIGlzSGV4U3RyaW5nKHZhbHVlLmRhdGEpKSB7XG4gICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IHZhbHVlLm1lc3NhZ2UsIGRhdGE6IHZhbHVlLmRhdGEgfTtcbiAgICB9XG4gICAgLy8gU3BlbHVuayBmdXJ0aGVyLi4uXG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBzcGVsdW5rRGF0YSh2YWx1ZVtrZXldKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBNaWdodCBiZSBhIEpTT04gc3RyaW5nIHdlIGNhbiBmdXJ0aGVyIGRlc2NlbmQuLi5cbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBzcGVsdW5rRGF0YShKU09OLnBhcnNlKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBfc3BlbHVua01lc3NhZ2UodmFsdWUsIHJlc3VsdCkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gVGhlc2UgKmFyZSogdGhlIGRyb2lkcyB3ZSdyZSBsb29raW5nIGZvci5cbiAgICBpZiAodHlwZW9mICh2YWx1ZS5tZXNzYWdlKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXN1bHQucHVzaCh2YWx1ZS5tZXNzYWdlKTtcbiAgICB9XG4gICAgLy8gU3BlbHVuayBmdXJ0aGVyLi4uXG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICBfc3BlbHVua01lc3NhZ2UodmFsdWVba2V5XSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBNaWdodCBiZSBhIEpTT04gc3RyaW5nIHdlIGNhbiBmdXJ0aGVyIGRlc2NlbmQuLi5cbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBfc3BlbHVua01lc3NhZ2UoSlNPTi5wYXJzZSh2YWx1ZSksIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICB9XG59XG5mdW5jdGlvbiBzcGVsdW5rTWVzc2FnZSh2YWx1ZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIF9zcGVsdW5rTWVzc2FnZSh2YWx1ZSwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXItanNvbnJwYy5qcy5tYXAiXSwibmFtZXMiOlsiQWJpQ29kZXIiLCJnZXRBZGRyZXNzIiwicmVzb2x2ZUFkZHJlc3MiLCJUeXBlZERhdGFFbmNvZGVyIiwiYWNjZXNzTGlzdGlmeSIsImRlZmluZVByb3BlcnRpZXMiLCJnZXRCaWdJbnQiLCJoZXhsaWZ5IiwiaXNIZXhTdHJpbmciLCJ0b1F1YW50aXR5IiwidG9VdGY4Qnl0ZXMiLCJpc0Vycm9yIiwibWFrZUVycm9yIiwiYXNzZXJ0IiwiYXNzZXJ0QXJndW1lbnQiLCJGZXRjaFJlcXVlc3QiLCJyZXNvbHZlUHJvcGVydGllcyIsIkFic3RyYWN0UHJvdmlkZXIiLCJVbm1hbmFnZWRTdWJzY3JpYmVyIiwiQWJzdHJhY3RTaWduZXIiLCJOZXR3b3JrIiwiRmlsdGVySWRFdmVudFN1YnNjcmliZXIiLCJGaWx0ZXJJZFBlbmRpbmdTdWJzY3JpYmVyIiwiUG9sbGluZ0V2ZW50U3Vic2NyaWJlciIsIlByaW1pdGl2ZSIsInNwbGl0IiwiZGVlcENvcHkiLCJ2YWx1ZSIsImluZGV4T2YiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwiYWNjdW0iLCJrZXkiLCJFcnJvciIsInN0YWxsIiwiZHVyYXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJnZXRMb3dlckNhc2UiLCJ0b0xvd2VyQ2FzZSIsImlzUG9sbGFibGUiLCJwb2xsaW5nSW50ZXJ2YWwiLCJkZWZhdWx0T3B0aW9ucyIsInBvbGxpbmciLCJzdGF0aWNOZXR3b3JrIiwiYmF0Y2hTdGFsbFRpbWUiLCJiYXRjaE1heFNpemUiLCJiYXRjaE1heENvdW50IiwiY2FjaGVUaW1lb3V0IiwiSnNvblJwY1NpZ25lciIsImNvbm5lY3QiLCJwcm92aWRlciIsIm9wZXJhdGlvbiIsImFkZHJlc3MiLCJwb3B1bGF0ZVRyYW5zYWN0aW9uIiwidHgiLCJwb3B1bGF0ZUNhbGwiLCJzZW5kVW5jaGVja2VkVHJhbnNhY3Rpb24iLCJfdHgiLCJwcm9taXNlcyIsImZyb20iLCJfZnJvbSIsInB1c2giLCJnYXNMaW1pdCIsImVzdGltYXRlR2FzIiwidG8iLCJfdG8iLCJsZW5ndGgiLCJhbGwiLCJoZXhUeCIsImdldFJwY1RyYW5zYWN0aW9uIiwic2VuZCIsInNlbmRUcmFuc2FjdGlvbiIsImJsb2NrTnVtYmVyIiwiZ2V0QmxvY2tOdW1iZXIiLCJoYXNoIiwicmVqZWN0IiwidGltZW91dHMiLCJpbnZhbGlkcyIsImNoZWNrVHgiLCJnZXRUcmFuc2FjdGlvbiIsInJlcGxhY2VhYmxlVHJhbnNhY3Rpb24iLCJlcnJvciIsImluZm8iLCJzZW5kVHJhbnNhY3Rpb25IYXNoIiwiZW1pdCIsIl9zZXRUaW1lb3V0IiwicG9wIiwic2lnblRyYW5zYWN0aW9uIiwic2lnbk1lc3NhZ2UiLCJfbWVzc2FnZSIsIm1lc3NhZ2UiLCJzaWduVHlwZWREYXRhIiwiZG9tYWluIiwidHlwZXMiLCJfdmFsdWUiLCJwb3B1bGF0ZWQiLCJyZXNvbHZlTmFtZXMiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0UGF5bG9hZCIsInVubG9jayIsInBhc3N3b3JkIiwiX2xlZ2FjeVNpZ25NZXNzYWdlIiwiY29uc3RydWN0b3IiLCJKc29uUnBjQXBpUHJvdmlkZXIiLCJfZ2V0T3B0aW9uIiwib3B0aW9ucyIsIl9uZXR3b3JrIiwibmV0d29yayIsIl9wZXJmb3JtIiwicmVxIiwibWV0aG9kIiwidHJhbnNhY3Rpb24iLCJ0eXBlIiwibWF4RmVlUGVyR2FzIiwibWF4UHJpb3JpdHlGZWVQZXJHYXMiLCJmZWVEYXRhIiwiZ2V0RmVlRGF0YSIsImFzc2lnbiIsInVuZGVmaW5lZCIsInJlcXVlc3QiLCJnZXRScGNSZXF1ZXN0IiwiYXJncyIsIl9kZXRlY3ROZXR3b3JrIiwicGVuZGluZ0RldGVjdE5ldHdvcmsiLCJyZWFkeSIsInJlc3VsdCIsInBheWxvYWQiLCJpZCIsIm5leHRJZCIsInBhcmFtcyIsImpzb25ycGMiLCJhY3Rpb24iLCJfc2VuZCIsImdldFJwY0Vycm9yIiwiX3N0YXJ0Iiwibm90UmVhZHkiLCJkZXN0cm95ZWQiLCJjb25zb2xlIiwibG9nIiwiZXZlbnQiLCJzY2hlZHVsZURyYWluIiwiX3dhaXRVbnRpbFJlYWR5IiwicHJvbWlzZSIsIl9nZXRTdWJzY3JpYmVyIiwic3ViIiwiZmlsdGVyIiwib3JwaGFuIiwiZm9yRWFjaCIsImRzdEtleSIsImFjY2Vzc0xpc3QiLCJibG9ja1RhZyIsInBvc2l0aW9uIiwidG9TdHJpbmciLCJzaWduZWRUcmFuc2FjdGlvbiIsImluY2x1ZGVUcmFuc2FjdGlvbnMiLCJibG9ja0hhc2giLCJfZXJyb3IiLCJtc2ciLCJtYXRjaCIsInNwZWx1bmtEYXRhIiwiZSIsImdldEJ1aWx0aW5DYWxsRXhjZXB0aW9uIiwiZGF0YSIsInNwZWx1bmtNZXNzYWdlIiwiYWN0aW9uTWFwIiwiZXRoX3NpZ24iLCJwZXJzb25hbF9zaWduIiwiZXRoX3NpZ25UeXBlZERhdGFfdjQiLCJldGhfc2lnblRyYW5zYWN0aW9uIiwiZXRoX3NlbmRUcmFuc2FjdGlvbiIsImV0aF9yZXF1ZXN0QWNjb3VudHMiLCJ3YWxsZXRfcmVxdWVzdEFjY291bnRzIiwicmVhc29uIiwidW5zdXBwb3J0ZWQiLCJkZXRhaWxzIiwic3RhcnRzV2l0aCIsInBheWxvYWRzIiwiZ2V0U2lnbmVyIiwiYWNjb3VudHNQcm9taXNlIiwiYWNjb3VudHMiLCJnZXROZXR3b3JrIiwiYWNjb3VudCIsImxpc3RBY2NvdW50cyIsImEiLCJkZXN0cm95IiwiZHJhaW5UaW1lciIsImNsZWFyVGltZW91dCIsIl9yZXNvbHZlIiwibWF0Y2hlcyIsInN0YWxsVGltZSIsImJhdGNoIiwic2hpZnQiLCJieXRlcyIsInAiLCJ1bnNoaWZ0IiwicmVzcCIsInIiLCJKc29uUnBjQXBpUG9sbGluZ1Byb3ZpZGVyIiwic3Vic2NyaWJlciIsIk51bWJlciIsImlzSW50ZWdlciIsIl9mb3JFYWNoU3Vic2NyaWJlciIsIkpzb25ScGNQcm92aWRlciIsIl9nZXRDb25uZWN0aW9uIiwiY2xvbmUiLCJib2R5Iiwic2V0SGVhZGVyIiwicmVzcG9uc2UiLCJhc3NlcnRPayIsImJvZHlKc29uIiwidXJsIiwicGFyc2UiLCJfc3BlbHVua01lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-pocket.js":
/*!*******************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/provider-pocket.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PocketProvider: function() { return /* binding */ PocketProvider; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fetch.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _community_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./community.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/community.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./network.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/**\n *  [[link-pocket]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\n */ \n\n\n\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nfunction getHost(name) {\n    switch(name){\n        case \"mainnet\":\n            return \"eth-mainnet.gateway.pokt.network\";\n        case \"goerli\":\n            return \"eth-goerli.gateway.pokt.network\";\n        case \"matic\":\n            return \"poly-mainnet.gateway.pokt.network\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai-rpc.gateway.pokt.network\";\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **PocketProvider** connects to the [[link-pocket]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-pocket-signup).\n */ class PocketProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__.JsonRpcProvider {\n    _getProvider(chainId) {\n        try {\n            return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n        } catch (error) {}\n        return super._getProvider(chainId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%applicationId%%.\n     */ static getRequest(network, applicationId, applicationSecret) {\n        if (applicationId == null) {\n            applicationId = defaultApplicationId;\n        }\n        const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.FetchRequest(\"https://\".concat(getHost(network.name), \"/v1/lb/\").concat(applicationId));\n        request.allowGzip = true;\n        if (applicationSecret) {\n            request.setCredentials(\"\", applicationSecret);\n        }\n        if (applicationId === defaultApplicationId) {\n            request.retryFunc = async (request, response, attempt)=>{\n                (0,_community_js__WEBPACK_IMPORTED_MODULE_3__.showThrottleMessage)(\"PocketProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n    isCommunityResource() {\n        return this.applicationId === defaultApplicationId;\n    }\n    /**\n     *  Create a new **PocketProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */ constructor(_network, applicationId, applicationSecret){\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_4__.Network.from(_network);\n        if (applicationId == null) {\n            applicationId = defaultApplicationId;\n        }\n        if (applicationSecret == null) {\n            applicationSecret = null;\n        }\n        const options = {\n            staticNetwork: network\n        };\n        const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n        super(request, network, options);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.defineProperties)(this, {\n            applicationId,\n            applicationSecret\n        });\n    }\n} //# sourceMappingURL=provider-pocket.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3Byb3ZpZGVyLXBvY2tldC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7OztDQVlDLEdBQ2tGO0FBQzlCO0FBQ2Q7QUFDaUI7QUFDeEQsTUFBTU0sdUJBQXVCO0FBQzdCLFNBQVNDLFFBQVFDLElBQUk7SUFDakIsT0FBUUE7UUFDSixLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztJQUNmO0lBQ0FOLCtEQUFjQSxDQUFDLE9BQU8sdUJBQXVCLFdBQVdNO0FBQzVEO0FBQ0E7Ozs7Ozs7O0NBUUMsR0FDTSxNQUFNQyx1QkFBdUJKLGlFQUFlQTtJQWdDL0NLLGFBQWFDLE9BQU8sRUFBRTtRQUNsQixJQUFJO1lBQ0EsT0FBTyxJQUFJRixlQUFlRSxTQUFTLElBQUksQ0FBQ0MsYUFBYSxFQUFFLElBQUksQ0FBQ0MsaUJBQWlCO1FBQ2pGLEVBQ0EsT0FBT0MsT0FBTyxDQUFFO1FBQ2hCLE9BQU8sS0FBSyxDQUFDSixhQUFhQztJQUM5QjtJQUNBOzs7S0FHQyxHQUNELE9BQU9JLFdBQVdDLE9BQU8sRUFBRUosYUFBYSxFQUFFQyxpQkFBaUIsRUFBRTtRQUN6RCxJQUFJRCxpQkFBaUIsTUFBTTtZQUN2QkEsZ0JBQWdCTjtRQUNwQjtRQUNBLE1BQU1XLFVBQVUsSUFBSWhCLHlEQUFZQSxDQUFDLFdBQTJDVyxPQUEvQkwsUUFBUVMsUUFBUVIsSUFBSSxHQUFFLFdBQXVCLE9BQWRJO1FBQzVFSyxRQUFRQyxTQUFTLEdBQUc7UUFDcEIsSUFBSUwsbUJBQW1CO1lBQ25CSSxRQUFRRSxjQUFjLENBQUMsSUFBSU47UUFDL0I7UUFDQSxJQUFJRCxrQkFBa0JOLHNCQUFzQjtZQUN4Q1csUUFBUUcsU0FBUyxHQUFHLE9BQU9ILFNBQVNJLFVBQVVDO2dCQUMxQ25CLGtFQUFtQkEsQ0FBQztnQkFDcEIsT0FBTztZQUNYO1FBQ0o7UUFDQSxPQUFPYztJQUNYO0lBQ0FNLHNCQUFzQjtRQUNsQixPQUFRLElBQUksQ0FBQ1gsYUFBYSxLQUFLTjtJQUNuQztJQXBEQTs7Ozs7S0FLQyxHQUNEa0IsWUFBWUMsUUFBUSxFQUFFYixhQUFhLEVBQUVDLGlCQUFpQixDQUFFO1FBQ3BELElBQUlZLFlBQVksTUFBTTtZQUNsQkEsV0FBVztRQUNmO1FBQ0EsTUFBTVQsVUFBVVosZ0RBQU9BLENBQUNzQixJQUFJLENBQUNEO1FBQzdCLElBQUliLGlCQUFpQixNQUFNO1lBQ3ZCQSxnQkFBZ0JOO1FBQ3BCO1FBQ0EsSUFBSU8scUJBQXFCLE1BQU07WUFDM0JBLG9CQUFvQjtRQUN4QjtRQUNBLE1BQU1jLFVBQVU7WUFBRUMsZUFBZVo7UUFBUTtRQUN6QyxNQUFNQyxVQUFVUixlQUFlTSxVQUFVLENBQUNDLFNBQVNKLGVBQWVDO1FBQ2xFLEtBQUssQ0FBQ0ksU0FBU0QsU0FBU1c7UUFDeEIzQixpRUFBZ0JBLENBQUMsSUFBSSxFQUFFO1lBQUVZO1lBQWVDO1FBQWtCO0lBQzlEO0FBZ0NKLEVBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3Byb3ZpZGVyLXBvY2tldC5qcz8zZmZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIFtbbGluay1wb2NrZXRdXSBwcm92aWRlcyBhIHRoaXJkLXBhcnR5IHNlcnZpY2UgZm9yIGNvbm5lY3RpbmcgdG9cbiAqICB2YXJpb3VzIGJsb2NrY2hhaW5zIG92ZXIgSlNPTi1SUEMuXG4gKlxuICogICoqU3VwcG9ydGVkIE5ldHdvcmtzKipcbiAqXG4gKiAgLSBFdGhlcmV1bSBNYWlubmV0IChgYG1haW5uZXRgYClcbiAqICAtIEdvZXJsaSBUZXN0bmV0IChgYGdvZXJsaWBgKVxuICogIC0gUG9seWdvbiAoYGBtYXRpY2BgKVxuICogIC0gQXJiaXRydW0gKGBgYXJiaXRydW1gYClcbiAqXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvcHJvdmlkZXJzL3RoaXJkcGFydHk6UG9ja2V0ICBbcHJvdmlkZXJzLXBvY2tldF1cbiAqL1xuaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcywgRmV0Y2hSZXF1ZXN0LCBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgc2hvd1Rocm90dGxlTWVzc2FnZSB9IGZyb20gXCIuL2NvbW11bml0eS5qc1wiO1xuaW1wb3J0IHsgTmV0d29yayB9IGZyb20gXCIuL25ldHdvcmsuanNcIjtcbmltcG9ydCB7IEpzb25ScGNQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVyLWpzb25ycGMuanNcIjtcbmNvbnN0IGRlZmF1bHRBcHBsaWNhdGlvbklkID0gXCI2MmUxYWQ1MWIzN2I4ZTAwMzk0YmRhM2JcIjtcbmZ1bmN0aW9uIGdldEhvc3QobmFtZSkge1xuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICBjYXNlIFwibWFpbm5ldFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiZXRoLW1haW5uZXQuZ2F0ZXdheS5wb2t0Lm5ldHdvcmtcIjtcbiAgICAgICAgY2FzZSBcImdvZXJsaVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiZXRoLWdvZXJsaS5nYXRld2F5LnBva3QubmV0d29ya1wiO1xuICAgICAgICBjYXNlIFwibWF0aWNcIjpcbiAgICAgICAgICAgIHJldHVybiBcInBvbHktbWFpbm5ldC5nYXRld2F5LnBva3QubmV0d29ya1wiO1xuICAgICAgICBjYXNlIFwibWF0aWMtbXVtYmFpXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJwb2x5Z29uLW11bWJhaS1ycGMuZ2F0ZXdheS5wb2t0Lm5ldHdvcmtcIjtcbiAgICB9XG4gICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBcIm5ldHdvcmtcIiwgbmFtZSk7XG59XG4vKipcbiAqICBUaGUgKipQb2NrZXRQcm92aWRlcioqIGNvbm5lY3RzIHRvIHRoZSBbW2xpbmstcG9ja2V0XV1cbiAqICBKU09OLVJQQyBlbmQtcG9pbnRzLlxuICpcbiAqICBCeSBkZWZhdWx0LCBhIGhpZ2hseS10aHJvdHRsZWQgQVBJIGtleSBpcyB1c2VkLCB3aGljaCBpc1xuICogIGFwcHJvcHJpYXRlIGZvciBxdWljayBwcm90b3R5cGVzIGFuZCBzaW1wbGUgc2NyaXB0cy4gVG9cbiAqICBnYWluIGFjY2VzcyB0byBhbiBpbmNyZWFzZWQgcmF0ZS1saW1pdCwgaXQgaXMgaGlnaGx5XG4gKiAgcmVjb21tZW5kZWQgdG8gW3NpZ24gdXAgaGVyZV0obGluay1wb2NrZXQtc2lnbnVwKS5cbiAqL1xuZXhwb3J0IGNsYXNzIFBvY2tldFByb3ZpZGVyIGV4dGVuZHMgSnNvblJwY1Byb3ZpZGVyIHtcbiAgICAvKipcbiAgICAgKiAgVGhlIEFwcGxpY2F0aW9uIElEIGZvciB0aGUgUG9ja2V0IGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgYXBwbGljYXRpb25JZDtcbiAgICAvKipcbiAgICAgKiAgVGhlIEFwcGxpY2F0aW9uIFNlY3JldCBmb3IgbWFraW5nIGF1dGhlbnRpY2F0ZWQgcmVxdWVzdHNcbiAgICAgKiAgdG8gdGhlIFBvY2tldCBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIGFwcGxpY2F0aW9uU2VjcmV0O1xuICAgIC8qKlxuICAgICAqICBDcmVhdGUgYSBuZXcgKipQb2NrZXRQcm92aWRlcioqLlxuICAgICAqXG4gICAgICogIEJ5IGRlZmF1bHQgY29ubmVjdGluZyB0byBgYG1haW5uZXRgYCB3aXRoIGEgaGlnaGx5IHRocm90dGxlZFxuICAgICAqICBBUEkga2V5LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKF9uZXR3b3JrLCBhcHBsaWNhdGlvbklkLCBhcHBsaWNhdGlvblNlY3JldCkge1xuICAgICAgICBpZiAoX25ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgX25ldHdvcmsgPSBcIm1haW5uZXRcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXR3b3JrID0gTmV0d29yay5mcm9tKF9uZXR3b3JrKTtcbiAgICAgICAgaWYgKGFwcGxpY2F0aW9uSWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgYXBwbGljYXRpb25JZCA9IGRlZmF1bHRBcHBsaWNhdGlvbklkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcHBsaWNhdGlvblNlY3JldCA9PSBudWxsKSB7XG4gICAgICAgICAgICBhcHBsaWNhdGlvblNlY3JldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgc3RhdGljTmV0d29yazogbmV0d29yayB9O1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gUG9ja2V0UHJvdmlkZXIuZ2V0UmVxdWVzdChuZXR3b3JrLCBhcHBsaWNhdGlvbklkLCBhcHBsaWNhdGlvblNlY3JldCk7XG4gICAgICAgIHN1cGVyKHJlcXVlc3QsIG5ldHdvcmssIG9wdGlvbnMpO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgYXBwbGljYXRpb25JZCwgYXBwbGljYXRpb25TZWNyZXQgfSk7XG4gICAgfVxuICAgIF9nZXRQcm92aWRlcihjaGFpbklkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvY2tldFByb3ZpZGVyKGNoYWluSWQsIHRoaXMuYXBwbGljYXRpb25JZCwgdGhpcy5hcHBsaWNhdGlvblNlY3JldCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRQcm92aWRlcihjaGFpbklkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYSBwcmVwYXJlZCByZXF1ZXN0IGZvciBjb25uZWN0aW5nIHRvICUlbmV0d29yayUlIHdpdGhcbiAgICAgKiAgJSVhcHBsaWNhdGlvbklkJSUuXG4gICAgICovXG4gICAgc3RhdGljIGdldFJlcXVlc3QobmV0d29yaywgYXBwbGljYXRpb25JZCwgYXBwbGljYXRpb25TZWNyZXQpIHtcbiAgICAgICAgaWYgKGFwcGxpY2F0aW9uSWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgYXBwbGljYXRpb25JZCA9IGRlZmF1bHRBcHBsaWNhdGlvbklkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgRmV0Y2hSZXF1ZXN0KGBodHRwczovXFwvJHtnZXRIb3N0KG5ldHdvcmsubmFtZSl9L3YxL2xiLyR7YXBwbGljYXRpb25JZH1gKTtcbiAgICAgICAgcmVxdWVzdC5hbGxvd0d6aXAgPSB0cnVlO1xuICAgICAgICBpZiAoYXBwbGljYXRpb25TZWNyZXQpIHtcbiAgICAgICAgICAgIHJlcXVlc3Quc2V0Q3JlZGVudGlhbHMoXCJcIiwgYXBwbGljYXRpb25TZWNyZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcHBsaWNhdGlvbklkID09PSBkZWZhdWx0QXBwbGljYXRpb25JZCkge1xuICAgICAgICAgICAgcmVxdWVzdC5yZXRyeUZ1bmMgPSBhc3luYyAocmVxdWVzdCwgcmVzcG9uc2UsIGF0dGVtcHQpID0+IHtcbiAgICAgICAgICAgICAgICBzaG93VGhyb3R0bGVNZXNzYWdlKFwiUG9ja2V0UHJvdmlkZXJcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH1cbiAgICBpc0NvbW11bml0eVJlc291cmNlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuYXBwbGljYXRpb25JZCA9PT0gZGVmYXVsdEFwcGxpY2F0aW9uSWQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLXBvY2tldC5qcy5tYXAiXSwibmFtZXMiOlsiZGVmaW5lUHJvcGVydGllcyIsIkZldGNoUmVxdWVzdCIsImFzc2VydEFyZ3VtZW50Iiwic2hvd1Rocm90dGxlTWVzc2FnZSIsIk5ldHdvcmsiLCJKc29uUnBjUHJvdmlkZXIiLCJkZWZhdWx0QXBwbGljYXRpb25JZCIsImdldEhvc3QiLCJuYW1lIiwiUG9ja2V0UHJvdmlkZXIiLCJfZ2V0UHJvdmlkZXIiLCJjaGFpbklkIiwiYXBwbGljYXRpb25JZCIsImFwcGxpY2F0aW9uU2VjcmV0IiwiZXJyb3IiLCJnZXRSZXF1ZXN0IiwibmV0d29yayIsInJlcXVlc3QiLCJhbGxvd0d6aXAiLCJzZXRDcmVkZW50aWFscyIsInJldHJ5RnVuYyIsInJlc3BvbnNlIiwiYXR0ZW1wdCIsImlzQ29tbXVuaXR5UmVzb3VyY2UiLCJjb25zdHJ1Y3RvciIsIl9uZXR3b3JrIiwiZnJvbSIsIm9wdGlvbnMiLCJzdGF0aWNOZXR3b3JrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-pocket.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-quicknode.js":
/*!**********************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/provider-quicknode.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QuickNodeProvider: function() { return /* binding */ QuickNodeProvider; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fetch.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _community_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./community.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/community.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./network.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/**\n *  [[link-quicknode]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Holesky Testnet (``holesky``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\n *  - Base Mainnet (``base``);\n *  - Base Goerli Testnet (``base-goerli``);\n *  - Base Sepolia Testnet (``base-sepolia``);\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - BNB Smart Chain Testnet (``bnbt``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]\n */ \n\n\n\nconst defaultToken = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\nfunction getHost(name) {\n    switch(name){\n        case \"mainnet\":\n            return \"ethers.quiknode.pro\";\n        case \"goerli\":\n            return \"ethers.ethereum-goerli.quiknode.pro\";\n        case \"sepolia\":\n            return \"ethers.ethereum-sepolia.quiknode.pro\";\n        case \"holesky\":\n            return \"ethers.ethereum-holesky.quiknode.pro\";\n        case \"arbitrum\":\n            return \"ethers.arbitrum-mainnet.quiknode.pro\";\n        case \"arbitrum-goerli\":\n            return \"ethers.arbitrum-goerli.quiknode.pro\";\n        case \"arbitrum-sepolia\":\n            return \"ethers.arbitrum-sepolia.quiknode.pro\";\n        case \"base\":\n            return \"ethers.base-mainnet.quiknode.pro\";\n        case \"base-goerli\":\n            return \"ethers.base-goerli.quiknode.pro\";\n        case \"base-spolia\":\n            return \"ethers.base-sepolia.quiknode.pro\";\n        case \"bnb\":\n            return \"ethers.bsc.quiknode.pro\";\n        case \"bnbt\":\n            return \"ethers.bsc-testnet.quiknode.pro\";\n        case \"matic\":\n            return \"ethers.matic.quiknode.pro\";\n        case \"matic-mumbai\":\n            return \"ethers.matic-testnet.quiknode.pro\";\n        case \"optimism\":\n            return \"ethers.optimism.quiknode.pro\";\n        case \"optimism-goerli\":\n            return \"ethers.optimism-goerli.quiknode.pro\";\n        case \"optimism-sepolia\":\n            return \"ethers.optimism-sepolia.quiknode.pro\";\n        case \"xdai\":\n            return \"ethers.xdai.quiknode.pro\";\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/*\n@TODO:\n  These networks are not currently present in the Network\n  default included networks. Research them and ensure they\n  are EVM compatible and work with ethers\n\n  http://ethers.matic-amoy.quiknode.pro\n\n  http://ethers.avalanche-mainnet.quiknode.pro\n  http://ethers.avalanche-testnet.quiknode.pro\n  http://ethers.blast-sepolia.quiknode.pro\n  http://ethers.celo-mainnet.quiknode.pro\n  http://ethers.fantom.quiknode.pro\n  http://ethers.imx-demo.quiknode.pro\n  http://ethers.imx-mainnet.quiknode.pro\n  http://ethers.imx-testnet.quiknode.pro\n  http://ethers.near-mainnet.quiknode.pro\n  http://ethers.near-testnet.quiknode.pro\n  http://ethers.nova-mainnet.quiknode.pro\n  http://ethers.scroll-mainnet.quiknode.pro\n  http://ethers.scroll-testnet.quiknode.pro\n  http://ethers.tron-mainnet.quiknode.pro\n  http://ethers.zkevm-mainnet.quiknode.pro\n  http://ethers.zkevm-testnet.quiknode.pro\n  http://ethers.zksync-mainnet.quiknode.pro\n  http://ethers.zksync-testnet.quiknode.pro\n*/ /**\n *  The **QuickNodeProvider** connects to the [[link-quicknode]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API token is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-quicknode).\n */ class QuickNodeProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__.JsonRpcProvider {\n    _getProvider(chainId) {\n        try {\n            return new QuickNodeProvider(chainId, this.token);\n        } catch (error) {}\n        return super._getProvider(chainId);\n    }\n    isCommunityResource() {\n        return this.token === defaultToken;\n    }\n    /**\n     *  Returns a new request prepared for %%network%% and the\n     *  %%token%%.\n     */ static getRequest(network, token) {\n        if (token == null) {\n            token = defaultToken;\n        }\n        const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.FetchRequest(\"https://\".concat(getHost(network.name), \"/\").concat(token));\n        request.allowGzip = true;\n        //if (projectSecret) { request.setCredentials(\"\", projectSecret); }\n        if (token === defaultToken) {\n            request.retryFunc = async (request, response, attempt)=>{\n                (0,_community_js__WEBPACK_IMPORTED_MODULE_3__.showThrottleMessage)(\"QuickNodeProvider\");\n                return true;\n            };\n        }\n        return request;\n    }\n    /**\n     *  Creates a new **QuickNodeProvider**.\n     */ constructor(_network, token){\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_4__.Network.from(_network);\n        if (token == null) {\n            token = defaultToken;\n        }\n        const request = QuickNodeProvider.getRequest(network, token);\n        super(request, network, {\n            staticNetwork: network\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.defineProperties)(this, {\n            token\n        });\n    }\n} //# sourceMappingURL=provider-quicknode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-quicknode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-socket.js":
/*!*******************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/provider-socket.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SocketBlockSubscriber: function() { return /* binding */ SocketBlockSubscriber; },\n/* harmony export */   SocketEventSubscriber: function() { return /* binding */ SocketEventSubscriber; },\n/* harmony export */   SocketPendingSubscriber: function() { return /* binding */ SocketPendingSubscriber; },\n/* harmony export */   SocketProvider: function() { return /* binding */ SocketProvider; },\n/* harmony export */   SocketSubscriber: function() { return /* binding */ SocketSubscriber; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _abstract_provider_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abstract-provider.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/abstract-provider.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider:Socket Providers  [about-socketProvider]\n */ \n\n\n\n\n\nvar _provider = /*#__PURE__*/ new WeakMap(), _filter = /*#__PURE__*/ new WeakMap(), _filterId = /*#__PURE__*/ new WeakMap(), _paused = /*#__PURE__*/ new WeakMap(), _emitPromise = /*#__PURE__*/ new WeakMap();\n/**\n *  A **SocketSubscriber** uses a socket transport to handle events and\n *  should use [[_emit]] to manage the events.\n */ class SocketSubscriber {\n    /**\n     *  The filter.\n     */ get filter() {\n        return JSON.parse((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _filter));\n    }\n    start() {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _filterId, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider).send(\"eth_subscribe\", this.filter).then((filterId)=>{\n            ;\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider)._register(filterId, this);\n            return filterId;\n        }));\n    }\n    stop() {\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _filterId).then((filterId)=>{\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider).send(\"eth_unsubscribe\", [\n                filterId\n            ]);\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _filterId, null);\n    }\n    // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n    //        and resume\n    pause(dropWhilePaused) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"pause(false)\"\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _paused, !!dropWhilePaused);\n    }\n    resume() {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _paused, null);\n    }\n    /**\n     *  @_ignore:\n     */ _handleMessage(message) {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _filterId) == null) {\n            return;\n        }\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _paused) === null) {\n            let emitPromise = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _emitPromise);\n            if (emitPromise == null) {\n                emitPromise = this._emit((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider), message);\n            } else {\n                emitPromise = emitPromise.then(async ()=>{\n                    await this._emit((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider), message);\n                });\n            }\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _emitPromise, emitPromise.then(()=>{\n                if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _emitPromise) === emitPromise) {\n                    (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _emitPromise, null);\n                }\n            }));\n        }\n    }\n    /**\n     *  Sub-classes **must** override this to emit the events on the\n     *  provider.\n     */ async _emit(provider, message) {\n        throw new Error(\"sub-classes must implemente this; _emit\");\n    }\n    /**\n     *  Creates a new **SocketSubscriber** attached to %%provider%% listening\n     *  to %%filter%%.\n     */ constructor(provider, filter){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _provider, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _filter, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _filterId, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _paused, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _emitPromise, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _provider, provider);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _filter, JSON.stringify(filter));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _filterId, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _paused, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _emitPromise, null);\n    }\n}\n/**\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\n *  ``\"block\"`` events.\n */ class SocketBlockSubscriber extends SocketSubscriber {\n    async _emit(provider, message) {\n        provider.emit(\"block\", parseInt(message.number));\n    }\n    /**\n     *  @_ignore:\n     */ constructor(provider){\n        super(provider, [\n            \"newHeads\"\n        ]);\n    }\n}\n/**\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\n *  ``\"pending\"`` events.\n */ class SocketPendingSubscriber extends SocketSubscriber {\n    async _emit(provider, message) {\n        provider.emit(\"pending\", message);\n    }\n    /**\n     *  @_ignore:\n     */ constructor(provider){\n        super(provider, [\n            \"newPendingTransactions\"\n        ]);\n    }\n}\nvar _logFilter = /*#__PURE__*/ new WeakMap();\n/**\n *  A **SocketEventSubscriber** listens for event logs.\n */ class SocketEventSubscriber extends SocketSubscriber {\n    /**\n     *  The filter.\n     */ get logFilter() {\n        return JSON.parse((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _logFilter));\n    }\n    async _emit(provider, message) {\n        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n    }\n    /**\n     *  @_ignore:\n     */ constructor(provider, filter){\n        super(provider, [\n            \"logs\",\n            filter\n        ]);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _logFilter, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _logFilter, JSON.stringify(filter));\n    }\n}\nvar _callbacks = /*#__PURE__*/ new WeakMap(), // Maps each filterId to its subscriber\n_subs = /*#__PURE__*/ new WeakMap(), // If any events come in before a subscriber has finished\n// registering, queue them\n_pending = /*#__PURE__*/ new WeakMap();\n/**\n *  A **SocketProvider** is backed by a long-lived connection over a\n *  socket, which can subscribe and receive real-time messages over\n *  its communication channel.\n */ class SocketProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_4__.JsonRpcApiProvider {\n    // This value is only valid after _start has been called\n    /*\n    get _network(): Network {\n        if (this.#network == null) {\n            throw new Error(\"this shouldn't happen\");\n        }\n        return this.#network.clone();\n    }\n    */ _getSubscriber(sub) {\n        switch(sub.type){\n            case \"close\":\n                return new _abstract_provider_js__WEBPACK_IMPORTED_MODULE_5__.UnmanagedSubscriber(\"close\");\n            case \"block\":\n                return new SocketBlockSubscriber(this);\n            case \"pending\":\n                return new SocketPendingSubscriber(this);\n            case \"event\":\n                return new SocketEventSubscriber(this, sub.filter);\n            case \"orphan\":\n                // Handled auto-matically within AbstractProvider\n                // when the log.removed = true\n                if (sub.filter.orphan === \"drop-log\") {\n                    return new _abstract_provider_js__WEBPACK_IMPORTED_MODULE_5__.UnmanagedSubscriber(\"drop-log\");\n                }\n        }\n        return super._getSubscriber(sub);\n    }\n    /**\n     *  Register a new subscriber. This is used internalled by Subscribers\n     *  and generally is unecessary unless extending capabilities.\n     */ _register(filterId, subscriber) {\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _subs).set(filterId, subscriber);\n        const pending = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _pending).get(filterId);\n        if (pending) {\n            for (const message of pending){\n                subscriber._handleMessage(message);\n            }\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _pending).delete(filterId);\n        }\n    }\n    async _send(payload) {\n        // WebSocket provider doesn't accept batches\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n        // @TODO: stringify payloads here and store to prevent mutations\n        // Prepare a promise to respond to\n        const promise = new Promise((resolve, reject)=>{\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _callbacks).set(payload.id, {\n                payload,\n                resolve,\n                reject\n            });\n        });\n        // Wait until the socket is connected before writing to it\n        await this._waitUntilReady();\n        // Write the request to the socket\n        await this._write(JSON.stringify(payload));\n        return [\n            await promise\n        ];\n    }\n    // Sub-classes must call this once they are connected\n    /*\n    async _start(): Promise<void> {\n        if (this.#ready) { return; }\n\n        for (const { payload } of this.#callbacks.values()) {\n            await this._write(JSON.stringify(payload));\n        }\n\n        this.#ready = (async function() {\n            await super._start();\n        })();\n    }\n    */ /**\n     *  Sub-classes **must** call this with messages received over their\n     *  transport to be processed and dispatched.\n     */ async _processMessage(message) {\n        const result = JSON.parse(message);\n        if (result && typeof result === \"object\" && \"id\" in result) {\n            const callback = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _callbacks).get(result.id);\n            if (callback == null) {\n                this.emit(\"error\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\n                    reasonCode: \"UNKNOWN_ID\",\n                    result\n                }));\n                return;\n            }\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _callbacks).delete(result.id);\n            callback.resolve(result);\n        } else if (result && result.method === \"eth_subscription\") {\n            const filterId = result.params.subscription;\n            const subscriber = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _subs).get(filterId);\n            if (subscriber) {\n                subscriber._handleMessage(result.params.result);\n            } else {\n                let pending = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _pending).get(filterId);\n                if (pending == null) {\n                    pending = [];\n                    (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _pending).set(filterId, pending);\n                }\n                pending.push(result.params.result);\n            }\n        } else {\n            this.emit(\"error\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"received unexpected message\", \"UNKNOWN_ERROR\", {\n                reasonCode: \"UNEXPECTED_MESSAGE\",\n                result\n            }));\n            return;\n        }\n    }\n    /**\n     *  Sub-classes **must** override this to send %%message%% over their\n     *  transport.\n     */ async _write(message) {\n        throw new Error(\"sub-classes must override this\");\n    }\n    /**\n     *  Creates a new **SocketProvider** connected to %%network%%.\n     *\n     *  If unspecified, the network will be discovered.\n     */ constructor(network, _options){\n        // Copy the options\n        const options = Object.assign({}, _options != null ? _options : {});\n        // Support for batches is generally not supported for\n        // connection-base providers; if this changes in the future\n        // the _send should be updated to reflect this\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(options.batchMaxCount == null || options.batchMaxCount === 1, \"sockets-based providers do not support batches\", \"options.batchMaxCount\", _options);\n        options.batchMaxCount = 1;\n        // Socket-based Providers (generally) cannot change their network,\n        // since they have a long-lived connection; but let people override\n        // this if they have just cause.\n        if (options.staticNetwork == null) {\n            options.staticNetwork = true;\n        }\n        super(network, options);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _callbacks, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _subs, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _pending, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _callbacks, new Map());\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _subs, new Map());\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _pending, new Map());\n    }\n} //# sourceMappingURL=provider-socket.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-socket.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-websocket.js":
/*!**********************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/provider-websocket.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocketProvider: function() { return /* binding */ WebSocketProvider; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _ws_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ws.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/ws-browser.js\");\n/* harmony import */ var _provider_socket_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provider-socket.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-socket.js\");\n\n\n\n /*-browser*/ \n\nvar _connect = /*#__PURE__*/ new WeakMap(), _websocket = /*#__PURE__*/ new WeakMap();\n/**\n *  A JSON-RPC provider which is backed by a WebSocket.\n *\n *  WebSockets are often preferred because they retain a live connection\n *  to a server, which permits more instant access to events.\n *\n *  However, this incurs higher server infrasturture costs, so additional\n *  resources may be required to host your own WebSocket nodes and many\n *  third-party services charge additional fees for WebSocket endpoints.\n */ class WebSocketProvider extends _provider_socket_js__WEBPACK_IMPORTED_MODULE_0__.SocketProvider {\n    get websocket() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _websocket) == null) {\n            throw new Error(\"websocket closed\");\n        }\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _websocket);\n    }\n    async _write(message) {\n        this.websocket.send(message);\n    }\n    async destroy() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _websocket) != null) {\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _websocket).close();\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, _websocket, null);\n        }\n        super.destroy();\n    }\n    constructor(url, network, options){\n        super(network, options);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _connect, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _websocket, {\n            writable: true,\n            value: void 0\n        });\n        if (typeof url === \"string\") {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, _connect, ()=>{\n                return new _ws_js__WEBPACK_IMPORTED_MODULE_4__.WebSocket(url);\n            });\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, _websocket, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _connect).call(this));\n        } else if (typeof url === \"function\") {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, _connect, url);\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, _websocket, url());\n        } else {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, _connect, null);\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, _websocket, url);\n        }\n        this.websocket.onopen = async ()=>{\n            try {\n                await this._start();\n                this.resume();\n            } catch (error) {\n                console.log(\"failed to start WebsocketProvider\", error);\n            // @TODO: now what? Attempt reconnect?\n            }\n        };\n        this.websocket.onmessage = (message)=>{\n            this._processMessage(message.data);\n        };\n    /*\n                this.websocket.onclose = (event) => {\n                    // @TODO: What event.code should we reconnect on?\n                    const reconnect = false;\n                    if (reconnect) {\n                        this.pause(true);\n                        if (this.#connect) {\n                            this.#websocket = this.#connect();\n                            this.#websocket.onopen = ...\n                            // @TODO: this requires the super class to rebroadcast; move it there\n                        }\n                        this._reconnect();\n                    }\n                };\n        */ }\n} //# sourceMappingURL=provider-websocket.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3Byb3ZpZGVyLXdlYnNvY2tldC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBa0QsQ0FBQyxVQUFVO0FBQ1A7SUFZbEQsd0NBQ0E7QUFaSjs7Ozs7Ozs7O0NBU0MsR0FDTSxNQUFNRywwQkFBMEJELCtEQUFjQTtJQUdqRCxJQUFJRSxZQUFZO1FBQ1osSUFBSSw0RUFBSSxFQUFFQSxlQUFhLE1BQU07WUFDekIsTUFBTSxJQUFJQyxNQUFNO1FBQ3BCO1FBQ0EsT0FBTyw0RUFBSSxFQUFFRDtJQUNqQjtJQTRDQSxNQUFNRSxPQUFPQyxPQUFPLEVBQUU7UUFDbEIsSUFBSSxDQUFDSCxTQUFTLENBQUNJLElBQUksQ0FBQ0Q7SUFDeEI7SUFDQSxNQUFNRSxVQUFVO1FBQ1osSUFBSSw0RUFBSSxFQUFFTCxlQUFhLE1BQU07WUFDekIsNEVBQUksRUFBRUEsWUFBVU0sS0FBSzswRkFDZk4sWUFBWTtRQUN0QjtRQUNBLEtBQUssQ0FBQ0s7SUFDVjtJQXBEQUUsWUFBWUMsR0FBRyxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sQ0FBRTtRQUMvQixLQUFLLENBQUNELFNBQVNDO1FBVG5COzttQkFBQTs7UUFDQTs7bUJBQUE7O1FBU0ksSUFBSSxPQUFRRixRQUFTLFVBQVU7MEZBQ3JCRyxVQUFVO2dCQUFRLE9BQU8sSUFBSWQsNkNBQVVBLENBQUNXO1lBQU07MEZBQzlDUixZQUFZLDRFQUFJLEVBQUVXLGVBQU4sSUFBSTtRQUMxQixPQUNLLElBQUksT0FBUUgsUUFBUyxZQUFZOzBGQUM1QkcsVUFBVUg7MEZBQ1ZSLFlBQVlRO1FBQ3RCLE9BQ0s7MEZBQ0tHLFVBQVU7MEZBQ1ZYLFlBQVlRO1FBQ3RCO1FBQ0EsSUFBSSxDQUFDUixTQUFTLENBQUNZLE1BQU0sR0FBRztZQUNwQixJQUFJO2dCQUNBLE1BQU0sSUFBSSxDQUFDQyxNQUFNO2dCQUNqQixJQUFJLENBQUNDLE1BQU07WUFDZixFQUNBLE9BQU9DLE9BQU87Z0JBQ1ZDLFFBQVFDLEdBQUcsQ0FBQyxxQ0FBcUNGO1lBQ2pELHNDQUFzQztZQUMxQztRQUNKO1FBQ0EsSUFBSSxDQUFDZixTQUFTLENBQUNrQixTQUFTLEdBQUcsQ0FBQ2Y7WUFDeEIsSUFBSSxDQUFDZ0IsZUFBZSxDQUFDaEIsUUFBUWlCLElBQUk7UUFDckM7SUFDQTs7Ozs7Ozs7Ozs7Ozs7UUFjQSxHQUNKO0FBV0osRUFDQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvcHJvdmlkZXItd2Vic29ja2V0LmpzP2NiYTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV2ViU29ja2V0IGFzIF9XZWJTb2NrZXQgfSBmcm9tIFwiLi93cy5qc1wiOyAvKi1icm93c2VyKi9cbmltcG9ydCB7IFNvY2tldFByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItc29ja2V0LmpzXCI7XG4vKipcbiAqICBBIEpTT04tUlBDIHByb3ZpZGVyIHdoaWNoIGlzIGJhY2tlZCBieSBhIFdlYlNvY2tldC5cbiAqXG4gKiAgV2ViU29ja2V0cyBhcmUgb2Z0ZW4gcHJlZmVycmVkIGJlY2F1c2UgdGhleSByZXRhaW4gYSBsaXZlIGNvbm5lY3Rpb25cbiAqICB0byBhIHNlcnZlciwgd2hpY2ggcGVybWl0cyBtb3JlIGluc3RhbnQgYWNjZXNzIHRvIGV2ZW50cy5cbiAqXG4gKiAgSG93ZXZlciwgdGhpcyBpbmN1cnMgaGlnaGVyIHNlcnZlciBpbmZyYXN0dXJ0dXJlIGNvc3RzLCBzbyBhZGRpdGlvbmFsXG4gKiAgcmVzb3VyY2VzIG1heSBiZSByZXF1aXJlZCB0byBob3N0IHlvdXIgb3duIFdlYlNvY2tldCBub2RlcyBhbmQgbWFueVxuICogIHRoaXJkLXBhcnR5IHNlcnZpY2VzIGNoYXJnZSBhZGRpdGlvbmFsIGZlZXMgZm9yIFdlYlNvY2tldCBlbmRwb2ludHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBXZWJTb2NrZXRQcm92aWRlciBleHRlbmRzIFNvY2tldFByb3ZpZGVyIHtcbiAgICAjY29ubmVjdDtcbiAgICAjd2Vic29ja2V0O1xuICAgIGdldCB3ZWJzb2NrZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLiN3ZWJzb2NrZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2Vic29ja2V0IGNsb3NlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy4jd2Vic29ja2V0O1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcih1cmwsIG5ldHdvcmssIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIobmV0d29yaywgb3B0aW9ucyk7XG4gICAgICAgIGlmICh0eXBlb2YgKHVybCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRoaXMuI2Nvbm5lY3QgPSAoKSA9PiB7IHJldHVybiBuZXcgX1dlYlNvY2tldCh1cmwpOyB9O1xuICAgICAgICAgICAgdGhpcy4jd2Vic29ja2V0ID0gdGhpcy4jY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiAodXJsKSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLiNjb25uZWN0ID0gdXJsO1xuICAgICAgICAgICAgdGhpcy4jd2Vic29ja2V0ID0gdXJsKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLiNjb25uZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuI3dlYnNvY2tldCA9IHVybDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndlYnNvY2tldC5vbm9wZW4gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3N0YXJ0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmFpbGVkIHRvIHN0YXJ0IFdlYnNvY2tldFByb3ZpZGVyXCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAvLyBAVE9ETzogbm93IHdoYXQ/IEF0dGVtcHQgcmVjb25uZWN0P1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLndlYnNvY2tldC5vbm1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc01lc3NhZ2UobWVzc2FnZS5kYXRhKTtcbiAgICAgICAgfTtcbiAgICAgICAgLypcbiAgICAgICAgICAgICAgICB0aGlzLndlYnNvY2tldC5vbmNsb3NlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEBUT0RPOiBXaGF0IGV2ZW50LmNvZGUgc2hvdWxkIHdlIHJlY29ubmVjdCBvbj9cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVjb25uZWN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWNvbm5lY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGF1c2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jY29ubmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI3dlYnNvY2tldCA9IHRoaXMuI2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiN3ZWJzb2NrZXQub25vcGVuID0gLi4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQFRPRE86IHRoaXMgcmVxdWlyZXMgdGhlIHN1cGVyIGNsYXNzIHRvIHJlYnJvYWRjYXN0OyBtb3ZlIGl0IHRoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICovXG4gICAgfVxuICAgIGFzeW5jIF93cml0ZShtZXNzYWdlKSB7XG4gICAgICAgIHRoaXMud2Vic29ja2V0LnNlbmQobWVzc2FnZSk7XG4gICAgfVxuICAgIGFzeW5jIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLiN3ZWJzb2NrZXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy4jd2Vic29ja2V0LmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLiN3ZWJzb2NrZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlci13ZWJzb2NrZXQuanMubWFwIl0sIm5hbWVzIjpbIldlYlNvY2tldCIsIl9XZWJTb2NrZXQiLCJTb2NrZXRQcm92aWRlciIsIldlYlNvY2tldFByb3ZpZGVyIiwid2Vic29ja2V0IiwiRXJyb3IiLCJfd3JpdGUiLCJtZXNzYWdlIiwic2VuZCIsImRlc3Ryb3kiLCJjbG9zZSIsImNvbnN0cnVjdG9yIiwidXJsIiwibmV0d29yayIsIm9wdGlvbnMiLCJjb25uZWN0Iiwib25vcGVuIiwiX3N0YXJ0IiwicmVzdW1lIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwib25tZXNzYWdlIiwiX3Byb2Nlc3NNZXNzYWdlIiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider-websocket.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider.js":
/*!************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/provider.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Block: function() { return /* binding */ Block; },\n/* harmony export */   FeeData: function() { return /* binding */ FeeData; },\n/* harmony export */   Log: function() { return /* binding */ Log; },\n/* harmony export */   TransactionReceipt: function() { return /* binding */ TransactionReceipt; },\n/* harmony export */   TransactionResponse: function() { return /* binding */ TransactionResponse; },\n/* harmony export */   copyRequest: function() { return /* binding */ copyRequest; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/accesslist.js\");\n//import { resolveAddress } from \"@ethersproject/address\";\n\n\n\n\n\nconst BN_0 = BigInt(0);\n// -----------------------\nfunction getValue(value) {\n    if (value == null) {\n        return null;\n    }\n    return value;\n}\nfunction toJson(value) {\n    if (value == null) {\n        return null;\n    }\n    return value.toString();\n}\n// @TODO? <T extends FeeData = { }> implements Required<T>\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */ class FeeData {\n    /**\n     *  Returns a JSON-friendly value.\n     */ toJSON() {\n        const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;\n        return {\n            _type: \"FeeData\",\n            gasPrice: toJson(gasPrice),\n            maxFeePerGas: toJson(maxFeePerGas),\n            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)\n        };\n    }\n    /**\n     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n     *  %%maxPriorityFeePerGas%%.\n     */ constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas){\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\n            gasPrice: getValue(gasPrice),\n            maxFeePerGas: getValue(maxFeePerGas),\n            maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n        });\n    }\n}\n;\n/**\n *  Returns a copy of %%req%% with all properties coerced to their strict\n *  types.\n */ function copyRequest(req) {\n    const result = {};\n    // These could be addresses, ENS names or Addressables\n    if (req.to) {\n        result.to = req.to;\n    }\n    if (req.from) {\n        result.from = req.from;\n    }\n    if (req.data) {\n        result.data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(req.data);\n    }\n    const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n    for (const key of bigIntKeys){\n        if (!(key in req) || req[key] == null) {\n            continue;\n        }\n        result[key] = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBigInt)(req[key], \"request.\".concat(key));\n    }\n    const numberKeys = \"type,nonce\".split(/,/);\n    for (const key of numberKeys){\n        if (!(key in req) || req[key] == null) {\n            continue;\n        }\n        result[key] = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getNumber)(req[key], \"request.\".concat(key));\n    }\n    if (req.accessList) {\n        result.accessList = (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_3__.accessListify)(req.accessList);\n    }\n    if (\"blockTag\" in req) {\n        result.blockTag = req.blockTag;\n    }\n    if (\"enableCcipRead\" in req) {\n        result.enableCcipRead = !!req.enableCcipRead;\n    }\n    if (\"customData\" in req) {\n        result.customData = req.customData;\n    }\n    return result;\n}\nvar _transactions = /*#__PURE__*/ new WeakMap();\nlet _Symbol_iterator = Symbol.iterator;\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */ class Block {\n    /**\n     *  Returns the list of transaction hashes, in the order\n     *  they were executed within the block.\n     */ get transactions() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _transactions).map((tx)=>{\n            if (typeof tx === \"string\") {\n                return tx;\n            }\n            return tx.hash;\n        });\n    }\n    /**\n     *  Returns the complete transactions, in the order they\n     *  were executed within the block.\n     *\n     *  This is only available for blocks which prefetched\n     *  transactions, by passing ``true`` to %%prefetchTxs%%\n     *  into [[Provider-getBlock]].\n     */ get prefetchedTransactions() {\n        const txs = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _transactions).slice();\n        // Doesn't matter...\n        if (txs.length === 0) {\n            return [];\n        }\n        // Make sure we prefetched the transactions\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assert)(typeof txs[0] === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"transactionResponses()\"\n        });\n        return txs;\n    }\n    /**\n     *  Returns a JSON-friendly value.\n     */ toJSON() {\n        const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, miner, nonce, number, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;\n        return {\n            _type: \"Block\",\n            baseFeePerGas: toJson(baseFeePerGas),\n            difficulty: toJson(difficulty),\n            extraData,\n            gasLimit: toJson(gasLimit),\n            gasUsed: toJson(gasUsed),\n            blobGasUsed: toJson(this.blobGasUsed),\n            excessBlobGas: toJson(this.excessBlobGas),\n            hash,\n            miner,\n            nonce,\n            number,\n            parentHash,\n            timestamp,\n            parentBeaconBlockRoot,\n            stateRoot,\n            receiptsRoot,\n            transactions\n        };\n    }\n    [_Symbol_iterator]() {\n        let index = 0;\n        const txs = this.transactions;\n        return {\n            next: ()=>{\n                if (index < this.length) {\n                    return {\n                        value: txs[index++],\n                        done: false\n                    };\n                }\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    /**\n     *  The number of transactions in this block.\n     */ get length() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _transactions).length;\n    }\n    /**\n     *  The [[link-js-date]] this block was included at.\n     */ get date() {\n        if (this.timestamp == null) {\n            return null;\n        }\n        return new Date(this.timestamp * 1000);\n    }\n    /**\n     *  Get the transaction at %%indexe%% within this block.\n     */ async getTransaction(indexOrHash) {\n        // Find the internal value by its index or hash\n        let tx = undefined;\n        if (typeof indexOrHash === \"number\") {\n            tx = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _transactions)[indexOrHash];\n        } else {\n            const hash = indexOrHash.toLowerCase();\n            for (const v of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _transactions)){\n                if (typeof v === \"string\") {\n                    if (v !== hash) {\n                        continue;\n                    }\n                    tx = v;\n                    break;\n                } else {\n                    if (v.hash === hash) {\n                        continue;\n                    }\n                    tx = v;\n                    break;\n                }\n            }\n        }\n        if (tx == null) {\n            throw new Error(\"no such tx\");\n        }\n        if (typeof tx === \"string\") {\n            return await this.provider.getTransaction(tx);\n        } else {\n            return tx;\n        }\n    }\n    /**\n     *  If a **Block** was fetched with a request to include the transactions\n     *  this will allow synchronous access to those transactions.\n     *\n     *  If the transactions were not prefetched, this will throw.\n     */ getPrefetchedTransaction(indexOrHash) {\n        const txs = this.prefetchedTransactions;\n        if (typeof indexOrHash === \"number\") {\n            return txs[indexOrHash];\n        }\n        indexOrHash = indexOrHash.toLowerCase();\n        for (const tx of txs){\n            if (tx.hash === indexOrHash) {\n                return tx;\n            }\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assertArgument)(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n    }\n    /**\n     *  Returns true if this block been mined. This provides a type guard\n     *  for all properties on a [[MinedBlock]].\n     */ isMined() {\n        return !!this.hash;\n    }\n    /**\n     *  Returns true if this block is an [[link-eip-2930]] block.\n     */ isLondon() {\n        return !!this.baseFeePerGas;\n    }\n    /**\n     *  @_ignore:\n     */ orphanedEvent() {\n        if (!this.isMined()) {\n            throw new Error(\"\");\n        }\n        return createOrphanedBlockFilter(this);\n    }\n    /**\n     *  Create a new **Block** object.\n     *\n     *  This should generally not be necessary as the unless implementing a\n     *  low-level library.\n     */ constructor(block, provider){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _transactions, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__._)(this, _transactions, block.transactions.map((tx)=>{\n            if (typeof tx !== \"string\") {\n                return new TransactionResponse(tx, provider);\n            }\n            return tx;\n        }));\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\n            provider,\n            hash: getValue(block.hash),\n            number: block.number,\n            timestamp: block.timestamp,\n            parentHash: block.parentHash,\n            parentBeaconBlockRoot: block.parentBeaconBlockRoot,\n            nonce: block.nonce,\n            difficulty: block.difficulty,\n            gasLimit: block.gasLimit,\n            gasUsed: block.gasUsed,\n            blobGasUsed: block.blobGasUsed,\n            excessBlobGas: block.excessBlobGas,\n            miner: block.miner,\n            extraData: block.extraData,\n            baseFeePerGas: getValue(block.baseFeePerGas),\n            stateRoot: block.stateRoot,\n            receiptsRoot: block.receiptsRoot\n        });\n    }\n}\n//////////////////////\n// Log\n/**\n *  A **Log** in Ethereum represents an event that has been included in a\n *  transaction using the ``LOG*`` opcodes, which are most commonly used by\n *  Solidity's emit for announcing events.\n */ class Log {\n    /**\n     *  Returns a JSON-compatible object.\n     */ toJSON() {\n        const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;\n        return {\n            _type: \"log\",\n            address,\n            blockHash,\n            blockNumber,\n            data,\n            index,\n            removed,\n            topics,\n            transactionHash,\n            transactionIndex\n        };\n    }\n    /**\n     *  Returns the block that this log occurred in.\n     */ async getBlock() {\n        const block = await this.provider.getBlock(this.blockHash);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assert)(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n        return block;\n    }\n    /**\n     *  Returns the transaction that this log occurred in.\n     */ async getTransaction() {\n        const tx = await this.provider.getTransaction(this.transactionHash);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assert)(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n        return tx;\n    }\n    /**\n     *  Returns the transaction receipt fot the transaction that this\n     *  log occurred in.\n     */ async getTransactionReceipt() {\n        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assert)(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\n        return receipt;\n    }\n    /**\n     *  @_ignore:\n     */ removedEvent() {\n        return createRemovedLogFilter(this);\n    }\n    /**\n     *  @_ignore:\n     */ constructor(log, provider){\n        this.provider = provider;\n        const topics = Object.freeze(log.topics.slice());\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n            removed: log.removed,\n            address: log.address,\n            data: log.data,\n            topics,\n            index: log.index,\n            transactionIndex: log.transactionIndex\n        });\n    }\n}\nvar _logs = /*#__PURE__*/ new WeakMap();\nlet _Symbol_iterator1 = Symbol.iterator;\n//////////////////////\n// Transaction Receipt\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/ /**\n *  A **TransactionReceipt** includes additional information about a\n *  transaction that is only available after it has been mined.\n */ class TransactionReceipt {\n    /**\n     *  The logs for this transaction.\n     */ get logs() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _logs);\n    }\n    /**\n     *  Returns a JSON-compatible representation.\n     */ toJSON() {\n        const { to, from, contractAddress, hash, index, blockHash, blockNumber, logsBloom, logs, status, root } = this;\n        return {\n            _type: \"TransactionReceipt\",\n            blockHash,\n            blockNumber,\n            //byzantium, \n            contractAddress,\n            cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n            from,\n            gasPrice: toJson(this.gasPrice),\n            blobGasUsed: toJson(this.blobGasUsed),\n            blobGasPrice: toJson(this.blobGasPrice),\n            gasUsed: toJson(this.gasUsed),\n            hash,\n            index,\n            logs,\n            logsBloom,\n            root,\n            status,\n            to\n        };\n    }\n    /**\n     *  @_ignore:\n     */ get length() {\n        return this.logs.length;\n    }\n    [_Symbol_iterator1]() {\n        let index = 0;\n        return {\n            next: ()=>{\n                if (index < this.length) {\n                    return {\n                        value: this.logs[index++],\n                        done: false\n                    };\n                }\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    /**\n     *  The total fee for this transaction, in wei.\n     */ get fee() {\n        return this.gasUsed * this.gasPrice;\n    }\n    /**\n     *  Resolves to the block this transaction occurred in.\n     */ async getBlock() {\n        const block = await this.provider.getBlock(this.blockHash);\n        if (block == null) {\n            throw new Error(\"TODO\");\n        }\n        return block;\n    }\n    /**\n     *  Resolves to the transaction this transaction occurred in.\n     */ async getTransaction() {\n        const tx = await this.provider.getTransaction(this.hash);\n        if (tx == null) {\n            throw new Error(\"TODO\");\n        }\n        return tx;\n    }\n    /**\n     *  Resolves to the return value of the execution of this transaction.\n     *\n     *  Support for this feature is limited, as it requires an archive node\n     *  with the ``debug_`` or ``trace_`` API enabled.\n     */ async getResult() {\n        return await this.provider.getTransactionResult(this.hash);\n    }\n    /**\n     *  Resolves to the number of confirmations this transaction has.\n     */ async confirmations() {\n        return await this.provider.getBlockNumber() - this.blockNumber + 1;\n    }\n    /**\n     *  @_ignore:\n     */ removedEvent() {\n        return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  @_ignore:\n     */ reorderedEvent(other) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assert)(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"reorderedEvent(other)\"\n        });\n        return createReorderedTransactionFilter(this, other);\n    }\n    /**\n     *  @_ignore:\n     */ constructor(tx, provider){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _logs, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__._)(this, _logs, Object.freeze(tx.logs.map((log)=>{\n            return new Log(log, provider);\n        })));\n        let gasPrice = BN_0;\n        if (tx.effectiveGasPrice != null) {\n            gasPrice = tx.effectiveGasPrice;\n        } else if (tx.gasPrice != null) {\n            gasPrice = tx.gasPrice;\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\n            provider,\n            to: tx.to,\n            from: tx.from,\n            contractAddress: tx.contractAddress,\n            hash: tx.hash,\n            index: tx.index,\n            blockHash: tx.blockHash,\n            blockNumber: tx.blockNumber,\n            logsBloom: tx.logsBloom,\n            gasUsed: tx.gasUsed,\n            cumulativeGasUsed: tx.cumulativeGasUsed,\n            blobGasUsed: tx.blobGasUsed,\n            gasPrice,\n            blobGasPrice: tx.blobGasPrice,\n            type: tx.type,\n            //byzantium: tx.byzantium,\n            status: tx.status,\n            root: tx.root\n        });\n    }\n}\nvar _startBlock = /*#__PURE__*/ new WeakMap();\n/**\n *  A **TransactionResponse** includes all properties about a transaction\n *  that was sent to the network, which may or may not be included in a\n *  block.\n *\n *  The [[TransactionResponse-isMined]] can be used to check if the\n *  transaction has been mined as well as type guard that the otherwise\n *  possibly ``null`` properties are defined.\n */ class TransactionResponse {\n    /**\n     *  Returns a JSON-compatible representation of this transaction.\n     */ toJSON() {\n        const { blockNumber, blockHash, index, hash, type, to, from, nonce, data, signature, accessList, blobVersionedHashes } = this;\n        return {\n            _type: \"TransactionResponse\",\n            accessList,\n            blockNumber,\n            blockHash,\n            blobVersionedHashes,\n            chainId: toJson(this.chainId),\n            data,\n            from,\n            gasLimit: toJson(this.gasLimit),\n            gasPrice: toJson(this.gasPrice),\n            hash,\n            maxFeePerGas: toJson(this.maxFeePerGas),\n            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n            maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),\n            nonce,\n            signature,\n            to,\n            index,\n            type,\n            value: toJson(this.value)\n        };\n    }\n    /**\n     *  Resolves to the Block that this transaction was included in.\n     *\n     *  This will return null if the transaction has not been included yet.\n     */ async getBlock() {\n        let blockNumber = this.blockNumber;\n        if (blockNumber == null) {\n            const tx = await this.getTransaction();\n            if (tx) {\n                blockNumber = tx.blockNumber;\n            }\n        }\n        if (blockNumber == null) {\n            return null;\n        }\n        const block = this.provider.getBlock(blockNumber);\n        if (block == null) {\n            throw new Error(\"TODO\");\n        }\n        return block;\n    }\n    /**\n     *  Resolves to this transaction being re-requested from the\n     *  provider. This can be used if you have an unmined transaction\n     *  and wish to get an up-to-date populated instance.\n     */ async getTransaction() {\n        return this.provider.getTransaction(this.hash);\n    }\n    /**\n     *  Resolve to the number of confirmations this transaction has.\n     */ async confirmations() {\n        if (this.blockNumber == null) {\n            const { tx, blockNumber } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\n                tx: this.getTransaction(),\n                blockNumber: this.provider.getBlockNumber()\n            });\n            // Not mined yet...\n            if (tx == null || tx.blockNumber == null) {\n                return 0;\n            }\n            return blockNumber - tx.blockNumber + 1;\n        }\n        const blockNumber = await this.provider.getBlockNumber();\n        return blockNumber - this.blockNumber + 1;\n    }\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */ async wait(_confirms, _timeout) {\n        const confirms = _confirms == null ? 1 : _confirms;\n        const timeout = _timeout == null ? 0 : _timeout;\n        let startBlock = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _startBlock);\n        let nextScan = -1;\n        let stopScanning = startBlock === -1 ? true : false;\n        const checkReplacement = async ()=>{\n            // Get the current transaction count for this sender\n            if (stopScanning) {\n                return null;\n            }\n            const { blockNumber, nonce } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\n                blockNumber: this.provider.getBlockNumber(),\n                nonce: this.provider.getTransactionCount(this.from)\n            });\n            // No transaction or our nonce has not been mined yet; but we\n            // can start scanning later when we do start\n            if (nonce < this.nonce) {\n                startBlock = blockNumber;\n                return;\n            }\n            // We were mined; no replacement\n            if (stopScanning) {\n                return null;\n            }\n            const mined = await this.getTransaction();\n            if (mined && mined.blockNumber != null) {\n                return;\n            }\n            // We were replaced; start scanning for that transaction\n            // Starting to scan; look back a few extra blocks for safety\n            if (nextScan === -1) {\n                nextScan = startBlock - 3;\n                if (nextScan < (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _startBlock)) {\n                    nextScan = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _startBlock);\n                }\n            }\n            while(nextScan <= blockNumber){\n                // Get the next block to scan\n                if (stopScanning) {\n                    return null;\n                }\n                const block = await this.provider.getBlock(nextScan, true);\n                // This should not happen; but we'll try again shortly\n                if (block == null) {\n                    return;\n                }\n                // We were mined; no replacement\n                for (const hash of block){\n                    if (hash === this.hash) {\n                        return;\n                    }\n                }\n                // Search for the transaction that replaced us\n                for(let i = 0; i < block.length; i++){\n                    const tx = await block.getTransaction(i);\n                    if (tx.from === this.from && tx.nonce === this.nonce) {\n                        // Get the receipt\n                        if (stopScanning) {\n                            return null;\n                        }\n                        const receipt = await this.provider.getTransactionReceipt(tx.hash);\n                        // This should not happen; but we'll try again shortly\n                        if (receipt == null) {\n                            return;\n                        }\n                        // We will retry this on the next block (this case could be optimized)\n                        if (blockNumber - receipt.blockNumber + 1 < confirms) {\n                            return;\n                        }\n                        // The reason we were replaced\n                        let reason = \"replaced\";\n                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n                            reason = \"repriced\";\n                        } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n                            reason = \"cancelled\";\n                        }\n                        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assert)(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n                            cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                            reason,\n                            replacement: tx.replaceableTransaction(startBlock),\n                            hash: tx.hash,\n                            receipt\n                        });\n                    }\n                }\n                nextScan++;\n            }\n            return;\n        };\n        const checkReceipt = (receipt)=>{\n            if (receipt == null || receipt.status !== 0) {\n                return receipt;\n            }\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assert)(false, \"transaction execution reverted\", \"CALL_EXCEPTION\", {\n                action: \"sendTransaction\",\n                data: null,\n                reason: null,\n                invocation: null,\n                revert: null,\n                transaction: {\n                    to: receipt.to,\n                    from: receipt.from,\n                    data: \"\" // @TODO: in v7, split out sendTransaction properties\n                },\n                receipt\n            });\n        };\n        const receipt = await this.provider.getTransactionReceipt(this.hash);\n        if (confirms === 0) {\n            return checkReceipt(receipt);\n        }\n        if (receipt) {\n            if (await receipt.confirmations() >= confirms) {\n                return checkReceipt(receipt);\n            }\n        } else {\n            // Check for a replacement; throws if a replacement was found\n            await checkReplacement();\n            // Allow null only when the confirms is 0\n            if (confirms === 0) {\n                return null;\n            }\n        }\n        const waiter = new Promise((resolve, reject)=>{\n            // List of things to cancel when we have a result (one way or the other)\n            const cancellers = [];\n            const cancel = ()=>{\n                cancellers.forEach((c)=>c());\n            };\n            // On cancel, stop scanning for replacements\n            cancellers.push(()=>{\n                stopScanning = true;\n            });\n            // Set up any timeout requested\n            if (timeout > 0) {\n                const timer = setTimeout(()=>{\n                    cancel();\n                    reject((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.makeError)(\"wait for transaction timeout\", \"TIMEOUT\"));\n                }, timeout);\n                cancellers.push(()=>{\n                    clearTimeout(timer);\n                });\n            }\n            const txListener = async (receipt)=>{\n                // Done; return it!\n                if (await receipt.confirmations() >= confirms) {\n                    cancel();\n                    try {\n                        resolve(checkReceipt(receipt));\n                    } catch (error) {\n                        reject(error);\n                    }\n                }\n            };\n            cancellers.push(()=>{\n                this.provider.off(this.hash, txListener);\n            });\n            this.provider.on(this.hash, txListener);\n            // We support replacement detection; start checking\n            if (startBlock >= 0) {\n                const replaceListener = async ()=>{\n                    try {\n                        // Check for a replacement; this throws only if one is found\n                        await checkReplacement();\n                    } catch (error) {\n                        // We were replaced (with enough confirms); re-throw the error\n                        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.isError)(error, \"TRANSACTION_REPLACED\")) {\n                            cancel();\n                            reject(error);\n                            return;\n                        }\n                    }\n                    // Rescheudle a check on the next block\n                    if (!stopScanning) {\n                        this.provider.once(\"block\", replaceListener);\n                    }\n                };\n                cancellers.push(()=>{\n                    this.provider.off(\"block\", replaceListener);\n                });\n                this.provider.once(\"block\", replaceListener);\n            }\n        });\n        return await waiter;\n    }\n    /**\n     *  Returns ``true`` if this transaction has been included.\n     *\n     *  This is effective only as of the time the TransactionResponse\n     *  was instantiated. To get up-to-date information, use\n     *  [[getTransaction]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  non-null property values for properties that are null for\n     *  unmined transactions.\n     */ isMined() {\n        return this.blockHash != null;\n    }\n    /**\n     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n     *  transaction.\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */ isLegacy() {\n        return this.type === 0;\n    }\n    /**\n     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n     *  transaction. See [[link-eip-2070]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */ isBerlin() {\n        return this.type === 1;\n    }\n    /**\n     *  Returns true if the transaction is a London (i.e. ``type == 2``)\n     *  transaction. See [[link-eip-1559]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */ isLondon() {\n        return this.type === 2;\n    }\n    /**\n     *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)\n     *  transaction. See [[link-eip-4844]].\n     */ isCancun() {\n        return this.type === 3;\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that evict this transaction.\n     */ removedEvent() {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assert)(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"removeEvent()\"\n        });\n        return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that re-order this event against %%other%%.\n     */ reorderedEvent(other) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assert)(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"removeEvent()\"\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assert)(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"removeEvent()\"\n        });\n        return createReorderedTransactionFilter(this, other);\n    }\n    /**\n     *  Returns a new TransactionResponse instance which has the ability to\n     *  detect (and throw an error) if the transaction is replaced, which\n     *  will begin scanning at %%startBlock%%.\n     *\n     *  This should generally not be used by developers and is intended\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\n     *  have devastating performance consequences if used incorrectly.\n     */ replaceableTransaction(startBlock) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.assertArgument)(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n        const tx = new TransactionResponse(this, this.provider);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__._)(tx, _startBlock, startBlock);\n        return tx;\n    }\n    /**\n     *  @_ignore:\n     */ constructor(tx, provider){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _startBlock, {\n            writable: true,\n            value: void 0\n        });\n        this.provider = provider;\n        this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;\n        this.blockHash = tx.blockHash != null ? tx.blockHash : null;\n        this.hash = tx.hash;\n        this.index = tx.index;\n        this.type = tx.type;\n        this.from = tx.from;\n        this.to = tx.to || null;\n        this.gasLimit = tx.gasLimit;\n        this.nonce = tx.nonce;\n        this.data = tx.data;\n        this.value = tx.value;\n        this.gasPrice = tx.gasPrice;\n        this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;\n        this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;\n        this.maxFeePerBlobGas = tx.maxFeePerBlobGas != null ? tx.maxFeePerBlobGas : null;\n        this.chainId = tx.chainId;\n        this.signature = tx.signature;\n        this.accessList = tx.accessList != null ? tx.accessList : null;\n        this.blobVersionedHashes = tx.blobVersionedHashes != null ? tx.blobVersionedHashes : null;\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__._)(this, _startBlock, -1);\n    }\n}\nfunction createOrphanedBlockFilter(block) {\n    return {\n        orphan: \"drop-block\",\n        hash: block.hash,\n        number: block.number\n    };\n}\nfunction createReorderedTransactionFilter(tx, other) {\n    return {\n        orphan: \"reorder-transaction\",\n        tx,\n        other\n    };\n}\nfunction createRemovedTransactionFilter(tx) {\n    return {\n        orphan: \"drop-transaction\",\n        tx\n    };\n}\nfunction createRemovedLogFilter(log) {\n    return {\n        orphan: \"drop-log\",\n        log: {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n            address: log.address,\n            data: log.data,\n            topics: Object.freeze(log.topics.slice()),\n            index: log.index\n        }\n    };\n} //# sourceMappingURL=provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/signer-noncemanager.js":
/*!***********************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/signer-noncemanager.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NonceManager: function() { return /* binding */ NonceManager; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _swc_helpers_class_private_field_update__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_update */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_update.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _abstract_signer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-signer.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/abstract-signer.js\");\n\n\n\n\n\n\nvar _noncePromise = /*#__PURE__*/ new WeakMap(), _delta = /*#__PURE__*/ new WeakMap();\n/**\n *  A **NonceManager** wraps another [[Signer]] and automatically manages\n *  the nonce, ensuring serialized and sequential nonces are used during\n *  transaction.\n */ class NonceManager extends _abstract_signer_js__WEBPACK_IMPORTED_MODULE_0__.AbstractSigner {\n    async getAddress() {\n        return this.signer.getAddress();\n    }\n    connect(provider) {\n        return new NonceManager(this.signer.connect(provider));\n    }\n    async getNonce(blockTag) {\n        if (blockTag === \"pending\") {\n            if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _noncePromise) == null) {\n                (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, _noncePromise, super.getNonce(\"pending\"));\n            }\n            const delta = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _delta);\n            return await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _noncePromise) + delta;\n        }\n        return super.getNonce(blockTag);\n    }\n    /**\n     *  Manually increment the nonce. This may be useful when managng\n     *  offline transactions.\n     */ increment() {\n        (0,_swc_helpers_class_private_field_update__WEBPACK_IMPORTED_MODULE_3__._)(this, _delta).value++;\n    }\n    /**\n     *  Resets the nonce, causing the **NonceManager** to reload the current\n     *  nonce from the blockchain on the next transaction.\n     */ reset() {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, _delta, 0);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, _noncePromise, null);\n    }\n    async sendTransaction(tx) {\n        const noncePromise = this.getNonce(\"pending\");\n        this.increment();\n        tx = await this.signer.populateTransaction(tx);\n        tx.nonce = await noncePromise;\n        // @TODO: Maybe handle interesting/recoverable errors?\n        // Like don't increment if the tx was certainly not sent\n        return await this.signer.sendTransaction(tx);\n    }\n    signTransaction(tx) {\n        return this.signer.signTransaction(tx);\n    }\n    signMessage(message) {\n        return this.signer.signMessage(message);\n    }\n    signTypedData(domain, types, value) {\n        return this.signer.signTypedData(domain, types, value);\n    }\n    /**\n     *  Creates a new **NonceManager** to manage %%signer%%.\n     */ constructor(signer){\n        super(signer.provider);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _noncePromise, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _delta, {\n            writable: true,\n            value: void 0\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.defineProperties)(this, {\n            signer\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, _noncePromise, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, _delta, 0);\n    }\n} //# sourceMappingURL=signer-noncemanager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3NpZ25lci1ub25jZW1hbmFnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBcUQ7QUFDQztJQVdsRCw2Q0FDQTtBQVhKOzs7O0NBSUMsR0FDTSxNQUFNRSxxQkFBcUJELCtEQUFjQTtJQWdCNUMsTUFBTUUsYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDQyxNQUFNLENBQUNELFVBQVU7SUFDakM7SUFDQUUsUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBTyxJQUFJSixhQUFhLElBQUksQ0FBQ0UsTUFBTSxDQUFDQyxPQUFPLENBQUNDO0lBQ2hEO0lBQ0EsTUFBTUMsU0FBU0MsUUFBUSxFQUFFO1FBQ3JCLElBQUlBLGFBQWEsV0FBVztZQUN4QixJQUFJLDRFQUFJLEVBQUVDLGtCQUFnQixNQUFNOzhGQUN0QkEsZUFBZSxLQUFLLENBQUNGLFNBQVM7WUFDeEM7WUFDQSxNQUFNRyxRQUFRQSx1RUFBQUEsQ0FBQSxJQUFJLEVBQUVBO1lBQ3BCLE9BQU8sOEVBQU8sSUFBSSxFQUFFRCxpQkFBZ0JDO1FBQ3hDO1FBQ0EsT0FBTyxLQUFLLENBQUNILFNBQVNDO0lBQzFCO0lBQ0E7OztLQUdDLEdBQ0RHLFlBQVk7UUFDUiwrRUFBSSxFQUFFRDtJQUNWO0lBQ0E7OztLQUdDLEdBQ0RFLFFBQVE7c0ZBQ0VGLFFBQVE7c0ZBQ1JELGVBQWU7SUFDekI7SUFDQSxNQUFNSSxnQkFBZ0JDLEVBQUUsRUFBRTtRQUN0QixNQUFNTCxlQUFlLElBQUksQ0FBQ0YsUUFBUSxDQUFDO1FBQ25DLElBQUksQ0FBQ0ksU0FBUztRQUNkRyxLQUFLLE1BQU0sSUFBSSxDQUFDVixNQUFNLENBQUNXLG1CQUFtQixDQUFDRDtRQUMzQ0EsR0FBR0UsS0FBSyxHQUFHLE1BQU1QO1FBQ2pCLHNEQUFzRDtRQUN0RCx3REFBd0Q7UUFDeEQsT0FBTyxNQUFNLElBQUksQ0FBQ0wsTUFBTSxDQUFDUyxlQUFlLENBQUNDO0lBQzdDO0lBQ0FHLGdCQUFnQkgsRUFBRSxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDVixNQUFNLENBQUNhLGVBQWUsQ0FBQ0g7SUFDdkM7SUFDQUksWUFBWUMsT0FBTyxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFDZixNQUFNLENBQUNjLFdBQVcsQ0FBQ0M7SUFDbkM7SUFDQUMsY0FBY0MsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRTtRQUNoQyxPQUFPLElBQUksQ0FBQ25CLE1BQU0sQ0FBQ2dCLGFBQWEsQ0FBQ0MsUUFBUUMsT0FBT0M7SUFDcEQ7SUF6REE7O0tBRUMsR0FDREMsWUFBWXBCLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBLE9BQU9FLFFBQVE7UUFOekI7O21CQUFBOztRQUNBOzttQkFBQTs7UUFNSU4saUVBQWdCQSxDQUFDLElBQUksRUFBRTtZQUFFSTtRQUFPO3NGQUMxQkssZUFBZTtzRkFDZkMsUUFBUTtJQUNsQjtBQWtESixFQUNBLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3Byb3ZpZGVycy9zaWduZXItbm9uY2VtYW5hZ2VyLmpzP2Q4Y2QiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcyB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQWJzdHJhY3RTaWduZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1zaWduZXIuanNcIjtcbi8qKlxuICogIEEgKipOb25jZU1hbmFnZXIqKiB3cmFwcyBhbm90aGVyIFtbU2lnbmVyXV0gYW5kIGF1dG9tYXRpY2FsbHkgbWFuYWdlc1xuICogIHRoZSBub25jZSwgZW5zdXJpbmcgc2VyaWFsaXplZCBhbmQgc2VxdWVudGlhbCBub25jZXMgYXJlIHVzZWQgZHVyaW5nXG4gKiAgdHJhbnNhY3Rpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBOb25jZU1hbmFnZXIgZXh0ZW5kcyBBYnN0cmFjdFNpZ25lciB7XG4gICAgLyoqXG4gICAgICogIFRoZSBTaWduZXIgYmVpbmcgbWFuYWdlZC5cbiAgICAgKi9cbiAgICBzaWduZXI7XG4gICAgI25vbmNlUHJvbWlzZTtcbiAgICAjZGVsdGE7XG4gICAgLyoqXG4gICAgICogIENyZWF0ZXMgYSBuZXcgKipOb25jZU1hbmFnZXIqKiB0byBtYW5hZ2UgJSVzaWduZXIlJS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzaWduZXIpIHtcbiAgICAgICAgc3VwZXIoc2lnbmVyLnByb3ZpZGVyKTtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IHNpZ25lciB9KTtcbiAgICAgICAgdGhpcy4jbm9uY2VQcm9taXNlID0gbnVsbDtcbiAgICAgICAgdGhpcy4jZGVsdGEgPSAwO1xuICAgIH1cbiAgICBhc3luYyBnZXRBZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaWduZXIuZ2V0QWRkcmVzcygpO1xuICAgIH1cbiAgICBjb25uZWN0KHByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgTm9uY2VNYW5hZ2VyKHRoaXMuc2lnbmVyLmNvbm5lY3QocHJvdmlkZXIpKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0Tm9uY2UoYmxvY2tUYWcpIHtcbiAgICAgICAgaWYgKGJsb2NrVGFnID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgICAgaWYgKHRoaXMuI25vbmNlUHJvbWlzZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jbm9uY2VQcm9taXNlID0gc3VwZXIuZ2V0Tm9uY2UoXCJwZW5kaW5nXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSB0aGlzLiNkZWx0YTtcbiAgICAgICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy4jbm9uY2VQcm9taXNlKSArIGRlbHRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5nZXROb25jZShibG9ja1RhZyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBNYW51YWxseSBpbmNyZW1lbnQgdGhlIG5vbmNlLiBUaGlzIG1heSBiZSB1c2VmdWwgd2hlbiBtYW5hZ25nXG4gICAgICogIG9mZmxpbmUgdHJhbnNhY3Rpb25zLlxuICAgICAqL1xuICAgIGluY3JlbWVudCgpIHtcbiAgICAgICAgdGhpcy4jZGVsdGErKztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc2V0cyB0aGUgbm9uY2UsIGNhdXNpbmcgdGhlICoqTm9uY2VNYW5hZ2VyKiogdG8gcmVsb2FkIHRoZSBjdXJyZW50XG4gICAgICogIG5vbmNlIGZyb20gdGhlIGJsb2NrY2hhaW4gb24gdGhlIG5leHQgdHJhbnNhY3Rpb24uXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuI2RlbHRhID0gMDtcbiAgICAgICAgdGhpcy4jbm9uY2VQcm9taXNlID0gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgc2VuZFRyYW5zYWN0aW9uKHR4KSB7XG4gICAgICAgIGNvbnN0IG5vbmNlUHJvbWlzZSA9IHRoaXMuZ2V0Tm9uY2UoXCJwZW5kaW5nXCIpO1xuICAgICAgICB0aGlzLmluY3JlbWVudCgpO1xuICAgICAgICB0eCA9IGF3YWl0IHRoaXMuc2lnbmVyLnBvcHVsYXRlVHJhbnNhY3Rpb24odHgpO1xuICAgICAgICB0eC5ub25jZSA9IGF3YWl0IG5vbmNlUHJvbWlzZTtcbiAgICAgICAgLy8gQFRPRE86IE1heWJlIGhhbmRsZSBpbnRlcmVzdGluZy9yZWNvdmVyYWJsZSBlcnJvcnM/XG4gICAgICAgIC8vIExpa2UgZG9uJ3QgaW5jcmVtZW50IGlmIHRoZSB0eCB3YXMgY2VydGFpbmx5IG5vdCBzZW50XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnNpZ25lci5zZW5kVHJhbnNhY3Rpb24odHgpO1xuICAgIH1cbiAgICBzaWduVHJhbnNhY3Rpb24odHgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2lnbmVyLnNpZ25UcmFuc2FjdGlvbih0eCk7XG4gICAgfVxuICAgIHNpZ25NZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2lnbmVyLnNpZ25NZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBzaWduVHlwZWREYXRhKGRvbWFpbiwgdHlwZXMsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpZ25lci5zaWduVHlwZWREYXRhKGRvbWFpbiwgdHlwZXMsIHZhbHVlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaWduZXItbm9uY2VtYW5hZ2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJkZWZpbmVQcm9wZXJ0aWVzIiwiQWJzdHJhY3RTaWduZXIiLCJOb25jZU1hbmFnZXIiLCJnZXRBZGRyZXNzIiwic2lnbmVyIiwiY29ubmVjdCIsInByb3ZpZGVyIiwiZ2V0Tm9uY2UiLCJibG9ja1RhZyIsIm5vbmNlUHJvbWlzZSIsImRlbHRhIiwiaW5jcmVtZW50IiwicmVzZXQiLCJzZW5kVHJhbnNhY3Rpb24iLCJ0eCIsInBvcHVsYXRlVHJhbnNhY3Rpb24iLCJub25jZSIsInNpZ25UcmFuc2FjdGlvbiIsInNpZ25NZXNzYWdlIiwibWVzc2FnZSIsInNpZ25UeXBlZERhdGEiLCJkb21haW4iLCJ0eXBlcyIsInZhbHVlIiwiY29uc3RydWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/signer-noncemanager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/subscriber-filterid.js":
/*!***********************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/subscriber-filterid.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilterIdEventSubscriber: function() { return /* binding */ FilterIdEventSubscriber; },\n/* harmony export */   FilterIdPendingSubscriber: function() { return /* binding */ FilterIdPendingSubscriber; },\n/* harmony export */   FilterIdSubscriber: function() { return /* binding */ FilterIdSubscriber; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./subscriber-polling.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/subscriber-polling.js\");\n\n\n\n\n\n\n\nfunction copy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nvar _provider = /*#__PURE__*/ new WeakMap(), _filterIdPromise = /*#__PURE__*/ new WeakMap(), _poller = /*#__PURE__*/ new WeakMap(), _running = /*#__PURE__*/ new WeakMap(), _network = /*#__PURE__*/ new WeakMap(), _hault = /*#__PURE__*/ new WeakMap(), _poll = /*#__PURE__*/ new WeakSet(), _teardown = /*#__PURE__*/ new WeakSet();\n/**\n *  Some backends support subscribing to events using a Filter ID.\n *\n *  When subscribing with this technique, the node issues a unique\n *  //Filter ID//. At this point the node dedicates resources to\n *  the filter, so that periodic calls to follow up on the //Filter ID//\n *  will receive any events since the last call.\n *\n *  @_docloc: api/providers/abstract-provider\n */ class FilterIdSubscriber {\n    /**\n     *  Sub-classes **must** override this to begin the subscription.\n     */ _subscribe(provider) {\n        throw new Error(\"subclasses must override this\");\n    }\n    /**\n     *  Sub-classes **must** override this handle the events.\n     */ _emitResults(provider, result) {\n        throw new Error(\"subclasses must override this\");\n    }\n    /**\n     *  Sub-classes **must** override this handle recovery on errors.\n     */ _recover(provider) {\n        throw new Error(\"subclasses must override this\");\n    }\n    start() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _running)) {\n            return;\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _running, true);\n        (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _poll, poll).call(this, -2);\n    }\n    stop() {\n        if (!(0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _running)) {\n            return;\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _running, false);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _hault, true);\n        (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _teardown, teardown).call(this);\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider).off(\"block\", (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _poller));\n    }\n    pause(dropWhilePaused) {\n        if (dropWhilePaused) {\n            (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _teardown, teardown).call(this);\n        }\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider).off(\"block\", (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _poller));\n    }\n    resume() {\n        this.start();\n    }\n    /**\n     *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]\n     *  and [[_emitResults]] to setup the subscription and provide the event\n     *  to the %%provider%%.\n     */ constructor(provider){\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _poll);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _teardown);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _provider, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _filterIdPromise, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _poller, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _running, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _network, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _hault, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _provider, provider);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _filterIdPromise, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _poller, (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _poll, poll).bind(this));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _running, false);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _network, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _hault, false);\n    }\n}\nasync function poll(blockNumber) {\n    try {\n        // Subscribe if necessary\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _filterIdPromise) == null) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _filterIdPromise, this._subscribe((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider)));\n        }\n        // Get the Filter ID\n        let filterId = null;\n        try {\n            filterId = await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _filterIdPromise);\n        } catch (error) {\n            if (!(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.isError)(error, \"UNSUPPORTED_OPERATION\") || error.operation !== \"eth_newFilter\") {\n                throw error;\n            }\n        }\n        // The backend does not support Filter ID; downgrade to\n        // polling\n        if (filterId == null) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _filterIdPromise, null);\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider)._recoverSubscriber(this, this._recover((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider)));\n            return;\n        }\n        const network = await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider).getNetwork();\n        if (!(0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _network)) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _network, network);\n        }\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _network).chainId !== network.chainId) {\n            throw new Error(\"chaid changed\");\n        }\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _hault)) {\n            return;\n        }\n        const result = await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider).send(\"eth_getFilterChanges\", [\n            filterId\n        ]);\n        await this._emitResults((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider), result);\n    } catch (error) {\n        console.log(\"@TODO\", error);\n    }\n    (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider).once(\"block\", (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _poller));\n}\nfunction teardown() {\n    const filterIdPromise = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _filterIdPromise);\n    if (filterIdPromise) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _filterIdPromise, null);\n        filterIdPromise.then((filterId)=>{\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _provider).send(\"eth_uninstallFilter\", [\n                filterId\n            ]);\n        });\n    }\n}\nvar _event = /*#__PURE__*/ new WeakMap();\n/**\n *  A **FilterIdSubscriber** for receiving contract events.\n *\n *  @_docloc: api/providers/abstract-provider\n */ class FilterIdEventSubscriber extends FilterIdSubscriber {\n    _recover(provider) {\n        return new _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_6__.PollingEventSubscriber(provider, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _event));\n    }\n    async _subscribe(provider) {\n        const filterId = await provider.send(\"eth_newFilter\", [\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _event)\n        ]);\n        return filterId;\n    }\n    async _emitResults(provider, results) {\n        for (const result of results){\n            provider.emit((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _event), provider._wrapLog(result, provider._network));\n        }\n    }\n    /**\n     *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%\n     *  listening for %%filter%%.\n     */ constructor(provider, filter){\n        super(provider);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _event, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_1__._)(this, _event, copy(filter));\n    }\n}\n/**\n *  A **FilterIdSubscriber** for receiving pending transactions events.\n *\n *  @_docloc: api/providers/abstract-provider\n */ class FilterIdPendingSubscriber extends FilterIdSubscriber {\n    async _subscribe(provider) {\n        return await provider.send(\"eth_newPendingTransactionFilter\", []);\n    }\n    async _emitResults(provider, results) {\n        for (const result of results){\n            provider.emit(\"pending\", result);\n        }\n    }\n} //# sourceMappingURL=subscriber-filterid.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/subscriber-filterid.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/subscriber-polling.js":
/*!**********************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/subscriber-polling.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnBlockSubscriber: function() { return /* binding */ OnBlockSubscriber; },\n/* harmony export */   PollingBlockSubscriber: function() { return /* binding */ PollingBlockSubscriber; },\n/* harmony export */   PollingBlockTagSubscriber: function() { return /* binding */ PollingBlockTagSubscriber; },\n/* harmony export */   PollingEventSubscriber: function() { return /* binding */ PollingEventSubscriber; },\n/* harmony export */   PollingOrphanSubscriber: function() { return /* binding */ PollingOrphanSubscriber; },\n/* harmony export */   PollingTransactionSubscriber: function() { return /* binding */ PollingTransactionSubscriber; },\n/* harmony export */   getPollingSubscriber: function() { return /* binding */ getPollingSubscriber; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n\n\n\n\n\n\nfunction copy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\n/**\n *  Return the polling subscriber for common events.\n *\n *  @_docloc: api/providers/abstract-provider\n */ function getPollingSubscriber(provider, event) {\n    if (event === \"block\") {\n        return new PollingBlockSubscriber(provider);\n    }\n    if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(event, 32)) {\n        return new PollingTransactionSubscriber(provider, event);\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, \"unsupported polling event\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getPollingSubscriber\",\n        info: {\n            event\n        }\n    });\n}\nvar _provider = /*#__PURE__*/ new WeakMap(), _poller = /*#__PURE__*/ new WeakMap(), _interval = /*#__PURE__*/ new WeakMap(), // The most recent block we have scanned for events. The value -2\n// indicates we still need to fetch an initial block number\n_blockNumber = /*#__PURE__*/ new WeakMap(), _poll = /*#__PURE__*/ new WeakSet();\n// @TODO: refactor this\n/**\n *  A **PollingBlockSubscriber** polls at a regular interval for a change\n *  in the block number.\n *\n *  @_docloc: api/providers/abstract-provider\n */ class PollingBlockSubscriber {\n    /**\n     *  The polling interval.\n     */ get pollingInterval() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _interval);\n    }\n    set pollingInterval(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _interval, value);\n    }\n    start() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _poller)) {\n            return;\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _poller, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _provider)._setTimeout((0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _poll, poll).bind(this), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _interval)));\n        (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _poll, poll).call(this);\n    }\n    stop() {\n        if (!(0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _poller)) {\n            return;\n        }\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _provider)._clearTimeout((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _poller));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _poller, null);\n    }\n    pause(dropWhilePaused) {\n        this.stop();\n        if (dropWhilePaused) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _blockNumber, -2);\n        }\n    }\n    resume() {\n        this.start();\n    }\n    /**\n     *  Create a new **PollingBlockSubscriber** attached to %%provider%%.\n     */ constructor(provider){\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_5__._)(this, _poll);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _provider, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _poller, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _interval, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _blockNumber, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _provider, provider);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _poller, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _interval, 4000);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _blockNumber, -2);\n    }\n}\nasync function poll() {\n    try {\n        const blockNumber = await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _provider).getBlockNumber();\n        // Bootstrap poll to setup our initial block number\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _blockNumber) === -2) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _blockNumber, blockNumber);\n            return;\n        }\n        // @TODO: Put a cap on the maximum number of events per loop?\n        if (blockNumber !== (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _blockNumber)) {\n            for(let b = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _blockNumber) + 1; b <= blockNumber; b++){\n                // We have been stopped\n                if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _poller) == null) {\n                    return;\n                }\n                await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _provider).emit(\"block\", b);\n            }\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _blockNumber, blockNumber);\n        }\n    } catch (error) {\n    // @TODO: Minor bump, add an \"error\" event to let subscribers\n    //        know things went awry.\n    //console.log(error);\n    }\n    // We have been stopped\n    if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _poller) == null) {\n        return;\n    }\n    (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _poller, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _provider)._setTimeout((0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _poll, poll).bind(this), (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _interval)));\n}\nvar _provider1 = /*#__PURE__*/ new WeakMap(), _poll1 = /*#__PURE__*/ new WeakMap(), _running = /*#__PURE__*/ new WeakMap();\n/**\n *  An **OnBlockSubscriber** can be sub-classed, with a [[_poll]]\n *  implmentation which will be called on every new block.\n *\n *  @_docloc: api/providers/abstract-provider\n */ class OnBlockSubscriber {\n    /**\n     *  Called on every new block.\n     */ async _poll(blockNumber, provider) {\n        throw new Error(\"sub-classes must override this\");\n    }\n    start() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _running)) {\n            return;\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _running, true);\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _poll1).call(this, -2);\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _provider1).on(\"block\", (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _poll1));\n    }\n    stop() {\n        if (!(0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _running)) {\n            return;\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _running, false);\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _provider1).off(\"block\", (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _poll1));\n    }\n    pause(dropWhilePaused) {\n        this.stop();\n    }\n    resume() {\n        this.start();\n    }\n    /**\n     *  Create a new **OnBlockSubscriber** attached to %%provider%%.\n     */ constructor(provider){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _provider1, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _poll1, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _running, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _provider1, provider);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _running, false);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _poll1, (blockNumber)=>{\n            this._poll(blockNumber, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _provider1));\n        });\n    }\n}\nvar _tag = /*#__PURE__*/ new WeakMap(), _lastBlock = /*#__PURE__*/ new WeakMap();\nclass PollingBlockTagSubscriber extends OnBlockSubscriber {\n    pause(dropWhilePaused) {\n        if (dropWhilePaused) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _lastBlock, -2);\n        }\n        super.pause(dropWhilePaused);\n    }\n    async _poll(blockNumber, provider) {\n        const block = await provider.getBlock((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _tag));\n        if (block == null) {\n            return;\n        }\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _lastBlock) === -2) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _lastBlock, block.number);\n        } else if (block.number > (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _lastBlock)) {\n            provider.emit((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _tag), block.number);\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _lastBlock, block.number);\n        }\n    }\n    constructor(provider, tag){\n        super(provider);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _tag, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _lastBlock, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _tag, tag);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _lastBlock, -2);\n    }\n}\nvar _filter = /*#__PURE__*/ new WeakMap();\n/**\n *  @_ignore:\n *\n *  @_docloc: api/providers/abstract-provider\n */ class PollingOrphanSubscriber extends OnBlockSubscriber {\n    async _poll(blockNumber, provider) {\n        throw new Error(\"@TODO\");\n        console.log((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _filter));\n    }\n    constructor(provider, filter){\n        super(provider);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _filter, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _filter, copy(filter));\n    }\n}\nvar _hash = /*#__PURE__*/ new WeakMap();\n/**\n *  A **PollingTransactionSubscriber** will poll for a given transaction\n *  hash for its receipt.\n *\n *  @_docloc: api/providers/abstract-provider\n */ class PollingTransactionSubscriber extends OnBlockSubscriber {\n    async _poll(blockNumber, provider) {\n        const tx = await provider.getTransactionReceipt((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _hash));\n        if (tx) {\n            provider.emit((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _hash), tx);\n        }\n    }\n    /**\n     *  Create a new **PollingTransactionSubscriber** attached to\n     *  %%provider%%, listening for %%hash%%.\n     */ constructor(provider, hash){\n        super(provider);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _hash, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _hash, hash);\n    }\n}\nvar _provider2 = /*#__PURE__*/ new WeakMap(), _filter1 = /*#__PURE__*/ new WeakMap(), _poller1 = /*#__PURE__*/ new WeakMap(), _running1 = /*#__PURE__*/ new WeakMap(), // The most recent block we have scanned for events. The value -2\n// indicates we still need to fetch an initial block number\n_blockNumber1 = /*#__PURE__*/ new WeakMap(), _poll2 = /*#__PURE__*/ new WeakSet();\n/**\n *  A **PollingEventSubscriber** will poll for a given filter for its logs.\n *\n *  @_docloc: api/providers/abstract-provider\n */ class PollingEventSubscriber {\n    start() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _running1)) {\n            return;\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _running1, true);\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _blockNumber1) === -2) {\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _provider2).getBlockNumber().then((blockNumber)=>{\n                (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _blockNumber1, blockNumber);\n            });\n        }\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _provider2).on(\"block\", (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _poller1));\n    }\n    stop() {\n        if (!(0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _running1)) {\n            return;\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _running1, false);\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _provider2).off(\"block\", (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _poller1));\n    }\n    pause(dropWhilePaused) {\n        this.stop();\n        if (dropWhilePaused) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _blockNumber1, -2);\n        }\n    }\n    resume() {\n        this.start();\n    }\n    /**\n     *  Create a new **PollingTransactionSubscriber** attached to\n     *  %%provider%%, listening for %%filter%%.\n     */ constructor(provider, filter){\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_5__._)(this, _poll2);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _provider2, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _filter1, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _poller1, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _running1, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _blockNumber1, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _provider2, provider);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _filter1, copy(filter));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _poller1, (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_4__._)(this, _poll2, poll1).bind(this));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _running1, false);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _blockNumber1, -2);\n    }\n} //# sourceMappingURL=subscriber-polling.js.map\nasync function poll1(blockNumber) {\n    // The initial block hasn't been determined yet\n    if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _blockNumber1) === -2) {\n        return;\n    }\n    const filter = copy((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _filter1));\n    filter.fromBlock = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _blockNumber1) + 1;\n    filter.toBlock = blockNumber;\n    const logs = await (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _provider2).getLogs(filter);\n    // No logs could just mean the node has not indexed them yet,\n    // so we keep a sliding window of 60 blocks to keep scanning\n    if (logs.length === 0) {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _blockNumber1) < blockNumber - 60) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _blockNumber1, blockNumber - 60);\n        }\n        return;\n    }\n    for (const log of logs){\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _provider2).emit((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _filter1), log);\n        // Only advance the block number when logs were found to\n        // account for networks (like BNB and Polygon) which may\n        // sacrifice event consistency for block event speed\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_3__._)(this, _blockNumber1, log.blockNumber);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/subscriber-polling.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/providers/ws-browser.js":
/*!**************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/providers/ws-browser.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocket: function() { return /* binding */ _WebSocket; }\n/* harmony export */ });\nfunction getGlobal() {\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (true) {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw new Error(\"unable to locate global object\");\n}\n;\nconst _WebSocket = getGlobal().WebSocket;\n //# sourceMappingURL=ws-browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3dzLWJyb3dzZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBO0lBQ0wsSUFBSSxPQUFPQyxTQUFTLGFBQWE7UUFDN0IsT0FBT0E7SUFDWDtJQUNBLElBQUksSUFBa0IsRUFBYTtRQUMvQixPQUFPQztJQUNYO0lBQ0EsSUFBSSxPQUFPQyxXQUFXLGFBQWE7UUFDL0IsT0FBT0E7SUFDWDtJQUNBLE1BQU0sSUFBSUMsTUFBTTtBQUNwQjs7QUFFQSxNQUFNQyxhQUFhTCxZQUFZTSxTQUFTO0FBQ0wsQ0FDbkMsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3dzLWJyb3dzZXIuanM/NGEwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBnZXRHbG9iYWwoKSB7XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdCcpO1xufVxuO1xuY29uc3QgX1dlYlNvY2tldCA9IGdldEdsb2JhbCgpLldlYlNvY2tldDtcbmV4cG9ydCB7IF9XZWJTb2NrZXQgYXMgV2ViU29ja2V0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cy1icm93c2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRHbG9iYWwiLCJzZWxmIiwid2luZG93IiwiZ2xvYmFsIiwiRXJyb3IiLCJfV2ViU29ja2V0IiwiV2ViU29ja2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/providers/ws-browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/accesslist.js":
/*!****************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/transaction/accesslist.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accessListify: function() { return /* binding */ accessListify; }\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n\n\nfunction accessSetify(addr, storageKeys) {\n    return {\n        address: (0,_address_index_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(addr),\n        storageKeys: storageKeys.map((storageKey, index)=>{\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isHexString)(storageKey, 32), \"invalid slot\", \"storageKeys[\".concat(index, \"]\"), storageKey);\n            return storageKey.toLowerCase();\n        })\n    };\n}\n/**\n *  Returns a [[AccessList]] from any ethers-supported access-list structure.\n */ function accessListify(value) {\n    if (Array.isArray(value)) {\n        return value.map((set, index)=>{\n            if (Array.isArray(set)) {\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(set.length === 2, \"invalid slot set\", \"value[\".concat(index, \"]\"), set);\n                return accessSetify(set[0], set[1]);\n            }\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(set != null && typeof set === \"object\", \"invalid address-slot set\", \"value\", value);\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(value != null && typeof value === \"object\", \"invalid access list\", \"value\", value);\n    const result = Object.keys(value).map((addr)=>{\n        const storageKeys = value[addr].reduce((accum, storageKey)=>{\n            accum[storageKey] = true;\n            return accum;\n        }, {});\n        return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b)=>a.address.localeCompare(b.address));\n    return result;\n} //# sourceMappingURL=accesslist.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdHJhbnNhY3Rpb24vYWNjZXNzbGlzdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlEO0FBQ2U7QUFDaEUsU0FBU0csYUFBYUMsSUFBSSxFQUFFQyxXQUFXO0lBQ25DLE9BQU87UUFDSEMsU0FBU04sNkRBQVVBLENBQUNJO1FBQ3BCQyxhQUFhQSxZQUFZRSxHQUFHLENBQUMsQ0FBQ0MsWUFBWUM7WUFDdENSLCtEQUFjQSxDQUFDQyw0REFBV0EsQ0FBQ00sWUFBWSxLQUFLLGdCQUFnQixlQUFxQixPQUFOQyxPQUFNLE1BQUlEO1lBQ3JGLE9BQU9BLFdBQVdFLFdBQVc7UUFDakM7SUFDSjtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxTQUFTQyxjQUFjQyxLQUFLO0lBQy9CLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0YsUUFBUTtRQUN0QixPQUFPQSxNQUFNTCxHQUFHLENBQUMsQ0FBQ1EsS0FBS047WUFDbkIsSUFBSUksTUFBTUMsT0FBTyxDQUFDQyxNQUFNO2dCQUNwQmQsK0RBQWNBLENBQUNjLElBQUlDLE1BQU0sS0FBSyxHQUFHLG9CQUFvQixTQUFlLE9BQU5QLE9BQU0sTUFBSU07Z0JBQ3hFLE9BQU9aLGFBQWFZLEdBQUcsQ0FBQyxFQUFFLEVBQUVBLEdBQUcsQ0FBQyxFQUFFO1lBQ3RDO1lBQ0FkLCtEQUFjQSxDQUFDYyxPQUFPLFFBQVEsT0FBUUEsUUFBUyxVQUFVLDRCQUE0QixTQUFTSDtZQUM5RixPQUFPVCxhQUFhWSxJQUFJVCxPQUFPLEVBQUVTLElBQUlWLFdBQVc7UUFDcEQ7SUFDSjtJQUNBSiwrREFBY0EsQ0FBQ1csU0FBUyxRQUFRLE9BQVFBLFVBQVcsVUFBVSx1QkFBdUIsU0FBU0E7SUFDN0YsTUFBTUssU0FBU0MsT0FBT0MsSUFBSSxDQUFDUCxPQUFPTCxHQUFHLENBQUMsQ0FBQ0g7UUFDbkMsTUFBTUMsY0FBY08sS0FBSyxDQUFDUixLQUFLLENBQUNnQixNQUFNLENBQUMsQ0FBQ0MsT0FBT2I7WUFDM0NhLEtBQUssQ0FBQ2IsV0FBVyxHQUFHO1lBQ3BCLE9BQU9hO1FBQ1gsR0FBRyxDQUFDO1FBQ0osT0FBT2xCLGFBQWFDLE1BQU1jLE9BQU9DLElBQUksQ0FBQ2QsYUFBYWlCLElBQUk7SUFDM0Q7SUFDQUwsT0FBT0ssSUFBSSxDQUFDLENBQUNDLEdBQUdDLElBQU9ELEVBQUVqQixPQUFPLENBQUNtQixhQUFhLENBQUNELEVBQUVsQixPQUFPO0lBQ3hELE9BQU9XO0FBQ1gsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS90cmFuc2FjdGlvbi9hY2Nlc3NsaXN0LmpzPzQwNjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QWRkcmVzcyB9IGZyb20gXCIuLi9hZGRyZXNzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBhc3NlcnRBcmd1bWVudCwgaXNIZXhTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmZ1bmN0aW9uIGFjY2Vzc1NldGlmeShhZGRyLCBzdG9yYWdlS2V5cykge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFkZHJlc3M6IGdldEFkZHJlc3MoYWRkciksXG4gICAgICAgIHN0b3JhZ2VLZXlzOiBzdG9yYWdlS2V5cy5tYXAoKHN0b3JhZ2VLZXksIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChpc0hleFN0cmluZyhzdG9yYWdlS2V5LCAzMiksIFwiaW52YWxpZCBzbG90XCIsIGBzdG9yYWdlS2V5c1ske2luZGV4fV1gLCBzdG9yYWdlS2V5KTtcbiAgICAgICAgICAgIHJldHVybiBzdG9yYWdlS2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0pXG4gICAgfTtcbn1cbi8qKlxuICogIFJldHVybnMgYSBbW0FjY2Vzc0xpc3RdXSBmcm9tIGFueSBldGhlcnMtc3VwcG9ydGVkIGFjY2Vzcy1saXN0IHN0cnVjdHVyZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFjY2Vzc0xpc3RpZnkodmFsdWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcCgoc2V0LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2V0KSkge1xuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KHNldC5sZW5ndGggPT09IDIsIFwiaW52YWxpZCBzbG90IHNldFwiLCBgdmFsdWVbJHtpbmRleH1dYCwgc2V0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjZXNzU2V0aWZ5KHNldFswXSwgc2V0WzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KHNldCAhPSBudWxsICYmIHR5cGVvZiAoc2V0KSA9PT0gXCJvYmplY3RcIiwgXCJpbnZhbGlkIGFkZHJlc3Mtc2xvdCBzZXRcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gYWNjZXNzU2V0aWZ5KHNldC5hZGRyZXNzLCBzZXQuc3RvcmFnZUtleXMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXNzZXJ0QXJndW1lbnQodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgKHZhbHVlKSA9PT0gXCJvYmplY3RcIiwgXCJpbnZhbGlkIGFjY2VzcyBsaXN0XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5tYXAoKGFkZHIpID0+IHtcbiAgICAgICAgY29uc3Qgc3RvcmFnZUtleXMgPSB2YWx1ZVthZGRyXS5yZWR1Y2UoKGFjY3VtLCBzdG9yYWdlS2V5KSA9PiB7XG4gICAgICAgICAgICBhY2N1bVtzdG9yYWdlS2V5XSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgcmV0dXJuIGFjY2Vzc1NldGlmeShhZGRyLCBPYmplY3Qua2V5cyhzdG9yYWdlS2V5cykuc29ydCgpKTtcbiAgICB9KTtcbiAgICByZXN1bHQuc29ydCgoYSwgYikgPT4gKGEuYWRkcmVzcy5sb2NhbGVDb21wYXJlKGIuYWRkcmVzcykpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjZXNzbGlzdC5qcy5tYXAiXSwibmFtZXMiOlsiZ2V0QWRkcmVzcyIsImFzc2VydEFyZ3VtZW50IiwiaXNIZXhTdHJpbmciLCJhY2Nlc3NTZXRpZnkiLCJhZGRyIiwic3RvcmFnZUtleXMiLCJhZGRyZXNzIiwibWFwIiwic3RvcmFnZUtleSIsImluZGV4IiwidG9Mb3dlckNhc2UiLCJhY2Nlc3NMaXN0aWZ5IiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJzZXQiLCJsZW5ndGgiLCJyZXN1bHQiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwiYWNjdW0iLCJzb3J0IiwiYSIsImIiLCJsb2NhbGVDb21wYXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/accesslist.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/address.js":
/*!*************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/transaction/address.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeAddress: function() { return /* binding */ computeAddress; },\n/* harmony export */   recoverAddress: function() { return /* binding */ recoverAddress; }\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signing-key.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n\n\n/**\n *  Returns the address for the %%key%%.\n *\n *  The key may be any standard form of public key or a private key.\n */ function computeAddress(key) {\n    let pubkey;\n    if (typeof key === \"string\") {\n        pubkey = _crypto_index_js__WEBPACK_IMPORTED_MODULE_0__.SigningKey.computePublicKey(key, false);\n    } else {\n        pubkey = key.publicKey;\n    }\n    return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)(\"0x\" + pubkey.substring(4)).substring(26));\n}\n/**\n *  Returns the recovered address for the private key that was\n *  used to sign %%digest%% that resulted in %%signature%%.\n */ function recoverAddress(digest, signature) {\n    return computeAddress(_crypto_index_js__WEBPACK_IMPORTED_MODULE_0__.SigningKey.recoverPublicKey(digest, signature));\n} //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdHJhbnNhY3Rpb24vYWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFpRDtBQUNVO0FBQzNEOzs7O0NBSUMsR0FDTSxTQUFTRyxlQUFlQyxHQUFHO0lBQzlCLElBQUlDO0lBQ0osSUFBSSxPQUFRRCxRQUFTLFVBQVU7UUFDM0JDLFNBQVNILHdEQUFVQSxDQUFDSSxnQkFBZ0IsQ0FBQ0YsS0FBSztJQUM5QyxPQUNLO1FBQ0RDLFNBQVNELElBQUlHLFNBQVM7SUFDMUI7SUFDQSxPQUFPUCw2REFBVUEsQ0FBQ0MsMkRBQVNBLENBQUMsT0FBT0ksT0FBT0csU0FBUyxDQUFDLElBQUlBLFNBQVMsQ0FBQztBQUN0RTtBQUNBOzs7Q0FHQyxHQUNNLFNBQVNDLGVBQWVDLE1BQU0sRUFBRUMsU0FBUztJQUM1QyxPQUFPUixlQUFlRCx3REFBVUEsQ0FBQ1UsZ0JBQWdCLENBQUNGLFFBQVFDO0FBQzlELEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdHJhbnNhY3Rpb24vYWRkcmVzcy5qcz9lYTk2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiLi4vYWRkcmVzcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsga2VjY2FrMjU2LCBTaWduaW5nS2V5IH0gZnJvbSBcIi4uL2NyeXB0by9pbmRleC5qc1wiO1xuLyoqXG4gKiAgUmV0dXJucyB0aGUgYWRkcmVzcyBmb3IgdGhlICUla2V5JSUuXG4gKlxuICogIFRoZSBrZXkgbWF5IGJlIGFueSBzdGFuZGFyZCBmb3JtIG9mIHB1YmxpYyBrZXkgb3IgYSBwcml2YXRlIGtleS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVBZGRyZXNzKGtleSkge1xuICAgIGxldCBwdWJrZXk7XG4gICAgaWYgKHR5cGVvZiAoa2V5KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBwdWJrZXkgPSBTaWduaW5nS2V5LmNvbXB1dGVQdWJsaWNLZXkoa2V5LCBmYWxzZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwdWJrZXkgPSBrZXkucHVibGljS2V5O1xuICAgIH1cbiAgICByZXR1cm4gZ2V0QWRkcmVzcyhrZWNjYWsyNTYoXCIweFwiICsgcHVia2V5LnN1YnN0cmluZyg0KSkuc3Vic3RyaW5nKDI2KSk7XG59XG4vKipcbiAqICBSZXR1cm5zIHRoZSByZWNvdmVyZWQgYWRkcmVzcyBmb3IgdGhlIHByaXZhdGUga2V5IHRoYXQgd2FzXG4gKiAgdXNlZCB0byBzaWduICUlZGlnZXN0JSUgdGhhdCByZXN1bHRlZCBpbiAlJXNpZ25hdHVyZSUlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVjb3ZlckFkZHJlc3MoZGlnZXN0LCBzaWduYXR1cmUpIHtcbiAgICByZXR1cm4gY29tcHV0ZUFkZHJlc3MoU2lnbmluZ0tleS5yZWNvdmVyUHVibGljS2V5KGRpZ2VzdCwgc2lnbmF0dXJlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRBZGRyZXNzIiwia2VjY2FrMjU2IiwiU2lnbmluZ0tleSIsImNvbXB1dGVBZGRyZXNzIiwia2V5IiwicHVia2V5IiwiY29tcHV0ZVB1YmxpY0tleSIsInB1YmxpY0tleSIsInN1YnN0cmluZyIsInJlY292ZXJBZGRyZXNzIiwiZGlnZXN0Iiwic2lnbmF0dXJlIiwicmVjb3ZlclB1YmxpY0tleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/address.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/transaction.js":
/*!*****************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/transaction/transaction.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transaction: function() { return /* binding */ Transaction; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _constants_addresses_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../constants/addresses.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/constants/addresses.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signature.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signing-key.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/rlp-decode.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/rlp-encode.js\");\n/* harmony import */ var _accesslist_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./accesslist.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/accesslist.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./address.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/address.js\");\n\n\n\n\n\n\n\n\n\nconst BN_0 = BigInt(0);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction handleAddress(value) {\n    if (value === \"0x\") {\n        return null;\n    }\n    return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(value);\n}\nfunction handleAccessList(value, param) {\n    try {\n        return (0,_accesslist_js__WEBPACK_IMPORTED_MODULE_1__.accessListify)(value);\n    } catch (error) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(false, error.message, param, value);\n    }\n}\nfunction handleNumber(_value, param) {\n    if (_value === \"0x\") {\n        return 0;\n    }\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber)(_value, param);\n}\nfunction handleUint(_value, param) {\n    if (_value === \"0x\") {\n        return BN_0;\n    }\n    const value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt)(_value, param);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\n    return value;\n}\nfunction formatNumber(_value, name) {\n    const value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt)(_value, \"value\");\n    const result = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.toBeArray)(value);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(result.length <= 32, \"value too large\", \"tx.\".concat(name), value);\n    return result;\n}\nfunction formatAccessList(value) {\n    return (0,_accesslist_js__WEBPACK_IMPORTED_MODULE_1__.accessListify)(value).map((set)=>[\n            set.address,\n            set.storageKeys\n        ]);\n}\nfunction formatHashes(value, param) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(Array.isArray(value), \"invalid \".concat(param), \"value\", value);\n    for(let i = 0; i < value.length; i++){\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.isHexString)(value[i], 32), \"invalid ${ param } hash\", \"value[\".concat(i, \"]\"), value[i]);\n    }\n    return value;\n}\nfunction _parseLegacy(data) {\n    const fields = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.decodeRlp)(data);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), \"invalid field count for legacy transaction\", \"data\", data);\n    const tx = {\n        type: 0,\n        nonce: handleNumber(fields[0], \"nonce\"),\n        gasPrice: handleUint(fields[1], \"gasPrice\"),\n        gasLimit: handleUint(fields[2], \"gasLimit\"),\n        to: handleAddress(fields[3]),\n        value: handleUint(fields[4], \"value\"),\n        data: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)(fields[5]),\n        chainId: BN_0\n    };\n    // Legacy unsigned transaction\n    if (fields.length === 6) {\n        return tx;\n    }\n    const v = handleUint(fields[6], \"v\");\n    const r = handleUint(fields[7], \"r\");\n    const s = handleUint(fields[8], \"s\");\n    if (r === BN_0 && s === BN_0) {\n        // EIP-155 unsigned transaction\n        tx.chainId = v;\n    } else {\n        // Compute the EIP-155 chain ID (or 0 for legacy)\n        let chainId = (v - BN_35) / BN_2;\n        if (chainId < BN_0) {\n            chainId = BN_0;\n        }\n        tx.chainId = chainId;\n        // Signed Legacy Transaction\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(chainId !== BN_0 || v === BN_27 || v === BN_28, \"non-canonical legacy v\", \"v\", fields[6]);\n        tx.signature = _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__.Signature.from({\n            r: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.zeroPadValue)(fields[7], 32),\n            s: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.zeroPadValue)(fields[8], 32),\n            v\n        });\n        tx.hash = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__.keccak256)(data);\n    }\n    return tx;\n}\nfunction _serializeLegacy(tx, sig) {\n    const fields = [\n        formatNumber(tx.nonce, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit, \"gasLimit\"),\n        tx.to || \"0x\",\n        formatNumber(tx.value, \"value\"),\n        tx.data\n    ];\n    let chainId = BN_0;\n    if (tx.chainId != BN_0) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt)(tx.chainId, \"tx.chainId\");\n        // We have a chainId in the tx and an EIP-155 v in the signature,\n        // make sure they agree with each other\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(!sig || sig.networkV == null || sig.legacyChainId === chainId, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    } else if (tx.signature) {\n        // No explicit chainId, but EIP-155 have a derived implicit chainId\n        const legacy = tx.signature.legacyChainId;\n        if (legacy != null) {\n            chainId = legacy;\n        }\n    }\n    // Requesting an unsigned transaction\n    if (!sig) {\n        // We have an EIP-155 transaction (chainId was specified and non-zero)\n        if (chainId !== BN_0) {\n            fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.toBeArray)(chainId));\n            fields.push(\"0x\");\n            fields.push(\"0x\");\n        }\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.encodeRlp)(fields);\n    }\n    // @TODO: We should probably check that tx.signature, chainId, and sig\n    //        match but that logic could break existing code, so schedule\n    //        this for the next major bump.\n    // Compute the EIP-155 v\n    let v = BigInt(27 + sig.yParity);\n    if (chainId !== BN_0) {\n        v = _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__.Signature.getChainIdV(chainId, sig.v);\n    } else if (BigInt(sig.v) !== v) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    }\n    // Add the signature\n    fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.toBeArray)(v));\n    fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.toBeArray)(sig.r));\n    fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.toBeArray)(sig.s));\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.encodeRlp)(fields);\n}\nfunction _parseEipSignature(tx, fields) {\n    let yParity;\n    try {\n        yParity = handleNumber(fields[0], \"yParity\");\n        if (yParity !== 0 && yParity !== 1) {\n            throw new Error(\"bad yParity\");\n        }\n    } catch (error) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(false, \"invalid yParity\", \"yParity\", fields[0]);\n    }\n    const r = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.zeroPadValue)(fields[1], 32);\n    const s = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.zeroPadValue)(fields[2], 32);\n    const signature = _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__.Signature.from({\n        r,\n        s,\n        yParity\n    });\n    tx.signature = signature;\n}\nfunction _parseEip1559(data) {\n    const fields = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.decodeRlp)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.getBytes)(data).slice(1));\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), \"invalid field count for transaction type: 2\", \"data\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)(data));\n    const tx = {\n        type: 2,\n        chainId: handleUint(fields[0], \"chainId\"),\n        nonce: handleNumber(fields[1], \"nonce\"),\n        maxPriorityFeePerGas: handleUint(fields[2], \"maxPriorityFeePerGas\"),\n        maxFeePerGas: handleUint(fields[3], \"maxFeePerGas\"),\n        gasPrice: null,\n        gasLimit: handleUint(fields[4], \"gasLimit\"),\n        to: handleAddress(fields[5]),\n        value: handleUint(fields[6], \"value\"),\n        data: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)(fields[7]),\n        accessList: handleAccessList(fields[8], \"accessList\")\n    };\n    // Unsigned EIP-1559 Transaction\n    if (fields.length === 9) {\n        return tx;\n    }\n    tx.hash = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__.keccak256)(data);\n    _parseEipSignature(tx, fields.slice(9));\n    return tx;\n}\nfunction _serializeEip1559(tx, sig) {\n    const fields = [\n        formatNumber(tx.chainId, \"chainId\"),\n        formatNumber(tx.nonce, \"nonce\"),\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(tx.gasLimit, \"gasLimit\"),\n        tx.to || \"0x\",\n        formatNumber(tx.value, \"value\"),\n        tx.data,\n        formatAccessList(tx.accessList || [])\n    ];\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\n        fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.toBeArray)(sig.r));\n        fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.toBeArray)(sig.s));\n    }\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.concat)([\n        \"0x02\",\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.encodeRlp)(fields)\n    ]);\n}\nfunction _parseEip2930(data) {\n    const fields = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.decodeRlp)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.getBytes)(data).slice(1));\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), \"invalid field count for transaction type: 1\", \"data\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)(data));\n    const tx = {\n        type: 1,\n        chainId: handleUint(fields[0], \"chainId\"),\n        nonce: handleNumber(fields[1], \"nonce\"),\n        gasPrice: handleUint(fields[2], \"gasPrice\"),\n        gasLimit: handleUint(fields[3], \"gasLimit\"),\n        to: handleAddress(fields[4]),\n        value: handleUint(fields[5], \"value\"),\n        data: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)(fields[6]),\n        accessList: handleAccessList(fields[7], \"accessList\")\n    };\n    // Unsigned EIP-2930 Transaction\n    if (fields.length === 8) {\n        return tx;\n    }\n    tx.hash = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__.keccak256)(data);\n    _parseEipSignature(tx, fields.slice(8));\n    return tx;\n}\nfunction _serializeEip2930(tx, sig) {\n    const fields = [\n        formatNumber(tx.chainId, \"chainId\"),\n        formatNumber(tx.nonce, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit, \"gasLimit\"),\n        tx.to || \"0x\",\n        formatNumber(tx.value, \"value\"),\n        tx.data,\n        formatAccessList(tx.accessList || [])\n    ];\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\n        fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.toBeArray)(sig.r));\n        fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.toBeArray)(sig.s));\n    }\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.concat)([\n        \"0x01\",\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.encodeRlp)(fields)\n    ]);\n}\nfunction _parseEip4844(data) {\n    const fields = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.decodeRlp)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.getBytes)(data).slice(1));\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), \"invalid field count for transaction type: 3\", \"data\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)(data));\n    const tx = {\n        type: 3,\n        chainId: handleUint(fields[0], \"chainId\"),\n        nonce: handleNumber(fields[1], \"nonce\"),\n        maxPriorityFeePerGas: handleUint(fields[2], \"maxPriorityFeePerGas\"),\n        maxFeePerGas: handleUint(fields[3], \"maxFeePerGas\"),\n        gasPrice: null,\n        gasLimit: handleUint(fields[4], \"gasLimit\"),\n        to: handleAddress(fields[5]),\n        value: handleUint(fields[6], \"value\"),\n        data: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)(fields[7]),\n        accessList: handleAccessList(fields[8], \"accessList\"),\n        maxFeePerBlobGas: handleUint(fields[9], \"maxFeePerBlobGas\"),\n        blobVersionedHashes: fields[10]\n    };\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(tx.to != null, \"invalid address for transaction type: 3\", \"data\", data);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(Array.isArray(tx.blobVersionedHashes), \"invalid blobVersionedHashes: must be an array\", \"data\", data);\n    for(let i = 0; i < tx.blobVersionedHashes.length; i++){\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.isHexString)(tx.blobVersionedHashes[i], 32), \"invalid blobVersionedHash at index \".concat(i, \": must be length 32\"), \"data\", data);\n    }\n    // Unsigned EIP-4844 Transaction\n    if (fields.length === 11) {\n        return tx;\n    }\n    tx.hash = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__.keccak256)(data);\n    _parseEipSignature(tx, fields.slice(11));\n    return tx;\n}\nfunction _serializeEip4844(tx, sig) {\n    const fields = [\n        formatNumber(tx.chainId, \"chainId\"),\n        formatNumber(tx.nonce, \"nonce\"),\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(tx.gasLimit, \"gasLimit\"),\n        tx.to || _constants_addresses_js__WEBPACK_IMPORTED_MODULE_9__.ZeroAddress,\n        formatNumber(tx.value, \"value\"),\n        tx.data,\n        formatAccessList(tx.accessList || []),\n        formatNumber(tx.maxFeePerBlobGas || 0, \"maxFeePerBlobGas\"),\n        formatHashes(tx.blobVersionedHashes || [], \"blobVersionedHashes\")\n    ];\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\n        fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.toBeArray)(sig.r));\n        fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.toBeArray)(sig.s));\n    }\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.concat)([\n        \"0x03\",\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.encodeRlp)(fields)\n    ]);\n}\nvar _type = /*#__PURE__*/ new WeakMap(), _to = /*#__PURE__*/ new WeakMap(), _data = /*#__PURE__*/ new WeakMap(), _nonce = /*#__PURE__*/ new WeakMap(), _gasLimit = /*#__PURE__*/ new WeakMap(), _gasPrice = /*#__PURE__*/ new WeakMap(), _maxPriorityFeePerGas = /*#__PURE__*/ new WeakMap(), _maxFeePerGas = /*#__PURE__*/ new WeakMap(), _value = /*#__PURE__*/ new WeakMap(), _chainId = /*#__PURE__*/ new WeakMap(), _sig = /*#__PURE__*/ new WeakMap(), _accessList = /*#__PURE__*/ new WeakMap(), _maxFeePerBlobGas = /*#__PURE__*/ new WeakMap(), _blobVersionedHashes = /*#__PURE__*/ new WeakMap();\n/**\n *  A **Transaction** describes an operation to be executed on\n *  Ethereum by an Externally Owned Account (EOA). It includes\n *  who (the [[to]] address), what (the [[data]]) and how much (the\n *  [[value]] in ether) the operation should entail.\n *\n *  @example:\n *    tx = new Transaction()\n *    //_result:\n *\n *    tx.data = \"0x1234\";\n *    //_result:\n */ class Transaction {\n    /**\n     *  The transaction type.\n     *\n     *  If null, the type will be automatically inferred based on\n     *  explicit properties.\n     */ get type() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _type);\n    }\n    set type(value) {\n        switch(value){\n            case null:\n                (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _type, null);\n                break;\n            case 0:\n            case \"legacy\":\n                (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _type, 0);\n                break;\n            case 1:\n            case \"berlin\":\n            case \"eip-2930\":\n                (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _type, 1);\n                break;\n            case 2:\n            case \"london\":\n            case \"eip-1559\":\n                (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _type, 2);\n                break;\n            case 3:\n            case \"cancun\":\n            case \"eip-4844\":\n                (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _type, 3);\n                break;\n            default:\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(false, \"unsupported transaction type\", \"type\", value);\n        }\n    }\n    /**\n     *  The name of the transaction type.\n     */ get typeName() {\n        switch(this.type){\n            case 0:\n                return \"legacy\";\n            case 1:\n                return \"eip-2930\";\n            case 2:\n                return \"eip-1559\";\n            case 3:\n                return \"eip-4844\";\n        }\n        return null;\n    }\n    /**\n     *  The ``to`` address for the transaction or ``null`` if the\n     *  transaction is an ``init`` transaction.\n     */ get to() {\n        const value = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _to);\n        if (value == null && this.type === 3) {\n            return _constants_addresses_js__WEBPACK_IMPORTED_MODULE_9__.ZeroAddress;\n        }\n        return value;\n    }\n    set to(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _to, value == null ? null : (0,_address_index_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(value));\n    }\n    /**\n     *  The transaction nonce.\n     */ get nonce() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _nonce);\n    }\n    set nonce(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _nonce, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getNumber)(value, \"value\"));\n    }\n    /**\n     *  The gas limit.\n     */ get gasLimit() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _gasLimit);\n    }\n    set gasLimit(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _gasLimit, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt)(value));\n    }\n    /**\n     *  The gas price.\n     *\n     *  On legacy networks this defines the fee that will be paid. On\n     *  EIP-1559 networks, this should be ``null``.\n     */ get gasPrice() {\n        const value = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _gasPrice);\n        if (value == null && (this.type === 0 || this.type === 1)) {\n            return BN_0;\n        }\n        return value;\n    }\n    set gasPrice(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _gasPrice, value == null ? null : (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt)(value, \"gasPrice\"));\n    }\n    /**\n     *  The maximum priority fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */ get maxPriorityFeePerGas() {\n        const value = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _maxPriorityFeePerGas);\n        if (value == null) {\n            if (this.type === 2 || this.type === 3) {\n                return BN_0;\n            }\n            return null;\n        }\n        return value;\n    }\n    set maxPriorityFeePerGas(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _maxPriorityFeePerGas, value == null ? null : (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt)(value, \"maxPriorityFeePerGas\"));\n    }\n    /**\n     *  The maximum total fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */ get maxFeePerGas() {\n        const value = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _maxFeePerGas);\n        if (value == null) {\n            if (this.type === 2 || this.type === 3) {\n                return BN_0;\n            }\n            return null;\n        }\n        return value;\n    }\n    set maxFeePerGas(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _maxFeePerGas, value == null ? null : (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt)(value, \"maxFeePerGas\"));\n    }\n    /**\n     *  The transaction data. For ``init`` transactions this is the\n     *  deployment code.\n     */ get data() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _data);\n    }\n    set data(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _data, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)(value));\n    }\n    /**\n     *  The amount of ether (in wei) to send in this transactions.\n     */ get value() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _value);\n    }\n    set value(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _value, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt)(value, \"value\"));\n    }\n    /**\n     *  The chain ID this transaction is valid on.\n     */ get chainId() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _chainId);\n    }\n    set chainId(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _chainId, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt)(value));\n    }\n    /**\n     *  If signed, the signature for this transaction.\n     */ get signature() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _sig) || null;\n    }\n    set signature(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _sig, value == null ? null : _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__.Signature.from(value));\n    }\n    /**\n     *  The access list.\n     *\n     *  An access list permits discounted (but pre-paid) access to\n     *  bytecode and state variable access within contract execution.\n     */ get accessList() {\n        const value = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _accessList) || null;\n        if (value == null) {\n            if (this.type === 1 || this.type === 2 || this.type === 3) {\n                // @TODO: in v7, this should assign the value or become\n                // a live object itself, otherwise mutation is inconsistent\n                return [];\n            }\n            return null;\n        }\n        return value;\n    }\n    set accessList(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _accessList, value == null ? null : (0,_accesslist_js__WEBPACK_IMPORTED_MODULE_1__.accessListify)(value));\n    }\n    /**\n     *  The max fee per blob gas for Cancun transactions.\n     */ get maxFeePerBlobGas() {\n        const value = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _maxFeePerBlobGas);\n        if (value == null && this.type === 3) {\n            return BN_0;\n        }\n        return value;\n    }\n    set maxFeePerBlobGas(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _maxFeePerBlobGas, value == null ? null : (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBigInt)(value, \"maxFeePerBlobGas\"));\n    }\n    /**\n     *  The BLOB versioned hashes for Cancun transactions.\n     */ get blobVersionedHashes() {\n        // @TODO: Mutation is inconsistent; if unset, the returned value\n        // cannot mutate the object, if set it can\n        let value = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _blobVersionedHashes);\n        if (value == null && this.type === 3) {\n            return [];\n        }\n        return value;\n    }\n    set blobVersionedHashes(value) {\n        if (value != null) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(Array.isArray(value), \"blobVersionedHashes must be an Array\", \"value\", value);\n            value = value.slice();\n            for(let i = 0; i < value.length; i++){\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.isHexString)(value[i], 32), \"invalid blobVersionedHash\", \"value[\".concat(i, \"]\"), value[i]);\n            }\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _blobVersionedHashes, value);\n    }\n    /**\n     *  The transaction hash, if signed. Otherwise, ``null``.\n     */ get hash() {\n        if (this.signature == null) {\n            return null;\n        }\n        return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__.keccak256)(this.serialized);\n    }\n    /**\n     *  The pre-image hash of this transaction.\n     *\n     *  This is the digest that a [[Signer]] must sign to authorize\n     *  this transaction.\n     */ get unsignedHash() {\n        return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__.keccak256)(this.unsignedSerialized);\n    }\n    /**\n     *  The sending address, if signed. Otherwise, ``null``.\n     */ get from() {\n        if (this.signature == null) {\n            return null;\n        }\n        return (0,_address_js__WEBPACK_IMPORTED_MODULE_12__.recoverAddress)(this.unsignedHash, this.signature);\n    }\n    /**\n     *  The public key of the sender, if signed. Otherwise, ``null``.\n     */ get fromPublicKey() {\n        if (this.signature == null) {\n            return null;\n        }\n        return _crypto_index_js__WEBPACK_IMPORTED_MODULE_13__.SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\n    }\n    /**\n     *  Returns true if signed.\n     *\n     *  This provides a Type Guard that properties requiring a signed\n     *  transaction are non-null.\n     */ isSigned() {\n        return this.signature != null;\n    }\n    /**\n     *  The serialized transaction.\n     *\n     *  This throws if the transaction is unsigned. For the pre-image,\n     *  use [[unsignedSerialized]].\n     */ get serialized() {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", {\n            operation: \".serialized\"\n        });\n        switch(this.inferType()){\n            case 0:\n                return _serializeLegacy(this, this.signature);\n            case 1:\n                return _serializeEip2930(this, this.signature);\n            case 2:\n                return _serializeEip1559(this, this.signature);\n            case 3:\n                return _serializeEip4844(this, this.signature);\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n            operation: \".serialized\"\n        });\n    }\n    /**\n     *  The transaction pre-image.\n     *\n     *  The hash of this is the digest which needs to be signed to\n     *  authorize this transaction.\n     */ get unsignedSerialized() {\n        switch(this.inferType()){\n            case 0:\n                return _serializeLegacy(this);\n            case 1:\n                return _serializeEip2930(this);\n            case 2:\n                return _serializeEip1559(this);\n            case 3:\n                return _serializeEip4844(this);\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n            operation: \".unsignedSerialized\"\n        });\n    }\n    /**\n     *  Return the most \"likely\" type; currently the highest\n     *  supported transaction type.\n     */ inferType() {\n        const types = this.inferTypes();\n        // Prefer London (EIP-1559) over Cancun (BLOb)\n        if (types.indexOf(2) >= 0) {\n            return 2;\n        }\n        // Return the highest inferred type\n        return types.pop();\n    }\n    /**\n     *  Validates the explicit properties and returns a list of compatible\n     *  transaction types.\n     */ inferTypes() {\n        // Checks that there are no conflicting properties set\n        const hasGasPrice = this.gasPrice != null;\n        const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;\n        const hasAccessList = this.accessList != null;\n        const hasBlob = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _maxFeePerBlobGas) != null || (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_10__._)(this, _blobVersionedHashes);\n        //if (hasGasPrice && hasFee) {\n        //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\n        //}\n        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", {\n                value: this\n            });\n        }\n        //if (this.type === 2 && hasGasPrice) {\n        //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\n        //}\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(!hasFee || this.type !== 0 && this.type !== 1, \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", {\n            value: this\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", {\n            value: this\n        });\n        const types = [];\n        // Explicit type\n        if (this.type != null) {\n            types.push(this.type);\n        } else {\n            if (hasFee) {\n                types.push(2);\n            } else if (hasGasPrice) {\n                types.push(1);\n                if (!hasAccessList) {\n                    types.push(0);\n                }\n            } else if (hasAccessList) {\n                types.push(1);\n                types.push(2);\n            } else if (hasBlob && this.to) {\n                types.push(3);\n            } else {\n                types.push(0);\n                types.push(1);\n                types.push(2);\n                types.push(3);\n            }\n        }\n        types.sort();\n        return types;\n    }\n    /**\n     *  Returns true if this transaction is a legacy transaction (i.e.\n     *  ``type === 0``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */ isLegacy() {\n        return this.type === 0;\n    }\n    /**\n     *  Returns true if this transaction is berlin hardform transaction (i.e.\n     *  ``type === 1``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */ isBerlin() {\n        return this.type === 1;\n    }\n    /**\n     *  Returns true if this transaction is london hardform transaction (i.e.\n     *  ``type === 2``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */ isLondon() {\n        return this.type === 2;\n    }\n    /**\n     *  Returns true if this transaction is an [[link-eip-4844]] BLOB\n     *  transaction.\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */ isCancun() {\n        return this.type === 3;\n    }\n    /**\n     *  Create a copy of this transaciton.\n     */ clone() {\n        return Transaction.from(this);\n    }\n    /**\n     *  Return a JSON-friendly object.\n     */ toJSON() {\n        const s = (v)=>{\n            if (v == null) {\n                return null;\n            }\n            return v.toString();\n        };\n        return {\n            type: this.type,\n            to: this.to,\n            //            from: this.from,\n            data: this.data,\n            nonce: this.nonce,\n            gasLimit: s(this.gasLimit),\n            gasPrice: s(this.gasPrice),\n            maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\n            maxFeePerGas: s(this.maxFeePerGas),\n            value: s(this.value),\n            chainId: s(this.chainId),\n            sig: this.signature ? this.signature.toJSON() : null,\n            accessList: this.accessList\n        };\n    }\n    /**\n     *  Create a **Transaction** from a serialized transaction or a\n     *  Transaction-like object.\n     */ static from(tx) {\n        if (tx == null) {\n            return new Transaction();\n        }\n        if (typeof tx === \"string\") {\n            const payload = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.getBytes)(tx);\n            if (payload[0] >= 0x7f) {\n                return Transaction.from(_parseLegacy(payload));\n            }\n            switch(payload[0]){\n                case 1:\n                    return Transaction.from(_parseEip2930(payload));\n                case 2:\n                    return Transaction.from(_parseEip1559(payload));\n                case 3:\n                    return Transaction.from(_parseEip4844(payload));\n            }\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"from\"\n            });\n        }\n        const result = new Transaction();\n        if (tx.type != null) {\n            result.type = tx.type;\n        }\n        if (tx.to != null) {\n            result.to = tx.to;\n        }\n        if (tx.nonce != null) {\n            result.nonce = tx.nonce;\n        }\n        if (tx.gasLimit != null) {\n            result.gasLimit = tx.gasLimit;\n        }\n        if (tx.gasPrice != null) {\n            result.gasPrice = tx.gasPrice;\n        }\n        if (tx.maxPriorityFeePerGas != null) {\n            result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\n        }\n        if (tx.maxFeePerGas != null) {\n            result.maxFeePerGas = tx.maxFeePerGas;\n        }\n        if (tx.maxFeePerBlobGas != null) {\n            result.maxFeePerBlobGas = tx.maxFeePerBlobGas;\n        }\n        if (tx.data != null) {\n            result.data = tx.data;\n        }\n        if (tx.value != null) {\n            result.value = tx.value;\n        }\n        if (tx.chainId != null) {\n            result.chainId = tx.chainId;\n        }\n        if (tx.signature != null) {\n            result.signature = _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__.Signature.from(tx.signature);\n        }\n        if (tx.accessList != null) {\n            result.accessList = tx.accessList;\n        }\n        if (tx.blobVersionedHashes != null) {\n            result.blobVersionedHashes = tx.blobVersionedHashes;\n        }\n        if (tx.hash != null) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(result.isSigned(), \"unsigned transaction cannot define hash\", \"tx\", tx);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\n        }\n        if (tx.from != null) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(result.isSigned(), \"unsigned transaction cannot define from\", \"tx\", tx);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\n        }\n        return result;\n    }\n    /**\n     *  Creates a new Transaction with default values.\n     */ constructor(){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _type, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _to, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _data, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _nonce, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _gasLimit, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _gasPrice, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _maxPriorityFeePerGas, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _maxFeePerGas, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _value, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _chainId, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _sig, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _accessList, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _maxFeePerBlobGas, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_14__._)(this, _blobVersionedHashes, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _type, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _to, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _nonce, 0);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _gasLimit, BN_0);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _gasPrice, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _maxPriorityFeePerGas, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _maxFeePerGas, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _data, \"0x\");\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _value, BN_0);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _chainId, BN_0);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _sig, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _accessList, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _maxFeePerBlobGas, null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_11__._)(this, _blobVersionedHashes, null);\n    }\n} //# sourceMappingURL=transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/transaction.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/base58.js":
/*!******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/base58.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeBase58: function() { return /* binding */ decodeBase58; },\n/* harmony export */   encodeBase58: function() { return /* binding */ encodeBase58; }\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _maths_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./maths.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/**\n *  The [Base58 Encoding](link-base58) scheme allows a **numeric** value\n *  to be encoded as a compact string using a radix of 58 using only\n *  alpha-numeric characters. Confusingly similar characters are omitted\n *  (i.e. ``\"l0O\"``).\n *\n *  Note that Base58 encodes a **numeric** value, not arbitrary bytes,\n *  since any zero-bytes on the left would get removed. To mitigate this\n *  issue most schemes that use Base58 choose specific high-order values\n *  to ensure non-zero prefixes.\n *\n *  @_subsection: api/utils:Base58 Encoding [about-base58]\n */ \n\n\nconst Alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nlet Lookup = null;\nfunction getAlpha(letter) {\n    if (Lookup == null) {\n        Lookup = {};\n        for(let i = 0; i < Alphabet.length; i++){\n            Lookup[Alphabet[i]] = BigInt(i);\n        }\n    }\n    const result = Lookup[letter];\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(result != null, \"invalid base58 value\", \"letter\", letter);\n    return result;\n}\nconst BN_0 = BigInt(0);\nconst BN_58 = BigInt(58);\n/**\n *  Encode %%value%% as a Base58-encoded string.\n */ function encodeBase58(_value) {\n    const bytes = (0,_data_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_value);\n    let value = (0,_maths_js__WEBPACK_IMPORTED_MODULE_2__.toBigInt)(bytes);\n    let result = \"\";\n    while(value){\n        result = Alphabet[Number(value % BN_58)] + result;\n        value /= BN_58;\n    }\n    // Account for leading padding zeros\n    for(let i = 0; i < bytes.length; i++){\n        if (bytes[i]) {\n            break;\n        }\n        result = Alphabet[0] + result;\n    }\n    return result;\n}\n/**\n *  Decode the Base58-encoded %%value%%.\n */ function decodeBase58(value) {\n    let result = BN_0;\n    for(let i = 0; i < value.length; i++){\n        result *= BN_58;\n        result += getAlpha(value[i]);\n    }\n    return result;\n} //# sourceMappingURL=base58.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvYmFzZTU4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7OztDQVlDLEdBQ29DO0FBQ1E7QUFDUDtBQUN0QyxNQUFNRyxXQUFXO0FBQ2pCLElBQUlDLFNBQVM7QUFDYixTQUFTQyxTQUFTQyxNQUFNO0lBQ3BCLElBQUlGLFVBQVUsTUFBTTtRQUNoQkEsU0FBUyxDQUFDO1FBQ1YsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlKLFNBQVNLLE1BQU0sRUFBRUQsSUFBSztZQUN0Q0gsTUFBTSxDQUFDRCxRQUFRLENBQUNJLEVBQUUsQ0FBQyxHQUFHRSxPQUFPRjtRQUNqQztJQUNKO0lBQ0EsTUFBTUcsU0FBU04sTUFBTSxDQUFDRSxPQUFPO0lBQzdCTCwwREFBY0EsQ0FBQ1MsVUFBVSxNQUFPLHdCQUF1QixVQUFVSjtJQUNqRSxPQUFPSTtBQUNYO0FBQ0EsTUFBTUMsT0FBT0YsT0FBTztBQUNwQixNQUFNRyxRQUFRSCxPQUFPO0FBQ3JCOztDQUVDLEdBQ00sU0FBU0ksYUFBYUMsTUFBTTtJQUMvQixNQUFNQyxRQUFRZixrREFBUUEsQ0FBQ2M7SUFDdkIsSUFBSUUsUUFBUWQsbURBQVFBLENBQUNhO0lBQ3JCLElBQUlMLFNBQVM7SUFDYixNQUFPTSxNQUFPO1FBQ1ZOLFNBQVNQLFFBQVEsQ0FBQ2MsT0FBT0QsUUFBUUosT0FBTyxHQUFHRjtRQUMzQ00sU0FBU0o7SUFDYjtJQUNBLG9DQUFvQztJQUNwQyxJQUFLLElBQUlMLElBQUksR0FBR0EsSUFBSVEsTUFBTVAsTUFBTSxFQUFFRCxJQUFLO1FBQ25DLElBQUlRLEtBQUssQ0FBQ1IsRUFBRSxFQUFFO1lBQ1Y7UUFDSjtRQUNBRyxTQUFTUCxRQUFRLENBQUMsRUFBRSxHQUFHTztJQUMzQjtJQUNBLE9BQU9BO0FBQ1g7QUFDQTs7Q0FFQyxHQUNNLFNBQVNRLGFBQWFGLEtBQUs7SUFDOUIsSUFBSU4sU0FBU0M7SUFDYixJQUFLLElBQUlKLElBQUksR0FBR0EsSUFBSVMsTUFBTVIsTUFBTSxFQUFFRCxJQUFLO1FBQ25DRyxVQUFVRTtRQUNWRixVQUFVTCxTQUFTVyxLQUFLLENBQUNULEVBQUU7SUFDL0I7SUFDQSxPQUFPRztBQUNYLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvYmFzZTU4LmpzPzFiZmMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgVGhlIFtCYXNlNTggRW5jb2RpbmddKGxpbmstYmFzZTU4KSBzY2hlbWUgYWxsb3dzIGEgKipudW1lcmljKiogdmFsdWVcbiAqICB0byBiZSBlbmNvZGVkIGFzIGEgY29tcGFjdCBzdHJpbmcgdXNpbmcgYSByYWRpeCBvZiA1OCB1c2luZyBvbmx5XG4gKiAgYWxwaGEtbnVtZXJpYyBjaGFyYWN0ZXJzLiBDb25mdXNpbmdseSBzaW1pbGFyIGNoYXJhY3RlcnMgYXJlIG9taXR0ZWRcbiAqICAoaS5lLiBgYFwibDBPXCJgYCkuXG4gKlxuICogIE5vdGUgdGhhdCBCYXNlNTggZW5jb2RlcyBhICoqbnVtZXJpYyoqIHZhbHVlLCBub3QgYXJiaXRyYXJ5IGJ5dGVzLFxuICogIHNpbmNlIGFueSB6ZXJvLWJ5dGVzIG9uIHRoZSBsZWZ0IHdvdWxkIGdldCByZW1vdmVkLiBUbyBtaXRpZ2F0ZSB0aGlzXG4gKiAgaXNzdWUgbW9zdCBzY2hlbWVzIHRoYXQgdXNlIEJhc2U1OCBjaG9vc2Ugc3BlY2lmaWMgaGlnaC1vcmRlciB2YWx1ZXNcbiAqICB0byBlbnN1cmUgbm9uLXplcm8gcHJlZml4ZXMuXG4gKlxuICogIEBfc3Vic2VjdGlvbjogYXBpL3V0aWxzOkJhc2U1OCBFbmNvZGluZyBbYWJvdXQtYmFzZTU4XVxuICovXG5pbXBvcnQgeyBnZXRCeXRlcyB9IGZyb20gXCIuL2RhdGEuanNcIjtcbmltcG9ydCB7IGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgeyB0b0JpZ0ludCB9IGZyb20gXCIuL21hdGhzLmpzXCI7XG5jb25zdCBBbHBoYWJldCA9IFwiMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5elwiO1xubGV0IExvb2t1cCA9IG51bGw7XG5mdW5jdGlvbiBnZXRBbHBoYShsZXR0ZXIpIHtcbiAgICBpZiAoTG9va3VwID09IG51bGwpIHtcbiAgICAgICAgTG9va3VwID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQWxwaGFiZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIExvb2t1cFtBbHBoYWJldFtpXV0gPSBCaWdJbnQoaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gTG9va3VwW2xldHRlcl07XG4gICAgYXNzZXJ0QXJndW1lbnQocmVzdWx0ICE9IG51bGwsIGBpbnZhbGlkIGJhc2U1OCB2YWx1ZWAsIFwibGV0dGVyXCIsIGxldHRlcik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IEJOXzAgPSBCaWdJbnQoMCk7XG5jb25zdCBCTl81OCA9IEJpZ0ludCg1OCk7XG4vKipcbiAqICBFbmNvZGUgJSV2YWx1ZSUlIGFzIGEgQmFzZTU4LWVuY29kZWQgc3RyaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlQmFzZTU4KF92YWx1ZSkge1xuICAgIGNvbnN0IGJ5dGVzID0gZ2V0Qnl0ZXMoX3ZhbHVlKTtcbiAgICBsZXQgdmFsdWUgPSB0b0JpZ0ludChieXRlcyk7XG4gICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgd2hpbGUgKHZhbHVlKSB7XG4gICAgICAgIHJlc3VsdCA9IEFscGhhYmV0W051bWJlcih2YWx1ZSAlIEJOXzU4KV0gKyByZXN1bHQ7XG4gICAgICAgIHZhbHVlIC89IEJOXzU4O1xuICAgIH1cbiAgICAvLyBBY2NvdW50IGZvciBsZWFkaW5nIHBhZGRpbmcgemVyb3NcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChieXRlc1tpXSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gQWxwaGFiZXRbMF0gKyByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqICBEZWNvZGUgdGhlIEJhc2U1OC1lbmNvZGVkICUldmFsdWUlJS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUJhc2U1OCh2YWx1ZSkge1xuICAgIGxldCByZXN1bHQgPSBCTl8wO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ICo9IEJOXzU4O1xuICAgICAgICByZXN1bHQgKz0gZ2V0QWxwaGEodmFsdWVbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTU4LmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRCeXRlcyIsImFzc2VydEFyZ3VtZW50IiwidG9CaWdJbnQiLCJBbHBoYWJldCIsIkxvb2t1cCIsImdldEFscGhhIiwibGV0dGVyIiwiaSIsImxlbmd0aCIsIkJpZ0ludCIsInJlc3VsdCIsIkJOXzAiLCJCTl81OCIsImVuY29kZUJhc2U1OCIsIl92YWx1ZSIsImJ5dGVzIiwidmFsdWUiLCJOdW1iZXIiLCJkZWNvZGVCYXNlNTgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/base58.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/base64-browser.js":
/*!**************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/base64-browser.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeBase64: function() { return /* binding */ decodeBase64; },\n/* harmony export */   encodeBase64: function() { return /* binding */ encodeBase64; }\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n// utils/base64-browser\n\nfunction decodeBase64(textData) {\n    textData = atob(textData);\n    const data = new Uint8Array(textData.length);\n    for(let i = 0; i < textData.length; i++){\n        data[i] = textData.charCodeAt(i);\n    }\n    return (0,_data_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(data);\n}\nfunction encodeBase64(_data) {\n    const data = (0,_data_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(_data);\n    let textData = \"\";\n    for(let i = 0; i < data.length; i++){\n        textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n} //# sourceMappingURL=base64-browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvYmFzZTY0LWJyb3dzZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUJBQXVCO0FBQ2M7QUFDOUIsU0FBU0MsYUFBYUMsUUFBUTtJQUNqQ0EsV0FBV0MsS0FBS0Q7SUFDaEIsTUFBTUUsT0FBTyxJQUFJQyxXQUFXSCxTQUFTSSxNQUFNO0lBQzNDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxTQUFTSSxNQUFNLEVBQUVDLElBQUs7UUFDdENILElBQUksQ0FBQ0csRUFBRSxHQUFHTCxTQUFTTSxVQUFVLENBQUNEO0lBQ2xDO0lBQ0EsT0FBT1Asa0RBQVFBLENBQUNJO0FBQ3BCO0FBQ08sU0FBU0ssYUFBYUMsS0FBSztJQUM5QixNQUFNTixPQUFPSixrREFBUUEsQ0FBQ1U7SUFDdEIsSUFBSVIsV0FBVztJQUNmLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJSCxLQUFLRSxNQUFNLEVBQUVDLElBQUs7UUFDbENMLFlBQVlTLE9BQU9DLFlBQVksQ0FBQ1IsSUFBSSxDQUFDRyxFQUFFO0lBQzNDO0lBQ0EsT0FBT00sS0FBS1g7QUFDaEIsRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy9iYXNlNjQtYnJvd3Nlci5qcz9hZTI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHV0aWxzL2Jhc2U2NC1icm93c2VyXG5pbXBvcnQgeyBnZXRCeXRlcyB9IGZyb20gXCIuL2RhdGEuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVCYXNlNjQodGV4dERhdGEpIHtcbiAgICB0ZXh0RGF0YSA9IGF0b2IodGV4dERhdGEpO1xuICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheSh0ZXh0RGF0YS5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGF0YVtpXSA9IHRleHREYXRhLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIHJldHVybiBnZXRCeXRlcyhkYXRhKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVCYXNlNjQoX2RhdGEpIHtcbiAgICBjb25zdCBkYXRhID0gZ2V0Qnl0ZXMoX2RhdGEpO1xuICAgIGxldCB0ZXh0RGF0YSA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRleHREYXRhICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVtpXSk7XG4gICAgfVxuICAgIHJldHVybiBidG9hKHRleHREYXRhKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2U2NC1icm93c2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRCeXRlcyIsImRlY29kZUJhc2U2NCIsInRleHREYXRhIiwiYXRvYiIsImRhdGEiLCJVaW50OEFycmF5IiwibGVuZ3RoIiwiaSIsImNoYXJDb2RlQXQiLCJlbmNvZGVCYXNlNjQiLCJfZGF0YSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImJ0b2EiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/base64-browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js":
/*!****************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/data.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concat: function() { return /* binding */ concat; },\n/* harmony export */   dataLength: function() { return /* binding */ dataLength; },\n/* harmony export */   dataSlice: function() { return /* binding */ dataSlice; },\n/* harmony export */   getBytes: function() { return /* binding */ getBytes; },\n/* harmony export */   getBytesCopy: function() { return /* binding */ getBytesCopy; },\n/* harmony export */   hexlify: function() { return /* binding */ hexlify; },\n/* harmony export */   isBytesLike: function() { return /* binding */ isBytesLike; },\n/* harmony export */   isHexString: function() { return /* binding */ isHexString; },\n/* harmony export */   stripZerosLeft: function() { return /* binding */ stripZerosLeft; },\n/* harmony export */   zeroPadBytes: function() { return /* binding */ zeroPadBytes; },\n/* harmony export */   zeroPadValue: function() { return /* binding */ zeroPadValue; }\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/**\n *  Some data helpers.\n *\n *\n *  @_subsection api/utils:Data Helpers  [about-data]\n */ \nfunction _getBytes(value, name, copy) {\n    if (value instanceof Uint8Array) {\n        if (copy) {\n            return new Uint8Array(value);\n        }\n        return value;\n    }\n    if (typeof value === \"string\" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n        const result = new Uint8Array((value.length - 2) / 2);\n        let offset = 2;\n        for(let i = 0; i < result.length; i++){\n            result[i] = parseInt(value.substring(offset, offset + 2), 16);\n            offset += 2;\n        }\n        return result;\n    }\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid BytesLike value\", name || \"value\", value);\n}\n/**\n *  Get a typed Uint8Array for %%value%%. If already a Uint8Array\n *  the original %%value%% is returned; if a copy is required use\n *  [[getBytesCopy]].\n *\n *  @see: getBytesCopy\n */ function getBytes(value, name) {\n    return _getBytes(value, name, false);\n}\n/**\n *  Get a typed Uint8Array for %%value%%, creating a copy if necessary\n *  to prevent any modifications of the returned value from being\n *  reflected elsewhere.\n *\n *  @see: getBytes\n */ function getBytesCopy(value, name) {\n    return _getBytes(value, name, true);\n}\n/**\n *  Returns true if %%value%% is a valid [[HexString]].\n *\n *  If %%length%% is ``true`` or a //number//, it also checks that\n *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)\n *  bytes of data (e.g. ``0x1234`` is 2 bytes).\n */ function isHexString(value, length) {\n    if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (typeof length === \"number\" && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    if (length === true && value.length % 2 !== 0) {\n        return false;\n    }\n    return true;\n}\n/**\n *  Returns true if %%value%% is a valid representation of arbitrary\n *  data (i.e. a valid [[DataHexString]] or a Uint8Array).\n */ function isBytesLike(value) {\n    return isHexString(value, true) || value instanceof Uint8Array;\n}\nconst HexCharacters = \"0123456789abcdef\";\n/**\n *  Returns a [[DataHexString]] representation of %%data%%.\n */ function hexlify(data) {\n    const bytes = getBytes(data);\n    let result = \"0x\";\n    for(let i = 0; i < bytes.length; i++){\n        const v = bytes[i];\n        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n    return result;\n}\n/**\n *  Returns a [[DataHexString]] by concatenating all values\n *  within %%data%%.\n */ function concat(datas) {\n    return \"0x\" + datas.map((d)=>hexlify(d).substring(2)).join(\"\");\n}\n/**\n *  Returns the length of %%data%%, in bytes.\n */ function dataLength(data) {\n    if (isHexString(data, true)) {\n        return (data.length - 2) / 2;\n    }\n    return getBytes(data).length;\n}\n/**\n *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%\n *  offset to the %%end%% offset.\n *\n *  By default %%start%% is 0 and %%end%% is the length of %%data%%.\n */ function dataSlice(data, start, end) {\n    const bytes = getBytes(data);\n    if (end != null && end > bytes.length) {\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\n            buffer: bytes,\n            length: bytes.length,\n            offset: end\n        });\n    }\n    return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));\n}\n/**\n *  Return the [[DataHexString]] result by stripping all **leading**\n ** zero bytes from %%data%%.\n */ function stripZerosLeft(data) {\n    let bytes = hexlify(data).substring(2);\n    while(bytes.startsWith(\"00\")){\n        bytes = bytes.substring(2);\n    }\n    return \"0x\" + bytes;\n}\nfunction zeroPad(data, length, left) {\n    const bytes = getBytes(data);\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(length >= bytes.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\n        buffer: new Uint8Array(bytes),\n        length: length,\n        offset: length + 1\n    });\n    const result = new Uint8Array(length);\n    result.fill(0);\n    if (left) {\n        result.set(bytes, length - bytes.length);\n    } else {\n        result.set(bytes, 0);\n    }\n    return hexlify(result);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **left**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **values** are in Solidity\n *  (e.g. ``uint128``).\n */ function zeroPadValue(data, length) {\n    return zeroPad(data, length, true);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **right**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **bytes** are in Solidity\n *  (e.g. ``bytes16``).\n */ function zeroPadBytes(data, length) {\n    return zeroPad(data, length, false);\n} //# sourceMappingURL=data.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js":
/*!******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/errors.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assert: function() { return /* binding */ assert; },\n/* harmony export */   assertArgument: function() { return /* binding */ assertArgument; },\n/* harmony export */   assertArgumentCount: function() { return /* binding */ assertArgumentCount; },\n/* harmony export */   assertNormalize: function() { return /* binding */ assertNormalize; },\n/* harmony export */   assertPrivate: function() { return /* binding */ assertPrivate; },\n/* harmony export */   isCallException: function() { return /* binding */ isCallException; },\n/* harmony export */   isError: function() { return /* binding */ isError; },\n/* harmony export */   makeError: function() { return /* binding */ makeError; }\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_version.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/_version.js\");\n/* harmony import */ var _properties_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./properties.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/**\n *  All errors in ethers include properties to ensure they are both\n *  human-readable (i.e. ``.message``) and machine-readable (i.e. ``.code``).\n *\n *  The [[isError]] function can be used to check the error ``code`` and\n *  provide a type guard for the properties present on that error interface.\n *\n *  @_section: api/utils/errors:Errors  [about-errors]\n */ \n\nfunction stringify(value) {\n    if (value == null) {\n        return \"null\";\n    }\n    if (Array.isArray(value)) {\n        return \"[ \" + value.map(stringify).join(\", \") + \" ]\";\n    }\n    if (value instanceof Uint8Array) {\n        const HEX = \"0123456789abcdef\";\n        let result = \"0x\";\n        for(let i = 0; i < value.length; i++){\n            result += HEX[value[i] >> 4];\n            result += HEX[value[i] & 0xf];\n        }\n        return result;\n    }\n    if (typeof value === \"object\" && typeof value.toJSON === \"function\") {\n        return stringify(value.toJSON());\n    }\n    switch(typeof value){\n        case \"boolean\":\n        case \"symbol\":\n            return value.toString();\n        case \"bigint\":\n            return BigInt(value).toString();\n        case \"number\":\n            return value.toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\":\n            {\n                const keys = Object.keys(value);\n                keys.sort();\n                return \"{ \" + keys.map((k)=>\"\".concat(stringify(k), \": \").concat(stringify(value[k]))).join(\", \") + \" }\";\n            }\n    }\n    return \"[ COULD NOT SERIALIZE ]\";\n}\n/**\n *  Returns true if the %%error%% matches an error thrown by ethers\n *  that matches the error %%code%%.\n *\n *  In TypeScript environments, this can be used to check that %%error%%\n *  matches an EthersError type, which means the expected properties will\n *  be set.\n *\n *  @See [ErrorCodes](api:ErrorCode)\n *  @example\n *    try {\n *      // code....\n *    } catch (e) {\n *      if (isError(e, \"CALL_EXCEPTION\")) {\n *          // The Type Guard has validated this object\n *          console.log(e.data);\n *      }\n *    }\n */ function isError(error, code) {\n    return error && error.code === code;\n}\n/**\n *  Returns true if %%error%% is a [[CallExceptionError].\n */ function isCallException(error) {\n    return isError(error, \"CALL_EXCEPTION\");\n}\n/**\n *  Returns a new Error configured to the format ethers emits errors, with\n *  the %%message%%, [[api:ErrorCode]] %%code%% and additional properties\n *  for the corresponding EthersError.\n *\n *  Each error in ethers includes the version of ethers, a\n *  machine-readable [[ErrorCode]], and depending on %%code%%, additional\n *  required properties. The error message will also include the %%message%%,\n *  ethers version, %%code%% and all additional properties, serialized.\n */ function makeError(message, code, info) {\n    let shortMessage = message;\n    {\n        const details = [];\n        if (info) {\n            if (\"message\" in info || \"code\" in info || \"name\" in info) {\n                throw new Error(\"value will overwrite populated values: \".concat(stringify(info)));\n            }\n            for(const key in info){\n                if (key === \"shortMessage\") {\n                    continue;\n                }\n                const value = info[key];\n                //                try {\n                details.push(key + \"=\" + stringify(value));\n            //                } catch (error: any) {\n            //                console.log(\"MMM\", error.message);\n            //                    details.push(key + \"=[could not serialize object]\");\n            //                }\n            }\n        }\n        details.push(\"code=\".concat(code));\n        details.push(\"version=\".concat(_version_js__WEBPACK_IMPORTED_MODULE_0__.version));\n        if (details.length) {\n            message += \" (\" + details.join(\", \") + \")\";\n        }\n    }\n    let error;\n    switch(code){\n        case \"INVALID_ARGUMENT\":\n            error = new TypeError(message);\n            break;\n        case \"NUMERIC_FAULT\":\n        case \"BUFFER_OVERRUN\":\n            error = new RangeError(message);\n            break;\n        default:\n            error = new Error(message);\n    }\n    (0,_properties_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(error, {\n        code\n    });\n    if (info) {\n        Object.assign(error, info);\n    }\n    if (error.shortMessage == null) {\n        (0,_properties_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(error, {\n            shortMessage\n        });\n    }\n    return error;\n}\n/**\n *  Throws an EthersError with %%message%%, %%code%% and additional error\n *  %%info%% when %%check%% is falsish..\n *\n *  @see [[api:makeError]]\n */ function assert(check, message, code, info) {\n    if (!check) {\n        throw makeError(message, code, info);\n    }\n}\n/**\n *  A simple helper to simply ensuring provided arguments match expected\n *  constraints, throwing if not.\n *\n *  In TypeScript environments, the %%check%% has been asserted true, so\n *  any further code does not need additional compile-time checks.\n */ function assertArgument(check, message, name, value) {\n    assert(check, message, \"INVALID_ARGUMENT\", {\n        argument: name,\n        value: value\n    });\n}\nfunction assertArgumentCount(count, expectedCount, message) {\n    if (message == null) {\n        message = \"\";\n    }\n    if (message) {\n        message = \": \" + message;\n    }\n    assert(count >= expectedCount, \"missing arguemnt\" + message, \"MISSING_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n    assert(count <= expectedCount, \"too many arguments\" + message, \"UNEXPECTED_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n}\nconst _normalizeForms = [\n    \"NFD\",\n    \"NFC\",\n    \"NFKD\",\n    \"NFKC\"\n].reduce((accum, form)=>{\n    try {\n        // General test for normalize\n        /* c8 ignore start */ if (\"test\".normalize(form) !== \"test\") {\n            throw new Error(\"bad\");\n        }\n        ;\n        /* c8 ignore stop */ if (form === \"NFD\") {\n            const check = String.fromCharCode(0xe9).normalize(\"NFD\");\n            const expected = String.fromCharCode(0x65, 0x0301);\n            /* c8 ignore start */ if (check !== expected) {\n                throw new Error(\"broken\");\n            }\n        /* c8 ignore stop */ }\n        accum.push(form);\n    } catch (error) {}\n    return accum;\n}, []);\n/**\n *  Throws if the normalization %%form%% is not supported.\n */ function assertNormalize(form) {\n    assert(_normalizeForms.indexOf(form) >= 0, \"platform missing String.prototype.normalize\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"String.prototype.normalize\",\n        info: {\n            form\n        }\n    });\n}\n/**\n *  Many classes use file-scoped values to guard the constructor,\n *  making it effectively private. This facilitates that pattern\n *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,\n *  throwing if not, indicating the %%className%% if provided.\n */ function assertPrivate(givenGuard, guard, className) {\n    if (className == null) {\n        className = \"\";\n    }\n    if (givenGuard !== guard) {\n        let method = className, operation = \"new\";\n        if (className) {\n            method += \".\";\n            operation += \" \" + className;\n        }\n        assert(false, \"private constructor; use \".concat(method, \"from* methods\"), \"UNSUPPORTED_OPERATION\", {\n            operation\n        });\n    }\n} //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/events.js":
/*!******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/events.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventPayload: function() { return /* binding */ EventPayload; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _properties_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./properties.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/**\n *  Events allow for applications to use the observer pattern, which\n *  allows subscribing and publishing events, outside the normal\n *  execution paths.\n *\n *  @_section api/utils/events:Events  [about-events]\n */ \n\n\n\nvar _listener = /*#__PURE__*/ new WeakMap();\n/**\n *  When an [[EventEmitterable]] triggers a [[Listener]], the\n *  callback always ahas one additional argument passed, which is\n *  an **EventPayload**.\n */ class EventPayload {\n    /**\n     *  Unregister the triggered listener for future events.\n     */ async removeListener() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _listener) == null) {\n            return;\n        }\n        await this.emitter.off(this.filter, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_0__._)(this, _listener));\n    }\n    /**\n     *  Create a new **EventPayload** for %%emitter%% with\n     *  the %%listener%% and for %%filter%%.\n     */ constructor(emitter, listener, filter){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_1__._)(this, _listener, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_2__._)(this, _listener, listener);\n        (0,_properties_js__WEBPACK_IMPORTED_MODULE_3__.defineProperties)(this, {\n            emitter,\n            filter\n        });\n    }\n} //# sourceMappingURL=events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvZXZlbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7OztDQU1DOzs7QUFDa0Q7SUFlL0M7QUFkSjs7OztDQUlDLEdBQ00sTUFBTUM7SUFrQlQ7O0tBRUMsR0FDRCxNQUFNQyxpQkFBaUI7UUFDbkIsSUFBSSw0RUFBSSxFQUFFQyxjQUFZLE1BQU07WUFDeEI7UUFDSjtRQUNBLE1BQU0sSUFBSSxDQUFDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxJQUFJLENBQUNDLE1BQU0sRUFBRSw0RUFBSSxFQUFFSDtJQUM5QztJQWhCQTs7O0tBR0MsR0FDREksWUFBWUgsT0FBTyxFQUFFRCxRQUFRLEVBQUVHLE1BQU0sQ0FBRTtRQUx2Qzs7bUJBQUE7O3NGQU1VSCxXQUFXQTtRQUNqQkgsZ0VBQWdCQSxDQUFDLElBQUksRUFBRTtZQUFFSTtZQUFTRTtRQUFPO0lBQzdDO0FBVUosRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy9ldmVudHMuanM/Mzk4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBFdmVudHMgYWxsb3cgZm9yIGFwcGxpY2F0aW9ucyB0byB1c2UgdGhlIG9ic2VydmVyIHBhdHRlcm4sIHdoaWNoXG4gKiAgYWxsb3dzIHN1YnNjcmliaW5nIGFuZCBwdWJsaXNoaW5nIGV2ZW50cywgb3V0c2lkZSB0aGUgbm9ybWFsXG4gKiAgZXhlY3V0aW9uIHBhdGhzLlxuICpcbiAqICBAX3NlY3Rpb24gYXBpL3V0aWxzL2V2ZW50czpFdmVudHMgIFthYm91dC1ldmVudHNdXG4gKi9cbmltcG9ydCB7IGRlZmluZVByb3BlcnRpZXMgfSBmcm9tIFwiLi9wcm9wZXJ0aWVzLmpzXCI7XG4vKipcbiAqICBXaGVuIGFuIFtbRXZlbnRFbWl0dGVyYWJsZV1dIHRyaWdnZXJzIGEgW1tMaXN0ZW5lcl1dLCB0aGVcbiAqICBjYWxsYmFjayBhbHdheXMgYWhhcyBvbmUgYWRkaXRpb25hbCBhcmd1bWVudCBwYXNzZWQsIHdoaWNoIGlzXG4gKiAgYW4gKipFdmVudFBheWxvYWQqKi5cbiAqL1xuZXhwb3J0IGNsYXNzIEV2ZW50UGF5bG9hZCB7XG4gICAgLyoqXG4gICAgICogIFRoZSBldmVudCBmaWx0ZXIuXG4gICAgICovXG4gICAgZmlsdGVyO1xuICAgIC8qKlxuICAgICAqICBUaGUgKipFdmVudEVtaXR0ZXJhYmxlKiouXG4gICAgICovXG4gICAgZW1pdHRlcjtcbiAgICAjbGlzdGVuZXI7XG4gICAgLyoqXG4gICAgICogIENyZWF0ZSBhIG5ldyAqKkV2ZW50UGF5bG9hZCoqIGZvciAlJWVtaXR0ZXIlJSB3aXRoXG4gICAgICogIHRoZSAlJWxpc3RlbmVyJSUgYW5kIGZvciAlJWZpbHRlciUlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVtaXR0ZXIsIGxpc3RlbmVyLCBmaWx0ZXIpIHtcbiAgICAgICAgdGhpcy4jbGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IGVtaXR0ZXIsIGZpbHRlciB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFVucmVnaXN0ZXIgdGhlIHRyaWdnZXJlZCBsaXN0ZW5lciBmb3IgZnV0dXJlIGV2ZW50cy5cbiAgICAgKi9cbiAgICBhc3luYyByZW1vdmVMaXN0ZW5lcigpIHtcbiAgICAgICAgaWYgKHRoaXMuI2xpc3RlbmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLmVtaXR0ZXIub2ZmKHRoaXMuZmlsdGVyLCB0aGlzLiNsaXN0ZW5lcik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJkZWZpbmVQcm9wZXJ0aWVzIiwiRXZlbnRQYXlsb2FkIiwicmVtb3ZlTGlzdGVuZXIiLCJsaXN0ZW5lciIsImVtaXR0ZXIiLCJvZmYiLCJmaWx0ZXIiLCJjb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/events.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fetch.js":
/*!*****************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/fetch.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchCancelSignal: function() { return /* binding */ FetchCancelSignal; },\n/* harmony export */   FetchRequest: function() { return /* binding */ FetchRequest; },\n/* harmony export */   FetchResponse: function() { return /* binding */ FetchResponse; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base64.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/base64-browser.js\");\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./data.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _properties_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./properties.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utf8_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utf8.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _geturl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geturl.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/geturl-browser.js\");\n/**\n *  Fetching content from the web is environment-specific, so Ethers\n *  provides an abstraction that each environment can implement to provide\n *  this service.\n *\n *  On [Node.js](link-node), the ``http`` and ``https`` libs are used to\n *  create a request object, register event listeners and process data\n *  and populate the [[FetchResponse]].\n *\n *  In a browser, the [DOM fetch](link-js-fetch) is used, and the resulting\n *  ``Promise`` is waited on to retrieve the payload.\n *\n *  The [[FetchRequest]] is responsible for handling many common situations,\n *  such as redirects, server throttling, authentication, etc.\n *\n *  It also handles common gateways, such as IPFS and data URIs.\n *\n *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]\n */ \n\n\n\n\n\n\n\n\n\n\nconst MAX_ATTEMPTS = 12;\nconst SLOT_INTERVAL = 250;\n// The global FetchGetUrlFunc implementation.\nlet defaultGetUrlFunc = (0,_geturl_js__WEBPACK_IMPORTED_MODULE_0__.createGetUrl)();\nconst reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\nconst reIpfs = new RegExp(\"^ipfs://(ipfs/)?(.*)$\", \"i\");\n// If locked, new Gateways cannot be added\nlet locked = false;\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\nasync function dataGatewayFunc(url, signal) {\n    try {\n        const match = url.match(reData);\n        if (!match) {\n            throw new Error(\"invalid data\");\n        }\n        return new FetchResponse(200, \"OK\", {\n            \"content-type\": match[1] || \"text/plain\"\n        }, match[2] ? (0,_base64_js__WEBPACK_IMPORTED_MODULE_1__.decodeBase64)(match[3]) : unpercent(match[3]));\n    } catch (error) {\n        return new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", {}, null, new FetchRequest(url));\n    }\n}\n/**\n *  Returns a [[FetchGatewayFunc]] for fetching content from a standard\n *  IPFS gateway hosted at %%baseUrl%%.\n */ function getIpfsGatewayFunc(baseUrl) {\n    async function gatewayIpfs(url, signal) {\n        try {\n            const match = url.match(reIpfs);\n            if (!match) {\n                throw new Error(\"invalid link\");\n            }\n            return new FetchRequest(\"\".concat(baseUrl).concat(match[2]));\n        } catch (error) {\n            return new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", {}, null, new FetchRequest(url));\n        }\n    }\n    return gatewayIpfs;\n}\nconst Gateways = {\n    \"data\": dataGatewayFunc,\n    \"ipfs\": getIpfsGatewayFunc(\"https://gateway.ipfs.io/ipfs/\")\n};\nconst fetchSignals = new WeakMap();\nvar _listeners = /*#__PURE__*/ new WeakMap(), _cancelled = /*#__PURE__*/ new WeakMap();\n/**\n *  @_ignore\n */ class FetchCancelSignal {\n    addListener(listener) {\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(!(0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _cancelled), \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fetchCancelSignal.addCancelListener\"\n        });\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _listeners).push(listener);\n    }\n    get cancelled() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _cancelled);\n    }\n    checkSignal() {\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(!this.cancelled, \"cancelled\", \"CANCELLED\", {});\n    }\n    constructor(request){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _listeners, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _cancelled, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _listeners, []);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _cancelled, false);\n        fetchSignals.set(request, ()=>{\n            if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _cancelled)) {\n                return;\n            }\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _cancelled, true);\n            for (const listener of (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _listeners)){\n                setTimeout(()=>{\n                    listener();\n                }, 0);\n            }\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _listeners, []);\n        });\n    }\n}\n// Check the signal, throwing if it is cancelled\nfunction checkSignal(signal) {\n    if (signal == null) {\n        throw new Error(\"missing signal; should not happen\");\n    }\n    signal.checkSignal();\n    return signal;\n}\nvar _allowInsecure = /*#__PURE__*/ new WeakMap(), _gzip = /*#__PURE__*/ new WeakMap(), _headers = /*#__PURE__*/ new WeakMap(), _method = /*#__PURE__*/ new WeakMap(), _timeout = /*#__PURE__*/ new WeakMap(), _url = /*#__PURE__*/ new WeakMap(), _body = /*#__PURE__*/ new WeakMap(), _bodyType = /*#__PURE__*/ new WeakMap(), _creds = /*#__PURE__*/ new WeakMap(), // Hooks\n_preflight = /*#__PURE__*/ new WeakMap(), _process = /*#__PURE__*/ new WeakMap(), _retry = /*#__PURE__*/ new WeakMap(), _signal = /*#__PURE__*/ new WeakMap(), _throttle = /*#__PURE__*/ new WeakMap(), _getUrlFunc = /*#__PURE__*/ new WeakMap(), _send = /*#__PURE__*/ new WeakSet();\nlet _Symbol_iterator = Symbol.iterator;\n/**\n *  Represents a request for a resource using a URI.\n *\n *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,\n *  and ``IPFS:``.\n *\n *  Additional schemes can be added globally using [[registerGateway]].\n *\n *  @example:\n *    req = new FetchRequest(\"https://www.ricmoo.com\")\n *    resp = await req.send()\n *    resp.body.length\n *    //_result:\n */ class FetchRequest {\n    /**\n     *  The fetch URL to request.\n     */ get url() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _url);\n    }\n    set url(url) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _url, String(url));\n    }\n    /**\n     *  The fetch body, if any, to send as the request body. //(default: null)//\n     *\n     *  When setting a body, the intrinsic ``Content-Type`` is automatically\n     *  set and will be used if **not overridden** by setting a custom\n     *  header.\n     *\n     *  If %%body%% is null, the body is cleared (along with the\n     *  intrinsic ``Content-Type``).\n     *\n     *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to\n     *  ``text/plain``.\n     *\n     *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to\n     *  ``application/octet-stream``.\n     *\n     *  If %%body%% is any other object, the intrinsic ``Content-Type`` is\n     *  set to ``application/json``.\n     */ get body() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body) == null) {\n            return null;\n        }\n        return new Uint8Array((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body));\n    }\n    set body(body) {\n        if (body == null) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _body, undefined);\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _bodyType, undefined);\n        } else if (typeof body === \"string\") {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _body, (0,_utf8_js__WEBPACK_IMPORTED_MODULE_6__.toUtf8Bytes)(body));\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _bodyType, \"text/plain\");\n        } else if (body instanceof Uint8Array) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _body, body);\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _bodyType, \"application/octet-stream\");\n        } else if (typeof body === \"object\") {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _body, (0,_utf8_js__WEBPACK_IMPORTED_MODULE_6__.toUtf8Bytes)(JSON.stringify(body)));\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _bodyType, \"application/json\");\n        } else {\n            throw new Error(\"invalid body\");\n        }\n    }\n    /**\n     *  Returns true if the request has a body.\n     */ hasBody() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body) != null;\n    }\n    /**\n     *  The HTTP method to use when requesting the URI. If no method\n     *  has been explicitly set, then ``GET`` is used if the body is\n     *  null and ``POST`` otherwise.\n     */ get method() {\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _method)) {\n            return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _method);\n        }\n        if (this.hasBody()) {\n            return \"POST\";\n        }\n        return \"GET\";\n    }\n    set method(method) {\n        if (method == null) {\n            method = \"\";\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _method, String(method).toUpperCase());\n    }\n    /**\n     *  The headers that will be used when requesting the URI. All\n     *  keys are lower-case.\n     *\n     *  This object is a copy, so any changes will **NOT** be reflected\n     *  in the ``FetchRequest``.\n     *\n     *  To set a header entry, use the ``setHeader`` method.\n     */ get headers() {\n        const headers = Object.assign({}, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _headers));\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _creds)) {\n            headers[\"authorization\"] = \"Basic \".concat((0,_base64_js__WEBPACK_IMPORTED_MODULE_1__.encodeBase64)((0,_utf8_js__WEBPACK_IMPORTED_MODULE_6__.toUtf8Bytes)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _creds))));\n        }\n        ;\n        if (this.allowGzip) {\n            headers[\"accept-encoding\"] = \"gzip\";\n        }\n        if (headers[\"content-type\"] == null && (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _bodyType)) {\n            headers[\"content-type\"] = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _bodyType);\n        }\n        if (this.body) {\n            headers[\"content-length\"] = String(this.body.length);\n        }\n        return headers;\n    }\n    /**\n     *  Get the header for %%key%%, ignoring case.\n     */ getHeader(key) {\n        return this.headers[key.toLowerCase()];\n    }\n    /**\n     *  Set the header for %%key%% to %%value%%. All values are coerced\n     *  to a string.\n     */ setHeader(key, value) {\n        (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _headers)[String(key).toLowerCase()] = String(value);\n    }\n    /**\n     *  Clear all headers, resetting all intrinsic headers.\n     */ clearHeaders() {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _headers, {});\n    }\n    [_Symbol_iterator]() {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: ()=>{\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [\n                            key,\n                            headers[key]\n                        ],\n                        done: false\n                    };\n                }\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    /**\n     *  The value that will be sent for the ``Authorization`` header.\n     *\n     *  To set the credentials, use the ``setCredentials`` method.\n     */ get credentials() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _creds) || null;\n    }\n    /**\n     *  Sets an ``Authorization`` for %%username%% with %%password%%.\n     */ setCredentials(username, password) {\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _creds, \"\".concat(username, \":\").concat(password));\n    }\n    /**\n     *  Enable and request gzip-encoded responses. The response will\n     *  automatically be decompressed. //(default: true)//\n     */ get allowGzip() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _gzip);\n    }\n    set allowGzip(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _gzip, !!value);\n    }\n    /**\n     *  Allow ``Authentication`` credentials to be sent over insecure\n     *  channels. //(default: false)//\n     */ get allowInsecureAuthentication() {\n        return !!(0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _allowInsecure);\n    }\n    set allowInsecureAuthentication(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _allowInsecure, !!value);\n    }\n    /**\n     *  The timeout (in milliseconds) to wait for a complete response.\n     *  //(default: 5 minutes)//\n     */ get timeout() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _timeout);\n    }\n    set timeout(timeout) {\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _timeout, timeout);\n    }\n    /**\n     *  This function is called prior to each request, for example\n     *  during a redirection or retry in case of server throttling.\n     *\n     *  This offers an opportunity to populate headers or update\n     *  content before sending a request.\n     */ get preflightFunc() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _preflight) || null;\n    }\n    set preflightFunc(preflight) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _preflight, preflight);\n    }\n    /**\n     *  This function is called after each response, offering an\n     *  opportunity to provide client-level throttling or updating\n     *  response data.\n     *\n     *  Any error thrown in this causes the ``send()`` to throw.\n     *\n     *  To schedule a retry attempt (assuming the maximum retry limit\n     *  has not been reached), use [[response.throwThrottleError]].\n     */ get processFunc() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _process) || null;\n    }\n    set processFunc(process) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _process, process);\n    }\n    /**\n     *  This function is called on each retry attempt.\n     */ get retryFunc() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _retry) || null;\n    }\n    set retryFunc(retry) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _retry, retry);\n    }\n    /**\n     *  This function is called to fetch content from HTTP and\n     *  HTTPS URLs and is platform specific (e.g. nodejs vs\n     *  browsers).\n     *\n     *  This is by default the currently registered global getUrl\n     *  function, which can be changed using [[registerGetUrl]].\n     *  If this has been set, setting is to ``null`` will cause\n     *  this FetchRequest (and any future clones) to revert back to\n     *  using the currently registered global getUrl function.\n     *\n     *  Setting this is generally not necessary, but may be useful\n     *  for developers that wish to intercept requests or to\n     *  configurege a proxy or other agent.\n     */ get getUrlFunc() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _getUrlFunc) || defaultGetUrlFunc;\n    }\n    set getUrlFunc(value) {\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _getUrlFunc, value);\n    }\n    toString() {\n        return \"<FetchRequest method=\".concat(JSON.stringify(this.method), \" url=\").concat(JSON.stringify(this.url), \" headers=\").concat(JSON.stringify(this.headers), \" body=\").concat((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body) ? (0,_data_js__WEBPACK_IMPORTED_MODULE_7__.hexlify)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body)) : \"null\", \">\");\n    }\n    /**\n     *  Update the throttle parameters used to determine maximum\n     *  attempts and exponential-backoff properties.\n     */ setThrottleParams(params) {\n        if (params.slotInterval != null) {\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _throttle).slotInterval = params.slotInterval;\n        }\n        if (params.maxAttempts != null) {\n            (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _throttle).maxAttempts = params.maxAttempts;\n        }\n    }\n    /**\n     *  Resolves to the response by sending the request.\n     */ send() {\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _signal) == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fetchRequest.send\"\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _signal, new FetchCancelSignal(this));\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_8__._)(this, _send, send).call(this, 0, getTime() + this.timeout, 0, this, new FetchResponse(0, \"\", {}, null, this));\n    }\n    /**\n     *  Cancels the inflight response, causing a ``CANCELLED``\n     *  error to be rejected from the [[send]].\n     */ cancel() {\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _signal) != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fetchRequest.cancel\"\n        });\n        const signal = fetchSignals.get(this);\n        if (!signal) {\n            throw new Error(\"missing signal; should not happen\");\n        }\n        signal();\n    }\n    /**\n     *  Returns a new [[FetchRequest]] that represents the redirection\n     *  to %%location%%.\n     */ redirect(location) {\n        // Redirection; for now we only support absolute locations\n        const current = this.url.split(\":\")[0].toLowerCase();\n        const target = location.split(\":\")[0].toLowerCase();\n        // Don't allow redirecting:\n        // - non-GET requests\n        // - downgrading the security (e.g. https => http)\n        // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), \"unsupported redirect\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"redirect(\".concat(this.method, \" \").concat(JSON.stringify(this.url), \" => \").concat(JSON.stringify(location), \")\")\n        });\n        // Create a copy of this request, with a new URL\n        const req = new FetchRequest(location);\n        req.method = \"GET\";\n        req.allowGzip = this.allowGzip;\n        req.timeout = this.timeout;\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(req, _headers, Object.assign({}, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _headers)));\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body)) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(req, _body, new Uint8Array((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body)));\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(req, _bodyType, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _bodyType));\n        // Do not forward credentials unless on the same domain; only absolute\n        //req.allowInsecure = false;\n        // paths are currently supported; may want a way to specify to forward?\n        //setStore(req.#props, \"creds\", getStore(this.#pros, \"creds\"));\n        return req;\n    }\n    /**\n     *  Create a new copy of this request.\n     */ clone() {\n        const clone = new FetchRequest(this.url);\n        // Preserve \"default method\" (i.e. null)\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(clone, _method, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _method));\n        // Preserve \"default body\" with type, copying the Uint8Array is present\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body)) {\n            (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(clone, _body, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body));\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(clone, _bodyType, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _bodyType));\n        // Preserve \"default headers\"\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(clone, _headers, Object.assign({}, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _headers)));\n        // Credentials is readonly, so we copy internally\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(clone, _creds, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _creds));\n        if (this.allowGzip) {\n            clone.allowGzip = true;\n        }\n        clone.timeout = this.timeout;\n        if (this.allowInsecureAuthentication) {\n            clone.allowInsecureAuthentication = true;\n        }\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(clone, _preflight, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _preflight));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(clone, _process, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _process));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(clone, _retry, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _retry));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(clone, _getUrlFunc, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _getUrlFunc));\n        return clone;\n    }\n    /**\n     *  Locks all static configuration for gateways and FetchGetUrlFunc\n     *  registration.\n     */ static lockConfig() {\n        locked = true;\n    }\n    /**\n     *  Get the current Gateway function for %%scheme%%.\n     */ static getGateway(scheme) {\n        return Gateways[scheme.toLowerCase()] || null;\n    }\n    /**\n     *  Use the %%func%% when fetching URIs using %%scheme%%.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */ static registerGateway(scheme, func) {\n        scheme = scheme.toLowerCase();\n        if (scheme === \"http\" || scheme === \"https\") {\n            throw new Error(\"cannot intercept \".concat(scheme, \"; use registerGetUrl\"));\n        }\n        if (locked) {\n            throw new Error(\"gateways locked\");\n        }\n        Gateways[scheme] = func;\n    }\n    /**\n     *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */ static registerGetUrl(getUrl) {\n        if (locked) {\n            throw new Error(\"gateways locked\");\n        }\n        defaultGetUrlFunc = getUrl;\n    }\n    /**\n     *  Creates a getUrl function that fetches content from HTTP and\n     *  HTTPS URLs.\n     *\n     *  The available %%options%% are dependent on the platform\n     *  implementation of the default getUrl function.\n     *\n     *  This is not generally something that is needed, but is useful\n     *  when trying to customize simple behaviour when fetching HTTP\n     *  content.\n     */ static createGetUrlFunc(options) {\n        return (0,_geturl_js__WEBPACK_IMPORTED_MODULE_0__.createGetUrl)(options);\n    }\n    /**\n     *  Creates a function that can \"fetch\" data URIs.\n     *\n     *  Note that this is automatically done internally to support\n     *  data URIs, so it is not necessary to register it.\n     *\n     *  This is not generally something that is needed, but may\n     *  be useful in a wrapper to perfom custom data URI functionality.\n     */ static createDataGateway() {\n        return dataGatewayFunc;\n    }\n    /**\n     *  Creates a function that will fetch IPFS (unvalidated) from\n     *  a custom gateway baseUrl.\n     *\n     *  The default IPFS gateway used internally is\n     *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\n     */ static createIpfsGatewayFunc(baseUrl) {\n        return getIpfsGatewayFunc(baseUrl);\n    }\n    /**\n     *  Create a new FetchRequest instance with default values.\n     *\n     *  Once created, each property may be set before issuing a\n     *  ``.send()`` to make the request.\n     */ constructor(url){\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_9__._)(this, _send);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _allowInsecure, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _gzip, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _headers, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _method, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _timeout, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _url, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _body, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _bodyType, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _creds, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _preflight, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _process, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _retry, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _signal, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _throttle, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _getUrlFunc, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _url, String(url));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _allowInsecure, false);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _gzip, true);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _headers, {});\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _method, \"\");\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _timeout, 300000);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _throttle, {\n            slotInterval: SLOT_INTERVAL,\n            maxAttempts: MAX_ATTEMPTS\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _getUrlFunc, null);\n    }\n}\nasync function send(attempt, expires, delay, _request, _response) {\n    var _req_redirect, _req_clone, _req_clone1;\n    if (attempt >= (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _throttle).maxAttempts) {\n        return _response.makeServerError(\"exceeded maximum retry limit\");\n    }\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(getTime() <= expires, \"timeout\", \"TIMEOUT\", {\n        operation: \"request.send\",\n        reason: \"timeout\",\n        request: _request\n    });\n    if (delay > 0) {\n        await wait(delay);\n    }\n    let req = this.clone();\n    const scheme = (req.url.split(\":\")[0] || \"\").toLowerCase();\n    // Process any Gateways\n    if (scheme in Gateways) {\n        const result = await Gateways[scheme](req.url, checkSignal((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(_request, _signal)));\n        if (result instanceof FetchResponse) {\n            let response = result;\n            if (this.processFunc) {\n                checkSignal((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(_request, _signal));\n                try {\n                    response = await this.processFunc(req, response);\n                } catch (error) {\n                    // Something went wrong during processing; throw a 5xx server error\n                    if (error.throttle == null || typeof error.stall !== \"number\") {\n                        response.makeServerError(\"error in post-processing function\", error).assertOk();\n                    }\n                // Ignore throttling\n                }\n            }\n            return response;\n        }\n        req = result;\n    }\n    // We have a preflight function; update the request\n    if (this.preflightFunc) {\n        req = await this.preflightFunc(req);\n    }\n    const resp = await this.getUrlFunc(req, checkSignal((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(_request, _signal)));\n    let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\n    if (response.statusCode === 301 || response.statusCode === 302) {\n        // Redirect\n        try {\n            const location = response.headers.location || \"\";\n            return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_8__._)(_req_redirect = req.redirect(location), _send, send).call(_req_redirect, attempt + 1, expires, 0, _request, response);\n        } catch (error) {}\n        // Things won't get any better on another attempt; abort\n        return response;\n    } else if (response.statusCode === 429) {\n        // Throttle\n        if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {\n            const retryAfter = response.headers[\"retry-after\"];\n            let delay = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n            if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                delay = parseInt(retryAfter);\n            }\n            return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_8__._)(_req_clone = req.clone(), _send, send).call(_req_clone, attempt + 1, expires, delay, _request, response);\n        }\n    }\n    if (this.processFunc) {\n        checkSignal((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(_request, _signal));\n        try {\n            response = await this.processFunc(req, response);\n        } catch (error) {\n            // Something went wrong during processing; throw a 5xx server error\n            if (error.throttle == null || typeof error.stall !== \"number\") {\n                response.makeServerError(\"error in post-processing function\", error).assertOk();\n            }\n            // Throttle\n            let delay = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n            ;\n            if (error.stall >= 0) {\n                delay = error.stall;\n            }\n            return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_8__._)(_req_clone1 = req.clone(), _send, send).call(_req_clone1, attempt + 1, expires, delay, _request, response);\n        }\n    }\n    return response;\n}\n;\nvar _statusCode = /*#__PURE__*/ new WeakMap(), _statusMessage = /*#__PURE__*/ new WeakMap(), _headers1 = /*#__PURE__*/ new WeakMap(), _body1 = /*#__PURE__*/ new WeakMap(), _request = /*#__PURE__*/ new WeakMap(), _error = /*#__PURE__*/ new WeakMap();\nlet _Symbol_iterator1 = Symbol.iterator;\n/**\n *  The response for a FetchRequest.\n */ class FetchResponse {\n    toString() {\n        return \"<FetchResponse status=\".concat(this.statusCode, \" body=\").concat((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body1) ? (0,_data_js__WEBPACK_IMPORTED_MODULE_7__.hexlify)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body1)) : \"null\", \">\");\n    }\n    /**\n     *  The response status code.\n     */ get statusCode() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _statusCode);\n    }\n    /**\n     *  The response status message.\n     */ get statusMessage() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _statusMessage);\n    }\n    /**\n     *  The response headers. All keys are lower-case.\n     */ get headers() {\n        return Object.assign({}, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _headers1));\n    }\n    /**\n     *  The response body, or ``null`` if there was no body.\n     */ get body() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body1) == null ? null : new Uint8Array((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body1));\n    }\n    /**\n     *  The response body as a UTF-8 encoded string, or the empty\n     *  string (i.e. ``\"\"``) if there was no body.\n     *\n     *  An error is thrown if the body is invalid UTF-8 data.\n     */ get bodyText() {\n        try {\n            return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body1) == null ? \"\" : (0,_utf8_js__WEBPACK_IMPORTED_MODULE_6__.toUtf8String)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body1));\n        } catch (error) {\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyText\",\n                info: {\n                    response: this\n                }\n            });\n        }\n    }\n    /**\n     *  The response body, decoded as JSON.\n     *\n     *  An error is thrown if the body is invalid JSON-encoded data\n     *  or if there was no body.\n     */ get bodyJson() {\n        try {\n            return JSON.parse(this.bodyText);\n        } catch (error) {\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyJson\",\n                info: {\n                    response: this\n                }\n            });\n        }\n    }\n    [_Symbol_iterator1]() {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: ()=>{\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [\n                            key,\n                            headers[key]\n                        ],\n                        done: false\n                    };\n                }\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    /**\n     *  Return a Response with matching headers and body, but with\n     *  an error status code (i.e. 599) and %%message%% with an\n     *  optional %%error%%.\n     */ makeServerError(message, error) {\n        let statusMessage;\n        if (!message) {\n            message = \"\".concat(this.statusCode, \" \").concat(this.statusMessage);\n            statusMessage = \"CLIENT ESCALATED SERVER ERROR (\".concat(message, \")\");\n        } else {\n            statusMessage = \"CLIENT ESCALATED SERVER ERROR (\".concat(this.statusCode, \" \").concat(this.statusMessage, \"; \").concat(message, \")\");\n        }\n        const response = new FetchResponse(599, statusMessage, this.headers, this.body, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _request) || undefined);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(response, _error, {\n            message,\n            error\n        });\n        return response;\n    }\n    /**\n     *  If called within a [request.processFunc](FetchRequest-processFunc)\n     *  call, causes the request to retry as if throttled for %%stall%%\n     *  milliseconds.\n     */ throwThrottleError(message, stall) {\n        if (stall == null) {\n            stall = -1;\n        } else {\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(Number.isInteger(stall) && stall >= 0, \"invalid stall timeout\", \"stall\", stall);\n        }\n        const error = new Error(message || \"throttling requests\");\n        (0,_properties_js__WEBPACK_IMPORTED_MODULE_10__.defineProperties)(error, {\n            stall,\n            throttle: true\n        });\n        throw error;\n    }\n    /**\n     *  Get the header value for %%key%%, ignoring case.\n     */ getHeader(key) {\n        return this.headers[key.toLowerCase()];\n    }\n    /**\n     *  Returns true if the response has a body.\n     */ hasBody() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body1) != null;\n    }\n    /**\n     *  The request made for this response.\n     */ get request() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _request);\n    }\n    /**\n     *  Returns true if this response was a success statusCode.\n     */ ok() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _error).message === \"\" && this.statusCode >= 200 && this.statusCode < 300;\n    }\n    /**\n     *  Throws a ``SERVER_ERROR`` if this response is not ok.\n     */ assertOk() {\n        if (this.ok()) {\n            return;\n        }\n        let { message, error } = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _error);\n        if (message === \"\") {\n            message = \"server response \".concat(this.statusCode, \" \").concat(this.statusMessage);\n        }\n        let requestUrl = null;\n        if (this.request) {\n            requestUrl = this.request.url;\n        }\n        let responseBody = null;\n        try {\n            if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body1)) {\n                responseBody = (0,_utf8_js__WEBPACK_IMPORTED_MODULE_6__.toUtf8String)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _body1));\n            }\n        } catch (e) {}\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false, message, \"SERVER_ERROR\", {\n            request: this.request || \"unknown request\",\n            response: this,\n            error,\n            info: {\n                requestUrl,\n                responseBody,\n                responseStatus: \"\".concat(this.statusCode, \" \").concat(this.statusMessage)\n            }\n        });\n    }\n    constructor(statusCode, statusMessage, headers, body, request){\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _statusCode, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _statusMessage, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _headers1, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _body1, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _request, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_4__._)(this, _error, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _statusCode, statusCode);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _statusMessage, statusMessage);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _headers1, Object.keys(headers).reduce((accum, k)=>{\n            accum[k.toLowerCase()] = String(headers[k]);\n            return accum;\n        }, {}));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _body1, body == null ? null : new Uint8Array(body));\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _request, request || null);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_5__._)(this, _error, {\n            message: \"\"\n        });\n    }\n}\nfunction getTime() {\n    return new Date().getTime();\n}\nfunction unpercent(value) {\n    return (0,_utf8_js__WEBPACK_IMPORTED_MODULE_6__.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code)=>{\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\nfunction wait(delay) {\n    return new Promise((resolve)=>setTimeout(resolve, delay));\n} //# sourceMappingURL=fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fetch.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fixednumber.js":
/*!***********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/fixednumber.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FixedNumber: function() { return /* binding */ FixedNumber; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./data.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _maths_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./maths.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _properties_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./properties.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/**\n *  The **FixedNumber** class permits using values with decimal places,\n *  using fixed-pont math.\n *\n *  Fixed-point math is still based on integers under-the-hood, but uses an\n *  internal offset to store fractional components below, and each operation\n *  corrects for this after each operation.\n *\n *  @_section: api/utils/fixed-point-math:Fixed-Point Maths  [about-fixed-point-math]\n */ \n\n\n\n\n\n\n\n\nconst BN_N1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_5 = BigInt(5);\nconst _guard = {};\n// Constant to pull zeros from for multipliers\nlet Zeros = \"0000\";\nwhile(Zeros.length < 80){\n    Zeros += Zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getTens(decimals) {\n    let result = Zeros;\n    while(result.length < decimals){\n        result += result;\n    }\n    return BigInt(\"1\" + result.substring(0, decimals));\n}\nfunction checkValue(val, format, safeOp) {\n    const width = BigInt(format.width);\n    if (format.signed) {\n        const limit = BN_1 << width - BN_1;\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(safeOp == null || val >= -limit && val < limit, \"overflow\", \"NUMERIC_FAULT\", {\n            operation: safeOp,\n            fault: \"overflow\",\n            value: val\n        });\n        if (val > BN_0) {\n            val = (0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.fromTwos)((0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.mask)(val, width), width);\n        } else {\n            val = -(0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.fromTwos)((0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.mask)(-val, width), width);\n        }\n    } else {\n        const limit = BN_1 << width;\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(safeOp == null || val >= 0 && val < limit, \"overflow\", \"NUMERIC_FAULT\", {\n            operation: safeOp,\n            fault: \"overflow\",\n            value: val\n        });\n        val = (val % limit + limit) % limit & limit - BN_1;\n    }\n    return val;\n}\nfunction getFormat(value) {\n    if (typeof value === \"number\") {\n        value = \"fixed128x\".concat(value);\n    }\n    let signed = true;\n    let width = 128;\n    let decimals = 18;\n    if (typeof value === \"string\") {\n        // Parse the format string\n        if (value === \"fixed\") {\n        // defaults...\n        } else if (value === \"ufixed\") {\n            signed = false;\n        } else {\n            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(match, \"invalid fixed format\", \"format\", value);\n            signed = match[1] !== \"u\";\n            width = parseInt(match[2]);\n            decimals = parseInt(match[3]);\n        }\n    } else if (value) {\n        // Extract the values from the object\n        const v = value;\n        const check = (key, type, defaultValue)=>{\n            if (v[key] == null) {\n                return defaultValue;\n            }\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof v[key] === type, \"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, v[key]);\n            return v[key];\n        };\n        signed = check(\"signed\", \"boolean\", signed);\n        width = check(\"width\", \"number\", width);\n        decimals = check(\"decimals\", \"number\", decimals);\n    }\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(width % 8 === 0, \"invalid FixedNumber width (not byte aligned)\", \"format.width\", width);\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(decimals <= 80, \"invalid FixedNumber decimals (too large)\", \"format.decimals\", decimals);\n    const name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n    return {\n        signed,\n        width,\n        decimals,\n        name\n    };\n}\nfunction toString(val, decimals) {\n    let negative = \"\";\n    if (val < BN_0) {\n        negative = \"-\";\n        val *= BN_N1;\n    }\n    let str = val.toString();\n    // No decimal point for whole values\n    if (decimals === 0) {\n        return negative + str;\n    }\n    // Pad out to the whole component (including a whole digit)\n    while(str.length <= decimals){\n        str = Zeros + str;\n    }\n    // Insert the decimal point\n    const index = str.length - decimals;\n    str = str.substring(0, index) + \".\" + str.substring(index);\n    // Trim the whole component (leaving at least one 0)\n    while(str[0] === \"0\" && str[1] !== \".\"){\n        str = str.substring(1);\n    }\n    // Trim the decimal component (leaving at least one 0)\n    while(str[str.length - 1] === \"0\" && str[str.length - 2] !== \".\"){\n        str = str.substring(0, str.length - 1);\n    }\n    return negative + str;\n}\nvar _format = /*#__PURE__*/ new WeakMap(), // The actual value (accounting for decimals)\n_val = /*#__PURE__*/ new WeakMap(), // A base-10 value to multiple values by to maintain the magnitude\n_tens = /*#__PURE__*/ new WeakMap(), _checkFormat = /*#__PURE__*/ new WeakSet(), _checkValue = /*#__PURE__*/ new WeakSet(), _add = /*#__PURE__*/ new WeakSet(), _sub = /*#__PURE__*/ new WeakSet(), _mul = /*#__PURE__*/ new WeakSet(), _div = /*#__PURE__*/ new WeakSet();\n/**\n *  A FixedNumber represents a value over its [[FixedFormat]]\n *  arithmetic field.\n *\n *  A FixedNumber can be used to perform math, losslessly, on\n *  values which have decmial places.\n *\n *  A FixedNumber has a fixed bit-width to store values in, and stores all\n *  values internally by multiplying the value by 10 raised to the power of\n *  %%decimals%%.\n *\n *  If operations are performed that cause a value to grow too high (close to\n *  positive infinity) or too low (close to negative infinity), the value\n *  is said to //overflow//.\n *\n *  For example, an 8-bit signed value, with 0 decimals may only be within\n *  the range ``-128`` to ``127``; so ``-128 - 1`` will overflow and become\n *  ``127``. Likewise, ``127 + 1`` will overflow and become ``-127``.\n *\n *  Many operation have a normal and //unsafe// variant. The normal variant\n *  will throw a [[NumericFaultError]] on any overflow, while the //unsafe//\n *  variant will silently allow overflow, corrupting its value value.\n *\n *  If operations are performed that cause a value to become too small\n *  (close to zero), the value loses precison and is said to //underflow//.\n *\n *  For example, an value with 1 decimal place may store a number as small\n *  as ``0.1``, but the value of ``0.1 / 2`` is ``0.05``, which cannot fit\n *  into 1 decimal place, so underflow occurs which means precision is lost\n *  and the value becomes ``0``.\n *\n *  Some operations have a normal and //signalling// variant. The normal\n *  variant will silently ignore underflow, while the //signalling// variant\n *  will thow a [[NumericFaultError]] on underflow.\n */ class FixedNumber {\n    /**\n     *  If true, negative values are permitted, otherwise only\n     *  positive values and zero are allowed.\n     */ get signed() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _format).signed;\n    }\n    /**\n     *  The number of bits available to store the value.\n     */ get width() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _format).width;\n    }\n    /**\n     *  The number of decimal places in the fixed-point arithment field.\n     */ get decimals() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _format).decimals;\n    }\n    /**\n     *  The value as an integer, based on the smallest unit the\n     *  [[decimals]] allow.\n     */ get value() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% added\n     *  to %%other%%, ignoring overflow.\n     */ addUnsafe(other) {\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _add, add).call(this, other);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% added\n     *  to %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */ add(other) {\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _add, add).call(this, other, \"add\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n     *  from %%this%%, ignoring overflow.\n     */ subUnsafe(other) {\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _sub, sub).call(this, other);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n     *  from %%this%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */ sub(other) {\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _sub, sub).call(this, other, \"sub\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%, ignoring overflow and underflow (precision loss).\n     */ mulUnsafe(other) {\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _mul, mul).call(this, other);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */ mul(other) {\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _mul, mul).call(this, other, \"mul\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs or if underflow (precision loss) occurs.\n     */ mulSignal(other) {\n        (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _checkFormat, checkFormat).call(this, other);\n        const value = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val) * (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(other, _val);\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(value % (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _tens) === BN_0, \"precision lost during signalling mul\", \"NUMERIC_FAULT\", {\n            operation: \"mulSignal\",\n            fault: \"underflow\",\n            value: this\n        });\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _checkValue, checkValue1).call(this, value / (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _tens), \"mulSignal\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%, ignoring underflow (precision loss). A\n     *  [[NumericFaultError]] is thrown if overflow occurs.\n     */ divUnsafe(other) {\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _div, div).call(this, other);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%, ignoring underflow (precision loss). A\n     *  [[NumericFaultError]] is thrown if overflow occurs.\n     */ div(other) {\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _div, div).call(this, other, \"div\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%. A [[NumericFaultError]] is thrown if underflow\n     *  (precision loss) occurs.\n     */ divSignal(other) {\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(other, _val) !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n            operation: \"div\",\n            fault: \"divide-by-zero\",\n            value: this\n        });\n        (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _checkFormat, checkFormat).call(this, other);\n        const value = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val) * (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _tens);\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(value % (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(other, _val) === BN_0, \"precision lost during signalling div\", \"NUMERIC_FAULT\", {\n            operation: \"divSignal\",\n            fault: \"underflow\",\n            value: this\n        });\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _checkValue, checkValue1).call(this, value / (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(other, _val), \"divSignal\");\n    }\n    /**\n     *  Returns a comparison result between %%this%% and %%other%%.\n     *\n     *  This is suitable for use in sorting, where ``-1`` implies %%this%%\n     *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies\n     *  both are equal.\n     */ cmp(other) {\n        let a = this.value, b = other.value;\n        // Coerce a and b to the same magnitude\n        const delta = this.decimals - other.decimals;\n        if (delta > 0) {\n            b *= getTens(delta);\n        } else if (delta < 0) {\n            a *= getTens(-delta);\n        }\n        // Comnpare\n        if (a < b) {\n            return -1;\n        }\n        if (a > b) {\n            return 1;\n        }\n        return 0;\n    }\n    /**\n     *  Returns true if %%other%% is equal to %%this%%.\n     */ eq(other) {\n        return this.cmp(other) === 0;\n    }\n    /**\n     *  Returns true if %%other%% is less than to %%this%%.\n     */ lt(other) {\n        return this.cmp(other) < 0;\n    }\n    /**\n     *  Returns true if %%other%% is less than or equal to %%this%%.\n     */ lte(other) {\n        return this.cmp(other) <= 0;\n    }\n    /**\n     *  Returns true if %%other%% is greater than to %%this%%.\n     */ gt(other) {\n        return this.cmp(other) > 0;\n    }\n    /**\n     *  Returns true if %%other%% is greater than or equal to %%this%%.\n     */ gte(other) {\n        return this.cmp(other) >= 0;\n    }\n    /**\n     *  Returns a new [[FixedNumber]] which is the largest **integer**\n     *  that is less than or equal to %%this%%.\n     *\n     *  The decimal component of the result will always be ``0``.\n     */ floor() {\n        let val = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val);\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val) < BN_0) {\n            val -= (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _tens) - BN_1;\n        }\n        val = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val) / (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _tens) * (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _tens);\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _checkValue, checkValue1).call(this, val, \"floor\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] which is the smallest **integer**\n     *  that is greater than or equal to %%this%%.\n     *\n     *  The decimal component of the result will always be ``0``.\n     */ ceiling() {\n        let val = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val);\n        if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val) > BN_0) {\n            val += (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _tens) - BN_1;\n        }\n        val = (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val) / (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _tens) * (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _tens);\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _checkValue, checkValue1).call(this, val, \"ceiling\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the decimal component\n     *  rounded up on ties at %%decimals%% places.\n     */ round(decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        // Not enough precision to not already be rounded\n        if (decimals >= this.decimals) {\n            return this;\n        }\n        const delta = this.decimals - decimals;\n        const bump = BN_5 * getTens(delta - 1);\n        let value = this.value + bump;\n        const tens = getTens(delta);\n        value = value / tens * tens;\n        checkValue(value, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _format), \"round\");\n        return new FixedNumber(_guard, value, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _format));\n    }\n    /**\n     *  Returns true if %%this%% is equal to ``0``.\n     */ isZero() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val) === BN_0;\n    }\n    /**\n     *  Returns true if %%this%% is less than ``0``.\n     */ isNegative() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val) < BN_0;\n    }\n    /**\n     *  Returns the string representation of %%this%%.\n     */ toString() {\n        return this._value;\n    }\n    /**\n     *  Returns a float approximation.\n     *\n     *  Due to IEEE 754 precission (or lack thereof), this function\n     *  can only return an approximation and most values will contain\n     *  rounding errors.\n     */ toUnsafeFloat() {\n        return parseFloat(this.toString());\n    }\n    /**\n     *  Return a new [[FixedNumber]] with the same value but has had\n     *  its field set to %%format%%.\n     *\n     *  This will throw if the value cannot fit into %%format%%.\n     */ toFormat(format) {\n        return FixedNumber.fromString(this.toString(), format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] for %%value%% divided by\n     *  %%decimal%% places with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted\n     *  for %%decimals%%) cannot fit in %%format%%, either due to overflow\n     *  or underflow (precision loss).\n     */ static fromValue(_value, _decimals, _format) {\n        const decimals = _decimals == null ? 0 : (0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.getNumber)(_decimals);\n        const format = getFormat(_format);\n        let value = (0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(_value, \"value\");\n        const delta = decimals - format.decimals;\n        if (delta > 0) {\n            const tens = getTens(delta);\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(value % tens === BN_0, \"value loses precision for format\", \"NUMERIC_FAULT\", {\n                operation: \"fromValue\",\n                fault: \"underflow\",\n                value: _value\n            });\n            value /= tens;\n        } else if (delta < 0) {\n            value *= getTens(-delta);\n        }\n        checkValue(value, format, \"fromValue\");\n        return new FixedNumber(_guard, value, format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n     *  in %%format%%, either due to overflow or underflow (precision loss).\n     */ static fromString(_value, _format) {\n        const match = _value.match(/^(-?)([0-9]*)\\.?([0-9]*)$/);\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(match && match[2].length + match[3].length > 0, \"invalid FixedNumber string value\", \"value\", _value);\n        const format = getFormat(_format);\n        let whole = match[2] || \"0\", decimal = match[3] || \"\";\n        // Pad out the decimals\n        while(decimal.length < format.decimals){\n            decimal += Zeros;\n        }\n        // Check precision is safe\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(decimal.substring(format.decimals).match(/^0*$/), \"too many decimals for format\", \"NUMERIC_FAULT\", {\n            operation: \"fromString\",\n            fault: \"underflow\",\n            value: _value\n        });\n        // Remove extra padding\n        decimal = decimal.substring(0, format.decimals);\n        const value = BigInt(match[1] + whole + decimal);\n        checkValue(value, format, \"fromString\");\n        return new FixedNumber(_guard, value, format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] with the big-endian representation\n     *  %%value%% with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n     *  in %%format%% due to overflow.\n     */ static fromBytes(_value, _format) {\n        let value = (0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.toBigInt)((0,_data_js__WEBPACK_IMPORTED_MODULE_4__.getBytes)(_value, \"value\"));\n        const format = getFormat(_format);\n        if (format.signed) {\n            value = (0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.fromTwos)(value, format.width);\n        }\n        checkValue(value, format, \"fromBytes\");\n        return new FixedNumber(_guard, value, format);\n    }\n    // Use this when changing this file to get some typing info,\n    // but then switch to any to mask the internal type\n    //constructor(guard: any, value: bigint, format: _FixedFormat) {\n    /**\n     *  @private\n     */ constructor(guard, value, format){\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_5__._)(this, _checkFormat);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_5__._)(this, _checkValue);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_5__._)(this, _add);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_5__._)(this, _sub);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_5__._)(this, _mul);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_5__._)(this, _div);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _format, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _val, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _tens, {\n            writable: true,\n            value: void 0\n        });\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertPrivate)(guard, _guard, \"FixedNumber\");\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__._)(this, _val, value);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__._)(this, _format, format);\n        const _value = toString(value, format.decimals);\n        (0,_properties_js__WEBPACK_IMPORTED_MODULE_8__.defineProperties)(this, {\n            format: format.name,\n            _value\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__._)(this, _tens, getTens(format.decimals));\n    }\n} //const f1 = FixedNumber.fromString(\"12.56\", \"fixed16x2\");\n //const f2 = FixedNumber.fromString(\"0.3\", \"fixed16x2\");\n //console.log(f1.divSignal(f2));\n //const BUMP = FixedNumber.from(\"0.5\");\n //# sourceMappingURL=fixednumber.js.map\nfunction checkFormat(other) {\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(this.format === other.format, \"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n}\nfunction checkValue1(val, safeOp) {\n    /*\n                const width = BigInt(this.width);\n                if (this.signed) {\n                    const limit = (BN_1 << (width - BN_1));\n                    assert(safeOp == null || (val >= -limit  && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n                        operation: <string>safeOp, fault: \"overflow\", value: val\n                    });\n        \n                    if (val > BN_0) {\n                        val = fromTwos(mask(val, width), width);\n                    } else {\n                        val = -fromTwos(mask(-val, width), width);\n                    }\n        \n                } else {\n                    const masked = mask(val, width);\n                    assert(safeOp == null || (val >= 0 && val === masked), \"overflow\", \"NUMERIC_FAULT\", {\n                        operation: <string>safeOp, fault: \"overflow\", value: val\n                    });\n                    val = masked;\n                }\n        */ val = checkValue(val, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _format), safeOp);\n    return new FixedNumber(_guard, val, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _format));\n}\nfunction add(o, safeOp) {\n    (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _checkFormat, checkFormat).call(this, o);\n    return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _checkValue, checkValue1).call(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val) + (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(o, _val), safeOp);\n}\nfunction sub(o, safeOp) {\n    (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _checkFormat, checkFormat).call(this, o);\n    return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _checkValue, checkValue1).call(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val) - (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(o, _val), safeOp);\n}\nfunction mul(o, safeOp) {\n    (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _checkFormat, checkFormat).call(this, o);\n    return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _checkValue, checkValue1).call(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val) * (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(o, _val) / (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _tens), safeOp);\n}\nfunction div(o, safeOp) {\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(o, _val) !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n        operation: \"div\",\n        fault: \"divide-by-zero\",\n        value: this\n    });\n    (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _checkFormat, checkFormat).call(this, o);\n    return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _checkValue, checkValue1).call(this, (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _val) * (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(this, _tens) / (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_2__._)(o, _val), safeOp);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fixednumber.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/geturl-browser.js":
/*!**************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/geturl-browser.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGetUrl: function() { return /* binding */ createGetUrl; },\n/* harmony export */   getUrl: function() { return /* binding */ getUrl; }\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n\n// @TODO: timeout is completely ignored; start a Promise.any with a reject?\nfunction createGetUrl(options) {\n    async function getUrl(req, _signal) {\n        const protocol = req.url.split(\":\")[0].toLowerCase();\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(protocol === \"http\" || protocol === \"https\", \"unsupported protocol \".concat(protocol), \"UNSUPPORTED_OPERATION\", {\n            info: {\n                protocol\n            },\n            operation: \"request\"\n        });\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(protocol === \"https\" || !req.credentials || req.allowInsecureAuthentication, \"insecure authorized connections unsupported\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"request\"\n        });\n        let signal = undefined;\n        if (_signal) {\n            const controller = new AbortController();\n            signal = controller.signal;\n            _signal.addListener(()=>{\n                controller.abort();\n            });\n        }\n        const init = {\n            method: req.method,\n            headers: new Headers(Array.from(req)),\n            body: req.body || undefined,\n            signal\n        };\n        const resp = await fetch(req.url, init);\n        const headers = {};\n        resp.headers.forEach((value, key)=>{\n            headers[key.toLowerCase()] = value;\n        });\n        const respBody = await resp.arrayBuffer();\n        const body = respBody == null ? null : new Uint8Array(respBody);\n        return {\n            statusCode: resp.status,\n            statusMessage: resp.statusText,\n            headers,\n            body\n        };\n    }\n    return getUrl;\n}\n// @TODO: remove in v7; provided for backwards compat\nconst defaultGetUrl = createGetUrl({});\nasync function getUrl(req, _signal) {\n    return defaultGetUrl(req, _signal);\n} //# sourceMappingURL=geturl-browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvZ2V0dXJsLWJyb3dzZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFDO0FBQ3JDLDJFQUEyRTtBQUNwRSxTQUFTQyxhQUFhQyxPQUFPO0lBQ2hDLGVBQWVDLE9BQU9DLEdBQUcsRUFBRUMsT0FBTztRQUM5QixNQUFNQyxXQUFXRixJQUFJRyxHQUFHLENBQUNDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDQyxXQUFXO1FBQ2xEVCxrREFBTUEsQ0FBQ00sYUFBYSxVQUFVQSxhQUFhLFNBQVMsd0JBQWlDLE9BQVRBLFdBQVkseUJBQXlCO1lBQzdHSSxNQUFNO2dCQUFFSjtZQUFTO1lBQ2pCSyxXQUFXO1FBQ2Y7UUFDQVgsa0RBQU1BLENBQUNNLGFBQWEsV0FBVyxDQUFDRixJQUFJUSxXQUFXLElBQUlSLElBQUlTLDJCQUEyQixFQUFFLCtDQUErQyx5QkFBeUI7WUFDeEpGLFdBQVc7UUFDZjtRQUNBLElBQUlHLFNBQVNDO1FBQ2IsSUFBSVYsU0FBUztZQUNULE1BQU1XLGFBQWEsSUFBSUM7WUFDdkJILFNBQVNFLFdBQVdGLE1BQU07WUFDMUJULFFBQVFhLFdBQVcsQ0FBQztnQkFBUUYsV0FBV0csS0FBSztZQUFJO1FBQ3BEO1FBQ0EsTUFBTUMsT0FBTztZQUNUQyxRQUFRakIsSUFBSWlCLE1BQU07WUFDbEJDLFNBQVMsSUFBSUMsUUFBUUMsTUFBTUMsSUFBSSxDQUFDckI7WUFDaENzQixNQUFNdEIsSUFBSXNCLElBQUksSUFBSVg7WUFDbEJEO1FBQ0o7UUFDQSxNQUFNYSxPQUFPLE1BQU1DLE1BQU14QixJQUFJRyxHQUFHLEVBQUVhO1FBQ2xDLE1BQU1FLFVBQVUsQ0FBQztRQUNqQkssS0FBS0wsT0FBTyxDQUFDTyxPQUFPLENBQUMsQ0FBQ0MsT0FBT0M7WUFDekJULE9BQU8sQ0FBQ1MsSUFBSXRCLFdBQVcsR0FBRyxHQUFHcUI7UUFDakM7UUFDQSxNQUFNRSxXQUFXLE1BQU1MLEtBQUtNLFdBQVc7UUFDdkMsTUFBTVAsT0FBTyxZQUFhLE9BQVEsT0FBTyxJQUFJUSxXQUFXRjtRQUN4RCxPQUFPO1lBQ0hHLFlBQVlSLEtBQUtTLE1BQU07WUFDdkJDLGVBQWVWLEtBQUtXLFVBQVU7WUFDOUJoQjtZQUFTSTtRQUNiO0lBQ0o7SUFDQSxPQUFPdkI7QUFDWDtBQUNBLHFEQUFxRDtBQUNyRCxNQUFNb0MsZ0JBQWdCdEMsYUFBYSxDQUFDO0FBQzdCLGVBQWVFLE9BQU9DLEdBQUcsRUFBRUMsT0FBTztJQUNyQyxPQUFPa0MsY0FBY25DLEtBQUtDO0FBQzlCLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvZ2V0dXJsLWJyb3dzZXIuanM/YzAyNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnQgfSBmcm9tIFwiLi9lcnJvcnMuanNcIjtcbi8vIEBUT0RPOiB0aW1lb3V0IGlzIGNvbXBsZXRlbHkgaWdub3JlZDsgc3RhcnQgYSBQcm9taXNlLmFueSB3aXRoIGEgcmVqZWN0P1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUdldFVybChvcHRpb25zKSB7XG4gICAgYXN5bmMgZnVuY3Rpb24gZ2V0VXJsKHJlcSwgX3NpZ25hbCkge1xuICAgICAgICBjb25zdCBwcm90b2NvbCA9IHJlcS51cmwuc3BsaXQoXCI6XCIpWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGFzc2VydChwcm90b2NvbCA9PT0gXCJodHRwXCIgfHwgcHJvdG9jb2wgPT09IFwiaHR0cHNcIiwgYHVuc3VwcG9ydGVkIHByb3RvY29sICR7cHJvdG9jb2x9YCwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgaW5mbzogeyBwcm90b2NvbCB9LFxuICAgICAgICAgICAgb3BlcmF0aW9uOiBcInJlcXVlc3RcIlxuICAgICAgICB9KTtcbiAgICAgICAgYXNzZXJ0KHByb3RvY29sID09PSBcImh0dHBzXCIgfHwgIXJlcS5jcmVkZW50aWFscyB8fCByZXEuYWxsb3dJbnNlY3VyZUF1dGhlbnRpY2F0aW9uLCBcImluc2VjdXJlIGF1dGhvcml6ZWQgY29ubmVjdGlvbnMgdW5zdXBwb3J0ZWRcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcInJlcXVlc3RcIlxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHNpZ25hbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKF9zaWduYWwpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgICAgICBzaWduYWwgPSBjb250cm9sbGVyLnNpZ25hbDtcbiAgICAgICAgICAgIF9zaWduYWwuYWRkTGlzdGVuZXIoKCkgPT4geyBjb250cm9sbGVyLmFib3J0KCk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluaXQgPSB7XG4gICAgICAgICAgICBtZXRob2Q6IHJlcS5tZXRob2QsXG4gICAgICAgICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyhBcnJheS5mcm9tKHJlcSkpLFxuICAgICAgICAgICAgYm9keTogcmVxLmJvZHkgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2lnbmFsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBmZXRjaChyZXEudXJsLCBpbml0KTtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgICAgICByZXNwLmhlYWRlcnMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgaGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3BCb2R5ID0gYXdhaXQgcmVzcC5hcnJheUJ1ZmZlcigpO1xuICAgICAgICBjb25zdCBib2R5ID0gKHJlc3BCb2R5ID09IG51bGwpID8gbnVsbCA6IG5ldyBVaW50OEFycmF5KHJlc3BCb2R5KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IHJlc3Auc3RhdHVzLFxuICAgICAgICAgICAgc3RhdHVzTWVzc2FnZTogcmVzcC5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgaGVhZGVycywgYm9keVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZ2V0VXJsO1xufVxuLy8gQFRPRE86IHJlbW92ZSBpbiB2NzsgcHJvdmlkZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRcbmNvbnN0IGRlZmF1bHRHZXRVcmwgPSBjcmVhdGVHZXRVcmwoe30pO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFVybChyZXEsIF9zaWduYWwpIHtcbiAgICByZXR1cm4gZGVmYXVsdEdldFVybChyZXEsIF9zaWduYWwpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0dXJsLWJyb3dzZXIuanMubWFwIl0sIm5hbWVzIjpbImFzc2VydCIsImNyZWF0ZUdldFVybCIsIm9wdGlvbnMiLCJnZXRVcmwiLCJyZXEiLCJfc2lnbmFsIiwicHJvdG9jb2wiLCJ1cmwiLCJzcGxpdCIsInRvTG93ZXJDYXNlIiwiaW5mbyIsIm9wZXJhdGlvbiIsImNyZWRlbnRpYWxzIiwiYWxsb3dJbnNlY3VyZUF1dGhlbnRpY2F0aW9uIiwic2lnbmFsIiwidW5kZWZpbmVkIiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsImFkZExpc3RlbmVyIiwiYWJvcnQiLCJpbml0IiwibWV0aG9kIiwiaGVhZGVycyIsIkhlYWRlcnMiLCJBcnJheSIsImZyb20iLCJib2R5IiwicmVzcCIsImZldGNoIiwiZm9yRWFjaCIsInZhbHVlIiwia2V5IiwicmVzcEJvZHkiLCJhcnJheUJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJzdGF0dXNDb2RlIiwic3RhdHVzIiwic3RhdHVzTWVzc2FnZSIsInN0YXR1c1RleHQiLCJkZWZhdWx0R2V0VXJsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/geturl-browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js":
/*!*****************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/maths.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromTwos: function() { return /* binding */ fromTwos; },\n/* harmony export */   getBigInt: function() { return /* binding */ getBigInt; },\n/* harmony export */   getNumber: function() { return /* binding */ getNumber; },\n/* harmony export */   getUint: function() { return /* binding */ getUint; },\n/* harmony export */   mask: function() { return /* binding */ mask; },\n/* harmony export */   toBeArray: function() { return /* binding */ toBeArray; },\n/* harmony export */   toBeHex: function() { return /* binding */ toBeHex; },\n/* harmony export */   toBigInt: function() { return /* binding */ toBigInt; },\n/* harmony export */   toNumber: function() { return /* binding */ toNumber; },\n/* harmony export */   toQuantity: function() { return /* binding */ toQuantity; },\n/* harmony export */   toTwos: function() { return /* binding */ toTwos; }\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/**\n *  Some mathematic operations.\n *\n *  @_subsection: api/utils:Math Helpers  [about-maths]\n */ \n\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\n//const BN_Max256 = (BN_1 << BigInt(256)) - BN_1;\n// IEEE 754 support 53-bits of mantissa\nconst maxValue = 0x1fffffffffffff;\n/**\n *  Convert %%value%% from a twos-compliment representation of %%width%%\n *  bits to its value.\n *\n *  If the highest bit is ``1``, the result will be negative.\n */ function fromTwos(_value, _width) {\n    const value = getUint(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(value >> width === BN_0, \"overflow\", \"NUMERIC_FAULT\", {\n        operation: \"fromTwos\",\n        fault: \"overflow\",\n        value: _value\n    });\n    // Top bit set; treat as a negative value\n    if (value >> width - BN_1) {\n        const mask = (BN_1 << width) - BN_1;\n        return -((~value & mask) + BN_1);\n    }\n    return value;\n}\n/**\n *  Convert %%value%% to a twos-compliment representation of\n *  %%width%% bits.\n *\n *  The result will always be positive.\n */ function toTwos(_value, _width) {\n    let value = getBigInt(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n    const limit = BN_1 << width - BN_1;\n    if (value < BN_0) {\n        value = -value;\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(value <= limit, \"too low\", \"NUMERIC_FAULT\", {\n            operation: \"toTwos\",\n            fault: \"overflow\",\n            value: _value\n        });\n        const mask = (BN_1 << width) - BN_1;\n        return (~value & mask) + BN_1;\n    } else {\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(value < limit, \"too high\", \"NUMERIC_FAULT\", {\n            operation: \"toTwos\",\n            fault: \"overflow\",\n            value: _value\n        });\n    }\n    return value;\n}\n/**\n *  Mask %%value%% with a bitmask of %%bits%% ones.\n */ function mask(_value, _bits) {\n    const value = getUint(_value, \"value\");\n    const bits = BigInt(getNumber(_bits, \"bits\"));\n    return value & (BN_1 << bits) - BN_1;\n}\n/**\n *  Gets a BigInt from %%value%%. If it is an invalid value for\n *  a BigInt, then an ArgumentError will be thrown for %%name%%.\n */ function getBigInt(value, name) {\n    switch(typeof value){\n        case \"bigint\":\n            return value;\n        case \"number\":\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Number.isInteger(value), \"underflow\", name || \"value\", value);\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return BigInt(value);\n        case \"string\":\n            try {\n                if (value === \"\") {\n                    throw new Error(\"empty string\");\n                }\n                if (value[0] === \"-\" && value[1] !== \"-\") {\n                    return -BigInt(value.substring(1));\n                }\n                return BigInt(value);\n            } catch (e) {\n                (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid BigNumberish string: \".concat(e.message), name || \"value\", value);\n            }\n    }\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid BigNumberish value\", name || \"value\", value);\n}\n/**\n *  Returns %%value%% as a bigint, validating it is valid as a bigint\n *  value and that it is positive.\n */ function getUint(value, name) {\n    const result = getBigInt(value, name);\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(result >= BN_0, \"unsigned value cannot be negative\", \"NUMERIC_FAULT\", {\n        fault: \"overflow\",\n        operation: \"getUint\",\n        value\n    });\n    return result;\n}\nconst Nibbles = \"0123456789abcdef\";\n/*\n * Converts %%value%% to a BigInt. If %%value%% is a Uint8Array, it\n * is treated as Big Endian data.\n */ function toBigInt(value) {\n    if (value instanceof Uint8Array) {\n        let result = \"0x0\";\n        for (const v of value){\n            result += Nibbles[v >> 4];\n            result += Nibbles[v & 0x0f];\n        }\n        return BigInt(result);\n    }\n    return getBigInt(value);\n}\n/**\n *  Gets a //number// from %%value%%. If it is an invalid value for\n *  a //number//, then an ArgumentError will be thrown for %%name%%.\n */ function getNumber(value, name) {\n    switch(typeof value){\n        case \"bigint\":\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return Number(value);\n        case \"number\":\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Number.isInteger(value), \"underflow\", name || \"value\", value);\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return value;\n        case \"string\":\n            try {\n                if (value === \"\") {\n                    throw new Error(\"empty string\");\n                }\n                return getNumber(BigInt(value), name);\n            } catch (e) {\n                (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid numeric string: \".concat(e.message), name || \"value\", value);\n            }\n    }\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid numeric value\", name || \"value\", value);\n}\n/**\n *  Converts %%value%% to a number. If %%value%% is a Uint8Array, it\n *  is treated as Big Endian data. Throws if the value is not safe.\n */ function toNumber(value) {\n    return getNumber(toBigInt(value));\n}\n/**\n *  Converts %%value%% to a Big Endian hexstring, optionally padded to\n *  %%width%% bytes.\n */ function toBeHex(_value, _width) {\n    const value = getUint(_value, \"value\");\n    let result = value.toString(16);\n    if (_width == null) {\n        // Ensure the value is of even length\n        if (result.length % 2) {\n            result = \"0\" + result;\n        }\n    } else {\n        const width = getNumber(_width, \"width\");\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(width * 2 >= result.length, \"value exceeds width (\".concat(width, \" bytes)\"), \"NUMERIC_FAULT\", {\n            operation: \"toBeHex\",\n            fault: \"overflow\",\n            value: _value\n        });\n        // Pad the value to the required width\n        while(result.length < width * 2){\n            result = \"0\" + result;\n        }\n    }\n    return \"0x\" + result;\n}\n/**\n *  Converts %%value%% to a Big Endian Uint8Array.\n */ function toBeArray(_value) {\n    const value = getUint(_value, \"value\");\n    if (value === BN_0) {\n        return new Uint8Array([]);\n    }\n    let hex = value.toString(16);\n    if (hex.length % 2) {\n        hex = \"0\" + hex;\n    }\n    const result = new Uint8Array(hex.length / 2);\n    for(let i = 0; i < result.length; i++){\n        const offset = i * 2;\n        result[i] = parseInt(hex.substring(offset, offset + 2), 16);\n    }\n    return result;\n}\n/**\n *  Returns a [[HexString]] for %%value%% safe to use as a //Quantity//.\n *\n *  A //Quantity// does not have and leading 0 values unless the value is\n *  the literal value `0x0`. This is most commonly used for JSSON-RPC\n *  numeric values.\n */ function toQuantity(value) {\n    let result = (0,_data_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)((0,_data_js__WEBPACK_IMPORTED_MODULE_1__.isBytesLike)(value) ? value : toBeArray(value)).substring(2);\n    while(result.startsWith(\"0\")){\n        result = result.substring(1);\n    }\n    if (result === \"\") {\n        result = \"0\";\n    }\n    return \"0x\" + result;\n} //# sourceMappingURL=maths.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js":
/*!**********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/properties.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineProperties: function() { return /* binding */ defineProperties; },\n/* harmony export */   resolveProperties: function() { return /* binding */ resolveProperties; }\n/* harmony export */ });\n/**\n *  Property helper functions.\n *\n *  @_subsection api/utils:Properties  [about-properties]\n */ function checkType(value, type, name) {\n    const types = type.split(\"|\").map((t)=>t.trim());\n    for(let i = 0; i < types.length; i++){\n        switch(type){\n            case \"any\":\n                return;\n            case \"bigint\":\n            case \"boolean\":\n            case \"number\":\n            case \"string\":\n                if (typeof value === type) {\n                    return;\n                }\n        }\n    }\n    const error = new Error(\"invalid value for type \".concat(type));\n    error.code = \"INVALID_ARGUMENT\";\n    error.argument = \"value.\".concat(name);\n    error.value = value;\n    throw error;\n}\n/**\n *  Resolves to a new object that is a copy of %%value%%, but with all\n *  values resolved.\n */ async function resolveProperties(value) {\n    const keys = Object.keys(value);\n    const results = await Promise.all(keys.map((k)=>Promise.resolve(value[k])));\n    return results.reduce((accum, v, index)=>{\n        accum[keys[index]] = v;\n        return accum;\n    }, {});\n}\n/**\n *  Assigns the %%values%% to %%target%% as read-only values.\n *\n *  It %%types%% is specified, the values are checked.\n */ function defineProperties(target, values, types) {\n    for(let key in values){\n        let value = values[key];\n        const type = types ? types[key] : null;\n        if (type) {\n            checkType(value, type, key);\n        }\n        Object.defineProperty(target, key, {\n            enumerable: true,\n            value,\n            writable: false\n        });\n    }\n} //# sourceMappingURL=properties.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvcHJvcGVydGllcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7O0NBSUMsR0FDRCxTQUFTQSxVQUFVQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsSUFBSTtJQUNoQyxNQUFNQyxRQUFRRixLQUFLRyxLQUFLLENBQUMsS0FBS0MsR0FBRyxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFQyxJQUFJO0lBQzdDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxNQUFNTSxNQUFNLEVBQUVELElBQUs7UUFDbkMsT0FBUVA7WUFDSixLQUFLO2dCQUNEO1lBQ0osS0FBSztZQUNMLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztnQkFDRCxJQUFJLE9BQVFELFVBQVdDLE1BQU07b0JBQ3pCO2dCQUNKO1FBQ1I7SUFDSjtJQUNBLE1BQU1TLFFBQVEsSUFBSUMsTUFBTSwwQkFBK0IsT0FBTFY7SUFDbERTLE1BQU1FLElBQUksR0FBRztJQUNiRixNQUFNRyxRQUFRLEdBQUcsU0FBYyxPQUFMWDtJQUMxQlEsTUFBTVYsS0FBSyxHQUFHQTtJQUNkLE1BQU1VO0FBQ1Y7QUFDQTs7O0NBR0MsR0FDTSxlQUFlSSxrQkFBa0JkLEtBQUs7SUFDekMsTUFBTWUsT0FBT0MsT0FBT0QsSUFBSSxDQUFDZjtJQUN6QixNQUFNaUIsVUFBVSxNQUFNQyxRQUFRQyxHQUFHLENBQUNKLEtBQUtWLEdBQUcsQ0FBQyxDQUFDZSxJQUFNRixRQUFRRyxPQUFPLENBQUNyQixLQUFLLENBQUNvQixFQUFFO0lBQzFFLE9BQU9ILFFBQVFLLE1BQU0sQ0FBQyxDQUFDQyxPQUFPQyxHQUFHQztRQUM3QkYsS0FBSyxDQUFDUixJQUFJLENBQUNVLE1BQU0sQ0FBQyxHQUFHRDtRQUNyQixPQUFPRDtJQUNYLEdBQUcsQ0FBQztBQUNSO0FBQ0E7Ozs7Q0FJQyxHQUNNLFNBQVNHLGlCQUFpQkMsTUFBTSxFQUFFQyxNQUFNLEVBQUV6QixLQUFLO0lBQ2xELElBQUssSUFBSTBCLE9BQU9ELE9BQVE7UUFDcEIsSUFBSTVCLFFBQVE0QixNQUFNLENBQUNDLElBQUk7UUFDdkIsTUFBTTVCLE9BQVFFLFFBQVFBLEtBQUssQ0FBQzBCLElBQUksR0FBRztRQUNuQyxJQUFJNUIsTUFBTTtZQUNORixVQUFVQyxPQUFPQyxNQUFNNEI7UUFDM0I7UUFDQWIsT0FBT2MsY0FBYyxDQUFDSCxRQUFRRSxLQUFLO1lBQUVFLFlBQVk7WUFBTS9CO1lBQU9nQyxVQUFVO1FBQU07SUFDbEY7QUFDSixFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3V0aWxzL3Byb3BlcnRpZXMuanM/MDcxMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBQcm9wZXJ0eSBoZWxwZXIgZnVuY3Rpb25zLlxuICpcbiAqICBAX3N1YnNlY3Rpb24gYXBpL3V0aWxzOlByb3BlcnRpZXMgIFthYm91dC1wcm9wZXJ0aWVzXVxuICovXG5mdW5jdGlvbiBjaGVja1R5cGUodmFsdWUsIHR5cGUsIG5hbWUpIHtcbiAgICBjb25zdCB0eXBlcyA9IHR5cGUuc3BsaXQoXCJ8XCIpLm1hcCh0ID0+IHQudHJpbSgpKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImFueVwiOlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYGludmFsaWQgdmFsdWUgZm9yIHR5cGUgJHt0eXBlfWApO1xuICAgIGVycm9yLmNvZGUgPSBcIklOVkFMSURfQVJHVU1FTlRcIjtcbiAgICBlcnJvci5hcmd1bWVudCA9IGB2YWx1ZS4ke25hbWV9YDtcbiAgICBlcnJvci52YWx1ZSA9IHZhbHVlO1xuICAgIHRocm93IGVycm9yO1xufVxuLyoqXG4gKiAgUmVzb2x2ZXMgdG8gYSBuZXcgb2JqZWN0IHRoYXQgaXMgYSBjb3B5IG9mICUldmFsdWUlJSwgYnV0IHdpdGggYWxsXG4gKiAgdmFsdWVzIHJlc29sdmVkLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZVByb3BlcnRpZXModmFsdWUpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChrZXlzLm1hcCgoaykgPT4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlW2tdKSkpO1xuICAgIHJldHVybiByZXN1bHRzLnJlZHVjZSgoYWNjdW0sIHYsIGluZGV4KSA9PiB7XG4gICAgICAgIGFjY3VtW2tleXNbaW5kZXhdXSA9IHY7XG4gICAgICAgIHJldHVybiBhY2N1bTtcbiAgICB9LCB7fSk7XG59XG4vKipcbiAqICBBc3NpZ25zIHRoZSAlJXZhbHVlcyUlIHRvICUldGFyZ2V0JSUgYXMgcmVhZC1vbmx5IHZhbHVlcy5cbiAqXG4gKiAgSXQgJSV0eXBlcyUlIGlzIHNwZWNpZmllZCwgdGhlIHZhbHVlcyBhcmUgY2hlY2tlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCB2YWx1ZXMsIHR5cGVzKSB7XG4gICAgZm9yIChsZXQga2V5IGluIHZhbHVlcykge1xuICAgICAgICBsZXQgdmFsdWUgPSB2YWx1ZXNba2V5XTtcbiAgICAgICAgY29uc3QgdHlwZSA9ICh0eXBlcyA/IHR5cGVzW2tleV0gOiBudWxsKTtcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIGNoZWNrVHlwZSh2YWx1ZSwgdHlwZSwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWUsIHdyaXRhYmxlOiBmYWxzZSB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wZXJ0aWVzLmpzLm1hcCJdLCJuYW1lcyI6WyJjaGVja1R5cGUiLCJ2YWx1ZSIsInR5cGUiLCJuYW1lIiwidHlwZXMiLCJzcGxpdCIsIm1hcCIsInQiLCJ0cmltIiwiaSIsImxlbmd0aCIsImVycm9yIiwiRXJyb3IiLCJjb2RlIiwiYXJndW1lbnQiLCJyZXNvbHZlUHJvcGVydGllcyIsImtleXMiLCJPYmplY3QiLCJyZXN1bHRzIiwiUHJvbWlzZSIsImFsbCIsImsiLCJyZXNvbHZlIiwicmVkdWNlIiwiYWNjdW0iLCJ2IiwiaW5kZXgiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwidmFsdWVzIiwia2V5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/rlp-decode.js":
/*!**********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/rlp-decode.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeRlp: function() { return /* binding */ decodeRlp; }\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n//See: https://github.com/ethereum/wiki/wiki/RLP\n\n\n\nfunction hexlifyByte(value) {\n    let result = value.toString(16);\n    while(result.length < 2){\n        result = \"0\" + result;\n    }\n    return \"0x\" + result;\n}\nfunction unarrayifyInteger(data, offset, length) {\n    let result = 0;\n    for(let i = 0; i < length; i++){\n        result = result * 256 + data[offset + i];\n    }\n    return result;\n}\nfunction _decodeChildren(data, offset, childOffset, length) {\n    const result = [];\n    while(childOffset < offset + 1 + length){\n        const decoded = _decode(data, childOffset);\n        result.push(decoded.result);\n        childOffset += decoded.consumed;\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(childOffset <= offset + 1 + length, \"child data too short\", \"BUFFER_OVERRUN\", {\n            buffer: data,\n            length,\n            offset\n        });\n    }\n    return {\n        consumed: 1 + length,\n        result: result\n    };\n}\n// returns { consumed: number, result: Object }\nfunction _decode(data, offset) {\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(data.length !== 0, \"data too short\", \"BUFFER_OVERRUN\", {\n        buffer: data,\n        length: 0,\n        offset: 1\n    });\n    const checkOffset = (offset)=>{\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(offset <= data.length, \"data short segment too short\", \"BUFFER_OVERRUN\", {\n            buffer: data,\n            length: data.length,\n            offset\n        });\n    };\n    // Array with extra length prefix\n    if (data[offset] >= 0xf8) {\n        const lengthLength = data[offset] - 0xf7;\n        checkOffset(offset + 1 + lengthLength);\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        checkOffset(offset + 1 + lengthLength + length);\n        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n    } else if (data[offset] >= 0xc0) {\n        const length = data[offset] - 0xc0;\n        checkOffset(offset + 1 + length);\n        return _decodeChildren(data, offset, offset + 1, length);\n    } else if (data[offset] >= 0xb8) {\n        const lengthLength = data[offset] - 0xb7;\n        checkOffset(offset + 1 + lengthLength);\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        checkOffset(offset + 1 + lengthLength + length);\n        const result = (0,_data_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n        return {\n            consumed: 1 + lengthLength + length,\n            result: result\n        };\n    } else if (data[offset] >= 0x80) {\n        const length = data[offset] - 0x80;\n        checkOffset(offset + 1 + length);\n        const result = (0,_data_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(data.slice(offset + 1, offset + 1 + length));\n        return {\n            consumed: 1 + length,\n            result: result\n        };\n    }\n    return {\n        consumed: 1,\n        result: hexlifyByte(data[offset])\n    };\n}\n/**\n *  Decodes %%data%% into the structured data it represents.\n */ function decodeRlp(_data) {\n    const data = (0,_data_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_data, \"data\");\n    const decoded = _decode(data, 0);\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(decoded.consumed === data.length, \"unexpected junk after rlp payload\", \"data\", _data);\n    return decoded.result;\n} //# sourceMappingURL=rlp-decode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvcmxwLWRlY29kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnREFBZ0Q7QUFDWjtBQUNpQjtBQUNoQjtBQUNyQyxTQUFTSSxZQUFZQyxLQUFLO0lBQ3RCLElBQUlDLFNBQVNELE1BQU1FLFFBQVEsQ0FBQztJQUM1QixNQUFPRCxPQUFPRSxNQUFNLEdBQUcsRUFBRztRQUN0QkYsU0FBUyxNQUFNQTtJQUNuQjtJQUNBLE9BQU8sT0FBT0E7QUFDbEI7QUFDQSxTQUFTRyxrQkFBa0JDLElBQUksRUFBRUMsTUFBTSxFQUFFSCxNQUFNO0lBQzNDLElBQUlGLFNBQVM7SUFDYixJQUFLLElBQUlNLElBQUksR0FBR0EsSUFBSUosUUFBUUksSUFBSztRQUM3Qk4sU0FBUyxTQUFVLE1BQU9JLElBQUksQ0FBQ0MsU0FBU0MsRUFBRTtJQUM5QztJQUNBLE9BQU9OO0FBQ1g7QUFDQSxTQUFTTyxnQkFBZ0JILElBQUksRUFBRUMsTUFBTSxFQUFFRyxXQUFXLEVBQUVOLE1BQU07SUFDdEQsTUFBTUYsU0FBUyxFQUFFO0lBQ2pCLE1BQU9RLGNBQWNILFNBQVMsSUFBSUgsT0FBUTtRQUN0QyxNQUFNTyxVQUFVQyxRQUFRTixNQUFNSTtRQUM5QlIsT0FBT1csSUFBSSxDQUFDRixRQUFRVCxNQUFNO1FBQzFCUSxlQUFlQyxRQUFRRyxRQUFRO1FBQy9CakIsa0RBQU1BLENBQUNhLGVBQWVILFNBQVMsSUFBSUgsUUFBUSx3QkFBd0Isa0JBQWtCO1lBQ2pGVyxRQUFRVDtZQUFNRjtZQUFRRztRQUMxQjtJQUNKO0lBQ0EsT0FBTztRQUFFTyxVQUFXLElBQUlWO1FBQVNGLFFBQVFBO0lBQU87QUFDcEQ7QUFDQSwrQ0FBK0M7QUFDL0MsU0FBU1UsUUFBUU4sSUFBSSxFQUFFQyxNQUFNO0lBQ3pCVixrREFBTUEsQ0FBQ1MsS0FBS0YsTUFBTSxLQUFLLEdBQUcsa0JBQWtCLGtCQUFrQjtRQUMxRFcsUUFBUVQ7UUFBTUYsUUFBUTtRQUFHRyxRQUFRO0lBQ3JDO0lBQ0EsTUFBTVMsY0FBYyxDQUFDVDtRQUNqQlYsa0RBQU1BLENBQUNVLFVBQVVELEtBQUtGLE1BQU0sRUFBRSxnQ0FBZ0Msa0JBQWtCO1lBQzVFVyxRQUFRVDtZQUFNRixRQUFRRSxLQUFLRixNQUFNO1lBQUVHO1FBQ3ZDO0lBQ0o7SUFDQSxpQ0FBaUM7SUFDakMsSUFBSUQsSUFBSSxDQUFDQyxPQUFPLElBQUksTUFBTTtRQUN0QixNQUFNVSxlQUFlWCxJQUFJLENBQUNDLE9BQU8sR0FBRztRQUNwQ1MsWUFBWVQsU0FBUyxJQUFJVTtRQUN6QixNQUFNYixTQUFTQyxrQkFBa0JDLE1BQU1DLFNBQVMsR0FBR1U7UUFDbkRELFlBQVlULFNBQVMsSUFBSVUsZUFBZWI7UUFDeEMsT0FBT0ssZ0JBQWdCSCxNQUFNQyxRQUFRQSxTQUFTLElBQUlVLGNBQWNBLGVBQWViO0lBQ25GLE9BQ0ssSUFBSUUsSUFBSSxDQUFDQyxPQUFPLElBQUksTUFBTTtRQUMzQixNQUFNSCxTQUFTRSxJQUFJLENBQUNDLE9BQU8sR0FBRztRQUM5QlMsWUFBWVQsU0FBUyxJQUFJSDtRQUN6QixPQUFPSyxnQkFBZ0JILE1BQU1DLFFBQVFBLFNBQVMsR0FBR0g7SUFDckQsT0FDSyxJQUFJRSxJQUFJLENBQUNDLE9BQU8sSUFBSSxNQUFNO1FBQzNCLE1BQU1VLGVBQWVYLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBQ3BDUyxZQUFZVCxTQUFTLElBQUlVO1FBQ3pCLE1BQU1iLFNBQVNDLGtCQUFrQkMsTUFBTUMsU0FBUyxHQUFHVTtRQUNuREQsWUFBWVQsU0FBUyxJQUFJVSxlQUFlYjtRQUN4QyxNQUFNRixTQUFTTixpREFBT0EsQ0FBQ1UsS0FBS1ksS0FBSyxDQUFDWCxTQUFTLElBQUlVLGNBQWNWLFNBQVMsSUFBSVUsZUFBZWI7UUFDekYsT0FBTztZQUFFVSxVQUFXLElBQUlHLGVBQWViO1lBQVNGLFFBQVFBO1FBQU87SUFDbkUsT0FDSyxJQUFJSSxJQUFJLENBQUNDLE9BQU8sSUFBSSxNQUFNO1FBQzNCLE1BQU1ILFNBQVNFLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBQzlCUyxZQUFZVCxTQUFTLElBQUlIO1FBQ3pCLE1BQU1GLFNBQVNOLGlEQUFPQSxDQUFDVSxLQUFLWSxLQUFLLENBQUNYLFNBQVMsR0FBR0EsU0FBUyxJQUFJSDtRQUMzRCxPQUFPO1lBQUVVLFVBQVcsSUFBSVY7WUFBU0YsUUFBUUE7UUFBTztJQUNwRDtJQUNBLE9BQU87UUFBRVksVUFBVTtRQUFHWixRQUFRRixZQUFZTSxJQUFJLENBQUNDLE9BQU87SUFBRTtBQUM1RDtBQUNBOztDQUVDLEdBQ00sU0FBU1ksVUFBVUMsS0FBSztJQUMzQixNQUFNZCxPQUFPUCxrREFBUUEsQ0FBQ3FCLE9BQU87SUFDN0IsTUFBTVQsVUFBVUMsUUFBUU4sTUFBTTtJQUM5QlIsMERBQWNBLENBQUNhLFFBQVFHLFFBQVEsS0FBS1IsS0FBS0YsTUFBTSxFQUFFLHFDQUFxQyxRQUFRZ0I7SUFDOUYsT0FBT1QsUUFBUVQsTUFBTTtBQUN6QixFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3V0aWxzL3JscC1kZWNvZGUuanM/NjQ5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1NlZTogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9STFBcbmltcG9ydCB7IGhleGxpZnkgfSBmcm9tIFwiLi9kYXRhLmpzXCI7XG5pbXBvcnQgeyBhc3NlcnQsIGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgeyBnZXRCeXRlcyB9IGZyb20gXCIuL2RhdGEuanNcIjtcbmZ1bmN0aW9uIGhleGxpZnlCeXRlKHZhbHVlKSB7XG4gICAgbGV0IHJlc3VsdCA9IHZhbHVlLnRvU3RyaW5nKDE2KTtcbiAgICB3aGlsZSAocmVzdWx0Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmVzdWx0ID0gXCIwXCIgKyByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBcIjB4XCIgKyByZXN1bHQ7XG59XG5mdW5jdGlvbiB1bmFycmF5aWZ5SW50ZWdlcihkYXRhLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgIGxldCByZXN1bHQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDI1NikgKyBkYXRhW29mZnNldCArIGldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gX2RlY29kZUNoaWxkcmVuKGRhdGEsIG9mZnNldCwgY2hpbGRPZmZzZXQsIGxlbmd0aCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIHdoaWxlIChjaGlsZE9mZnNldCA8IG9mZnNldCArIDEgKyBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IF9kZWNvZGUoZGF0YSwgY2hpbGRPZmZzZXQpO1xuICAgICAgICByZXN1bHQucHVzaChkZWNvZGVkLnJlc3VsdCk7XG4gICAgICAgIGNoaWxkT2Zmc2V0ICs9IGRlY29kZWQuY29uc3VtZWQ7XG4gICAgICAgIGFzc2VydChjaGlsZE9mZnNldCA8PSBvZmZzZXQgKyAxICsgbGVuZ3RoLCBcImNoaWxkIGRhdGEgdG9vIHNob3J0XCIsIFwiQlVGRkVSX09WRVJSVU5cIiwge1xuICAgICAgICAgICAgYnVmZmVyOiBkYXRhLCBsZW5ndGgsIG9mZnNldFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHsgY29uc3VtZWQ6ICgxICsgbGVuZ3RoKSwgcmVzdWx0OiByZXN1bHQgfTtcbn1cbi8vIHJldHVybnMgeyBjb25zdW1lZDogbnVtYmVyLCByZXN1bHQ6IE9iamVjdCB9XG5mdW5jdGlvbiBfZGVjb2RlKGRhdGEsIG9mZnNldCkge1xuICAgIGFzc2VydChkYXRhLmxlbmd0aCAhPT0gMCwgXCJkYXRhIHRvbyBzaG9ydFwiLCBcIkJVRkZFUl9PVkVSUlVOXCIsIHtcbiAgICAgICAgYnVmZmVyOiBkYXRhLCBsZW5ndGg6IDAsIG9mZnNldDogMVxuICAgIH0pO1xuICAgIGNvbnN0IGNoZWNrT2Zmc2V0ID0gKG9mZnNldCkgPT4ge1xuICAgICAgICBhc3NlcnQob2Zmc2V0IDw9IGRhdGEubGVuZ3RoLCBcImRhdGEgc2hvcnQgc2VnbWVudCB0b28gc2hvcnRcIiwgXCJCVUZGRVJfT1ZFUlJVTlwiLCB7XG4gICAgICAgICAgICBidWZmZXI6IGRhdGEsIGxlbmd0aDogZGF0YS5sZW5ndGgsIG9mZnNldFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vIEFycmF5IHdpdGggZXh0cmEgbGVuZ3RoIHByZWZpeFxuICAgIGlmIChkYXRhW29mZnNldF0gPj0gMHhmOCkge1xuICAgICAgICBjb25zdCBsZW5ndGhMZW5ndGggPSBkYXRhW29mZnNldF0gLSAweGY3O1xuICAgICAgICBjaGVja09mZnNldChvZmZzZXQgKyAxICsgbGVuZ3RoTGVuZ3RoKTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdW5hcnJheWlmeUludGVnZXIoZGF0YSwgb2Zmc2V0ICsgMSwgbGVuZ3RoTGVuZ3RoKTtcbiAgICAgICAgY2hlY2tPZmZzZXQob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCArIGxlbmd0aCk7XG4gICAgICAgIHJldHVybiBfZGVjb2RlQ2hpbGRyZW4oZGF0YSwgb2Zmc2V0LCBvZmZzZXQgKyAxICsgbGVuZ3RoTGVuZ3RoLCBsZW5ndGhMZW5ndGggKyBsZW5ndGgpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhW29mZnNldF0gPj0gMHhjMCkge1xuICAgICAgICBjb25zdCBsZW5ndGggPSBkYXRhW29mZnNldF0gLSAweGMwO1xuICAgICAgICBjaGVja09mZnNldChvZmZzZXQgKyAxICsgbGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIF9kZWNvZGVDaGlsZHJlbihkYXRhLCBvZmZzZXQsIG9mZnNldCArIDEsIGxlbmd0aCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRhdGFbb2Zmc2V0XSA+PSAweGI4KSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aExlbmd0aCA9IGRhdGFbb2Zmc2V0XSAtIDB4Yjc7XG4gICAgICAgIGNoZWNrT2Zmc2V0KG9mZnNldCArIDEgKyBsZW5ndGhMZW5ndGgpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSB1bmFycmF5aWZ5SW50ZWdlcihkYXRhLCBvZmZzZXQgKyAxLCBsZW5ndGhMZW5ndGgpO1xuICAgICAgICBjaGVja09mZnNldChvZmZzZXQgKyAxICsgbGVuZ3RoTGVuZ3RoICsgbGVuZ3RoKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gaGV4bGlmeShkYXRhLnNsaWNlKG9mZnNldCArIDEgKyBsZW5ndGhMZW5ndGgsIG9mZnNldCArIDEgKyBsZW5ndGhMZW5ndGggKyBsZW5ndGgpKTtcbiAgICAgICAgcmV0dXJuIHsgY29uc3VtZWQ6ICgxICsgbGVuZ3RoTGVuZ3RoICsgbGVuZ3RoKSwgcmVzdWx0OiByZXN1bHQgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGF0YVtvZmZzZXRdID49IDB4ODApIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gZGF0YVtvZmZzZXRdIC0gMHg4MDtcbiAgICAgICAgY2hlY2tPZmZzZXQob2Zmc2V0ICsgMSArIGxlbmd0aCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGhleGxpZnkoZGF0YS5zbGljZShvZmZzZXQgKyAxLCBvZmZzZXQgKyAxICsgbGVuZ3RoKSk7XG4gICAgICAgIHJldHVybiB7IGNvbnN1bWVkOiAoMSArIGxlbmd0aCksIHJlc3VsdDogcmVzdWx0IH07XG4gICAgfVxuICAgIHJldHVybiB7IGNvbnN1bWVkOiAxLCByZXN1bHQ6IGhleGxpZnlCeXRlKGRhdGFbb2Zmc2V0XSkgfTtcbn1cbi8qKlxuICogIERlY29kZXMgJSVkYXRhJSUgaW50byB0aGUgc3RydWN0dXJlZCBkYXRhIGl0IHJlcHJlc2VudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVSbHAoX2RhdGEpIHtcbiAgICBjb25zdCBkYXRhID0gZ2V0Qnl0ZXMoX2RhdGEsIFwiZGF0YVwiKTtcbiAgICBjb25zdCBkZWNvZGVkID0gX2RlY29kZShkYXRhLCAwKTtcbiAgICBhc3NlcnRBcmd1bWVudChkZWNvZGVkLmNvbnN1bWVkID09PSBkYXRhLmxlbmd0aCwgXCJ1bmV4cGVjdGVkIGp1bmsgYWZ0ZXIgcmxwIHBheWxvYWRcIiwgXCJkYXRhXCIsIF9kYXRhKTtcbiAgICByZXR1cm4gZGVjb2RlZC5yZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ybHAtZGVjb2RlLmpzLm1hcCJdLCJuYW1lcyI6WyJoZXhsaWZ5IiwiYXNzZXJ0IiwiYXNzZXJ0QXJndW1lbnQiLCJnZXRCeXRlcyIsImhleGxpZnlCeXRlIiwidmFsdWUiLCJyZXN1bHQiLCJ0b1N0cmluZyIsImxlbmd0aCIsInVuYXJyYXlpZnlJbnRlZ2VyIiwiZGF0YSIsIm9mZnNldCIsImkiLCJfZGVjb2RlQ2hpbGRyZW4iLCJjaGlsZE9mZnNldCIsImRlY29kZWQiLCJfZGVjb2RlIiwicHVzaCIsImNvbnN1bWVkIiwiYnVmZmVyIiwiY2hlY2tPZmZzZXQiLCJsZW5ndGhMZW5ndGgiLCJzbGljZSIsImRlY29kZVJscCIsIl9kYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/rlp-decode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/rlp-encode.js":
/*!**********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/rlp-encode.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeRlp: function() { return /* binding */ encodeRlp; }\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n//See: https://github.com/ethereum/wiki/wiki/RLP\n\nfunction arrayifyInteger(value) {\n    const result = [];\n    while(value){\n        result.unshift(value & 0xff);\n        value >>= 8;\n    }\n    return result;\n}\nfunction _encode(object) {\n    if (Array.isArray(object)) {\n        let payload = [];\n        object.forEach(function(child) {\n            payload = payload.concat(_encode(child));\n        });\n        if (payload.length <= 55) {\n            payload.unshift(0xc0 + payload.length);\n            return payload;\n        }\n        const length = arrayifyInteger(payload.length);\n        length.unshift(0xf7 + length.length);\n        return length.concat(payload);\n    }\n    const data = Array.prototype.slice.call((0,_data_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(object, \"object\"));\n    if (data.length === 1 && data[0] <= 0x7f) {\n        return data;\n    } else if (data.length <= 55) {\n        data.unshift(0x80 + data.length);\n        return data;\n    }\n    const length = arrayifyInteger(data.length);\n    length.unshift(0xb7 + length.length);\n    return length.concat(data);\n}\nconst nibbles = \"0123456789abcdef\";\n/**\n *  Encodes %%object%% as an RLP-encoded [[DataHexString]].\n */ function encodeRlp(object) {\n    let result = \"0x\";\n    for (const v of _encode(object)){\n        result += nibbles[v >> 4];\n        result += nibbles[v & 0xf];\n    }\n    return result;\n} //# sourceMappingURL=rlp-encode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvcmxwLWVuY29kZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdEQUFnRDtBQUNYO0FBQ3JDLFNBQVNDLGdCQUFnQkMsS0FBSztJQUMxQixNQUFNQyxTQUFTLEVBQUU7SUFDakIsTUFBT0QsTUFBTztRQUNWQyxPQUFPQyxPQUFPLENBQUNGLFFBQVE7UUFDdkJBLFVBQVU7SUFDZDtJQUNBLE9BQU9DO0FBQ1g7QUFDQSxTQUFTRSxRQUFRQyxNQUFNO0lBQ25CLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0YsU0FBUztRQUN2QixJQUFJRyxVQUFVLEVBQUU7UUFDaEJILE9BQU9JLE9BQU8sQ0FBQyxTQUFVQyxLQUFLO1lBQzFCRixVQUFVQSxRQUFRRyxNQUFNLENBQUNQLFFBQVFNO1FBQ3JDO1FBQ0EsSUFBSUYsUUFBUUksTUFBTSxJQUFJLElBQUk7WUFDdEJKLFFBQVFMLE9BQU8sQ0FBQyxPQUFPSyxRQUFRSSxNQUFNO1lBQ3JDLE9BQU9KO1FBQ1g7UUFDQSxNQUFNSSxTQUFTWixnQkFBZ0JRLFFBQVFJLE1BQU07UUFDN0NBLE9BQU9ULE9BQU8sQ0FBQyxPQUFPUyxPQUFPQSxNQUFNO1FBQ25DLE9BQU9BLE9BQU9ELE1BQU0sQ0FBQ0g7SUFDekI7SUFDQSxNQUFNSyxPQUFPUCxNQUFNUSxTQUFTLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDakIsa0RBQVFBLENBQUNNLFFBQVE7SUFDekQsSUFBSVEsS0FBS0QsTUFBTSxLQUFLLEtBQUtDLElBQUksQ0FBQyxFQUFFLElBQUksTUFBTTtRQUN0QyxPQUFPQTtJQUNYLE9BQ0ssSUFBSUEsS0FBS0QsTUFBTSxJQUFJLElBQUk7UUFDeEJDLEtBQUtWLE9BQU8sQ0FBQyxPQUFPVSxLQUFLRCxNQUFNO1FBQy9CLE9BQU9DO0lBQ1g7SUFDQSxNQUFNRCxTQUFTWixnQkFBZ0JhLEtBQUtELE1BQU07SUFDMUNBLE9BQU9ULE9BQU8sQ0FBQyxPQUFPUyxPQUFPQSxNQUFNO0lBQ25DLE9BQU9BLE9BQU9ELE1BQU0sQ0FBQ0U7QUFDekI7QUFDQSxNQUFNSSxVQUFVO0FBQ2hCOztDQUVDLEdBQ00sU0FBU0MsVUFBVWIsTUFBTTtJQUM1QixJQUFJSCxTQUFTO0lBQ2IsS0FBSyxNQUFNaUIsS0FBS2YsUUFBUUMsUUFBUztRQUM3QkgsVUFBVWUsT0FBTyxDQUFDRSxLQUFLLEVBQUU7UUFDekJqQixVQUFVZSxPQUFPLENBQUNFLElBQUksSUFBSTtJQUM5QjtJQUNBLE9BQU9qQjtBQUNYLEVBQ0Esc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvcmxwLWVuY29kZS5qcz9hZWQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vd2lraS93aWtpL1JMUFxuaW1wb3J0IHsgZ2V0Qnl0ZXMgfSBmcm9tIFwiLi9kYXRhLmpzXCI7XG5mdW5jdGlvbiBhcnJheWlmeUludGVnZXIodmFsdWUpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICB3aGlsZSAodmFsdWUpIHtcbiAgICAgICAgcmVzdWx0LnVuc2hpZnQodmFsdWUgJiAweGZmKTtcbiAgICAgICAgdmFsdWUgPj49IDg7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBfZW5jb2RlKG9iamVjdCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgICAgbGV0IHBheWxvYWQgPSBbXTtcbiAgICAgICAgb2JqZWN0LmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICBwYXlsb2FkID0gcGF5bG9hZC5jb25jYXQoX2VuY29kZShjaGlsZCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHBheWxvYWQubGVuZ3RoIDw9IDU1KSB7XG4gICAgICAgICAgICBwYXlsb2FkLnVuc2hpZnQoMHhjMCArIHBheWxvYWQubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5aWZ5SW50ZWdlcihwYXlsb2FkLmxlbmd0aCk7XG4gICAgICAgIGxlbmd0aC51bnNoaWZ0KDB4ZjcgKyBsZW5ndGgubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIGxlbmd0aC5jb25jYXQocGF5bG9hZCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChnZXRCeXRlcyhvYmplY3QsIFwib2JqZWN0XCIpKTtcbiAgICBpZiAoZGF0YS5sZW5ndGggPT09IDEgJiYgZGF0YVswXSA8PSAweDdmKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhLmxlbmd0aCA8PSA1NSkge1xuICAgICAgICBkYXRhLnVuc2hpZnQoMHg4MCArIGRhdGEubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5aWZ5SW50ZWdlcihkYXRhLmxlbmd0aCk7XG4gICAgbGVuZ3RoLnVuc2hpZnQoMHhiNyArIGxlbmd0aC5sZW5ndGgpO1xuICAgIHJldHVybiBsZW5ndGguY29uY2F0KGRhdGEpO1xufVxuY29uc3QgbmliYmxlcyA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiO1xuLyoqXG4gKiAgRW5jb2RlcyAlJW9iamVjdCUlIGFzIGFuIFJMUC1lbmNvZGVkIFtbRGF0YUhleFN0cmluZ11dLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlUmxwKG9iamVjdCkge1xuICAgIGxldCByZXN1bHQgPSBcIjB4XCI7XG4gICAgZm9yIChjb25zdCB2IG9mIF9lbmNvZGUob2JqZWN0KSkge1xuICAgICAgICByZXN1bHQgKz0gbmliYmxlc1t2ID4+IDRdO1xuICAgICAgICByZXN1bHQgKz0gbmliYmxlc1t2ICYgMHhmXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJscC1lbmNvZGUuanMubWFwIl0sIm5hbWVzIjpbImdldEJ5dGVzIiwiYXJyYXlpZnlJbnRlZ2VyIiwidmFsdWUiLCJyZXN1bHQiLCJ1bnNoaWZ0IiwiX2VuY29kZSIsIm9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsInBheWxvYWQiLCJmb3JFYWNoIiwiY2hpbGQiLCJjb25jYXQiLCJsZW5ndGgiLCJkYXRhIiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwibmliYmxlcyIsImVuY29kZVJscCIsInYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/rlp-encode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/units.js":
/*!*****************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/units.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatEther: function() { return /* binding */ formatEther; },\n/* harmony export */   formatUnits: function() { return /* binding */ formatUnits; },\n/* harmony export */   parseEther: function() { return /* binding */ parseEther; },\n/* harmony export */   parseUnits: function() { return /* binding */ parseUnits; }\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _fixednumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fixednumber.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/fixednumber.js\");\n/* harmony import */ var _maths_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./maths.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/**\n *  Most interactions with Ethereum requires integer values, which use\n *  the smallest magnitude unit.\n *\n *  For example, imagine dealing with dollars and cents. Since dollars\n *  are divisible, non-integer values are possible, such as ``$10.77``.\n *  By using the smallest indivisible unit (i.e. cents), the value can\n *  be kept as the integer ``1077``.\n *\n *  When receiving decimal input from the user (as a decimal string),\n *  the value should be converted to an integer and when showing a user\n *  a value, the integer value should be converted to a decimal string.\n *\n *  This creates a clear distinction, between values to be used by code\n *  (integers) and values used for display logic to users (decimals).\n *\n *  The native unit in Ethereum, //ether// is divisible to 18 decimal places,\n *  where each individual unit is called a //wei//.\n *\n *  @_subsection api/utils:Unit Conversion  [about-units]\n */ \n\n\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\"\n];\n/**\n *  Converts %%value%% into a //decimal string//, assuming %%unit%% decimal\n *  places. The %%unit%% may be the number of decimal places or the name of\n *  a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n *\n */ function formatUnits(value, unit) {\n    let decimals = 18;\n    if (typeof unit === \"string\") {\n        const index = names.indexOf(unit);\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(index >= 0, \"invalid unit\", \"unit\", unit);\n        decimals = 3 * index;\n    } else if (unit != null) {\n        decimals = (0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.getNumber)(unit, \"unit\");\n    }\n    return _fixednumber_js__WEBPACK_IMPORTED_MODULE_2__.FixedNumber.fromValue(value, decimals, {\n        decimals,\n        width: 512\n    }).toString();\n}\n/**\n *  Converts the //decimal string// %%value%% to a BigInt, assuming\n *  %%unit%% decimal places. The %%unit%% may the number of decimal places\n *  or the name of a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n */ function parseUnits(value, unit) {\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof value === \"string\", \"value must be a string\", \"value\", value);\n    let decimals = 18;\n    if (typeof unit === \"string\") {\n        const index = names.indexOf(unit);\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(index >= 0, \"invalid unit\", \"unit\", unit);\n        decimals = 3 * index;\n    } else if (unit != null) {\n        decimals = (0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.getNumber)(unit, \"unit\");\n    }\n    return _fixednumber_js__WEBPACK_IMPORTED_MODULE_2__.FixedNumber.fromString(value, {\n        decimals,\n        width: 512\n    }).value;\n}\n/**\n *  Converts %%value%% into a //decimal string// using 18 decimal places.\n */ function formatEther(wei) {\n    return formatUnits(wei, 18);\n}\n/**\n *  Converts the //decimal string// %%ether%% to a BigInt, using 18\n *  decimal places.\n */ function parseEther(ether) {\n    return parseUnits(ether, 18);\n} //# sourceMappingURL=units.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvdW5pdHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW9CQyxHQUM0QztBQUNFO0FBQ1I7QUFDdkMsTUFBTUcsUUFBUTtJQUNWO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDRDs7Ozs7Q0FLQyxHQUNNLFNBQVNDLFlBQVlDLEtBQUssRUFBRUMsSUFBSTtJQUNuQyxJQUFJQyxXQUFXO0lBQ2YsSUFBSSxPQUFRRCxTQUFVLFVBQVU7UUFDNUIsTUFBTUUsUUFBUUwsTUFBTU0sT0FBTyxDQUFDSDtRQUM1Qk4sMERBQWNBLENBQUNRLFNBQVMsR0FBRyxnQkFBZ0IsUUFBUUY7UUFDbkRDLFdBQVcsSUFBSUM7SUFDbkIsT0FDSyxJQUFJRixRQUFRLE1BQU07UUFDbkJDLFdBQVdMLG9EQUFTQSxDQUFDSSxNQUFNO0lBQy9CO0lBQ0EsT0FBT0wsd0RBQVdBLENBQUNTLFNBQVMsQ0FBQ0wsT0FBT0UsVUFBVTtRQUFFQTtRQUFVSSxPQUFPO0lBQUksR0FBR0MsUUFBUTtBQUNwRjtBQUNBOzs7O0NBSUMsR0FDTSxTQUFTQyxXQUFXUixLQUFLLEVBQUVDLElBQUk7SUFDbENOLDBEQUFjQSxDQUFDLE9BQVFLLFVBQVcsVUFBVSwwQkFBMEIsU0FBU0E7SUFDL0UsSUFBSUUsV0FBVztJQUNmLElBQUksT0FBUUQsU0FBVSxVQUFVO1FBQzVCLE1BQU1FLFFBQVFMLE1BQU1NLE9BQU8sQ0FBQ0g7UUFDNUJOLDBEQUFjQSxDQUFDUSxTQUFTLEdBQUcsZ0JBQWdCLFFBQVFGO1FBQ25EQyxXQUFXLElBQUlDO0lBQ25CLE9BQ0ssSUFBSUYsUUFBUSxNQUFNO1FBQ25CQyxXQUFXTCxvREFBU0EsQ0FBQ0ksTUFBTTtJQUMvQjtJQUNBLE9BQU9MLHdEQUFXQSxDQUFDYSxVQUFVLENBQUNULE9BQU87UUFBRUU7UUFBVUksT0FBTztJQUFJLEdBQUdOLEtBQUs7QUFDeEU7QUFDQTs7Q0FFQyxHQUNNLFNBQVNVLFlBQVlDLEdBQUc7SUFDM0IsT0FBT1osWUFBWVksS0FBSztBQUM1QjtBQUNBOzs7Q0FHQyxHQUNNLFNBQVNDLFdBQVdDLEtBQUs7SUFDNUIsT0FBT0wsV0FBV0ssT0FBTztBQUM3QixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3V0aWxzL3VuaXRzLmpzPzJkOTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgTW9zdCBpbnRlcmFjdGlvbnMgd2l0aCBFdGhlcmV1bSByZXF1aXJlcyBpbnRlZ2VyIHZhbHVlcywgd2hpY2ggdXNlXG4gKiAgdGhlIHNtYWxsZXN0IG1hZ25pdHVkZSB1bml0LlxuICpcbiAqICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBkZWFsaW5nIHdpdGggZG9sbGFycyBhbmQgY2VudHMuIFNpbmNlIGRvbGxhcnNcbiAqICBhcmUgZGl2aXNpYmxlLCBub24taW50ZWdlciB2YWx1ZXMgYXJlIHBvc3NpYmxlLCBzdWNoIGFzIGBgJDEwLjc3YGAuXG4gKiAgQnkgdXNpbmcgdGhlIHNtYWxsZXN0IGluZGl2aXNpYmxlIHVuaXQgKGkuZS4gY2VudHMpLCB0aGUgdmFsdWUgY2FuXG4gKiAgYmUga2VwdCBhcyB0aGUgaW50ZWdlciBgYDEwNzdgYC5cbiAqXG4gKiAgV2hlbiByZWNlaXZpbmcgZGVjaW1hbCBpbnB1dCBmcm9tIHRoZSB1c2VyIChhcyBhIGRlY2ltYWwgc3RyaW5nKSxcbiAqICB0aGUgdmFsdWUgc2hvdWxkIGJlIGNvbnZlcnRlZCB0byBhbiBpbnRlZ2VyIGFuZCB3aGVuIHNob3dpbmcgYSB1c2VyXG4gKiAgYSB2YWx1ZSwgdGhlIGludGVnZXIgdmFsdWUgc2hvdWxkIGJlIGNvbnZlcnRlZCB0byBhIGRlY2ltYWwgc3RyaW5nLlxuICpcbiAqICBUaGlzIGNyZWF0ZXMgYSBjbGVhciBkaXN0aW5jdGlvbiwgYmV0d2VlbiB2YWx1ZXMgdG8gYmUgdXNlZCBieSBjb2RlXG4gKiAgKGludGVnZXJzKSBhbmQgdmFsdWVzIHVzZWQgZm9yIGRpc3BsYXkgbG9naWMgdG8gdXNlcnMgKGRlY2ltYWxzKS5cbiAqXG4gKiAgVGhlIG5hdGl2ZSB1bml0IGluIEV0aGVyZXVtLCAvL2V0aGVyLy8gaXMgZGl2aXNpYmxlIHRvIDE4IGRlY2ltYWwgcGxhY2VzLFxuICogIHdoZXJlIGVhY2ggaW5kaXZpZHVhbCB1bml0IGlzIGNhbGxlZCBhIC8vd2VpLy8uXG4gKlxuICogIEBfc3Vic2VjdGlvbiBhcGkvdXRpbHM6VW5pdCBDb252ZXJzaW9uICBbYWJvdXQtdW5pdHNdXG4gKi9cbmltcG9ydCB7IGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgeyBGaXhlZE51bWJlciB9IGZyb20gXCIuL2ZpeGVkbnVtYmVyLmpzXCI7XG5pbXBvcnQgeyBnZXROdW1iZXIgfSBmcm9tIFwiLi9tYXRocy5qc1wiO1xuY29uc3QgbmFtZXMgPSBbXG4gICAgXCJ3ZWlcIixcbiAgICBcImt3ZWlcIixcbiAgICBcIm13ZWlcIixcbiAgICBcImd3ZWlcIixcbiAgICBcInN6YWJvXCIsXG4gICAgXCJmaW5uZXlcIixcbiAgICBcImV0aGVyXCIsXG5dO1xuLyoqXG4gKiAgQ29udmVydHMgJSV2YWx1ZSUlIGludG8gYSAvL2RlY2ltYWwgc3RyaW5nLy8sIGFzc3VtaW5nICUldW5pdCUlIGRlY2ltYWxcbiAqICBwbGFjZXMuIFRoZSAlJXVuaXQlJSBtYXkgYmUgdGhlIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyBvciB0aGUgbmFtZSBvZlxuICogIGEgdW5pdCAoZS5nLiBgYFwiZ3dlaVwiYGAgZm9yIDkgZGVjaW1hbCBwbGFjZXMpLlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFVuaXRzKHZhbHVlLCB1bml0KSB7XG4gICAgbGV0IGRlY2ltYWxzID0gMTg7XG4gICAgaWYgKHR5cGVvZiAodW5pdCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBuYW1lcy5pbmRleE9mKHVuaXQpO1xuICAgICAgICBhc3NlcnRBcmd1bWVudChpbmRleCA+PSAwLCBcImludmFsaWQgdW5pdFwiLCBcInVuaXRcIiwgdW5pdCk7XG4gICAgICAgIGRlY2ltYWxzID0gMyAqIGluZGV4O1xuICAgIH1cbiAgICBlbHNlIGlmICh1bml0ICE9IG51bGwpIHtcbiAgICAgICAgZGVjaW1hbHMgPSBnZXROdW1iZXIodW5pdCwgXCJ1bml0XCIpO1xuICAgIH1cbiAgICByZXR1cm4gRml4ZWROdW1iZXIuZnJvbVZhbHVlKHZhbHVlLCBkZWNpbWFscywgeyBkZWNpbWFscywgd2lkdGg6IDUxMiB9KS50b1N0cmluZygpO1xufVxuLyoqXG4gKiAgQ29udmVydHMgdGhlIC8vZGVjaW1hbCBzdHJpbmcvLyAlJXZhbHVlJSUgdG8gYSBCaWdJbnQsIGFzc3VtaW5nXG4gKiAgJSV1bml0JSUgZGVjaW1hbCBwbGFjZXMuIFRoZSAlJXVuaXQlJSBtYXkgdGhlIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlc1xuICogIG9yIHRoZSBuYW1lIG9mIGEgdW5pdCAoZS5nLiBgYFwiZ3dlaVwiYGAgZm9yIDkgZGVjaW1hbCBwbGFjZXMpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVbml0cyh2YWx1ZSwgdW5pdCkge1xuICAgIGFzc2VydEFyZ3VtZW50KHR5cGVvZiAodmFsdWUpID09PSBcInN0cmluZ1wiLCBcInZhbHVlIG11c3QgYmUgYSBzdHJpbmdcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgbGV0IGRlY2ltYWxzID0gMTg7XG4gICAgaWYgKHR5cGVvZiAodW5pdCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBuYW1lcy5pbmRleE9mKHVuaXQpO1xuICAgICAgICBhc3NlcnRBcmd1bWVudChpbmRleCA+PSAwLCBcImludmFsaWQgdW5pdFwiLCBcInVuaXRcIiwgdW5pdCk7XG4gICAgICAgIGRlY2ltYWxzID0gMyAqIGluZGV4O1xuICAgIH1cbiAgICBlbHNlIGlmICh1bml0ICE9IG51bGwpIHtcbiAgICAgICAgZGVjaW1hbHMgPSBnZXROdW1iZXIodW5pdCwgXCJ1bml0XCIpO1xuICAgIH1cbiAgICByZXR1cm4gRml4ZWROdW1iZXIuZnJvbVN0cmluZyh2YWx1ZSwgeyBkZWNpbWFscywgd2lkdGg6IDUxMiB9KS52YWx1ZTtcbn1cbi8qKlxuICogIENvbnZlcnRzICUldmFsdWUlJSBpbnRvIGEgLy9kZWNpbWFsIHN0cmluZy8vIHVzaW5nIDE4IGRlY2ltYWwgcGxhY2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RXRoZXIod2VpKSB7XG4gICAgcmV0dXJuIGZvcm1hdFVuaXRzKHdlaSwgMTgpO1xufVxuLyoqXG4gKiAgQ29udmVydHMgdGhlIC8vZGVjaW1hbCBzdHJpbmcvLyAlJWV0aGVyJSUgdG8gYSBCaWdJbnQsIHVzaW5nIDE4XG4gKiAgZGVjaW1hbCBwbGFjZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV0aGVyKGV0aGVyKSB7XG4gICAgcmV0dXJuIHBhcnNlVW5pdHMoZXRoZXIsIDE4KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuaXRzLmpzLm1hcCJdLCJuYW1lcyI6WyJhc3NlcnRBcmd1bWVudCIsIkZpeGVkTnVtYmVyIiwiZ2V0TnVtYmVyIiwibmFtZXMiLCJmb3JtYXRVbml0cyIsInZhbHVlIiwidW5pdCIsImRlY2ltYWxzIiwiaW5kZXgiLCJpbmRleE9mIiwiZnJvbVZhbHVlIiwid2lkdGgiLCJ0b1N0cmluZyIsInBhcnNlVW5pdHMiLCJmcm9tU3RyaW5nIiwiZm9ybWF0RXRoZXIiLCJ3ZWkiLCJwYXJzZUV0aGVyIiwiZXRoZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/units.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js":
/*!****************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/utf8.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Utf8ErrorFuncs: function() { return /* binding */ Utf8ErrorFuncs; },\n/* harmony export */   toUtf8Bytes: function() { return /* binding */ toUtf8Bytes; },\n/* harmony export */   toUtf8CodePoints: function() { return /* binding */ toUtf8CodePoints; },\n/* harmony export */   toUtf8String: function() { return /* binding */ toUtf8String; }\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/**\n *  Using strings in Ethereum (or any security-basd system) requires\n *  additional care. These utilities attempt to mitigate some of the\n *  safety issues as well as provide the ability to recover and analyse\n *  strings.\n *\n *  @_subsection api/utils:Strings and UTF-8  [about-strings]\n */ \n\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid codepoint at offset \".concat(offset, \"; \").concat(reason), \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === \"BAD_PREFIX\" || reason === \"UNEXPECTED_CONTINUE\") {\n        let i = 0;\n        for(let o = offset + 1; o < bytes.length; o++){\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === \"OVERRUN\") {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === \"OVERLONG\") {\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof badCodepoint === \"number\", \"invalid bad code point for replacement\", \"badCodepoint\", badCodepoint);\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n/**\n *  A handful of popular, built-in UTF-8 error handling strategies.\n *\n *  **``\"error\"``** - throws on ANY illegal UTF-8 sequence or\n *  non-canonical (overlong) codepoints (this is the default)\n *\n *  **``\"ignore\"``** - silently drops any illegal UTF-8 sequence\n *  and accepts non-canonical (overlong) codepoints\n *\n *  **``\"replace\"``** - replace any illegal UTF-8 sequence with the\n *  UTF-8 replacement character (i.e. ``\"\\\\ufffd\"``) and accepts\n *  non-canonical (overlong) codepoints\n *\n *  @returns: Record<\"error\" | \"ignore\" | \"replace\", Utf8ErrorFunc>\n */ const Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(_bytes, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    const bytes = (0,_data_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_bytes, \"bytes\");\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while(i < bytes.length){\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n        // 1110 xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n        // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        } else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\n            } else {\n                i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(\"OVERRUN\", i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & (1 << 8 - extraLength - 1) - 1;\n        for(let j = 0; j < extraLength; j++){\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(\"MISSING_CONTINUE\", i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = res << 6 | nextChar & 0x3f;\n            i++;\n        }\n        // See above loop for invalid continuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n/**\n *  Returns the UTF-8 byte representation of %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */ function toUtf8Bytes(str, form) {\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof str === \"string\", \"invalid string value\", \"str\", str);\n    if (form != null) {\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertNormalize)(form);\n        str = str.normalize(form);\n    }\n    let result = [];\n    for(let i = 0; i < str.length; i++){\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        } else if (c < 0x800) {\n            result.push(c >> 6 | 0xc0);\n            result.push(c & 0x3f | 0x80);\n        } else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(i < str.length && (c2 & 0xfc00) === 0xdc00, \"invalid surrogate pair\", \"str\", str);\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push(pair >> 18 | 0xf0);\n            result.push(pair >> 12 & 0x3f | 0x80);\n            result.push(pair >> 6 & 0x3f | 0x80);\n            result.push(pair & 0x3f | 0x80);\n        } else {\n            result.push(c >> 12 | 0xe0);\n            result.push(c >> 6 & 0x3f | 0x80);\n            result.push(c & 0x3f | 0x80);\n        }\n    }\n    return new Uint8Array(result);\n}\n;\n//export \nfunction _toUtf8String(codePoints) {\n    return codePoints.map((codePoint)=>{\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\");\n}\n/**\n *  Returns the string represented by the UTF-8 data %%bytes%%.\n *\n *  When %%onError%% function is specified, it is called on UTF-8\n *  errors allowing recovery using the [[Utf8ErrorFunc]] API.\n *  (default: [error](Utf8ErrorFuncs))\n */ function toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\n/**\n *  Returns the UTF-8 code-points for %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */ function toUtf8CodePoints(str, form) {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n} //# sourceMappingURL=utf8.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/utils/uuid.js":
/*!****************************************************!*\
  !*** ../node_modules/ethers/lib.esm/utils/uuid.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uuidV4: function() { return /* binding */ uuidV4; }\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/**\n *  Explain UUID and link to RFC here.\n *\n *  @_subsection: api/utils:UUID  [about-uuid]\n */ \n/**\n *  Returns the version 4 [[link-uuid]] for the %%randomBytes%%.\n *\n *  @see: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n */ function uuidV4(randomBytes) {\n    const bytes = (0,_data_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(randomBytes, \"randomBytes\");\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = bytes[6] & 0x0f | 0x40;\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n    const value = (0,_data_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes);\n    return [\n        value.substring(2, 10),\n        value.substring(10, 14),\n        value.substring(14, 18),\n        value.substring(18, 22),\n        value.substring(22, 34)\n    ].join(\"-\");\n} //# sourceMappingURL=uuid.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvdXVpZC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7O0NBSUMsR0FDNkM7QUFDOUM7Ozs7Q0FJQyxHQUNNLFNBQVNFLE9BQU9DLFdBQVc7SUFDOUIsTUFBTUMsUUFBUUosa0RBQVFBLENBQUNHLGFBQWE7SUFDcEMsa0JBQWtCO0lBQ2xCLHdDQUF3QztJQUN4Q0MsS0FBSyxDQUFDLEVBQUUsR0FBRyxLQUFNLENBQUMsRUFBRSxHQUFHLE9BQVE7SUFDL0IsY0FBYztJQUNkLHVDQUF1QztJQUN2Qyx1Q0FBdUM7SUFDdkNBLEtBQUssQ0FBQyxFQUFFLEdBQUcsS0FBTSxDQUFDLEVBQUUsR0FBRyxPQUFRO0lBQy9CLE1BQU1DLFFBQVFKLGlEQUFPQSxDQUFDRztJQUN0QixPQUFPO1FBQ0hDLE1BQU1DLFNBQVMsQ0FBQyxHQUFHO1FBQ25CRCxNQUFNQyxTQUFTLENBQUMsSUFBSTtRQUNwQkQsTUFBTUMsU0FBUyxDQUFDLElBQUk7UUFDcEJELE1BQU1DLFNBQVMsQ0FBQyxJQUFJO1FBQ3BCRCxNQUFNQyxTQUFTLENBQUMsSUFBSTtLQUN2QixDQUFDQyxJQUFJLENBQUM7QUFDWCxFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3V0aWxzL3V1aWQuanM/NDJhMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBFeHBsYWluIFVVSUQgYW5kIGxpbmsgdG8gUkZDIGhlcmUuXG4gKlxuICogIEBfc3Vic2VjdGlvbjogYXBpL3V0aWxzOlVVSUQgIFthYm91dC11dWlkXVxuICovXG5pbXBvcnQgeyBnZXRCeXRlcywgaGV4bGlmeSB9IGZyb20gXCIuL2RhdGEuanNcIjtcbi8qKlxuICogIFJldHVybnMgdGhlIHZlcnNpb24gNCBbW2xpbmstdXVpZF1dIGZvciB0aGUgJSVyYW5kb21CeXRlcyUlLlxuICpcbiAqICBAc2VlOiBodHRwczovL3d3dy5pZXRmLm9yZy9yZmMvcmZjNDEyMi50eHQgKFNlY3Rpb24gNC40KVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXVpZFY0KHJhbmRvbUJ5dGVzKSB7XG4gICAgY29uc3QgYnl0ZXMgPSBnZXRCeXRlcyhyYW5kb21CeXRlcywgXCJyYW5kb21CeXRlc1wiKTtcbiAgICAvLyBTZWN0aW9uOiA0LjEuMzpcbiAgICAvLyAtIHRpbWVfaGlfYW5kX3ZlcnNpb25bMTI6MTZdID0gMGIwMTAwXG4gICAgYnl0ZXNbNl0gPSAoYnl0ZXNbNl0gJiAweDBmKSB8IDB4NDA7XG4gICAgLy8gU2VjdGlvbiA0LjRcbiAgICAvLyAtIGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRbNl0gPSAwYjBcbiAgICAvLyAtIGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRbN10gPSAwYjFcbiAgICBieXRlc1s4XSA9IChieXRlc1s4XSAmIDB4M2YpIHwgMHg4MDtcbiAgICBjb25zdCB2YWx1ZSA9IGhleGxpZnkoYnl0ZXMpO1xuICAgIHJldHVybiBbXG4gICAgICAgIHZhbHVlLnN1YnN0cmluZygyLCAxMCksXG4gICAgICAgIHZhbHVlLnN1YnN0cmluZygxMCwgMTQpLFxuICAgICAgICB2YWx1ZS5zdWJzdHJpbmcoMTQsIDE4KSxcbiAgICAgICAgdmFsdWUuc3Vic3RyaW5nKDE4LCAyMiksXG4gICAgICAgIHZhbHVlLnN1YnN0cmluZygyMiwgMzQpLFxuICAgIF0uam9pbihcIi1cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dWlkLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRCeXRlcyIsImhleGxpZnkiLCJ1dWlkVjQiLCJyYW5kb21CeXRlcyIsImJ5dGVzIiwidmFsdWUiLCJzdWJzdHJpbmciLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/utils/uuid.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/base-wallet.js":
/*!************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wallet/base-wallet.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseWallet: function() { return /* binding */ BaseWallet; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/checks.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../hash/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/message.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../hash/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/typed-data.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/abstract-signer.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/transaction.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/address.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n\n\n\n\n\n\n\n\nvar _signingKey = /*#__PURE__*/ new WeakMap();\n/**\n *  The **BaseWallet** is a stream-lined implementation of a\n *  [[Signer]] that operates with a private key.\n *\n *  It is preferred to use the [[Wallet]] class, as it offers\n *  additional functionality and simplifies loading a variety\n *  of JSON formats, Mnemonic Phrases, etc.\n *\n *  This class may be of use for those attempting to implement\n *  a minimal Signer.\n */ class BaseWallet extends _providers_index_js__WEBPACK_IMPORTED_MODULE_0__.AbstractSigner {\n    // Store private values behind getters to reduce visibility\n    // in console.log\n    /**\n     *  The [[SigningKey]] used for signing payloads.\n     */ get signingKey() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _signingKey);\n    }\n    /**\n     *  The private key for this wallet.\n     */ get privateKey() {\n        return this.signingKey.privateKey;\n    }\n    async getAddress() {\n        return this.address;\n    }\n    connect(provider) {\n        return new BaseWallet((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _signingKey), provider);\n    }\n    async signTransaction(tx) {\n        // Replace any Addressable or ENS name with an address\n        const { to, from } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveProperties)({\n            to: tx.to ? (0,_address_index_js__WEBPACK_IMPORTED_MODULE_3__.resolveAddress)(tx.to, this.provider) : undefined,\n            from: tx.from ? (0,_address_index_js__WEBPACK_IMPORTED_MODULE_3__.resolveAddress)(tx.from, this.provider) : undefined\n        });\n        if (to != null) {\n            tx.to = to;\n        }\n        if (from != null) {\n            tx.from = from;\n        }\n        if (tx.from != null) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)((0,_address_index_js__WEBPACK_IMPORTED_MODULE_5__.getAddress)(tx.from) === this.address, \"transaction from address mismatch\", \"tx.from\", tx.from);\n            delete tx.from;\n        }\n        // Build the transaction\n        const btx = _transaction_index_js__WEBPACK_IMPORTED_MODULE_6__.Transaction.from(tx);\n        btx.signature = this.signingKey.sign(btx.unsignedHash);\n        return btx.serialized;\n    }\n    async signMessage(message) {\n        return this.signMessageSync(message);\n    }\n    // @TODO: Add a secialized signTx and signTyped sync that enforces\n    // all parameters are known?\n    /**\n     *  Returns the signature for %%message%% signed with this wallet.\n     */ signMessageSync(message) {\n        return this.signingKey.sign((0,_hash_index_js__WEBPACK_IMPORTED_MODULE_7__.hashMessage)(message)).serialized;\n    }\n    async signTypedData(domain, types, value) {\n        // Populate any ENS names\n        const populated = await _hash_index_js__WEBPACK_IMPORTED_MODULE_8__.TypedDataEncoder.resolveNames(domain, types, value, async (name)=>{\n            // @TODO: this should use resolveName; addresses don't\n            //        need a provider\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(this.provider != null, \"cannot resolve ENS names without a provider\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"resolveName\",\n                info: {\n                    name\n                }\n            });\n            const address = await this.provider.resolveName(name);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assert)(address != null, \"unconfigured ENS name\", \"UNCONFIGURED_NAME\", {\n                value: name\n            });\n            return address;\n        });\n        return this.signingKey.sign(_hash_index_js__WEBPACK_IMPORTED_MODULE_8__.TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;\n    }\n    /**\n     *  Creates a new BaseWallet for %%privateKey%%, optionally\n     *  connected to %%provider%%.\n     *\n     *  If %%provider%% is not specified, only offline methods can\n     *  be used.\n     */ constructor(privateKey, provider){\n        super(provider);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_9__._)(this, _signingKey, {\n            writable: true,\n            value: void 0\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(privateKey && typeof privateKey.sign === \"function\", \"invalid private key\", \"privateKey\", \"[ REDACTED ]\");\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_10__._)(this, _signingKey, privateKey);\n        const address = (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_11__.computeAddress)(this.signingKey.publicKey);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.defineProperties)(this, {\n            address\n        });\n    }\n} //# sourceMappingURL=base-wallet.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/base-wallet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/hdwallet.js":
/*!*********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wallet/hdwallet.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HDNodeVoidWallet: function() { return /* binding */ HDNodeVoidWallet; },\n/* harmony export */   HDNodeWallet: function() { return /* binding */ HDNodeWallet; },\n/* harmony export */   defaultPath: function() { return /* binding */ defaultPath; },\n/* harmony export */   getAccountPath: function() { return /* binding */ getAccountPath; },\n/* harmony export */   getIndexedAccountPath: function() { return /* binding */ getIndexedAccountPath; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _swc_helpers_class_static_private_method_get__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @swc/helpers/_/_class_static_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_static_private_method_get.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/sha2.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/hmac.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signing-key.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/random.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/ripemd160.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../providers/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/providers/abstract-signer.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/address.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/base58.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _wordlists_lang_en_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../wordlists/lang-en.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/lang-en.js\");\n/* harmony import */ var _base_wallet_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./base-wallet.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/base-wallet.js\");\n/* harmony import */ var _mnemonic_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./mnemonic.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/mnemonic.js\");\n/* harmony import */ var _json_keystore_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./json-keystore.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/json-keystore.js\");\n/**\n *  Explain HD Wallets..\n *\n *  @_subsection: api/wallet:HD Wallets  [hd-wallets]\n */ \n\n\n\n\n\n\n\n\n\n\n/**\n *  The default derivation path for Ethereum HD Nodes. (i.e. ``\"m/44'/60'/0'/0/0\"``)\n */ const defaultPath = \"m/44'/60'/0'/0/0\";\n// \"Bitcoin seed\"\nconst MasterSecret = new Uint8Array([\n    66,\n    105,\n    116,\n    99,\n    111,\n    105,\n    110,\n    32,\n    115,\n    101,\n    101,\n    100\n]);\nconst HardenedBit = 0x80000000;\nconst N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\nconst Nibbles = \"0123456789abcdef\";\nfunction zpad(value, length) {\n    let result = \"\";\n    while(value){\n        result = Nibbles[value % 16] + result;\n        value = Math.trunc(value / 16);\n    }\n    while(result.length < length * 2){\n        result = \"0\" + result;\n    }\n    return \"0x\" + result;\n}\nfunction encodeBase58Check(_value) {\n    const value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(_value);\n    const check = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.sha256)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.sha256)(value)), 0, 4);\n    const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\n        value,\n        check\n    ]);\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.encodeBase58)(bytes);\n}\nconst _guard = {};\nfunction ser_I(index, chainCode, publicKey, privateKey) {\n    const data = new Uint8Array(37);\n    if (index & HardenedBit) {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(privateKey != null, \"cannot derive child of neutered node\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"deriveChild\"\n        });\n        // Data = 0x00 || ser_256(k_par)\n        data.set((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(privateKey), 1);\n    } else {\n        // Data = ser_p(point(k_par))\n        data.set((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(publicKey));\n    }\n    // Data += ser_32(i)\n    for(let i = 24; i >= 0; i -= 8){\n        data[33 + (i >> 3)] = index >> 24 - i & 0xff;\n    }\n    const I = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_4__.computeHmac)(\"sha512\", chainCode, data));\n    return {\n        IL: I.slice(0, 32),\n        IR: I.slice(32)\n    };\n}\nfunction derivePath(node, path) {\n    const components = path.split(\"/\");\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(components.length > 0, \"invalid path\", \"path\", path);\n    if (components[0] === \"m\") {\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(node.depth === 0, 'cannot derive root path (i.e. path starting with \"m/\") for a node at non-zero depth '.concat(node.depth), \"path\", path);\n        components.shift();\n    }\n    let result = node;\n    for(let i = 0; i < components.length; i++){\n        const component = components[i];\n        if (component.match(/^[0-9]+'$/)) {\n            const index = parseInt(component.substring(0, component.length - 1));\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(index < HardenedBit, \"invalid path index\", \"path[\".concat(i, \"]\"), component);\n            result = result.deriveChild(HardenedBit + index);\n        } else if (component.match(/^[0-9]+$/)) {\n            const index = parseInt(component);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(index < HardenedBit, \"invalid path index\", \"path[\".concat(i, \"]\"), component);\n            result = result.deriveChild(index);\n        } else {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(false, \"invalid path component\", \"path[\".concat(i, \"]\"), component);\n        }\n    }\n    return result;\n}\nvar _account = /*#__PURE__*/ new WeakSet();\n/**\n *  An **HDNodeWallet** is a [[Signer]] backed by the private key derived\n *  from an HD Node using the [[link-bip-32]] stantard.\n *\n *  An HD Node forms a hierarchal structure with each HD Node having a\n *  private key and the ability to derive child HD Nodes, defined by\n *  a path indicating the index of each child.\n */ class HDNodeWallet extends _base_wallet_js__WEBPACK_IMPORTED_MODULE_5__.BaseWallet {\n    connect(provider) {\n        return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);\n    }\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */ async encrypt(password, progressCallback) {\n        return await (0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_6__.encryptKeystoreJson)((0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_7__._)(this, _account, account).call(this), password, {\n            progressCallback\n        });\n    }\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */ encryptSync(password) {\n        return (0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_6__.encryptKeystoreJsonSync)((0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_7__._)(this, _account, account).call(this), password);\n    }\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpriv`` and can be used to\n     *  reconstruct this HD Node to derive its children.\n     */ get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"extendedKey\"\n        });\n        return encodeBase58Check((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\n            \"0x0488ADE4\",\n            zpad(this.depth, 1),\n            this.parentFingerprint,\n            zpad(this.index, 4),\n            this.chainCode,\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\n                \"0x00\",\n                this.privateKey\n            ])\n        ]));\n    }\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */ hasPath() {\n        return this.path != null;\n    }\n    /**\n     *  Returns a neutered HD Node, which removes the private details\n     *  of an HD Node.\n     *\n     *  A neutered node has no private key, but can be used to derive\n     *  child addresses and other public data about the HD Node.\n     */ neuter() {\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);\n    }\n    /**\n     *  Return the child for %%index%%.\n     */ deriveChild(_index) {\n        const index = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.getNumber)(_index, \"index\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(index <= 0xffffffff, \"invalid index\", \"index\", index);\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n            if (index & HardenedBit) {\n                path += \"'\";\n            }\n        }\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);\n        const ki = new _crypto_index_js__WEBPACK_IMPORTED_MODULE_9__.SigningKey((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.toBeHex)(((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.toBigInt)(IL) + BigInt(this.privateKey)) % N, 32));\n        return new HDNodeWallet(_guard, ki, this.fingerprint, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(IR), path, index, this.depth + 1, this.mnemonic, this.provider);\n    }\n    /**\n     *  Return the HDNode for %%path%% from this node.\n     */ derivePath(path) {\n        return derivePath(this, path);\n    }\n    /**\n     *  Creates a new HD Node from %%extendedKey%%.\n     *\n     *  If the %%extendedKey%% will either have a prefix or ``xpub`` or\n     *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])\n     *  or full HD Node ([[HDNodeWallet) respectively.\n     */ static fromExtendedKey(extendedKey) {\n        const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.toBeArray)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.decodeBase58)(extendedKey)); // @TODO: redact\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, \"invalid extended key\", \"extendedKey\", \"[ REDACTED ]\");\n        const depth = bytes[4];\n        const parentFingerprint = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(5, 9));\n        const index = parseInt((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n        switch((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(0, 4))){\n            // Public Key\n            case \"0x0488b21e\":\n            case \"0x043587cf\":\n                {\n                    const publicKey = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(key);\n                    return new HDNodeVoidWallet(_guard, (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_10__.computeAddress)(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);\n                }\n            // Private Key\n            case \"0x0488ade4\":\n            case \"0x04358394 \":\n                if (key[0] !== 0) {\n                    break;\n                }\n                return new HDNodeWallet(_guard, new _crypto_index_js__WEBPACK_IMPORTED_MODULE_9__.SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(false, \"invalid extended key prefix\", \"extendedKey\", \"[ REDACTED ]\");\n    }\n    /**\n     *  Creates a new random HDNode.\n     */ static createRandom(password, path, wordlist) {\n        if (password == null) {\n            password = \"\";\n        }\n        if (path == null) {\n            path = defaultPath;\n        }\n        if (wordlist == null) {\n            wordlist = _wordlists_lang_en_js__WEBPACK_IMPORTED_MODULE_11__.LangEn.wordlist();\n        }\n        const mnemonic = _mnemonic_js__WEBPACK_IMPORTED_MODULE_12__.Mnemonic.fromEntropy((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_13__.randomBytes)(16), password, wordlist);\n        return (0,_swc_helpers_class_static_private_method_get__WEBPACK_IMPORTED_MODULE_14__._)(HDNodeWallet, HDNodeWallet, fromSeed).call(HDNodeWallet, mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Create an HD Node from %%mnemonic%%.\n     */ static fromMnemonic(mnemonic, path) {\n        if (!path) {\n            path = defaultPath;\n        }\n        return (0,_swc_helpers_class_static_private_method_get__WEBPACK_IMPORTED_MODULE_14__._)(HDNodeWallet, HDNodeWallet, fromSeed).call(HDNodeWallet, mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Creates an HD Node from a mnemonic %%phrase%%.\n     */ static fromPhrase(phrase, password, path, wordlist) {\n        if (password == null) {\n            password = \"\";\n        }\n        if (path == null) {\n            path = defaultPath;\n        }\n        if (wordlist == null) {\n            wordlist = _wordlists_lang_en_js__WEBPACK_IMPORTED_MODULE_11__.LangEn.wordlist();\n        }\n        const mnemonic = _mnemonic_js__WEBPACK_IMPORTED_MODULE_12__.Mnemonic.fromPhrase(phrase, password, wordlist);\n        return (0,_swc_helpers_class_static_private_method_get__WEBPACK_IMPORTED_MODULE_14__._)(HDNodeWallet, HDNodeWallet, fromSeed).call(HDNodeWallet, mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n    /**\n     *  Creates an HD Node from a %%seed%%.\n     */ static fromSeed(seed) {\n        return (0,_swc_helpers_class_static_private_method_get__WEBPACK_IMPORTED_MODULE_14__._)(HDNodeWallet, HDNodeWallet, fromSeed).call(HDNodeWallet, seed, null);\n    }\n    /**\n     *  @private\n     */ constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider){\n        super(signingKey, provider);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_15__._)(this, _account);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertPrivate)(guard, _guard, \"HDNodeWallet\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_16__.defineProperties)(this, {\n            publicKey: signingKey.compressedPublicKey\n        });\n        const fingerprint = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_17__.ripemd160)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.sha256)(this.publicKey)), 0, 4);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_16__.defineProperties)(this, {\n            parentFingerprint,\n            fingerprint,\n            chainCode,\n            path,\n            index,\n            depth\n        });\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_16__.defineProperties)(this, {\n            mnemonic\n        });\n    }\n}\nfunction account() {\n    const account = {\n        address: this.address,\n        privateKey: this.privateKey\n    };\n    const m = this.mnemonic;\n    if (this.path && m && m.wordlist.locale === \"en\" && m.password === \"\") {\n        account.mnemonic = {\n            path: this.path,\n            locale: \"en\",\n            entropy: m.entropy\n        };\n    }\n    return account;\n}\nfunction fromSeed(_seed, mnemonic) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isBytesLike)(_seed), \"invalid seed\", \"seed\", \"[REDACTED]\");\n    const seed = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(_seed, \"seed\");\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(seed.length >= 16 && seed.length <= 64, \"invalid seed\", \"seed\", \"[REDACTED]\");\n    const I = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_4__.computeHmac)(\"sha512\", MasterSecret, seed));\n    const signingKey = new _crypto_index_js__WEBPACK_IMPORTED_MODULE_9__.SigningKey((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(I.slice(0, 32)));\n    return new HDNodeWallet(_guard, signingKey, \"0x00000000\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(I.slice(32)), \"m\", 0, 0, mnemonic, null);\n}\n/**\n *  A **HDNodeVoidWallet** cannot sign, but provides access to\n *  the children nodes of a [[link-bip-32]] HD wallet addresses.\n *\n *  The can be created by using an extended ``xpub`` key to\n *  [[HDNodeWallet_fromExtendedKey]] or by\n *  [nuetering](HDNodeWallet-neuter) a [[HDNodeWallet]].\n */ class HDNodeVoidWallet extends _providers_index_js__WEBPACK_IMPORTED_MODULE_18__.VoidSigner {\n    connect(provider) {\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);\n    }\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpub`` and can be used to\n     *  reconstruct this neutered key to derive its children addresses.\n     */ get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"extendedKey\"\n        });\n        return encodeBase58Check((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\n            \"0x0488B21E\",\n            zpad(this.depth, 1),\n            this.parentFingerprint,\n            zpad(this.index, 4),\n            this.chainCode,\n            this.publicKey\n        ]));\n    }\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */ hasPath() {\n        return this.path != null;\n    }\n    /**\n     *  Return the child for %%index%%.\n     */ deriveChild(_index) {\n        const index = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.getNumber)(_index, \"index\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(index <= 0xffffffff, \"invalid index\", \"index\", index);\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n            if (index & HardenedBit) {\n                path += \"'\";\n            }\n        }\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);\n        const Ki = _crypto_index_js__WEBPACK_IMPORTED_MODULE_9__.SigningKey.addPoints(IL, this.publicKey, true);\n        const address = (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_10__.computeAddress)(Ki);\n        return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(IR), path, index, this.depth + 1, this.provider);\n    }\n    /**\n     *  Return the signer for %%path%% from this node.\n     */ derivePath(path) {\n        return derivePath(this, path);\n    }\n    /**\n     *  @private\n     */ constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider){\n        super(address, provider);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertPrivate)(guard, _guard, \"HDNodeVoidWallet\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_16__.defineProperties)(this, {\n            publicKey\n        });\n        const fingerprint = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_17__.ripemd160)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.sha256)(publicKey)), 0, 4);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_16__.defineProperties)(this, {\n            publicKey,\n            fingerprint,\n            parentFingerprint,\n            chainCode,\n            path,\n            index,\n            depth\n        });\n    }\n}\n/*\nexport class HDNodeWalletManager {\n    #root: HDNodeWallet;\n\n    constructor(phrase: string, password?: null | string, path?: null | string, locale?: null | Wordlist) {\n        if (password == null) { password = \"\"; }\n        if (path == null) { path = \"m/44'/60'/0'/0\"; }\n        if (locale == null) { locale = LangEn.wordlist(); }\n        this.#root = HDNodeWallet.fromPhrase(phrase, password, path, locale);\n    }\n\n    getSigner(index?: number): HDNodeWallet {\n        return this.#root.deriveChild((index == null) ? 0: index);\n    }\n}\n*/ /**\n *  Returns the [[link-bip-32]] path for the account at %%index%%.\n *\n *  This is the pattern used by wallets like Ledger.\n *\n *  There is also an [alternate pattern](getIndexedAccountPath) used by\n *  some software.\n */ function getAccountPath(_index) {\n    const index = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.getNumber)(_index, \"index\");\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n    return \"m/44'/60'/\".concat(index, \"'/0/0\");\n}\n/**\n *  Returns the path using an alternative pattern for deriving accounts,\n *  at %%index%%.\n *\n *  This derivation path uses the //index// component rather than the\n *  //account// component to derive sequential accounts.\n *\n *  This is the pattern used by wallets like MetaMask.\n */ function getIndexedAccountPath(_index) {\n    const index = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.getNumber)(_index, \"index\");\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n    return \"m/44'/60'/0'/0/\".concat(index);\n} //# sourceMappingURL=hdwallet.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/hdwallet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/json-crowdsale.js":
/*!***************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wallet/json-crowdsale.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decryptCrowdsaleJson: function() { return /* binding */ decryptCrowdsaleJson; },\n/* harmony export */   isCrowdsaleJson: function() { return /* binding */ isCrowdsaleJson; }\n/* harmony export */ });\n/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aes-js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/index.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/pbkdf2.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../hash/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/id.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/utils.js\");\n/**\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */ \n\n\n\n\n\n/**\n *  Returns true if %%json%% is a valid JSON Crowdsale wallet.\n */ function isCrowdsaleJson(json) {\n    try {\n        const data = JSON.parse(json);\n        if (data.encseed) {\n            return true;\n        }\n    } catch (error) {}\n    return false;\n}\n// See: https://github.com/ethereum/pyethsaletool\n/**\n *  Before Ethereum launched, it was necessary to create a wallet\n *  format for backers to use, which would be used to receive ether\n *  as a reward for contributing to the project.\n *\n *  The [[link-crowdsale]] format is now obsolete, but it is still\n *  useful to support and the additional code is fairly trivial as\n *  all the primitives required are used through core portions of\n *  the library.\n */ function decryptCrowdsaleJson(json, _password) {\n    const data = JSON.parse(json);\n    const password = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPassword)(_password);\n    // Ethereum Address\n    const address = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"ethaddr:string!\"));\n    // Encrypted Seed\n    const encseed = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.looseArrayify)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"encseed:string!\"));\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(encseed && encseed.length % 16 === 0, \"invalid encseed\", \"json\", json);\n    const key = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.getBytes)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.pbkdf2)(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n    // Decrypt the seed\n    const aesCbc = new aes_js__WEBPACK_IMPORTED_MODULE_0__.CBC(key, iv);\n    const seed = (0,aes_js__WEBPACK_IMPORTED_MODULE_0__.pkcs7Strip)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.getBytes)(aesCbc.decrypt(encryptedSeed)));\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for(let i = 0; i < seed.length; i++){\n        seedHex += String.fromCharCode(seed[i]);\n    }\n    return {\n        address,\n        privateKey: (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_6__.id)(seedHex)\n    };\n} //# sourceMappingURL=json-crowdsale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vd2FsbGV0L2pzb24tY3Jvd2RzYWxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOztDQUVDLEdBQ3dDO0FBQ1E7QUFDTDtBQUNOO0FBQ3VCO0FBQ0k7QUFDakU7O0NBRUMsR0FDTSxTQUFTVSxnQkFBZ0JDLElBQUk7SUFDaEMsSUFBSTtRQUNBLE1BQU1DLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0g7UUFDeEIsSUFBSUMsS0FBS0csT0FBTyxFQUFFO1lBQ2QsT0FBTztRQUNYO0lBQ0osRUFDQSxPQUFPQyxPQUFPLENBQUU7SUFDaEIsT0FBTztBQUNYO0FBQ0EsaURBQWlEO0FBQ2pEOzs7Ozs7Ozs7Q0FTQyxHQUNNLFNBQVNDLHFCQUFxQk4sSUFBSSxFQUFFTyxTQUFTO0lBQ2hELE1BQU1OLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0g7SUFDeEIsTUFBTVEsV0FBV1osc0RBQVdBLENBQUNXO0lBQzdCLG1CQUFtQjtJQUNuQixNQUFNRSxVQUFVbEIsNkRBQVVBLENBQUNPLGtEQUFPQSxDQUFDRyxNQUFNO0lBQ3pDLGlCQUFpQjtJQUNqQixNQUFNRyxVQUFVUCx3REFBYUEsQ0FBQ0Msa0RBQU9BLENBQUNHLE1BQU07SUFDNUNOLCtEQUFjQSxDQUFDUyxXQUFXLFFBQVNNLE1BQU0sR0FBRyxPQUFRLEdBQUcsbUJBQW1CLFFBQVFWO0lBQ2xGLE1BQU1XLE1BQU1qQix5REFBUUEsQ0FBQ0Ysd0RBQU1BLENBQUNnQixVQUFVQSxVQUFVLE1BQU0sSUFBSSxXQUFXSSxLQUFLLENBQUMsR0FBRztJQUM5RSxNQUFNQyxLQUFLVCxRQUFRUSxLQUFLLENBQUMsR0FBRztJQUM1QixNQUFNRSxnQkFBZ0JWLFFBQVFRLEtBQUssQ0FBQztJQUNwQyxtQkFBbUI7SUFDbkIsTUFBTUcsU0FBUyxJQUFJMUIsdUNBQUdBLENBQUNzQixLQUFLRTtJQUM1QixNQUFNRyxPQUFPMUIsa0RBQVVBLENBQUNJLHlEQUFRQSxDQUFDcUIsT0FBT0UsT0FBTyxDQUFDSDtJQUNoRCw2RUFBNkU7SUFDN0UsSUFBSUksVUFBVTtJQUNkLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSCxLQUFLTixNQUFNLEVBQUVTLElBQUs7UUFDbENELFdBQVdFLE9BQU9DLFlBQVksQ0FBQ0wsSUFBSSxDQUFDRyxFQUFFO0lBQzFDO0lBQ0EsT0FBTztRQUFFVjtRQUFTYSxZQUFZN0Isa0RBQUVBLENBQUN5QjtJQUFTO0FBQzlDLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vd2FsbGV0L2pzb24tY3Jvd2RzYWxlLmpzPzY0NjYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvd2FsbGV0OkpTT04gV2FsbGV0cyAgW2pzb24td2FsbGV0c11cbiAqL1xuaW1wb3J0IHsgQ0JDLCBwa2NzN1N0cmlwIH0gZnJvbSBcImFlcy1qc1wiO1xuaW1wb3J0IHsgZ2V0QWRkcmVzcyB9IGZyb20gXCIuLi9hZGRyZXNzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBwYmtkZjIgfSBmcm9tIFwiLi4vY3J5cHRvL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpZCB9IGZyb20gXCIuLi9oYXNoL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRCeXRlcywgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldFBhc3N3b3JkLCBsb29zZUFycmF5aWZ5LCBzcGVsdW5rIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbi8qKlxuICogIFJldHVybnMgdHJ1ZSBpZiAlJWpzb24lJSBpcyBhIHZhbGlkIEpTT04gQ3Jvd2RzYWxlIHdhbGxldC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ3Jvd2RzYWxlSnNvbihqc29uKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgICAgIGlmIChkYXRhLmVuY3NlZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vcHlldGhzYWxldG9vbFxuLyoqXG4gKiAgQmVmb3JlIEV0aGVyZXVtIGxhdW5jaGVkLCBpdCB3YXMgbmVjZXNzYXJ5IHRvIGNyZWF0ZSBhIHdhbGxldFxuICogIGZvcm1hdCBmb3IgYmFja2VycyB0byB1c2UsIHdoaWNoIHdvdWxkIGJlIHVzZWQgdG8gcmVjZWl2ZSBldGhlclxuICogIGFzIGEgcmV3YXJkIGZvciBjb250cmlidXRpbmcgdG8gdGhlIHByb2plY3QuXG4gKlxuICogIFRoZSBbW2xpbmstY3Jvd2RzYWxlXV0gZm9ybWF0IGlzIG5vdyBvYnNvbGV0ZSwgYnV0IGl0IGlzIHN0aWxsXG4gKiAgdXNlZnVsIHRvIHN1cHBvcnQgYW5kIHRoZSBhZGRpdGlvbmFsIGNvZGUgaXMgZmFpcmx5IHRyaXZpYWwgYXNcbiAqICBhbGwgdGhlIHByaW1pdGl2ZXMgcmVxdWlyZWQgYXJlIHVzZWQgdGhyb3VnaCBjb3JlIHBvcnRpb25zIG9mXG4gKiAgdGhlIGxpYnJhcnkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNyeXB0Q3Jvd2RzYWxlSnNvbihqc29uLCBfcGFzc3dvcmQpIHtcbiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICBjb25zdCBwYXNzd29yZCA9IGdldFBhc3N3b3JkKF9wYXNzd29yZCk7XG4gICAgLy8gRXRoZXJldW0gQWRkcmVzc1xuICAgIGNvbnN0IGFkZHJlc3MgPSBnZXRBZGRyZXNzKHNwZWx1bmsoZGF0YSwgXCJldGhhZGRyOnN0cmluZyFcIikpO1xuICAgIC8vIEVuY3J5cHRlZCBTZWVkXG4gICAgY29uc3QgZW5jc2VlZCA9IGxvb3NlQXJyYXlpZnkoc3BlbHVuayhkYXRhLCBcImVuY3NlZWQ6c3RyaW5nIVwiKSk7XG4gICAgYXNzZXJ0QXJndW1lbnQoZW5jc2VlZCAmJiAoZW5jc2VlZC5sZW5ndGggJSAxNikgPT09IDAsIFwiaW52YWxpZCBlbmNzZWVkXCIsIFwianNvblwiLCBqc29uKTtcbiAgICBjb25zdCBrZXkgPSBnZXRCeXRlcyhwYmtkZjIocGFzc3dvcmQsIHBhc3N3b3JkLCAyMDAwLCAzMiwgXCJzaGEyNTZcIikpLnNsaWNlKDAsIDE2KTtcbiAgICBjb25zdCBpdiA9IGVuY3NlZWQuc2xpY2UoMCwgMTYpO1xuICAgIGNvbnN0IGVuY3J5cHRlZFNlZWQgPSBlbmNzZWVkLnNsaWNlKDE2KTtcbiAgICAvLyBEZWNyeXB0IHRoZSBzZWVkXG4gICAgY29uc3QgYWVzQ2JjID0gbmV3IENCQyhrZXksIGl2KTtcbiAgICBjb25zdCBzZWVkID0gcGtjczdTdHJpcChnZXRCeXRlcyhhZXNDYmMuZGVjcnlwdChlbmNyeXB0ZWRTZWVkKSkpO1xuICAgIC8vIFRoaXMgd2FsbGV0IGZvcm1hdCBpcyB3ZWlyZC4uLiBDb252ZXJ0IHRoZSBiaW5hcnkgZW5jb2RlZCBoZXggdG8gYSBzdHJpbmcuXG4gICAgbGV0IHNlZWRIZXggPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWVkSGV4ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoc2VlZFtpXSk7XG4gICAgfVxuICAgIHJldHVybiB7IGFkZHJlc3MsIHByaXZhdGVLZXk6IGlkKHNlZWRIZXgpIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29uLWNyb3dkc2FsZS5qcy5tYXAiXSwibmFtZXMiOlsiQ0JDIiwicGtjczdTdHJpcCIsImdldEFkZHJlc3MiLCJwYmtkZjIiLCJpZCIsImdldEJ5dGVzIiwiYXNzZXJ0QXJndW1lbnQiLCJnZXRQYXNzd29yZCIsImxvb3NlQXJyYXlpZnkiLCJzcGVsdW5rIiwiaXNDcm93ZHNhbGVKc29uIiwianNvbiIsImRhdGEiLCJKU09OIiwicGFyc2UiLCJlbmNzZWVkIiwiZXJyb3IiLCJkZWNyeXB0Q3Jvd2RzYWxlSnNvbiIsIl9wYXNzd29yZCIsInBhc3N3b3JkIiwiYWRkcmVzcyIsImxlbmd0aCIsImtleSIsInNsaWNlIiwiaXYiLCJlbmNyeXB0ZWRTZWVkIiwiYWVzQ2JjIiwic2VlZCIsImRlY3J5cHQiLCJzZWVkSGV4IiwiaSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInByaXZhdGVLZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/json-crowdsale.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/json-keystore.js":
/*!**************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wallet/json-keystore.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decryptKeystoreJson: function() { return /* binding */ decryptKeystoreJson; },\n/* harmony export */   decryptKeystoreJsonSync: function() { return /* binding */ decryptKeystoreJsonSync; },\n/* harmony export */   encryptKeystoreJson: function() { return /* binding */ encryptKeystoreJson; },\n/* harmony export */   encryptKeystoreJsonSync: function() { return /* binding */ encryptKeystoreJsonSync; },\n/* harmony export */   isKeystoreJson: function() { return /* binding */ isKeystoreJson; }\n/* harmony export */ });\n/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aes-js */ \"(app-pages-browser)/../node_modules/aes-js/lib.esm/index.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../address/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/pbkdf2.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/scrypt.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/random.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../transaction/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/transaction/address.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/uuid.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/utils.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../_version.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/_version.js\");\n/**\n *  The JSON Wallet formats allow a simple way to store the private\n *  keys needed in Ethereum along with related information and allows\n *  for extensible forms of encryption.\n *\n *  These utilities facilitate decrypting and encrypting the most common\n *  JSON Wallet formats.\n *\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */ \n\n\n\n\n\n\nconst defaultPath = \"m/44'/60'/0'/0/0\";\n/**\n *  Returns true if %%json%% is a valid JSON Keystore Wallet.\n */ function isKeystoreJson(json) {\n    try {\n        const data = JSON.parse(json);\n        const version = data.version != null ? parseInt(data.version) : 0;\n        if (version === 3) {\n            return true;\n        }\n    } catch (error) {}\n    return false;\n}\nfunction decrypt(data, key, ciphertext) {\n    const cipher = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.cipher:string\");\n    if (cipher === \"aes-128-ctr\") {\n        const iv = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.cipherparams.iv:data!\");\n        const aesCtr = new aes_js__WEBPACK_IMPORTED_MODULE_0__.CTR(key, iv);\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(aesCtr.decrypt(ciphertext));\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(false, \"unsupported cipher\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"decrypt\"\n    });\n}\nfunction getAccount(data, _key) {\n    const key = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(_key);\n    const ciphertext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.ciphertext:data!\");\n    const computedMAC = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_4__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.concat)([\n        key.slice(16, 32),\n        ciphertext\n    ]))).substring(2);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(computedMAC === (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.mac:string!\").toLowerCase(), \"incorrect password\", \"password\", \"[ REDACTED ]\");\n    const privateKey = decrypt(data, key.slice(0, 16), ciphertext);\n    const address = (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_5__.computeAddress)(privateKey);\n    if (data.address) {\n        let check = data.address.toLowerCase();\n        if (!check.startsWith(\"0x\")) {\n            check = \"0x\" + check;\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)((0,_address_index_js__WEBPACK_IMPORTED_MODULE_6__.getAddress)(check) === address, \"keystore address/privateKey mismatch\", \"address\", data.address);\n    }\n    const account = {\n        address,\n        privateKey\n    };\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    const version = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"x-ethers.version:string\");\n    if (version === \"0.1\") {\n        const mnemonicKey = key.slice(32, 64);\n        const mnemonicCiphertext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"x-ethers.mnemonicCiphertext:data!\");\n        const mnemonicIv = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"x-ethers.mnemonicCounter:data!\");\n        const mnemonicAesCtr = new aes_js__WEBPACK_IMPORTED_MODULE_0__.CTR(mnemonicKey, mnemonicIv);\n        account.mnemonic = {\n            path: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"x-ethers.path:string\") || defaultPath,\n            locale: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"x-ethers.locale:string\") || \"en\",\n            entropy: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(mnemonicAesCtr.decrypt(mnemonicCiphertext)))\n        };\n    }\n    return account;\n}\nfunction getDecryptKdfParams(data) {\n    const kdf = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdf:string\");\n    if (kdf && typeof kdf === \"string\") {\n        if (kdf.toLowerCase() === \"scrypt\") {\n            const salt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.salt:data!\");\n            const N = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.n:int!\");\n            const r = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.r:int!\");\n            const p = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.p:int!\");\n            // Make sure N is a power of 2\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(N > 0 && (N & N - 1) === 0, \"invalid kdf.N\", \"kdf.N\", N);\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(r > 0 && p > 0, \"invalid kdf\", \"kdf\", kdf);\n            const dkLen = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.dklen:int!\");\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dflen\", dkLen);\n            return {\n                name: \"scrypt\",\n                salt,\n                N,\n                r,\n                p,\n                dkLen: 64\n            };\n        } else if (kdf.toLowerCase() === \"pbkdf2\") {\n            const salt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.salt:data!\");\n            const prf = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.prf:string!\");\n            const algorithm = prf.split(\"-\").pop();\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(algorithm === \"sha256\" || algorithm === \"sha512\", \"invalid kdf.pdf\", \"kdf.pdf\", prf);\n            const count = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.c:int!\");\n            const dkLen = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.dklen:int!\");\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dklen\", dkLen);\n            return {\n                name: \"pbkdf2\",\n                salt,\n                count,\n                dkLen,\n                algorithm\n            };\n        }\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(false, \"unsupported key-derivation function\", \"kdf\", kdf);\n}\n/**\n *  Returns the account details for the JSON Keystore Wallet %%json%%\n *  using %%password%%.\n *\n *  It is preferred to use the [async version](decryptKeystoreJson)\n *  instead, which allows a [[ProgressCallback]] to keep the user informed\n *  as to the decryption status.\n *\n *  This method will block the event loop (freezing all UI) until decryption\n *  is complete, which can take quite some time, depending on the wallet\n *  paramters and platform.\n */ function decryptKeystoreJsonSync(json, _password) {\n    const data = JSON.parse(json);\n    const password = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPassword)(_password);\n    const params = getDecryptKdfParams(data);\n    if (params.name === \"pbkdf2\") {\n        const { salt, count, dkLen, algorithm } = params;\n        const key = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__.pbkdf2)(password, salt, count, dkLen, algorithm);\n        return getAccount(data, key);\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", {\n        params\n    });\n    const { salt, N, r, p, dkLen } = params;\n    const key = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_8__.scryptSync)(password, salt, N, r, p, dkLen);\n    return getAccount(data, key);\n}\nfunction stall(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(()=>{\n            resolve();\n        }, duration);\n    });\n}\n/**\n *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the\n *  %%password%%.\n *\n *  If provided, %%progress%% will be called periodically during the\n *  decrpytion to provide feedback, and if the function returns\n *  ``false`` will halt decryption.\n *\n *  The %%progressCallback%% will **always** receive ``0`` before\n *  decryption begins and ``1`` when complete.\n */ async function decryptKeystoreJson(json, _password, progress) {\n    const data = JSON.parse(json);\n    const password = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPassword)(_password);\n    const params = getDecryptKdfParams(data);\n    if (params.name === \"pbkdf2\") {\n        if (progress) {\n            progress(0);\n            await stall(0);\n        }\n        const { salt, count, dkLen, algorithm } = params;\n        const key = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_7__.pbkdf2)(password, salt, count, dkLen, algorithm);\n        if (progress) {\n            progress(1);\n            await stall(0);\n        }\n        return getAccount(data, key);\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assert)(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", {\n        params\n    });\n    const { salt, N, r, p, dkLen } = params;\n    const key = await (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_8__.scrypt)(password, salt, N, r, p, dkLen, progress);\n    return getAccount(data, key);\n}\nfunction getEncryptKdfParams(options) {\n    // Check/generate the salt\n    const salt = options.salt != null ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(options.salt, \"options.salt\") : (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_9__.randomBytes)(32);\n    // Override the scrypt password-based key derivation function parameters\n    let N = 1 << 17, r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) {\n            N = options.scrypt.N;\n        }\n        if (options.scrypt.r) {\n            r = options.scrypt.r;\n        }\n        if (options.scrypt.p) {\n            p = options.scrypt.p;\n        }\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(typeof N === \"number\" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), \"invalid scrypt N parameter\", \"options.N\", N);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(typeof r === \"number\" && r > 0 && Number.isSafeInteger(r), \"invalid scrypt r parameter\", \"options.r\", r);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(typeof p === \"number\" && p > 0 && Number.isSafeInteger(p), \"invalid scrypt p parameter\", \"options.p\", p);\n    return {\n        name: \"scrypt\",\n        dkLen: 32,\n        salt,\n        N,\n        r,\n        p\n    };\n}\nfunction _encryptKeystore(key, kdf, account, options) {\n    const privateKey = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(account.privateKey, \"privateKey\");\n    // Override initialization vector\n    const iv = options.iv != null ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(options.iv, \"options.iv\") : (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_9__.randomBytes)(16);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(iv.length === 16, \"invalid options.iv length\", \"options.iv\", options.iv);\n    // Override the uuid\n    const uuidRandom = options.uuid != null ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(options.uuid, \"options.uuid\") : (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_9__.randomBytes)(16);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(uuidRandom.length === 16, \"invalid options.uuid length\", \"options.uuid\", options.iv);\n    // This will be used to encrypt the wallet (as per Web3 secret storage)\n    // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    const derivedKey = key.slice(0, 16);\n    const macPrefix = key.slice(16, 32);\n    // Encrypt the private key\n    const aesCtr = new aes_js__WEBPACK_IMPORTED_MODULE_0__.CTR(derivedKey, iv);\n    const ciphertext = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(aesCtr.encrypt(privateKey));\n    // Compute the message authentication code, used to check the password\n    const mac = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_4__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.concat)([\n        macPrefix,\n        ciphertext\n    ]));\n    // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n    const data = {\n        address: account.address.substring(2).toLowerCase(),\n        id: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__.uuidV4)(uuidRandom),\n        version: 3,\n        Crypto: {\n            cipher: \"aes-128-ctr\",\n            cipherparams: {\n                iv: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(iv).substring(2)\n            },\n            ciphertext: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(ciphertext).substring(2),\n            kdf: \"scrypt\",\n            kdfparams: {\n                salt: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(kdf.salt).substring(2),\n                n: kdf.N,\n                dklen: 32,\n                p: kdf.p,\n                r: kdf.r\n            },\n            mac: mac.substring(2)\n        }\n    };\n    // If we have a mnemonic, encrypt it into the JSON wallet\n    if (account.mnemonic) {\n        const client = options.client != null ? options.client : \"ethers/\".concat(_version_js__WEBPACK_IMPORTED_MODULE_11__.version);\n        const path = account.mnemonic.path || defaultPath;\n        const locale = account.mnemonic.locale || \"en\";\n        const mnemonicKey = key.slice(32, 64);\n        const entropy = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(account.mnemonic.entropy, \"account.mnemonic.entropy\");\n        const mnemonicIv = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_9__.randomBytes)(16);\n        const mnemonicAesCtr = new aes_js__WEBPACK_IMPORTED_MODULE_0__.CTR(mnemonicKey, mnemonicIv);\n        const mnemonicCiphertext = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(mnemonicAesCtr.encrypt(entropy));\n        const now = new Date();\n        const timestamp = now.getUTCFullYear() + \"-\" + (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.zpad)(now.getUTCMonth() + 1, 2) + \"-\" + (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.zpad)(now.getUTCDate(), 2) + \"T\" + (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.zpad)(now.getUTCHours(), 2) + \"-\" + (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.zpad)(now.getUTCMinutes(), 2) + \"-\" + (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.zpad)(now.getUTCSeconds(), 2) + \".0Z\";\n        const gethFilename = \"UTC--\" + timestamp + \"--\" + data.address;\n        data[\"x-ethers\"] = {\n            client,\n            gethFilename,\n            path,\n            locale,\n            mnemonicCounter: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(mnemonicIv).substring(2),\n            mnemonicCiphertext: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(mnemonicCiphertext).substring(2),\n            version: \"0.1\"\n        };\n    }\n    return JSON.stringify(data);\n}\n/**\n *  Return the JSON Keystore Wallet for %%account%% encrypted with\n *  %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used. Any provided [[ProgressCallback]] is ignord.\n */ function encryptKeystoreJsonSync(account, password, options) {\n    if (options == null) {\n        options = {};\n    }\n    const passwordBytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPassword)(password);\n    const kdf = getEncryptKdfParams(options);\n    const key = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_8__.scryptSync)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);\n    return _encryptKeystore((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(key), kdf, account, options);\n}\n/**\n *  Resolved to the JSON Keystore Wallet for %%account%% encrypted\n *  with %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used and provide a [[ProgressCallback]] to receive periodic updates\n *  on the completion status..\n */ async function encryptKeystoreJson(account, password, options) {\n    if (options == null) {\n        options = {};\n    }\n    const passwordBytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPassword)(password);\n    const kdf = getEncryptKdfParams(options);\n    const key = await (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_8__.scrypt)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);\n    return _encryptKeystore((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(key), kdf, account, options);\n} //# sourceMappingURL=json-keystore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/json-keystore.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/mnemonic.js":
/*!*********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wallet/mnemonic.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mnemonic: function() { return /* binding */ Mnemonic; }\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/sha2.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/pbkdf2.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _wordlists_lang_en_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../wordlists/lang-en.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/lang-en.js\");\n\n\n\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n    return (1 << bits) - 1 << 8 - bits & 0xff;\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n    return (1 << bits) - 1 & 0xff;\n}\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertNormalize)(\"NFKD\");\n    if (wordlist == null) {\n        wordlist = _wordlists_lang_en_js__WEBPACK_IMPORTED_MODULE_1__.LangEn.wordlist();\n    }\n    const words = wordlist.split(mnemonic);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(words.length % 3 === 0 && words.length >= 12 && words.length <= 24, \"invalid mnemonic length\", \"mnemonic\", \"[ REDACTED ]\");\n    const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));\n    let offset = 0;\n    for(let i = 0; i < words.length; i++){\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(index >= 0, \"invalid mnemonic word at index \".concat(i), \"mnemonic\", \"[ REDACTED ]\");\n        for(let bit = 0; bit < 11; bit++){\n            if (index & 1 << 10 - bit) {\n                entropy[offset >> 3] |= 1 << 7 - offset % 8;\n            }\n            offset++;\n        }\n    }\n    const entropyBits = 32 * words.length / 3;\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n    const checksum = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(checksum === (entropy[entropy.length - 1] & checksumMask), \"invalid mnemonic checksum\", \"mnemonic\", \"[ REDACTED ]\");\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(entropy.slice(0, entropyBits / 8));\n}\nfunction entropyToMnemonic(entropy, wordlist) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, \"invalid entropy size\", \"entropy\", \"[ REDACTED ]\");\n    if (wordlist == null) {\n        wordlist = _wordlists_lang_en_js__WEBPACK_IMPORTED_MODULE_1__.LangEn.wordlist();\n    }\n    const indices = [\n        0\n    ];\n    let remainingBits = 11;\n    for(let i = 0; i < entropy.length; i++){\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n            remainingBits -= 8;\n        // This byte will complete an 11-bit index\n        } else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n            remainingBits += 3;\n        }\n    }\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = parseInt((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.sha256)(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n    return wordlist.join(indices.map((index)=>wordlist.getWord(index)));\n}\nconst _guard = {};\n/**\n *  A **Mnemonic** wraps all properties required to compute [[link-bip-39]]\n *  seeds and convert between phrases and entropy.\n */ class Mnemonic {\n    /**\n     *  Returns the seed for the mnemonic.\n     */ computeSeed() {\n        const salt = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.toUtf8Bytes)(\"mnemonic\" + this.password, \"NFKD\");\n        return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.pbkdf2)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.toUtf8Bytes)(this.phrase, \"NFKD\"), salt, 2048, 64, \"sha512\");\n    }\n    /**\n     *  Creates a new Mnemonic for the %%phrase%%.\n     *\n     *  The default %%password%% is the empty string and the default\n     *  wordlist is the [English wordlists](LangEn).\n     */ static fromPhrase(phrase, password, wordlist) {\n        // Normalize the case and space; throws if invalid\n        const entropy = mnemonicToEntropy(phrase, wordlist);\n        phrase = entropyToMnemonic((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(entropy), wordlist);\n        return new Mnemonic(_guard, entropy, phrase, password, wordlist);\n    }\n    /**\n     *  Create a new **Mnemonic** from the %%entropy%%.\n     *\n     *  The default %%password%% is the empty string and the default\n     *  wordlist is the [English wordlists](LangEn).\n     */ static fromEntropy(_entropy, password, wordlist) {\n        const entropy = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(_entropy, \"entropy\");\n        const phrase = entropyToMnemonic(entropy, wordlist);\n        return new Mnemonic(_guard, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(entropy), phrase, password, wordlist);\n    }\n    /**\n     *  Returns the phrase for %%mnemonic%%.\n     */ static entropyToPhrase(_entropy, wordlist) {\n        const entropy = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(_entropy, \"entropy\");\n        return entropyToMnemonic(entropy, wordlist);\n    }\n    /**\n     *  Returns the entropy for %%phrase%%.\n     */ static phraseToEntropy(phrase, wordlist) {\n        return mnemonicToEntropy(phrase, wordlist);\n    }\n    /**\n     *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.\n     *\n     *  This checks all the provided words belong to the %%wordlist%%,\n     *  that the length is valid and the checksum is correct.\n     */ static isValidMnemonic(phrase, wordlist) {\n        try {\n            mnemonicToEntropy(phrase, wordlist);\n            return true;\n        } catch (error) {}\n        return false;\n    }\n    /**\n     *  @private\n     */ constructor(guard, entropy, phrase, password, wordlist){\n        if (password == null) {\n            password = \"\";\n        }\n        if (wordlist == null) {\n            wordlist = _wordlists_lang_en_js__WEBPACK_IMPORTED_MODULE_1__.LangEn.wordlist();\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertPrivate)(guard, _guard, \"Mnemonic\");\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_6__.defineProperties)(this, {\n            phrase,\n            password,\n            wordlist,\n            entropy\n        });\n    }\n} //# sourceMappingURL=mnemonic.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/mnemonic.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/utils.js":
/*!******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wallet/utils.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPassword: function() { return /* binding */ getPassword; },\n/* harmony export */   looseArrayify: function() { return /* binding */ looseArrayify; },\n/* harmony export */   spelunk: function() { return /* binding */ spelunk; },\n/* harmony export */   zpad: function() { return /* binding */ zpad; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/**\n *  @_ignore\n */ \nfunction looseArrayify(hexString) {\n    if (typeof hexString === \"string\" && !hexString.startsWith(\"0x\")) {\n        hexString = \"0x\" + hexString;\n    }\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)(hexString);\n}\nfunction zpad(value, length) {\n    value = String(value);\n    while(value.length < length){\n        value = \"0\" + value;\n    }\n    return value;\n}\nfunction getPassword(password) {\n    if (typeof password === \"string\") {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(password, \"NFKC\");\n    }\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)(password);\n}\nfunction spelunk(object, _path) {\n    const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(match != null, \"invalid path\", \"path\", _path);\n    const path = match[1];\n    const type = match[3];\n    const reqd = match[4] === \"!\";\n    let cur = object;\n    for (const comp of path.toLowerCase().split(\".\")){\n        // Search for a child object with a case-insensitive matching key\n        if (Array.isArray(cur)) {\n            if (!comp.match(/^[0-9]+$/)) {\n                break;\n            }\n            cur = cur[parseInt(comp)];\n        } else if (typeof cur === \"object\") {\n            let found = null;\n            for(const key in cur){\n                if (key.toLowerCase() === comp) {\n                    found = cur[key];\n                    break;\n                }\n            }\n            cur = found;\n        } else {\n            cur = null;\n        }\n        if (cur == null) {\n            break;\n        }\n    }\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(!reqd || cur != null, \"missing required value\", \"path\", path);\n    if (type && cur != null) {\n        if (type === \"int\") {\n            if (typeof cur === \"string\" && cur.match(/^-?[0-9]+$/)) {\n                return parseInt(cur);\n            } else if (Number.isSafeInteger(cur)) {\n                return cur;\n            }\n        }\n        if (type === \"number\") {\n            if (typeof cur === \"string\" && cur.match(/^-?[0-9.]*$/)) {\n                return parseFloat(cur);\n            }\n        }\n        if (type === \"data\") {\n            if (typeof cur === \"string\") {\n                return looseArrayify(cur);\n            }\n        }\n        if (type === \"array\" && Array.isArray(cur)) {\n            return cur;\n        }\n        if (type === typeof cur) {\n            return cur;\n        }\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(false, \"wrong type found for \".concat(type, \" \"), \"path\", path);\n    }\n    return cur;\n} /*\nexport function follow(object: any, path: string): null | string {\n    let currentChild = object;\n\n    for (const comp of path.toLowerCase().split('/')) {\n\n        // Search for a child object with a case-insensitive matching key\n        let matchingChild = null;\n        for (const key in currentChild) {\n             if (key.toLowerCase() === comp) {\n                 matchingChild = currentChild[key];\n                 break;\n             }\n        }\n\n        if (matchingChild === null) { return null; }\n\n        currentChild = matchingChild;\n    }\n\n    return currentChild;\n}\n\n// \"path/to/something:type!\"\nexport function followRequired(data: any, path: string): string {\n    const value = follow(data, path);\n    if (value != null) { return value; }\n    return logger.throwArgumentError(\"invalid value\", `data:${ path }`,\n    JSON.stringify(data));\n}\n*/  // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n /*\nexport function uuidV4(randomBytes: BytesLike): string {\n    const bytes = getBytes(randomBytes, \"randomBytes\");\n\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    const value = hexlify(bytes);\n\n    return [\n       value.substring(2, 10),\n       value.substring(10, 14),\n       value.substring(14, 18),\n       value.substring(18, 22),\n       value.substring(22, 34),\n    ].join(\"-\");\n}\n*/  //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/wallet.js":
/*!*******************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wallet/wallet.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Wallet: function() { return /* binding */ Wallet; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_static_private_method_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_static_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_static_private_method_get.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../crypto/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/crypto/signing-key.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _base_wallet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base-wallet.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/base-wallet.js\");\n/* harmony import */ var _hdwallet_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hdwallet.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/hdwallet.js\");\n/* harmony import */ var _json_crowdsale_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./json-crowdsale.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/json-crowdsale.js\");\n/* harmony import */ var _json_keystore_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./json-keystore.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/json-keystore.js\");\n/* harmony import */ var _mnemonic_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mnemonic.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/mnemonic.js\");\n\n\n\n\n\n\n\n\nfunction stall(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(()=>{\n            resolve();\n        }, duration);\n    });\n}\n/**\n *  A **Wallet** manages a single private key which is used to sign\n *  transactions, messages and other common payloads.\n *\n *  This class is generally the main entry point for developers\n *  that wish to use a private key directly, as it can create\n *  instances from a large variety of common sources, including\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\n *  wallets.\n */ class Wallet extends _base_wallet_js__WEBPACK_IMPORTED_MODULE_0__.BaseWallet {\n    connect(provider) {\n        return new Wallet(this.signingKey, provider);\n    }\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */ async encrypt(password, progressCallback) {\n        const account = {\n            address: this.address,\n            privateKey: this.privateKey\n        };\n        return await (0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_1__.encryptKeystoreJson)(account, password, {\n            progressCallback\n        });\n    }\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */ encryptSync(password) {\n        const account = {\n            address: this.address,\n            privateKey: this.privateKey\n        };\n        return (0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_1__.encryptKeystoreJsonSync)(account, password);\n    }\n    /**\n     *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\n     *  with %%password%%.\n     *\n     *  If %%progress%% is provided, it is called periodically during\n     *  decryption so that any UI can be updated.\n     */ static async fromEncryptedJson(json, password, progress) {\n        let account = null;\n        if ((0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_1__.isKeystoreJson)(json)) {\n            account = await (0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_1__.decryptKeystoreJson)(json, password, progress);\n        } else if ((0,_json_crowdsale_js__WEBPACK_IMPORTED_MODULE_2__.isCrowdsaleJson)(json)) {\n            if (progress) {\n                progress(0);\n                await stall(0);\n            }\n            account = (0,_json_crowdsale_js__WEBPACK_IMPORTED_MODULE_2__.decryptCrowdsaleJson)(json, password);\n            if (progress) {\n                progress(1);\n                await stall(0);\n            }\n        }\n        return (0,_swc_helpers_class_static_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(Wallet, Wallet, fromAccount).call(Wallet, account);\n    }\n    /**\n     *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\n     *\n     *  The [[fromEncryptedJson]] method is preferred, as this method\n     *  will lock up and freeze the UI during decryption, which may take\n     *  some time.\n     */ static fromEncryptedJsonSync(json, password) {\n        let account = null;\n        if ((0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_1__.isKeystoreJson)(json)) {\n            account = (0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_1__.decryptKeystoreJsonSync)(json, password);\n        } else if ((0,_json_crowdsale_js__WEBPACK_IMPORTED_MODULE_2__.isCrowdsaleJson)(json)) {\n            account = (0,_json_crowdsale_js__WEBPACK_IMPORTED_MODULE_2__.decryptCrowdsaleJson)(json, password);\n        } else {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n        }\n        return (0,_swc_helpers_class_static_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(Wallet, Wallet, fromAccount).call(Wallet, account);\n    }\n    /**\n     *  Creates a new random [[HDNodeWallet]] using the available\n     *  [cryptographic random source](randomBytes).\n     *\n     *  If there is no crytographic random source, this will throw.\n     */ static createRandom(provider) {\n        const wallet = _hdwallet_js__WEBPACK_IMPORTED_MODULE_5__.HDNodeWallet.createRandom();\n        if (provider) {\n            return wallet.connect(provider);\n        }\n        return wallet;\n    }\n    /**\n     *  Creates a [[HDNodeWallet]] for %%phrase%%.\n     */ static fromPhrase(phrase, provider) {\n        const wallet = _hdwallet_js__WEBPACK_IMPORTED_MODULE_5__.HDNodeWallet.fromPhrase(phrase);\n        if (provider) {\n            return wallet.connect(provider);\n        }\n        return wallet;\n    }\n    /**\n     *  Create a new wallet for the private %%key%%, optionally connected\n     *  to %%provider%%.\n     */ constructor(key, provider){\n        if (typeof key === \"string\" && !key.startsWith(\"0x\")) {\n            key = \"0x\" + key;\n        }\n        let signingKey = typeof key === \"string\" ? new _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__.SigningKey(key) : key;\n        super(signingKey, provider);\n    }\n} //# sourceMappingURL=wallet.js.map\nfunction fromAccount(account) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n    if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\n        const mnemonic = _mnemonic_js__WEBPACK_IMPORTED_MODULE_7__.Mnemonic.fromEntropy(account.mnemonic.entropy);\n        const wallet = _hdwallet_js__WEBPACK_IMPORTED_MODULE_5__.HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\n        if (wallet.address === account.address && wallet.privateKey === account.privateKey) {\n            return wallet;\n        }\n        console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\n    }\n    const wallet = new Wallet(account.privateKey);\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(wallet.address === account.address, \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\n    return wallet;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wallet/wallet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/bit-reader.js":
/*!**************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wordlists/bit-reader.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeBits: function() { return /* binding */ decodeBits; }\n/* harmony export */ });\nconst Base64 = \")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\";\n/**\n *  @_ignore\n */ function decodeBits(width, data) {\n    const maxValue = (1 << width) - 1;\n    const result = [];\n    let accum = 0, bits = 0, flood = 0;\n    for(let i = 0; i < data.length; i++){\n        // Accumulate 6 bits of data\n        accum = accum << 6 | Base64.indexOf(data[i]);\n        bits += 6;\n        // While we have enough for a word...\n        while(bits >= width){\n            // ...read the word\n            const value = accum >> bits - width;\n            accum &= (1 << bits - width) - 1;\n            bits -= width;\n            // A value of 0 indicates we exceeded maxValue, it\n            // floods over into the next value\n            if (value === 0) {\n                flood += maxValue;\n            } else {\n                result.push(value + flood);\n                flood = 0;\n            }\n        }\n    }\n    return result;\n} //# sourceMappingURL=bit-reader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vd29yZGxpc3RzL2JpdC1yZWFkZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFNBQVM7QUFDZjs7Q0FFQyxHQUNNLFNBQVNDLFdBQVdDLEtBQUssRUFBRUMsSUFBSTtJQUNsQyxNQUFNQyxXQUFXLENBQUMsS0FBS0YsS0FBSSxJQUFLO0lBQ2hDLE1BQU1HLFNBQVMsRUFBRTtJQUNqQixJQUFJQyxRQUFRLEdBQUdDLE9BQU8sR0FBR0MsUUFBUTtJQUNqQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSU4sS0FBS08sTUFBTSxFQUFFRCxJQUFLO1FBQ2xDLDRCQUE0QjtRQUM1QkgsUUFBUyxTQUFVLElBQUtOLE9BQU9XLE9BQU8sQ0FBQ1IsSUFBSSxDQUFDTSxFQUFFO1FBQzlDRixRQUFRO1FBQ1IscUNBQXFDO1FBQ3JDLE1BQU9BLFFBQVFMLE1BQU87WUFDbEIsbUJBQW1CO1lBQ25CLE1BQU1VLFFBQVNOLFNBQVVDLE9BQU9MO1lBQ2hDSSxTQUFTLENBQUMsS0FBTUMsT0FBT0wsS0FBSyxJQUFLO1lBQ2pDSyxRQUFRTDtZQUNSLGtEQUFrRDtZQUNsRCxrQ0FBa0M7WUFDbEMsSUFBSVUsVUFBVSxHQUFHO2dCQUNiSixTQUFTSjtZQUNiLE9BQ0s7Z0JBQ0RDLE9BQU9RLElBQUksQ0FBQ0QsUUFBUUo7Z0JBQ3BCQSxRQUFRO1lBQ1o7UUFDSjtJQUNKO0lBQ0EsT0FBT0g7QUFDWCxFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3dvcmRsaXN0cy9iaXQtcmVhZGVyLmpzP2ZiMTEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQmFzZTY0ID0gXCIpIUAjJCVeJiooQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei1fXCI7XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlQml0cyh3aWR0aCwgZGF0YSkge1xuICAgIGNvbnN0IG1heFZhbHVlID0gKDEgPDwgd2lkdGgpIC0gMTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgYWNjdW0gPSAwLCBiaXRzID0gMCwgZmxvb2QgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBBY2N1bXVsYXRlIDYgYml0cyBvZiBkYXRhXG4gICAgICAgIGFjY3VtID0gKChhY2N1bSA8PCA2KSB8IEJhc2U2NC5pbmRleE9mKGRhdGFbaV0pKTtcbiAgICAgICAgYml0cyArPSA2O1xuICAgICAgICAvLyBXaGlsZSB3ZSBoYXZlIGVub3VnaCBmb3IgYSB3b3JkLi4uXG4gICAgICAgIHdoaWxlIChiaXRzID49IHdpZHRoKSB7XG4gICAgICAgICAgICAvLyAuLi5yZWFkIHRoZSB3b3JkXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IChhY2N1bSA+PiAoYml0cyAtIHdpZHRoKSk7XG4gICAgICAgICAgICBhY2N1bSAmPSAoMSA8PCAoYml0cyAtIHdpZHRoKSkgLSAxO1xuICAgICAgICAgICAgYml0cyAtPSB3aWR0aDtcbiAgICAgICAgICAgIC8vIEEgdmFsdWUgb2YgMCBpbmRpY2F0ZXMgd2UgZXhjZWVkZWQgbWF4VmFsdWUsIGl0XG4gICAgICAgICAgICAvLyBmbG9vZHMgb3ZlciBpbnRvIHRoZSBuZXh0IHZhbHVlXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBmbG9vZCArPSBtYXhWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlICsgZmxvb2QpO1xuICAgICAgICAgICAgICAgIGZsb29kID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Yml0LXJlYWRlci5qcy5tYXAiXSwibmFtZXMiOlsiQmFzZTY0IiwiZGVjb2RlQml0cyIsIndpZHRoIiwiZGF0YSIsIm1heFZhbHVlIiwicmVzdWx0IiwiYWNjdW0iLCJiaXRzIiwiZmxvb2QiLCJpIiwibGVuZ3RoIiwiaW5kZXhPZiIsInZhbHVlIiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/bit-reader.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/decode-owl.js":
/*!**************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wordlists/decode-owl.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   decodeOwl: function() { return /* binding */ decodeOwl; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n\nconst subsChrs = \" !#$%&'()*+,-./<=>?@[]^_`{|}~\";\nconst Word = /^[a-z]*$/i;\nfunction unfold(words, sep) {\n    let initial = 97;\n    return words.reduce((accum, word)=>{\n        if (word === sep) {\n            initial++;\n        } else if (word.match(Word)) {\n            accum.push(String.fromCharCode(initial) + word);\n        } else {\n            initial = 97;\n            accum.push(word);\n        }\n        return accum;\n    }, []);\n}\n/**\n *  @_ignore\n */ function decode(data, subs) {\n    // Replace all the substitutions with their expanded form\n    for(let i = subsChrs.length - 1; i >= 0; i--){\n        data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));\n    }\n    // Get all tle clumps; each suffix, first-increment and second-increment\n    const clumps = [];\n    const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word)=>{\n        if (semi) {\n            for(let i = parseInt(semi); i >= 0; i--){\n                clumps.push(\";\");\n            }\n        } else {\n            clumps.push(item.toLowerCase());\n        }\n        return \"\";\n    });\n    /* c8 ignore start */ if (leftover) {\n        throw new Error(\"leftovers: \".concat(JSON.stringify(leftover)));\n    }\n    /* c8 ignore stop */ return unfold(unfold(clumps, \";\"), \":\");\n}\n/**\n *  @_ignore\n */ function decodeOwl(data) {\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(data[0] === \"0\", \"unsupported auwl data\", \"data\", data);\n    return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));\n} //# sourceMappingURL=decode-owl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vd29yZGxpc3RzL2RlY29kZS1vd2wuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1EO0FBQ25ELE1BQU1DLFdBQVc7QUFDakIsTUFBTUMsT0FBTztBQUNiLFNBQVNDLE9BQU9DLEtBQUssRUFBRUMsR0FBRztJQUN0QixJQUFJQyxVQUFVO0lBQ2QsT0FBT0YsTUFBTUcsTUFBTSxDQUFDLENBQUNDLE9BQU9DO1FBQ3hCLElBQUlBLFNBQVNKLEtBQUs7WUFDZEM7UUFDSixPQUNLLElBQUlHLEtBQUtDLEtBQUssQ0FBQ1IsT0FBTztZQUN2Qk0sTUFBTUcsSUFBSSxDQUFDQyxPQUFPQyxZQUFZLENBQUNQLFdBQVdHO1FBQzlDLE9BQ0s7WUFDREgsVUFBVTtZQUNWRSxNQUFNRyxJQUFJLENBQUNGO1FBQ2Y7UUFDQSxPQUFPRDtJQUNYLEdBQUcsRUFBRTtBQUNUO0FBQ0E7O0NBRUMsR0FDTSxTQUFTTSxPQUFPQyxJQUFJLEVBQUVDLElBQUk7SUFDN0IseURBQXlEO0lBQ3pELElBQUssSUFBSUMsSUFBSWhCLFNBQVNpQixNQUFNLEdBQUcsR0FBR0QsS0FBSyxHQUFHQSxJQUFLO1FBQzNDRixPQUFPQSxLQUFLSSxLQUFLLENBQUNsQixRQUFRLENBQUNnQixFQUFFLEVBQUVHLElBQUksQ0FBQ0osS0FBS0ssU0FBUyxDQUFDLElBQUlKLEdBQUcsSUFBSUEsSUFBSTtJQUN0RTtJQUNBLHdFQUF3RTtJQUN4RSxNQUFNSyxTQUFTLEVBQUU7SUFDakIsTUFBTUMsV0FBV1IsS0FBS1MsT0FBTyxDQUFDLDhCQUE4QixDQUFDQyxLQUFLQyxNQUFNQyxNQUFNbEI7UUFDMUUsSUFBSWtCLE1BQU07WUFDTixJQUFLLElBQUlWLElBQUlXLFNBQVNELE9BQU9WLEtBQUssR0FBR0EsSUFBSztnQkFDdENLLE9BQU9YLElBQUksQ0FBQztZQUNoQjtRQUNKLE9BQ0s7WUFDRFcsT0FBT1gsSUFBSSxDQUFDZSxLQUFLRyxXQUFXO1FBQ2hDO1FBQ0EsT0FBTztJQUNYO0lBQ0EsbUJBQW1CLEdBQ25CLElBQUlOLFVBQVU7UUFDVixNQUFNLElBQUlPLE1BQU0sY0FBdUMsT0FBekJDLEtBQUtDLFNBQVMsQ0FBQ1Q7SUFDakQ7SUFDQSxrQkFBa0IsR0FDbEIsT0FBT3BCLE9BQU9BLE9BQU9tQixRQUFRLE1BQU07QUFDdkM7QUFDQTs7Q0FFQyxHQUNNLFNBQVNXLFVBQVVsQixJQUFJO0lBQzFCZiwrREFBY0EsQ0FBQ2UsSUFBSSxDQUFDLEVBQUUsS0FBSyxLQUFLLHlCQUF5QixRQUFRQTtJQUNqRSxPQUFPRCxPQUFPQyxLQUFLTSxTQUFTLENBQUMsSUFBSSxJQUFJcEIsU0FBU2lCLE1BQU0sR0FBR0gsS0FBS00sU0FBUyxDQUFDLEdBQUcsSUFBSSxJQUFJcEIsU0FBU2lCLE1BQU07QUFDcEcsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93b3JkbGlzdHMvZGVjb2RlLW93bC5qcz8wNTcyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5jb25zdCBzdWJzQ2hycyA9IFwiICEjJCUmJygpKissLS4vPD0+P0BbXV5fYHt8fX5cIjtcbmNvbnN0IFdvcmQgPSAvXlthLXpdKiQvaTtcbmZ1bmN0aW9uIHVuZm9sZCh3b3Jkcywgc2VwKSB7XG4gICAgbGV0IGluaXRpYWwgPSA5NztcbiAgICByZXR1cm4gd29yZHMucmVkdWNlKChhY2N1bSwgd29yZCkgPT4ge1xuICAgICAgICBpZiAod29yZCA9PT0gc2VwKSB7XG4gICAgICAgICAgICBpbml0aWFsKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAod29yZC5tYXRjaChXb3JkKSkge1xuICAgICAgICAgICAgYWNjdW0ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGluaXRpYWwpICsgd29yZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbml0aWFsID0gOTc7XG4gICAgICAgICAgICBhY2N1bS5wdXNoKHdvcmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2N1bTtcbiAgICB9LCBbXSk7XG59XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKGRhdGEsIHN1YnMpIHtcbiAgICAvLyBSZXBsYWNlIGFsbCB0aGUgc3Vic3RpdHV0aW9ucyB3aXRoIHRoZWlyIGV4cGFuZGVkIGZvcm1cbiAgICBmb3IgKGxldCBpID0gc3Vic0NocnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgZGF0YSA9IGRhdGEuc3BsaXQoc3Vic0NocnNbaV0pLmpvaW4oc3Vicy5zdWJzdHJpbmcoMiAqIGksIDIgKiBpICsgMikpO1xuICAgIH1cbiAgICAvLyBHZXQgYWxsIHRsZSBjbHVtcHM7IGVhY2ggc3VmZml4LCBmaXJzdC1pbmNyZW1lbnQgYW5kIHNlY29uZC1pbmNyZW1lbnRcbiAgICBjb25zdCBjbHVtcHMgPSBbXTtcbiAgICBjb25zdCBsZWZ0b3ZlciA9IGRhdGEucmVwbGFjZSgvKDp8KFswLTldKXwoW0EtWl1bYS16XSopKS9nLCAoYWxsLCBpdGVtLCBzZW1pLCB3b3JkKSA9PiB7XG4gICAgICAgIGlmIChzZW1pKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gcGFyc2VJbnQoc2VtaSk7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgY2x1bXBzLnB1c2goXCI7XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2x1bXBzLnB1c2goaXRlbS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9KTtcbiAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICBpZiAobGVmdG92ZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBsZWZ0b3ZlcnM6ICR7SlNPTi5zdHJpbmdpZnkobGVmdG92ZXIpfWApO1xuICAgIH1cbiAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgIHJldHVybiB1bmZvbGQodW5mb2xkKGNsdW1wcywgXCI7XCIpLCBcIjpcIik7XG59XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlT3dsKGRhdGEpIHtcbiAgICBhc3NlcnRBcmd1bWVudChkYXRhWzBdID09PSBcIjBcIiwgXCJ1bnN1cHBvcnRlZCBhdXdsIGRhdGFcIiwgXCJkYXRhXCIsIGRhdGEpO1xuICAgIHJldHVybiBkZWNvZGUoZGF0YS5zdWJzdHJpbmcoMSArIDIgKiBzdWJzQ2hycy5sZW5ndGgpLCBkYXRhLnN1YnN0cmluZygxLCAxICsgMiAqIHN1YnNDaHJzLmxlbmd0aCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb2RlLW93bC5qcy5tYXAiXSwibmFtZXMiOlsiYXNzZXJ0QXJndW1lbnQiLCJzdWJzQ2hycyIsIldvcmQiLCJ1bmZvbGQiLCJ3b3JkcyIsInNlcCIsImluaXRpYWwiLCJyZWR1Y2UiLCJhY2N1bSIsIndvcmQiLCJtYXRjaCIsInB1c2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJkZWNvZGUiLCJkYXRhIiwic3VicyIsImkiLCJsZW5ndGgiLCJzcGxpdCIsImpvaW4iLCJzdWJzdHJpbmciLCJjbHVtcHMiLCJsZWZ0b3ZlciIsInJlcGxhY2UiLCJhbGwiLCJpdGVtIiwic2VtaSIsInBhcnNlSW50IiwidG9Mb3dlckNhc2UiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZWNvZGVPd2wiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/decode-owl.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/decode-owla.js":
/*!***************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wordlists/decode-owla.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeOwlA: function() { return /* binding */ decodeOwlA; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _bit_reader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bit-reader.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/bit-reader.js\");\n/* harmony import */ var _decode_owl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decode-owl.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/decode-owl.js\");\n\n\n\n/**\n *  @_ignore\n */ function decodeOwlA(data, accents) {\n    let words = (0,_decode_owl_js__WEBPACK_IMPORTED_MODULE_0__.decodeOwl)(data).join(\",\");\n    // Inject the accents\n    accents.split(/,/g).forEach((accent)=>{\n        const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(match !== null, \"internal error parsing accents\", \"accents\", accents);\n        let posOffset = 0;\n        const positions = (0,_bit_reader_js__WEBPACK_IMPORTED_MODULE_2__.decodeBits)(parseInt(match[3]), match[4]);\n        const charCode = parseInt(match[2]);\n        const regex = new RegExp(\"([\".concat(match[1], \"])\"), \"g\");\n        words = words.replace(regex, (all, letter)=>{\n            const rem = --positions[posOffset];\n            if (rem === 0) {\n                letter = String.fromCharCode(letter.charCodeAt(0), charCode);\n                posOffset++;\n            }\n            return letter;\n        });\n    });\n    return words.split(\",\");\n} //# sourceMappingURL=decode-owla.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vd29yZGxpc3RzL2RlY29kZS1vd2xhLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUQ7QUFDTjtBQUNEO0FBQzVDOztDQUVDLEdBQ00sU0FBU0csV0FBV0MsSUFBSSxFQUFFQyxPQUFPO0lBQ3BDLElBQUlDLFFBQVFKLHlEQUFTQSxDQUFDRSxNQUFNRyxJQUFJLENBQUM7SUFDakMscUJBQXFCO0lBQ3JCRixRQUFRRyxLQUFLLENBQUMsTUFBTUMsT0FBTyxDQUFDLENBQUNDO1FBQ3pCLE1BQU1DLFFBQVFELE9BQU9DLEtBQUssQ0FBQztRQUMzQlgsK0RBQWNBLENBQUNXLFVBQVUsTUFBTSxrQ0FBa0MsV0FBV047UUFDNUUsSUFBSU8sWUFBWTtRQUNoQixNQUFNQyxZQUFZWiwwREFBVUEsQ0FBQ2EsU0FBU0gsS0FBSyxDQUFDLEVBQUUsR0FBR0EsS0FBSyxDQUFDLEVBQUU7UUFDekQsTUFBTUksV0FBV0QsU0FBU0gsS0FBSyxDQUFDLEVBQUU7UUFDbEMsTUFBTUssUUFBUSxJQUFJQyxPQUFPLEtBQWMsT0FBVE4sS0FBSyxDQUFDLEVBQUUsRUFBQyxPQUFLO1FBQzVDTCxRQUFRQSxNQUFNWSxPQUFPLENBQUNGLE9BQU8sQ0FBQ0csS0FBS0M7WUFDL0IsTUFBTUMsTUFBTSxFQUFFUixTQUFTLENBQUNELFVBQVU7WUFDbEMsSUFBSVMsUUFBUSxHQUFHO2dCQUNYRCxTQUFTRSxPQUFPQyxZQUFZLENBQUNILE9BQU9JLFVBQVUsQ0FBQyxJQUFJVDtnQkFDbkRIO1lBQ0o7WUFDQSxPQUFPUTtRQUNYO0lBQ0o7SUFDQSxPQUFPZCxNQUFNRSxLQUFLLENBQUM7QUFDdkIsRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93b3JkbGlzdHMvZGVjb2RlLW93bGEuanM/ZTQwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZGVjb2RlQml0cyB9IGZyb20gXCIuL2JpdC1yZWFkZXIuanNcIjtcbmltcG9ydCB7IGRlY29kZU93bCB9IGZyb20gXCIuL2RlY29kZS1vd2wuanNcIjtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVPd2xBKGRhdGEsIGFjY2VudHMpIHtcbiAgICBsZXQgd29yZHMgPSBkZWNvZGVPd2woZGF0YSkuam9pbihcIixcIik7XG4gICAgLy8gSW5qZWN0IHRoZSBhY2NlbnRzXG4gICAgYWNjZW50cy5zcGxpdCgvLC9nKS5mb3JFYWNoKChhY2NlbnQpID0+IHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBhY2NlbnQubWF0Y2goL14oW2Etel0qKShbMC05XSspKFswLTldKSguKikkLyk7XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KG1hdGNoICE9PSBudWxsLCBcImludGVybmFsIGVycm9yIHBhcnNpbmcgYWNjZW50c1wiLCBcImFjY2VudHNcIiwgYWNjZW50cyk7XG4gICAgICAgIGxldCBwb3NPZmZzZXQgPSAwO1xuICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBkZWNvZGVCaXRzKHBhcnNlSW50KG1hdGNoWzNdKSwgbWF0Y2hbNF0pO1xuICAgICAgICBjb25zdCBjaGFyQ29kZSA9IHBhcnNlSW50KG1hdGNoWzJdKTtcbiAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGAoWyR7bWF0Y2hbMV19XSlgLCBcImdcIik7XG4gICAgICAgIHdvcmRzID0gd29yZHMucmVwbGFjZShyZWdleCwgKGFsbCwgbGV0dGVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZW0gPSAtLXBvc2l0aW9uc1twb3NPZmZzZXRdO1xuICAgICAgICAgICAgaWYgKHJlbSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxldHRlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUobGV0dGVyLmNoYXJDb2RlQXQoMCksIGNoYXJDb2RlKTtcbiAgICAgICAgICAgICAgICBwb3NPZmZzZXQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsZXR0ZXI7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB3b3Jkcy5zcGxpdChcIixcIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGUtb3dsYS5qcy5tYXAiXSwibmFtZXMiOlsiYXNzZXJ0QXJndW1lbnQiLCJkZWNvZGVCaXRzIiwiZGVjb2RlT3dsIiwiZGVjb2RlT3dsQSIsImRhdGEiLCJhY2NlbnRzIiwid29yZHMiLCJqb2luIiwic3BsaXQiLCJmb3JFYWNoIiwiYWNjZW50IiwibWF0Y2giLCJwb3NPZmZzZXQiLCJwb3NpdGlvbnMiLCJwYXJzZUludCIsImNoYXJDb2RlIiwicmVnZXgiLCJSZWdFeHAiLCJyZXBsYWNlIiwiYWxsIiwibGV0dGVyIiwicmVtIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2hhckNvZGVBdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/decode-owla.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/lang-en.js":
/*!***********************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wordlists/lang-en.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangEn: function() { return /* binding */ LangEn; }\n/* harmony export */ });\n/* harmony import */ var _wordlist_owl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wordlist-owl.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlist-owl.js\");\n\nconst words = \"0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO\";\nconst checksum = \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\";\nlet wordlist = null;\n/**\n *  The [[link-bip39-en]] for [mnemonic phrases](link-bip-39).\n *\n *  @_docloc: api/wordlists\n */ class LangEn extends _wordlist_owl_js__WEBPACK_IMPORTED_MODULE_0__.WordlistOwl {\n    /**\n     *  Returns a singleton instance of a ``LangEn``, creating it\n     *  if this is the first time being called.\n     */ static wordlist() {\n        if (wordlist == null) {\n            wordlist = new LangEn();\n        }\n        return wordlist;\n    }\n    /**\n     *  Creates a new instance of the English language Wordlist.\n     *\n     *  This should be unnecessary most of the time as the exported\n     *  [[langEn]] should suffice.\n     *\n     *  @_ignore:\n     */ constructor(){\n        super(\"en\", words, checksum);\n    }\n} //# sourceMappingURL=lang-en.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/lang-en.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlist-owl.js":
/*!****************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wordlists/wordlist-owl.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WordlistOwl: function() { return /* binding */ WordlistOwl; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_get.js\");\n/* harmony import */ var _swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @swc/helpers/_/_class_private_method_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_method_init.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../hash/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/hash/id.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _decode_owl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./decode-owl.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/decode-owl.js\");\n/* harmony import */ var _wordlist_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wordlist.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlist.js\");\n// Use the encode-latin.js script to create the necessary\n// data files to be consumed by this class\n\n\n\n\n\n\n\n\n\nvar _data = /*#__PURE__*/ new WeakMap(), _checksum = /*#__PURE__*/ new WeakMap(), _words = /*#__PURE__*/ new WeakMap(), _loadWords = /*#__PURE__*/ new WeakSet();\n/**\n *  An OWL format Wordlist is an encoding method that exploits\n *  the general locality of alphabetically sorted words to\n *  achieve a simple but effective means of compression.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on ASCII-7 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create the necessary data.\n */ class WordlistOwl extends _wordlist_js__WEBPACK_IMPORTED_MODULE_0__.Wordlist {\n    /**\n     *  The OWL-encoded data.\n     */ get _data() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _data);\n    }\n    /**\n     *  Decode all the words for the wordlist.\n     */ _decodeWords() {\n        return (0,_decode_owl_js__WEBPACK_IMPORTED_MODULE_2__.decodeOwl)((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _data));\n    }\n    getWord(index) {\n        const words = (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _loadWords, loadWords).call(this);\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.assertArgument)(index >= 0 && index < words.length, \"invalid word index: \".concat(index), \"index\", index);\n        return words[index];\n    }\n    getWordIndex(word) {\n        return (0,_swc_helpers_class_private_method_get__WEBPACK_IMPORTED_MODULE_3__._)(this, _loadWords, loadWords).call(this).indexOf(word);\n    }\n    /**\n     *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\n     *  and validated against the %%checksum%%.\n     */ constructor(locale, data, checksum){\n        super(locale);\n        (0,_swc_helpers_class_private_method_init__WEBPACK_IMPORTED_MODULE_5__._)(this, _loadWords);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _data, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _checksum, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_6__._)(this, _words, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__._)(this, _data, data);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__._)(this, _checksum, checksum);\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__._)(this, _words, null);\n    }\n} //# sourceMappingURL=wordlist-owl.js.map\nfunction loadWords() {\n    if ((0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _words) == null) {\n        const words = this._decodeWords();\n        // Verify the computed list matches the official list\n        const checksum = (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_8__.id)(words.join(\"\\n\") + \"\\n\");\n        /* c8 ignore start */ if (checksum !== (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _checksum)) {\n            throw new Error(\"BIP39 Wordlist for \".concat(this.locale, \" FAILED\"));\n        }\n        /* c8 ignore stop */ (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_7__._)(this, _words, words);\n    }\n    return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _words);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vd29yZGxpc3RzL3dvcmRsaXN0LW93bC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEseURBQXlEO0FBQ3pELDBDQUEwQzs7Ozs7O0FBQ0o7QUFDYTtBQUNQO0FBQ0g7SUFjckMscUNBQ0EseUNBcUJBLHNDQUNBO0FBcENKOzs7Ozs7Ozs7OztDQVdDLEdBQ00sTUFBTUksb0JBQW9CRCxrREFBUUE7SUFhckM7O0tBRUMsR0FDRCxJQUFJRSxRQUFRO1FBQUUsT0FBTyw0RUFBSSxFQUFFQztJQUFNO0lBQ2pDOztLQUVDLEdBQ0RDLGVBQWU7UUFDWCxPQUFPTCx5REFBU0EsQ0FBQ0EsdUVBQUFBLENBQUEsSUFBSSxFQUFFSTtJQUMzQjtJQWdCQUUsUUFBUUMsS0FBSyxFQUFFO1FBQ1gsTUFBTUMsUUFBUSw2RUFBSSxFQUFFQyxZQUFBQSxnQkFBTixJQUFJO1FBQ2xCViwrREFBY0EsQ0FBQ1EsU0FBUyxLQUFLQSxRQUFRQyxNQUFNRSxNQUFNLEVBQUUsdUJBQTZCLE9BQU5ILFFBQVMsU0FBU0E7UUFDNUYsT0FBT0MsS0FBSyxDQUFDRCxNQUFNO0lBQ3ZCO0lBQ0FJLGFBQWFDLElBQUksRUFBRTtRQUNmLE9BQU8sNkVBQUksRUFBRUgsWUFBQUEsZ0JBQU4sSUFBSSxFQUFjSSxPQUFPLENBQUNEO0lBQ3JDO0lBMUNBOzs7S0FHQyxHQUNERSxZQUFZQyxNQUFNLEVBQUVYLElBQUksRUFBRVksUUFBUSxDQUFFO1FBQ2hDLEtBQUssQ0FBQ0Q7UUFnQlY7UUF2QkE7O21CQUFBOztRQUNBOzttQkFBQTs7UUFxQkE7O21CQUFBOztzRkFkVVgsT0FBT0E7c0ZBQ1BZLFdBQVdBO3NGQUNYUixRQUFRO0lBQ2xCO0FBa0NKLEVBQ0Esd0NBQXdDO0FBdkJwQztJQUNJLElBQUksNEVBQUksRUFBRUEsV0FBUyxNQUFNO1FBQ3JCLE1BQU1BLFFBQVEsSUFBSSxDQUFDSCxZQUFZO1FBQy9CLHFEQUFxRDtRQUNyRCxNQUFNVyxXQUFXbEIsa0RBQUVBLENBQUNVLE1BQU1TLElBQUksQ0FBQyxRQUFRO1FBQ3ZDLG1CQUFtQixHQUNuQixJQUFJRCxhQUFhQSx1RUFBQUEsQ0FBQSxJQUFJLEVBQUVBLFlBQVU7WUFDN0IsTUFBTSxJQUFJRSxNQUFNLHNCQUFrQyxPQUFaLElBQUksQ0FBQ0gsTUFBTSxFQUFDO1FBQ3REO1FBQ0Esa0JBQWtCLGlGQUNaUCxRQUFRQTtJQUNsQjtJQUNBLE9BQU8sNEVBQUksRUFBRUE7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93b3JkbGlzdHMvd29yZGxpc3Qtb3dsLmpzP2FkNzUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVXNlIHRoZSBlbmNvZGUtbGF0aW4uanMgc2NyaXB0IHRvIGNyZWF0ZSB0aGUgbmVjZXNzYXJ5XG4vLyBkYXRhIGZpbGVzIHRvIGJlIGNvbnN1bWVkIGJ5IHRoaXMgY2xhc3NcbmltcG9ydCB7IGlkIH0gZnJvbSBcIi4uL2hhc2gvaW5kZXguanNcIjtcbmltcG9ydCB7IGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBkZWNvZGVPd2wgfSBmcm9tIFwiLi9kZWNvZGUtb3dsLmpzXCI7XG5pbXBvcnQgeyBXb3JkbGlzdCB9IGZyb20gXCIuL3dvcmRsaXN0LmpzXCI7XG4vKipcbiAqICBBbiBPV0wgZm9ybWF0IFdvcmRsaXN0IGlzIGFuIGVuY29kaW5nIG1ldGhvZCB0aGF0IGV4cGxvaXRzXG4gKiAgdGhlIGdlbmVyYWwgbG9jYWxpdHkgb2YgYWxwaGFiZXRpY2FsbHkgc29ydGVkIHdvcmRzIHRvXG4gKiAgYWNoaWV2ZSBhIHNpbXBsZSBidXQgZWZmZWN0aXZlIG1lYW5zIG9mIGNvbXByZXNzaW9uLlxuICpcbiAqICBUaGlzIGNsYXNzIGlzIGdlbmVyYWxseSBub3QgdXNlZnVsIHRvIG1vc3QgZGV2ZWxvcGVycyBhc1xuICogIGl0IGlzIHVzZWQgbWFpbmx5IGludGVybmFsbHkgdG8ga2VlcCBXb3JkbGlzdHMgZm9yIGxhbmd1YWdlc1xuICogIGJhc2VkIG9uIEFTQ0lJLTcgc21hbGwuXG4gKlxuICogIElmIG5lY2Vzc2FyeSwgdGhlcmUgYXJlIHRvb2xzIHdpdGhpbiB0aGUgYGBnZW5lcmF0aW9uL2BgIGZvbGRlclxuICogIHRvIGNyZWF0ZSB0aGUgbmVjZXNzYXJ5IGRhdGEuXG4gKi9cbmV4cG9ydCBjbGFzcyBXb3JkbGlzdE93bCBleHRlbmRzIFdvcmRsaXN0IHtcbiAgICAjZGF0YTtcbiAgICAjY2hlY2tzdW07XG4gICAgLyoqXG4gICAgICogIENyZWF0ZXMgYSBuZXcgV29yZGxpc3QgZm9yICUlbG9jYWxlJSUgdXNpbmcgdGhlIE9XTCAlJWRhdGElJVxuICAgICAqICBhbmQgdmFsaWRhdGVkIGFnYWluc3QgdGhlICUlY2hlY2tzdW0lJS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihsb2NhbGUsIGRhdGEsIGNoZWNrc3VtKSB7XG4gICAgICAgIHN1cGVyKGxvY2FsZSk7XG4gICAgICAgIHRoaXMuI2RhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLiNjaGVja3N1bSA9IGNoZWNrc3VtO1xuICAgICAgICB0aGlzLiN3b3JkcyA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgT1dMLWVuY29kZWQgZGF0YS5cbiAgICAgKi9cbiAgICBnZXQgX2RhdGEoKSB7IHJldHVybiB0aGlzLiNkYXRhOyB9XG4gICAgLyoqXG4gICAgICogIERlY29kZSBhbGwgdGhlIHdvcmRzIGZvciB0aGUgd29yZGxpc3QuXG4gICAgICovXG4gICAgX2RlY29kZVdvcmRzKCkge1xuICAgICAgICByZXR1cm4gZGVjb2RlT3dsKHRoaXMuI2RhdGEpO1xuICAgIH1cbiAgICAjd29yZHM7XG4gICAgI2xvYWRXb3JkcygpIHtcbiAgICAgICAgaWYgKHRoaXMuI3dvcmRzID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gdGhpcy5fZGVjb2RlV29yZHMoKTtcbiAgICAgICAgICAgIC8vIFZlcmlmeSB0aGUgY29tcHV0ZWQgbGlzdCBtYXRjaGVzIHRoZSBvZmZpY2lhbCBsaXN0XG4gICAgICAgICAgICBjb25zdCBjaGVja3N1bSA9IGlkKHdvcmRzLmpvaW4oXCJcXG5cIikgKyBcIlxcblwiKTtcbiAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAgICAgICAgICAgaWYgKGNoZWNrc3VtICE9PSB0aGlzLiNjaGVja3N1bSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQklQMzkgV29yZGxpc3QgZm9yICR7dGhpcy5sb2NhbGV9IEZBSUxFRGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgICAgICAgICAgIHRoaXMuI3dvcmRzID0gd29yZHM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuI3dvcmRzO1xuICAgIH1cbiAgICBnZXRXb3JkKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHdvcmRzID0gdGhpcy4jbG9hZFdvcmRzKCk7XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGluZGV4ID49IDAgJiYgaW5kZXggPCB3b3Jkcy5sZW5ndGgsIGBpbnZhbGlkIHdvcmQgaW5kZXg6ICR7aW5kZXh9YCwgXCJpbmRleFwiLCBpbmRleCk7XG4gICAgICAgIHJldHVybiB3b3Jkc1tpbmRleF07XG4gICAgfVxuICAgIGdldFdvcmRJbmRleCh3b3JkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNsb2FkV29yZHMoKS5pbmRleE9mKHdvcmQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdvcmRsaXN0LW93bC5qcy5tYXAiXSwibmFtZXMiOlsiaWQiLCJhc3NlcnRBcmd1bWVudCIsImRlY29kZU93bCIsIldvcmRsaXN0IiwiV29yZGxpc3RPd2wiLCJfZGF0YSIsImRhdGEiLCJfZGVjb2RlV29yZHMiLCJnZXRXb3JkIiwiaW5kZXgiLCJ3b3JkcyIsImxvYWRXb3JkcyIsImxlbmd0aCIsImdldFdvcmRJbmRleCIsIndvcmQiLCJpbmRleE9mIiwiY29uc3RydWN0b3IiLCJsb2NhbGUiLCJjaGVja3N1bSIsImpvaW4iLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlist-owl.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlist-owla.js":
/*!*****************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wordlists/wordlist-owla.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WordlistOwlA: function() { return /* binding */ WordlistOwlA; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_get */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_get.js\");\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n/* harmony import */ var _swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_set */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_class_private_field_set.js\");\n/* harmony import */ var _wordlist_owl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wordlist-owl.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlist-owl.js\");\n/* harmony import */ var _decode_owla_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./decode-owla.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/decode-owla.js\");\n\n\n\n\n\nvar _accent = /*#__PURE__*/ new WeakMap();\n/**\n *  An OWL-A format Wordlist extends the OWL format to add an\n *  overlay onto an OWL format Wordlist to support diacritic\n *  marks.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on latin-1 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create the necessary data.\n */ class WordlistOwlA extends _wordlist_owl_js__WEBPACK_IMPORTED_MODULE_0__.WordlistOwl {\n    /**\n     *  The OWLA-encoded accent data.\n     */ get _accent() {\n        return (0,_swc_helpers_class_private_field_get__WEBPACK_IMPORTED_MODULE_1__._)(this, _accent);\n    }\n    /**\n     *  Decode all the words for the wordlist.\n     */ _decodeWords() {\n        return (0,_decode_owla_js__WEBPACK_IMPORTED_MODULE_2__.decodeOwlA)(this._data, this._accent);\n    }\n    /**\n     *  Creates a new Wordlist for %%locale%% using the OWLA %%data%%\n     *  and %%accent%% data and validated against the %%checksum%%.\n     */ constructor(locale, data, accent, checksum){\n        super(locale, data, checksum);\n        (0,_swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_3__._)(this, _accent, {\n            writable: true,\n            value: void 0\n        });\n        (0,_swc_helpers_class_private_field_set__WEBPACK_IMPORTED_MODULE_4__._)(this, _accent, accent);\n    }\n} //# sourceMappingURL=wordlist-owla.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vd29yZGxpc3RzL3dvcmRsaXN0LW93bGEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQWdEO0FBQ0Y7SUFjMUM7QUFiSjs7Ozs7Ozs7Ozs7Q0FXQyxHQUNNLE1BQU1FLHFCQUFxQkYseURBQVdBO0lBVXpDOztLQUVDLEdBQ0QsSUFBSUcsVUFBVTtRQUFFLE9BQU8sNEVBQUksRUFBRUM7SUFBUTtJQUNyQzs7S0FFQyxHQUNEQyxlQUFlO1FBQ1gsT0FBT0osMkRBQVVBLENBQUMsSUFBSSxDQUFDSyxLQUFLLEVBQUUsSUFBSSxDQUFDSCxPQUFPO0lBQzlDO0lBakJBOzs7S0FHQyxHQUNESSxZQUFZQyxNQUFNLEVBQUVDLElBQUksRUFBRUwsTUFBTSxFQUFFTSxRQUFRLENBQUU7UUFDeEMsS0FBSyxDQUFDRixRQUFRQyxNQUFNQztRQU54Qjs7bUJBQUE7O3NGQU9VTixTQUFTQTtJQUNuQjtBQVdKLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vd29yZGxpc3RzL3dvcmRsaXN0LW93bGEuanM/MTI2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXb3JkbGlzdE93bCB9IGZyb20gXCIuL3dvcmRsaXN0LW93bC5qc1wiO1xuaW1wb3J0IHsgZGVjb2RlT3dsQSB9IGZyb20gXCIuL2RlY29kZS1vd2xhLmpzXCI7XG4vKipcbiAqICBBbiBPV0wtQSBmb3JtYXQgV29yZGxpc3QgZXh0ZW5kcyB0aGUgT1dMIGZvcm1hdCB0byBhZGQgYW5cbiAqICBvdmVybGF5IG9udG8gYW4gT1dMIGZvcm1hdCBXb3JkbGlzdCB0byBzdXBwb3J0IGRpYWNyaXRpY1xuICogIG1hcmtzLlxuICpcbiAqICBUaGlzIGNsYXNzIGlzIGdlbmVyYWxseSBub3QgdXNlZnVsIHRvIG1vc3QgZGV2ZWxvcGVycyBhc1xuICogIGl0IGlzIHVzZWQgbWFpbmx5IGludGVybmFsbHkgdG8ga2VlcCBXb3JkbGlzdHMgZm9yIGxhbmd1YWdlc1xuICogIGJhc2VkIG9uIGxhdGluLTEgc21hbGwuXG4gKlxuICogIElmIG5lY2Vzc2FyeSwgdGhlcmUgYXJlIHRvb2xzIHdpdGhpbiB0aGUgYGBnZW5lcmF0aW9uL2BgIGZvbGRlclxuICogIHRvIGNyZWF0ZSB0aGUgbmVjZXNzYXJ5IGRhdGEuXG4gKi9cbmV4cG9ydCBjbGFzcyBXb3JkbGlzdE93bEEgZXh0ZW5kcyBXb3JkbGlzdE93bCB7XG4gICAgI2FjY2VudDtcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyBXb3JkbGlzdCBmb3IgJSVsb2NhbGUlJSB1c2luZyB0aGUgT1dMQSAlJWRhdGElJVxuICAgICAqICBhbmQgJSVhY2NlbnQlJSBkYXRhIGFuZCB2YWxpZGF0ZWQgYWdhaW5zdCB0aGUgJSVjaGVja3N1bSUlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsZSwgZGF0YSwgYWNjZW50LCBjaGVja3N1bSkge1xuICAgICAgICBzdXBlcihsb2NhbGUsIGRhdGEsIGNoZWNrc3VtKTtcbiAgICAgICAgdGhpcy4jYWNjZW50ID0gYWNjZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIE9XTEEtZW5jb2RlZCBhY2NlbnQgZGF0YS5cbiAgICAgKi9cbiAgICBnZXQgX2FjY2VudCgpIHsgcmV0dXJuIHRoaXMuI2FjY2VudDsgfVxuICAgIC8qKlxuICAgICAqICBEZWNvZGUgYWxsIHRoZSB3b3JkcyBmb3IgdGhlIHdvcmRsaXN0LlxuICAgICAqL1xuICAgIF9kZWNvZGVXb3JkcygpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZU93bEEodGhpcy5fZGF0YSwgdGhpcy5fYWNjZW50KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3JkbGlzdC1vd2xhLmpzLm1hcCJdLCJuYW1lcyI6WyJXb3JkbGlzdE93bCIsImRlY29kZU93bEEiLCJXb3JkbGlzdE93bEEiLCJfYWNjZW50IiwiYWNjZW50IiwiX2RlY29kZVdvcmRzIiwiX2RhdGEiLCJjb25zdHJ1Y3RvciIsImxvY2FsZSIsImRhdGEiLCJjaGVja3N1bSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlist-owla.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlist.js":
/*!************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wordlists/wordlist.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Wordlist: function() { return /* binding */ Wordlist; }\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/utils/properties.js\");\n\n/**\n *  A Wordlist represents a collection of language-specific\n *  words used to encode and devoce [[link-bip-39]] encoded data\n *  by mapping words to 11-bit values and vice versa.\n */ class Wordlist {\n    /**\n     *  Sub-classes may override this to provide a language-specific\n     *  method for spliting %%phrase%% into individual words.\n     *\n     *  By default, %%phrase%% is split using any sequences of\n     *  white-space as defined by regular expressions (i.e. ``/\\s+/``).\n     */ split(phrase) {\n        return phrase.toLowerCase().split(/\\s+/g);\n    }\n    /**\n     *  Sub-classes may override this to provider a language-specific\n     *  method for joining %%words%% into a phrase.\n     *\n     *  By default, %%words%% are joined by a single space.\n     */ join(words) {\n        return words.join(\" \");\n    }\n    /**\n     *  Creates a new Wordlist instance.\n     *\n     *  Sub-classes MUST call this if they provide their own constructor,\n     *  passing in the locale string of the language.\n     *\n     *  Generally there is no need to create instances of a Wordlist,\n     *  since each language-specific Wordlist creates an instance and\n     *  there is no state kept internally, so they are safe to share.\n     */ constructor(locale){\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\n            locale\n        });\n    }\n} //# sourceMappingURL=wordlist.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vd29yZGxpc3RzL3dvcmRsaXN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFEO0FBQ3JEOzs7O0NBSUMsR0FDTSxNQUFNQztJQWVUOzs7Ozs7S0FNQyxHQUNEQyxNQUFNQyxNQUFNLEVBQUU7UUFDVixPQUFPQSxPQUFPQyxXQUFXLEdBQUdGLEtBQUssQ0FBQztJQUN0QztJQUNBOzs7OztLQUtDLEdBQ0RHLEtBQUtDLEtBQUssRUFBRTtRQUNSLE9BQU9BLE1BQU1ELElBQUksQ0FBQztJQUN0QjtJQS9CQTs7Ozs7Ozs7O0tBU0MsR0FDREUsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCUixpRUFBZ0JBLENBQUMsSUFBSSxFQUFFO1lBQUVRO1FBQU87SUFDcEM7QUFvQkosRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93b3JkbGlzdHMvd29yZGxpc3QuanM/YzMwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVQcm9wZXJ0aWVzIH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG4vKipcbiAqICBBIFdvcmRsaXN0IHJlcHJlc2VudHMgYSBjb2xsZWN0aW9uIG9mIGxhbmd1YWdlLXNwZWNpZmljXG4gKiAgd29yZHMgdXNlZCB0byBlbmNvZGUgYW5kIGRldm9jZSBbW2xpbmstYmlwLTM5XV0gZW5jb2RlZCBkYXRhXG4gKiAgYnkgbWFwcGluZyB3b3JkcyB0byAxMS1iaXQgdmFsdWVzIGFuZCB2aWNlIHZlcnNhLlxuICovXG5leHBvcnQgY2xhc3MgV29yZGxpc3Qge1xuICAgIGxvY2FsZTtcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyBXb3JkbGlzdCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqICBTdWItY2xhc3NlcyBNVVNUIGNhbGwgdGhpcyBpZiB0aGV5IHByb3ZpZGUgdGhlaXIgb3duIGNvbnN0cnVjdG9yLFxuICAgICAqICBwYXNzaW5nIGluIHRoZSBsb2NhbGUgc3RyaW5nIG9mIHRoZSBsYW5ndWFnZS5cbiAgICAgKlxuICAgICAqICBHZW5lcmFsbHkgdGhlcmUgaXMgbm8gbmVlZCB0byBjcmVhdGUgaW5zdGFuY2VzIG9mIGEgV29yZGxpc3QsXG4gICAgICogIHNpbmNlIGVhY2ggbGFuZ3VhZ2Utc3BlY2lmaWMgV29yZGxpc3QgY3JlYXRlcyBhbiBpbnN0YW5jZSBhbmRcbiAgICAgKiAgdGhlcmUgaXMgbm8gc3RhdGUga2VwdCBpbnRlcm5hbGx5LCBzbyB0aGV5IGFyZSBzYWZlIHRvIHNoYXJlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsZSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgbG9jYWxlIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgU3ViLWNsYXNzZXMgbWF5IG92ZXJyaWRlIHRoaXMgdG8gcHJvdmlkZSBhIGxhbmd1YWdlLXNwZWNpZmljXG4gICAgICogIG1ldGhvZCBmb3Igc3BsaXRpbmcgJSVwaHJhc2UlJSBpbnRvIGluZGl2aWR1YWwgd29yZHMuXG4gICAgICpcbiAgICAgKiAgQnkgZGVmYXVsdCwgJSVwaHJhc2UlJSBpcyBzcGxpdCB1c2luZyBhbnkgc2VxdWVuY2VzIG9mXG4gICAgICogIHdoaXRlLXNwYWNlIGFzIGRlZmluZWQgYnkgcmVndWxhciBleHByZXNzaW9ucyAoaS5lLiBgYC9cXHMrL2BgKS5cbiAgICAgKi9cbiAgICBzcGxpdChwaHJhc2UpIHtcbiAgICAgICAgcmV0dXJuIHBocmFzZS50b0xvd2VyQ2FzZSgpLnNwbGl0KC9cXHMrL2cpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgU3ViLWNsYXNzZXMgbWF5IG92ZXJyaWRlIHRoaXMgdG8gcHJvdmlkZXIgYSBsYW5ndWFnZS1zcGVjaWZpY1xuICAgICAqICBtZXRob2QgZm9yIGpvaW5pbmcgJSV3b3JkcyUlIGludG8gYSBwaHJhc2UuXG4gICAgICpcbiAgICAgKiAgQnkgZGVmYXVsdCwgJSV3b3JkcyUlIGFyZSBqb2luZWQgYnkgYSBzaW5nbGUgc3BhY2UuXG4gICAgICovXG4gICAgam9pbih3b3Jkcykge1xuICAgICAgICByZXR1cm4gd29yZHMuam9pbihcIiBcIik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29yZGxpc3QuanMubWFwIl0sIm5hbWVzIjpbImRlZmluZVByb3BlcnRpZXMiLCJXb3JkbGlzdCIsInNwbGl0IiwicGhyYXNlIiwidG9Mb3dlckNhc2UiLCJqb2luIiwid29yZHMiLCJjb25zdHJ1Y3RvciIsImxvY2FsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlist.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlists-browser.js":
/*!*********************************************************************!*\
  !*** ../node_modules/ethers/lib.esm/wordlists/wordlists-browser.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wordlists: function() { return /* binding */ wordlists; }\n/* harmony export */ });\n/* harmony import */ var _lang_en_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lang-en.js */ \"(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/lang-en.js\");\n\nconst wordlists = {\n    en: _lang_en_js__WEBPACK_IMPORTED_MODULE_0__.LangEn.wordlist()\n}; //# sourceMappingURL=wordlists-browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vd29yZGxpc3RzL3dvcmRsaXN0cy1icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNDO0FBQy9CLE1BQU1DLFlBQVk7SUFDckJDLElBQUlGLCtDQUFNQSxDQUFDRyxRQUFRO0FBQ3ZCLEVBQUUsQ0FDRiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93b3JkbGlzdHMvd29yZGxpc3RzLWJyb3dzZXIuanM/NWY1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMYW5nRW4gfSBmcm9tIFwiLi9sYW5nLWVuLmpzXCI7XG5leHBvcnQgY29uc3Qgd29yZGxpc3RzID0ge1xuICAgIGVuOiBMYW5nRW4ud29yZGxpc3QoKSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3JkbGlzdHMtYnJvd3Nlci5qcy5tYXAiXSwibmFtZXMiOlsiTGFuZ0VuIiwid29yZGxpc3RzIiwiZW4iLCJ3b3JkbGlzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/ethers/lib.esm/wordlists/wordlists-browser.js\n"));

/***/ })

});